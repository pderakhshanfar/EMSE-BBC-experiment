/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 07:11:37 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import java.io.CharArrayWriter;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      Class<Long> class1 = Long.class;
      TypeToken<Long> typeToken0 = TypeToken.get(class1);
      TypeAdapter<Long> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Long>) class1, (TypeAdapter<? super Long>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
//      try { 
        gson0.fromJson("$0A,Z?8$YJ{", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 5 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson("[-322]", class0);
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
//      try { 
        gson0.fromJson("NPpwT1)R,xE@nVc", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"NPpwT1)R\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
//      try { 
        gson0.fromJson("com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      Gson gson0 = new Gson();
//      try { 
        gson0.fromJson("f3`X-WOvs", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"f3`X-WOvs\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      Gson gson0 = new Gson();
      TypeToken<InetAddress> typeToken0 = TypeToken.get(class0);
      TypeAdapter<InetAddress> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super InetAddress>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Short> class0 = Short.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, (TypeAdapter<Short>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
//      try { 
        jsonArray0.getAsJsonObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Not a JSON Object: []
//         //
//         verifyException("com.google.gson.JsonElement", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonObject> class0 = JsonObject.class;
//      try { 
        gson0.fromJson("[v", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.EOFException: End of input at line 1 column 3 path $[1]
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonObject> class0 = JsonObject.class;
//      try { 
        gson0.fromJson("bhffq/WG5kbyAYh7e", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonObject> class0 = JsonObject.class;
//      try { 
        gson0.fromJson("null", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonNull
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonObject> class0 = JsonObject.class;
//      try { 
        gson0.fromJson("false", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeAdapter<GregorianCalendar> typeAdapter0 = gson0.getAdapter(class0);
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson0);
      String string0 = gson0.toJson((Object) jsonElement0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<JsonNull> class0 = JsonNull.class;
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(12);
      gson0.toJson((Object) null, (Type) class0, (Appendable) charArrayWriter0);
      assertEquals(4, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) gson0);
      Class<JsonObject> class0 = JsonObject.class;
      JsonObject jsonObject0 = gson0.fromJson(string0, class0);
      assertTrue(jsonObject0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonObject> class0 = JsonObject.class;
//      try { 
        gson0.fromJson("0,", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = gson0.toJson((Object) locale0);
      assertEquals("\"zh_CN\"", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("_");
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
//      try { 
        gson0.fromJson((Reader) stringReader0, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Locale", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      StringReader stringReader0 = new StringReader("null");
      Locale locale0 = gson0.fromJson((Reader) stringReader0, class0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("a_HF]; 26g;-CRuB#*.");
      Class<Locale> class0 = Locale.class;
//      try { 
        gson0.fromJson((Reader) stringReader0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      Long long0 = gson0.fromJson("null", (Type) class0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      Gson gson0 = new Gson();
//      try { 
        gson0.fromJson("java.util.Calendar", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      UUID uUID0 = MockUUID.randomUUID();
      String string0 = gson0.toJson((Object) uUID0);
      assertEquals("\"00000000-0100-4000-8200-000003000000\"", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson(jsonElement0, class0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = new Boolean(true);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<UUID> class0 = UUID.class;
//      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BOOLEAN at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      String string0 = gson0.toJson((Object) inetAddress0);
      assertEquals("\"192.168.1.42\"", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<InetAddress> class0 = InetAddress.class;
      InetAddress inetAddress0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<InetAddress> class0 = InetAddress.class;
//      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson gson0 = new Gson();
      URI uRI0 = MockURI.URI((String) null, "ExpecXing \"haracter, got: ", "", (String) null, "");
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) uRI0);
      assertTrue(jsonPrimitive0.isString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<URI> class0 = URI.class;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      AtomicInteger atomicInteger0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(atomicInteger0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("f`F|6<Ns%#CZ");
      Class<URI> class0 = URI.class;
//      try { 
        gson0.fromJson((Reader) stringReader0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.net.URISyntaxException: Illegal character in path at index 1: f`F|6<Ns%
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      URL uRL0 = MockURL.getHttpExample();
      String string0 = gson0.toJson((Object) uRL0);
      assertEquals("\"http://www.someFakeButWellFormedURL.org/fooExample\"", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
//      try { 
        gson0.fromJson("$,=MQMvQh", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.net.MalformedURLException: no protocol: $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer("T-U%2?4y");
      JsonElement jsonElement0 = gson0.toJsonTree((Object) stringBuffer0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<StringBuffer> class0 = StringBuffer.class;
      StringBuffer stringBuffer0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicBoolean0);
      Class<StringBuffer> class0 = StringBuffer.class;
//      try { 
        gson0.fromJson(jsonElement0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BOOLEAN at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = gson0.toJson((Object) stringBuilder0);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson("com.google.gson.JsonPrimitive", class0);
      assertEquals("com.google.gson.JsonPrimitive", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("com.google.gson.LongSerializationPolicy", class0);
      assertEquals("com.google.gson.LongSerializationPolicy", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("false", (Type) class0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('5');
      String string0 = gson0.toJson((Object) character0);
      assertEquals("\"5\"", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.class;
//      try { 
        gson0.fromJson("i{V[c_7", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.class;
      Character character0 = gson0.fromJson("null", class0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.class;
//      try { 
        gson0.fromJson("com.google.gson.Gson$FutureTypeAdapter", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expecting character, got: com.google.gson.Gson$FutureTypeAdapter
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      String string0 = gson0.fromJson("null", (Type) class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
//      try { 
        gson0.fromJson("$0A,Z?8$YJ{", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"$0A\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      int[] intArray0 = new int[3];
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      String string0 = gson0.toJson((Object) atomicIntegerArray0);
      assertEquals("[0,0,0]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      String string0 = gson0.fromJson("null", (Type) class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
//      try { 
        gson0.fromJson("com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      String string0 = gson0.fromJson("null", (Type) class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
//      try { 
        gson0.fromJson("com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      String string0 = gson0.fromJson("null", (Type) class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Gson gson0 = new Gson();
//      try { 
        gson0.fromJson("6{c-}", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<Boolean> typeAdapter0 = TypeAdapters.BOOLEAN_AS_STRING;
      Class<Float> class0 = Float.TYPE;
      TypeAdapterRuntimeTypeWrapper<Boolean> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Boolean>(gson0, typeAdapter0, class0);
      Boolean boolean0 = typeAdapterRuntimeTypeWrapper0.fromJson("null");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      TypeAdapter<Boolean> typeAdapter0 = TypeAdapters.BOOLEAN;
      TypeAdapterRuntimeTypeWrapper<Boolean> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Boolean>(gson0, typeAdapter0, class0);
      Boolean boolean0 = typeAdapterRuntimeTypeWrapper0.fromJson("\"5\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      String string0 = gson0.fromJson("null", (Type) class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      TypeAdapter<Boolean> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterRuntimeTypeWrapper<Boolean> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Boolean>(gson0, typeAdapter0, class0);
      // Undeclared exception!
//      try { 
        typeAdapterRuntimeTypeWrapper0.fromJson("[]");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Expected a boolean but was BEGIN_ARRAY at line 1 column 2 path $
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      String string0 = gson0.toJson((Object) bitSet0);
      assertEquals("[1,0,0,1,0,0,1,1]", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson("[0,0,0,0,0,0,0,7,0,0,0,0]", class0);
      assertEquals("{7}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson("null", class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Gson gson0 = new Gson();
      // Undeclared exception!
//      try { 
        gson0.toJsonTree((Object) class0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Attempted to serialize java.lang.Class: java.lang.Double. Forgot to register a type adapter?
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Currency> class0 = Currency.class;
//      try { 
        gson0.fromJson("{", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a string but was BEGIN_OBJECT at line 1 column 2 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.UK;
      Currency currency0 = Currency.getInstance(locale0);
      String string0 = gson0.toJson((Object) currency0);
      assertEquals("\"GBP\"", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicInteger atomicInteger0 = new AtomicInteger((-1667));
      String string0 = gson0.toJson((Object) atomicInteger0);
      assertEquals("-1667", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      Gson gson0 = new Gson();
      Float float0 = new Float(0.0);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
//      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BOOLEAN but was NUMBER at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      Byte byte0 = new Byte((byte)46);
      String string0 = gson0.toJson((Object) byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) "vvZ$.u");
      assertEquals("\"vvZ$.u\"", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) gson0);
      Class<Boolean> class0 = Boolean.TYPE;
      TypeAdapter<Boolean> typeAdapter0 = TypeAdapters.BOOLEAN_AS_STRING;
      TypeAdapterRuntimeTypeWrapper<Boolean> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Boolean>(gson0, typeAdapter0, class0);
      // Undeclared exception!
//      try { 
        typeAdapterRuntimeTypeWrapper0.fromJson(string0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Expected a string but was BEGIN_OBJECT at line 1 column 2 path $
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)1001);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) short0);
      String string0 = gson0.toJson((Object) jsonElement0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<Integer>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<String>) null);
      Class<MockCalendar> class1 = MockCalendar.class;
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>(jsonSerializer0, jsonDeserializer0, (Gson) null, (TypeToken<Object>) null, typeAdapterFactory0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends MockCalendar>) class1, (TypeAdapter<? super MockCalendar>) treeTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) gson0);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long(1286L);
      String string0 = gson0.toJson((Object) long0);
      assertNotNull(string0);
  }
}
