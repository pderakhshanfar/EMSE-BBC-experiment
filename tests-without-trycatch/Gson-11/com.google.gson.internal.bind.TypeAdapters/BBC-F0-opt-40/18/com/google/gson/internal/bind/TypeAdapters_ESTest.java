/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 01:49:22 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import java.io.BufferedOutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<Short> class1 = Short.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends Short>) class0, (TypeAdapter<? super Short>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<URL>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      Object object0 = gson0.fromJson("-5", (Type) class0);
      assertEquals((byte) (-5), object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      Gson gson0 = new Gson();
      Character character0 = new Character('Y');
      jsonArray0.add(character0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
//      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"Y\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      StringBuffer stringBuffer0 = new StringBuffer("STRING");
      JsonElement jsonElement0 = gson0.toJsonTree((Object) stringBuffer0);
//      try { 
        gson0.fromJson(jsonElement0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"STRING\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Double> class0 = Double.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super Double>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      TypeToken<Locale> typeToken0 = TypeToken.get(class0);
      JsonSerializer<Locale> jsonSerializer0 = (JsonSerializer<Locale>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Locale> jsonDeserializer0 = (JsonDeserializer<Locale>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<URL> class1 = URL.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends URL>) class1, (TypeAdapter<? super URL>) null);
      TreeTypeAdapter<Locale> treeTypeAdapter0 = new TreeTypeAdapter<Locale>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class0, (TypeAdapter<Locale>) treeTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf('N');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<JsonArray> class0 = JsonArray.class;
//      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonPrimitive
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);
      TypeAdapter<GregorianCalendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) gson0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      Character character0 = Character.valueOf('j');
      jsonArray0.add(character0);
      // Undeclared exception!
//      try { 
        jsonArray0.getAsJsonObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Not a JSON Object: [\"j\"]
//         //
//         verifyException("com.google.gson.JsonElement", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Boolean boolean0 = new Boolean("theUnsafe");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      // Undeclared exception!
//      try { 
        jsonPrimitive0.getAsJsonObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Not a JSON Object: false
//         //
//         verifyException("com.google.gson.JsonElement", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("1}v4fIEuU0r");
      JsonPrimitive jsonPrimitive1 = (JsonPrimitive)gson0.toJsonTree((Object) jsonPrimitive0);
      assertTrue(jsonPrimitive1.isString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Double double0 = new Double((-1269.16181025576));
      jsonObject0.addProperty("*yK", (Number) double0);
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) jsonObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((JsonElement) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Class<JsonArray> class0 = JsonArray.class;
      Gson gson0 = new Gson();
//      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonObject
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonArray> class0 = JsonArray.class;
      JsonArray jsonArray0 = new JsonArray();
      jsonArray0.add((Character) null);
      JsonArray jsonArray1 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertTrue(jsonArray1.equals((Object)jsonArray0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = new Boolean(true);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<JsonArray> class0 = JsonArray.class;
//      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonPrimitive
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<JsonObject> class0 = JsonObject.class;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
//      try { 
        gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonNull
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = Float.valueOf((-81.0F));
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
      Class<JsonArray> class0 = JsonArray.class;
//      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonPrimitive
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.PRC;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) locale0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = (Locale)gson0.fromJson("hOC", (Type) class0);
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Object object0 = gson0.fromJson("null", (Type) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      Locale locale0 = (Locale)gson0.fromJson("0Pfp_*", (Type) class0);
      assertEquals("0pfp_*", locale0.toString());
      assertEquals("0pfp", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.ATOMIC_INTEGER_FACTORY;
      Class<Calendar> class0 = Calendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Calendar> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, typeAdapter0, class0);
      JsonElement jsonElement0 = typeAdapterRuntimeTypeWrapper0.toJsonTree((Calendar) null);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter0 = TypeAdapters.CALENDAR;
      TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, typeAdapter0, class0);
      Locale locale0 = Locale.PRC;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) mockGregorianCalendar0);
      // Undeclared exception!
//      try { 
        typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonElement0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Expected NUMBER but was BOOLEAN at path $.lenient
//         //
//         verifyException("com.google.gson.internal.bind.JsonTreeReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      Calendar calendar0 = gson0.fromJson("null", class0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter0 = TypeAdapters.CALENDAR;
      TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, typeAdapter0, class0);
      Locale locale0 = Locale.PRC;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      JsonElement jsonElement0 = typeAdapterRuntimeTypeWrapper0.toJsonTree(mockGregorianCalendar0);
      Calendar calendar0 = typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonElement0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) uUID0);
      assertEquals("\"00000000-0100-4000-8200-000003000000\"", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      AtomicBoolean atomicBoolean0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(atomicBoolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson("192.168.1.42", class0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      String string0 = gson0.toJson((Object) inetAddress0);
      assertEquals("\"192.168.1.42\"", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<InetAddress> class0 = InetAddress.class;
      InetAddress inetAddress0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      Boolean boolean0 = Boolean.FALSE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
//      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BOOLEAN at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<URI> class0 = URI.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      URI uRI0 = MockURI.aFTPURI;
      String string0 = gson0.toJson((Object) uRI0);
      assertEquals("\"ftp://foo.bar\"", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      URI uRI0 = gson0.fromJson("null", class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      // Undeclared exception!
//      try { 
        gson0.fromJson("MeB^J:D", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.net.URISyntaxException: Illegal character in path at index 3: MeB^J
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      URL uRL0 = MockURL.getFtpExample();
      String string0 = gson0.toJson((Object) uRL0);
      assertEquals("\"ftp://ftp.someFakeButWellFormedURL.org/fooExample\"", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("null");
      AtomicBoolean atomicBoolean0 = gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
      assertNull(atomicBoolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      AtomicBoolean atomicBoolean0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(atomicBoolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      StringReader stringReader0 = new StringReader("\"192.168.1.42\"");
//      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.net.MalformedURLException: no protocol: 192.168.1.42
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      AtomicBoolean atomicBoolean0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(atomicBoolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      JsonObject jsonObject0 = new JsonObject();
//      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<StringBuilder> class0 = StringBuilder.class;
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = gson0.toJson((Object) stringBuilder0);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<StringBuilder> class0 = StringBuilder.class;
      Gson gson0 = new Gson();
      Object object0 = gson0.fromJson("null", (Type) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      JsonObject jsonObject0 = new JsonObject();
//      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      JsonObject jsonObject0 = new JsonObject();
//      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      AtomicBoolean atomicBoolean0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(atomicBoolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<String> class0 = String.class;
      Gson gson0 = new Gson();
      Object object0 = gson0.fromJson("true", (Type) class0);
      assertEquals("true", object0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf('Q');
      String string0 = gson0.toJson((Object) character0);
      assertEquals("\"Q\"", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf('Q');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<Character> class0 = Character.class;
      Character character1 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals('Q', (char)character1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      Class<Object> class1 = gson0.fromJson("null", (Type) class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("1}v4fIEuU0r");
      Class<Character> class0 = Character.class;
//      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expecting character, got: 1}v4fIEuU0r
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Long> class0 = Long.TYPE;
      AtomicBoolean atomicBoolean0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(atomicBoolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      StringReader stringReader0 = new StringReader("192.168.1.42");
//      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: multiple points
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(292);
      String string0 = gson0.toJson((Object) atomicIntegerArray0);
      assertEquals("[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Character character0 = Character.valueOf('7');
      jsonArray0.add(character0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      AtomicIntegerArray atomicIntegerArray0 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertEquals("[7]", atomicIntegerArray0.toString());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      AtomicBoolean atomicBoolean0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(atomicBoolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("\"ftp://ftp.someFakeButWellFormedURL.org/fooExample\"");
      Class<Integer> class0 = Integer.TYPE;
//      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"ftp://ftp.someFakeButWellFormedURL.org/fooExample\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Byte> class0 = Byte.TYPE;
      AtomicBoolean atomicBoolean0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(atomicBoolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("com.google.gson.internal.bind.TypeAdapters$13");
      Class<Byte> class0 = Byte.TYPE;
//      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"com.google.gson.internal.bind.TypeAdapters$13\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<Boolean> class0 = Boolean.TYPE;
//      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BOOLEAN but was BEGIN_OBJECT at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      AtomicBoolean atomicBoolean0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(atomicBoolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
//      try { 
        gson0.fromJson("Error: Expecting: bitset number value (1, 0), Found: ", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 7 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      BitSet bitSet0 = new BitSet(340);
      bitSet0.flip(340);
      String string0 = gson0.toJson((Object) bitSet0);
      assertEquals("[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
//      try { 
        gson0.fromJson("[~Z))v%'n#?aa>] P6?", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Error: Expecting: bitset number value (1, 0), Found: ~Z))v%'n
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson("null", class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson("[]", class0);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Gson gson0 = new Gson();
      // Undeclared exception!
//      try { 
        gson0.toJson((Object) class0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Attempted to serialize java.lang.Class: java.lang.Short. Forgot to register a type adapter?
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Currency> class0 = Currency.class;
      // Undeclared exception!
//      try { 
        gson0.fromJson("HoE/N5/&B+kn<5LAbq@", class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Currency", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.GERMANY;
      Currency currency0 = Currency.getInstance(locale0);
      String string0 = gson0.toJson((Object) currency0);
      assertEquals("\"EUR\"", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      String string0 = gson0.toJson((Object) atomicInteger0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicInteger> class0 = AtomicInteger.class;
//      try { 
        gson0.fromJson("Expected a boolean but was ", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"Expected\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      String string0 = gson0.toJson((Object) atomicBoolean0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
//      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BOOLEAN but was BEGIN_OBJECT at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Gson gson0 = new Gson();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" but was ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      // Undeclared exception!
//      try { 
        gson0.toJson((Object) bufferedOutputStream0, (Appendable) mockPrintStream0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      AtomicBoolean atomicBoolean0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(atomicBoolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<String>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      Class<JsonArray> class0 = JsonArray.class;
      StringReader stringReader0 = new StringReader(string0);
//      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unterminated object at line 1 column 32 path $.serializeNulls
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }
}
