/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 07:07:54 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.bind.ArrayTypeAdapter;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import java.io.CharArrayWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.lang.reflect.Type;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Calendar>) class1, (TypeAdapter<? super Calendar>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("Invalid bitset value type: ");
//      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"Invalid bitset value type: \"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf('B');
      jsonArray0.add(character0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
//      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"B\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      // Undeclared exception!
//      try { 
        gson0.fromJson("j^ndG~.ECkpav6", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.net.URISyntaxException: Illegal character in path at index 1: j^ndG~.ECkpav6
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter");
//      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<JsonObject> class0 = JsonObject.class;
      TypeToken<JsonObject> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      TypeAdapter<JsonObject> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken1 = TypeToken.get(class1);
      TypeAdapter<Object> typeAdapter1 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class1, class1, (TypeAdapter<? super Object>) typeAdapter1);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<JsonArray> class0 = JsonArray.class;
      Gson gson0 = new Gson();
//      try { 
        gson0.fromJson("14,~U{E", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonPrimitive
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonArray> class0 = JsonArray.class;
//      try { 
        gson0.fromJson(" [F[|#2z", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unterminated array at line 1 column 5 path $[1]
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonArray> class0 = JsonArray.class;
      Character character0 = Character.valueOf('5');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
//      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonPrimitive
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<JsonArray> class0 = JsonArray.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Gson gson0 = new Gson();
//      try { 
        gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonNull
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonArray> class0 = JsonArray.class;
//      try { 
        gson0.fromJson("true", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonPrimitive
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      URL uRL0 = MockURL.getHttpExample();
      String string0 = gson0.toJson((Object) uRL0);
      assertEquals("\"http://www.someFakeButWellFormedURL.org/fooExample\"", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder(35);
      gson0.toJson((Object) stringBuilder0, (Appendable) stringBuilder0);
      assertEquals("\"\"", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);
      TypeAdapter<GregorianCalendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      Character character0 = Character.valueOf('*');
      jsonArray0.add(character0);
      // Undeclared exception!
//      try { 
        jsonArray0.getAsJsonObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Not a JSON Object: [\"*\"]
//         //
//         verifyException("com.google.gson.JsonElement", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) excluder0);
      String string0 = gson0.toJson(jsonElement0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      StringWriter stringWriter0 = new StringWriter(3112);
      gson0.toJson((JsonElement) jsonNull0, (Appendable) stringWriter0);
      assertFalse(jsonNull0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Gson gson0 = new Gson();
      JsonSerializer<Short> jsonSerializer0 = (JsonSerializer<Short>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((JsonElement) null).when(jsonSerializer0).serialize(anyShort() , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonSerializationContext.class));
      JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.CALENDAR_FACTORY;
      TreeTypeAdapter<Short> treeTypeAdapter0 = new TreeTypeAdapter<Short>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      TypeAdapterRuntimeTypeWrapper<Short> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Short>(gson0, treeTypeAdapter0, class0);
      Short short0 = new Short((short)2756);
      JsonElement jsonElement0 = typeAdapterRuntimeTypeWrapper0.toJsonTree(short0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson0);
      Class<JsonNull> class0 = JsonNull.class;
//      try { 
        gson0.fromJson(jsonElement0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonObject
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = gson0.toJson((Object) locale0);
      assertEquals("\"zh_TW\"", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("io_YRJtxv");
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson((Reader) stringReader0, class0);
      assertEquals("io_YRJTXV", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("2tieMliNH*");
      Locale locale0 = gson0.fromJson((Reader) stringReader0, class0);
      assertEquals("2tiemlinh*", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("\"\"");
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
//      try { 
        gson0.fromJson((Reader) stringReader0, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Locale", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) mockGregorianCalendar0, (Type) class0);
      assertFalse(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) gson0);
      StringReader stringReader0 = new StringReader(string0);
      Class<Calendar> class0 = Calendar.class;
//      try { 
        gson0.fromJson((Reader) stringReader0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected an int but was BOOLEAN at line 1 column 35 path $.generateNonExecutableJson
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      UUID uUID0 = MockUUID.randomUUID();
      String string0 = gson0.toJson((Object) uUID0);
      assertEquals("\"00000000-0100-4000-8200-000003000000\"", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<UUID> class0 = UUID.class;
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
//      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      String string0 = gson0.toJson((Object) inetAddress0);
      assertEquals("\"127.0.0.1\"", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<InetAddress> class0 = InetAddress.class;
      TypeToken<InetAddress> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonNull0, type0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
//      try { 
        gson0.fromJson("gy~wSe/RHhhG&v>", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 8 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) uRI0);
      assertEquals("\"http://foo.bar\"", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<URI> class0 = URI.class;
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonSerializer<Byte> jsonSerializer0 = (JsonSerializer<Byte>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Byte> jsonDeserializer0 = (JsonDeserializer<Byte>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<Byte> class0 = Byte.class;
      TypeToken<Byte> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.INTEGER_FACTORY;
      TreeTypeAdapter<Byte> treeTypeAdapter0 = new TreeTypeAdapter<Byte>(jsonSerializer0, jsonDeserializer0, (Gson) null, typeToken0, typeAdapterFactory0);
      ArrayTypeAdapter<Byte> arrayTypeAdapter0 = new ArrayTypeAdapter<Byte>((Gson) null, treeTypeAdapter0, class0);
      JsonElement jsonElement0 = arrayTypeAdapter0.toJsonTree((Object) null);
      Class<URL> class1 = URL.class;
      URL uRL0 = gson0.fromJson(jsonElement0, class1);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
//      try { 
        gson0.fromJson("KjIz;|4n:\"@1=Keq", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.net.MalformedURLException: no protocol: KjIz
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(438);
      gson0.toJson((Object) null, (Type) class0, (Appendable) charArrayWriter0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = gson0.toJson((Object) stringBuffer0);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.class;
      ArrayTypeAdapter<Byte> arrayTypeAdapter0 = new ArrayTypeAdapter<Byte>(gson0, (TypeAdapter<Byte>) null, class0);
      JsonElement jsonElement0 = arrayTypeAdapter0.toJsonTree((Object) null);
      Class<StringBuffer> class1 = StringBuffer.class;
      StringBuffer stringBuffer0 = gson0.fromJson(jsonElement0, class1);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3591, 3591, 3591, (-4828), (-4828), 82);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) mockGregorianCalendar0);
//      try { 
        gson0.fromJson(jsonElement0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson("null", class0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson("_^@g'N5Vl", class0);
      assertEquals("_^@g'N5Vl", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<String> class0 = String.class;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<String> class0 = String.class;
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
//      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Character character0 = new Character('\u0084');
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) character0);
      assertEquals("\"\u0084\"", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("&Tbse%~dQqeZ9iorp+Q");
      Class<Character> class0 = Character.TYPE;
//      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expecting character, got: &Tbse%~dQqeZ9iorp+Q
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Character> class0 = Character.TYPE;
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
//      try { 
        gson0.fromJson("J]AoCdCw/w5Xu3> ", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("5M@k< \"LM+Pf;r=- {P");
//      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"5M@k< \"LM+Pf;r=- {P\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(170);
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) atomicIntegerArray0);
      assertEquals("[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Character character0 = new Character('3');
      jsonArray0.add(character0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      AtomicIntegerArray atomicIntegerArray0 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertEquals("[3]", atomicIntegerArray0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Integer> class0 = Integer.TYPE;
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Short> class0 = Short.class;
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      Class<? super Short> class1 = typeToken0.getRawType();
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class1);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("\"00000000-0100-4000-8200-000003000000\"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Short> class0 = Short.TYPE;
//      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"00000000-0100-4000-8200-000003000000\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Byte> class0 = Byte.TYPE;
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Class<Boolean> class0 = Boolean.TYPE;
//      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BOOLEAN but was BEGIN_ARRAY at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Gson gson0 = new Gson();
      Float float0 = gson0.fromJson("null", (Type) class0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
//      try { 
        gson0.fromJson("VX3>yF06pXl}@6wG?", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 13 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      String string0 = gson0.toJson((Object) bitSet0);
      assertEquals("[1,0,1]", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Class<BitSet> class0 = BitSet.class;
      jsonArray0.add("com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl");
//      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Error: Expecting: bitset number value (1, 0), Found: com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JsonSerializer<InetAddress> jsonSerializer0 = (JsonSerializer<InetAddress>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      // Undeclared exception!
//      try { 
        gson0.toJson((Object) jsonSerializer0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Attempted to serialize java.lang.Class: com.google.gson.JsonSerializer. Forgot to register a type adapter?
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Currency> class0 = Currency.class;
      // Undeclared exception!
//      try { 
        gson0.fromJson("O", class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Currency", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.JAPAN;
      Currency currency0 = Currency.getInstance(locale0);
      String string0 = gson0.toJson((Object) currency0);
      assertEquals("\"JPY\"", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicInteger atomicInteger0 = new AtomicInteger((-961));
      String string0 = gson0.toJson((Object) atomicInteger0);
      assertEquals("-961", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicInteger> class0 = AtomicInteger.class;
//      try { 
        gson0.fromJson("-lPh`%(/`", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"-lPh`%(\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      String string0 = gson0.toJson((Object) atomicBoolean0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
//      try { 
        gson0.fromJson("9", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was NUMBER at line 1 column 2 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gson gson0 = new Gson();
      Byte byte0 = new Byte((byte)35);
      String string0 = gson0.toJson((Object) byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("");
      String string0 = gson0.toJson((Object) jsonPrimitive0);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)1977);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) short0);
      Class<Byte> class0 = Byte.class;
      Byte byte0 = gson0.fromJson(jsonElement0, class0);
      assertEquals((byte) (-71), (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<StringBuffer> typeAdapter0 = TypeAdapters.STRING_BUFFER;
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
      Class<Calendar> class1 = Calendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class1);
      TypeAdapter<Calendar> typeAdapter1 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, typeAdapter1, class1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class1, (TypeAdapter<Calendar>) typeAdapterRuntimeTypeWrapper0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      assertNotNull(string0);
  }
}
