/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 07:09:38 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.ExclusionStrategy;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.ArrayTypeAdapter;
import com.google.gson.internal.bind.DateTypeAdapter;
import com.google.gson.internal.bind.ObjectTypeAdapter;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.CharArrayWriter;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.nio.CharBuffer;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      JsonObject jsonObject0 = new JsonObject();
      JsonArray jsonArray0 = new JsonArray();
      Character character0 = new Character('1');
      jsonArray0.add(character0);
      Class<BitSet> class1 = BitSet.class;
      gson0.fromJson((JsonElement) jsonArray0, class1);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Locale> class2 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, (TypeAdapter<Locale>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Integer> class0 = Integer.TYPE;
      Gson gson0 = new Gson();
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter0, class0);
      Locale locale0 = Locale.JAPAN;
      Class<Boolean> class1 = Boolean.class;
      TypeToken.get(class1);
      TypeAdapter<Boolean> typeAdapter1 = TypeAdapters.BOOLEAN_AS_STRING;
      Class<Byte> class2 = Byte.TYPE;
      TypeAdapterRuntimeTypeWrapper<Boolean> typeAdapterRuntimeTypeWrapper1 = new TypeAdapterRuntimeTypeWrapper<Boolean>(gson0, typeAdapter1, class2);
      JsonObject jsonObject0 = new JsonObject();
      // Undeclared exception!
//      try { 
        typeAdapterRuntimeTypeWrapper1.fromJsonTree(jsonObject0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Expected STRING but was BEGIN_OBJECT at path $
//         //
//         verifyException("com.google.gson.internal.bind.JsonTreeReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<UUID> class0 = UUID.class;
      gson0.fromJson((JsonElement) jsonNull0, class0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer();
      Gson gson1 = new Gson();
      Class<URI> class0 = URI.class;
      gson1.fromJson("NULL", class0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      JsonSerializer<Locale> jsonSerializer0 = (JsonSerializer<Locale>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      Class<Locale> class2 = Locale.class;
      TypeToken<Locale> typeToken0 = TypeToken.get(class2);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.ATOMIC_INTEGER_FACTORY;
      TreeTypeAdapter<Locale> treeTypeAdapter0 = new TreeTypeAdapter<Locale>(jsonSerializer0, (JsonDeserializer<Locale>) null, gson0, typeToken0, typeAdapterFactory0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class1, (TypeAdapter<Locale>) treeTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) bitSet0);
      Class<UUID> class0 = UUID.class;
//      try { 
        gson0.fromJson(jsonElement0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      Object object0 = new Object();
      gson0.toJsonTree(object0);
      gson0.toJsonTree((Object) null);
      JsonArray jsonArray0 = new JsonArray();
      jsonArray0.iterator();
      Character character0 = Character.valueOf('r');
      jsonArray0.add(character0);
      Class<BitSet> class1 = BitSet.class;
//      try { 
        gson0.fromJson((JsonElement) jsonArray0, class1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Error: Expecting: bitset number value (1, 0), Found: r
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(687);
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) atomicIntegerArray0);
      jsonArray0.iterator();
      jsonArray0.add((Character) null);
      Class<BitSet> class0 = BitSet.class;
//      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Invalid bitset value type: NULL
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Gson gson0 = new Gson();
      int[] intArray0 = new int[6];
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) atomicIntegerArray0);
      Character character0 = new Character('B');
      jsonArray0.add(character0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
//      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"B\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Class<URL> class1 = URL.class;
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      JsonElement jsonElement0 = gson1.toJsonTree((Object) null, (Type) class1);
      Class<Double> class2 = Double.class;
      gson0.fromJson(jsonElement0, class2);
      // Undeclared exception!
//      try { 
        gson0.toJsonTree((Object) class0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Attempted to serialize java.lang.Class: java.net.URL. Forgot to register a type adapter?
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
//      try { 
        gson0.fromJson("C^yG-I", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was STRING at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      // Undeclared exception!
//      try { 
        gson0.toJsonTree((Object) class0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Attempted to serialize java.lang.Class: java.util.Locale. Forgot to register a type adapter?
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      Class<AtomicInteger> class1 = AtomicInteger.class;
//      try { 
        gson0.fromJson("4_6vUexTWK[-]PQ", class1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"4_6vUexTWK\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      Gson gson1 = new Gson();
      // Undeclared exception!
//      try { 
        gson1.fromJson("w6~9<SxJseU", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.net.URISyntaxException: Illegal character in path at index 4: w6~9<SxJseU
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      Gson gson0 = new Gson();
      int[] intArray0 = new int[6];
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      Float float0 = new Float(0.0);
      Class<URI> class0 = URI.class;
      gson0.fromJson("getConstructorId", class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      gson0.toJsonTree((Object) float0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter0);
      Class<UUID> class2 = UUID.class;
      TypeToken<UUID> typeToken0 = TypeToken.get(class2);
      TypeAdapter<UUID> typeAdapter1 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, typeAdapter1);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      Gson gson0 = new Gson();
      TypeAdapter<URI> typeAdapter0 = TypeAdapters.URI;
      Class<Float> class0 = Float.TYPE;
      TypeAdapterRuntimeTypeWrapper<URI> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URI>(gson0, typeAdapter0, class0);
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("\"PB.KwrgaF/M<:tJ2`2");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
//      try { 
        typeAdapterRuntimeTypeWrapper0.read(jsonReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unterminated string at line 1 column 20 path $
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      int[] intArray0 = new int[4];
      intArray0[0] = 496;
      intArray0[1] = (-2317);
      intArray0[2] = (-1303);
      intArray0[3] = 12;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      JsonElement jsonElement0 = gson1.toJsonTree((Object) atomicIntegerArray0);
      Gson gson2 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      gson2.fromJson(jsonElement0, class0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken.get(class0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Gson gson1 = new Gson();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      gson1.toJson((Object) calendar0, (Type) class0, (Appendable) stringBuffer0);
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      Class<Locale> class2 = Locale.class;
      TypeToken<Locale> typeToken0 = TypeToken.get(class2);
      TypeAdapter<Locale> typeAdapter2 = gson1.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter2);
      Class<Calendar> class3 = Calendar.class;
      TypeToken<Calendar> typeToken1 = TypeToken.get(class3);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken1, (TypeAdapter<Calendar>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      MockInetAddress.anyLocalAddress();
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) jsonArray0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      gson0.fromJson(jsonElement0, class0);
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<String> class0 = String.class;
      Boolean boolean0 = Boolean.valueOf("0");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) inetAddress0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
//      try { 
        gson0.fromJson(jsonElement0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) typeAdapter0);
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<String> class0 = String.class;
      gson0.fromJson(jsonElement0, class0);
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter1);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      gson0.toJsonTree((Object) stringBuilder0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapters.newFactory(class0, typeAdapter0);
      Class<URI> class1 = URI.class;
      Class<URI> class2 = URI.class;
      TypeToken<URI> typeToken0 = TypeToken.get(class2);
      TypeAdapter<URI> typeAdapter1 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<URI> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URI>(gson0, typeAdapter1, class2);
      PipedReader pipedReader0 = new PipedReader(661);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
//      try { 
        typeAdapterRuntimeTypeWrapper0.read(jsonReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      StringBuffer stringBuffer0 = new StringBuffer("TZx&L8I^#");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(3, 1.0F);
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuilder2);
      gson0.toJson((Object) null, type0, (Appendable) stringBuffer1);
      StringBuffer stringBuffer2 = new StringBuffer();
      gson0.toJsonTree((Object) stringBuffer2);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter0);
      Class<Currency> class2 = Currency.class;
      Class<Currency> class3 = Currency.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class2, class3, (TypeAdapter<? super Currency>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Gson gson1 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      gson1.fromJson(jsonElement0, class0);
      Locale locale0 = Locale.ENGLISH;
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Locale>) null);
      Class<Locale> class2 = Locale.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class2, (TypeAdapter<Locale>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) stringBuffer0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Excluder excluder0 = Excluder.DEFAULT;
      excluder0.disableInnerClassSerialization();
      Gson gson1 = new Gson();
      Class<Locale> class0 = Locale.class;
      Class<String> class1 = String.class;
      gson1.fromJson(jsonElement0, class1);
      TypeToken<Locale> typeToken0 = TypeToken.get(class0);
      excluder0.create(gson1, typeToken0);
      Class<Currency> class2 = Currency.class;
      TypeToken<Currency> typeToken1 = TypeToken.get(class2);
      ObjectConstructor<Currency> objectConstructor0 = (ObjectConstructor<Currency>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Currency> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Currency>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken1, (TypeAdapter<Currency>) reflectiveTypeAdapterFactory_Adapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) stringBuffer0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Excluder excluder0 = Excluder.DEFAULT;
      excluder0.disableInnerClassSerialization();
      Gson gson1 = new Gson();
      Class<Locale> class0 = Locale.class;
      Class<String> class1 = String.class;
      gson1.fromJson(jsonElement0, class1);
      TypeToken<Locale> typeToken0 = TypeToken.get(class0);
      excluder0.create(gson1, typeToken0);
      Class<Currency> class2 = Currency.class;
      TypeToken.get(class2);
      Class<Locale> class3 = Locale.class;
      TypeAdapters.newFactory(class3, (TypeAdapter<Locale>) null);
      Random.setNextRandom(1593);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("W:gn");
      Class<URL> class0 = URL.class;
      TypeAdapter<URL> typeAdapter1 = TypeAdapters.URL;
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter1, class0);
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper1 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter0, class0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      Class<StringBuffer> class1 = StringBuffer.class;
      gson0.fromJson((JsonElement) jsonPrimitive0, class1);
      Locale locale0 = Locale.CHINA;
      Class<Locale> class2 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, typeAdapter0);
      Class<URL> class3 = URL.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class3, (TypeAdapter<URL>) typeAdapterRuntimeTypeWrapper0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Gson gson0 = new Gson();
      long[] longArray0 = new long[1];
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      gson0.toJsonTree((Object) bitSet0);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Short> class0 = Short.TYPE;
      Class<URL> class1 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class1);
      TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, class0);
      typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonNull0);
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class2 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, typeAdapter1);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(178);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<BitSet> class0 = BitSet.class;
      Gson gson1 = new Gson();
      gson0.fromJson(jsonElement0, class0);
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Locale>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      gson0.toJsonTree((Object) charArrayWriter0);
      Gson gson1 = new Gson();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      Locale locale0 = Locale.CANADA;
      Currency currency0 = Currency.getInstance(locale0);
      gson0.toJsonTree((Object) currency0);
      // Undeclared exception!
//      try { 
        gson0.toJsonTree((Object) typeToken0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Attempted to serialize java.lang.Class: java.net.URL. Forgot to register a type adapter?
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      gson0.newJsonReader(pipedReader0);
      Class<Integer> class0 = Integer.TYPE;
      gson0.fromJson("null", (Type) class0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      MockURI.create("null");
      JsonElement jsonElement0 = gson0.toJsonTree((Object) "null");
      StringBuffer stringBuffer0 = new StringBuffer("com.google.gson.JsonPrimitive");
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson1, typeAdapter0, class0);
      typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonElement0);
      Class<Locale> class1 = Locale.class;
      Excluder excluder0 = Excluder.DEFAULT;
      TypeToken<Locale> typeToken1 = TypeToken.get(class1);
      excluder0.create(gson1, typeToken1);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Locale>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      MockUUID.randomUUID();
      gson0.toJsonTree((Object) "null");
      Class<Short> class0 = Short.TYPE;
      gson2.fromJson("null", (Type) class0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Gson gson0 = new Gson();
      MockURI.create("com.google.gson.internal.bind.TypeAdapters$2");
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(102);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicIntegerArray0);
      Class<BitSet> class0 = BitSet.class;
      Gson gson1 = new Gson();
      gson1.fromJson(jsonElement0, class0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      gson0.toJsonTree((Object) atomicIntegerArray0);
      // Undeclared exception!
//      try { 
        gson0.toJsonTree((Object) class0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Attempted to serialize java.lang.Class: java.util.BitSet. Forgot to register a type adapter?
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      MockURI.create("null");
      JsonElement jsonElement0 = gson0.toJsonTree((Object) "null");
      Class<BitSet> class0 = BitSet.class;
//      try { 
        gson0.fromJson(jsonElement0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      gson0.toJson((Object) null, (Type) class0);
      URL uRL0 = MockURL.getFileExample();
      StringBuilder stringBuilder0 = new StringBuilder(2);
      gson0.toJsonTree((Object) uRL0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class1, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      StringBuilder stringBuilder0 = new StringBuilder(2);
      gson0.toJsonTree((Object) stringBuilder0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter0);
      Class<Long> class2 = Long.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends Long>) class2, (TypeAdapter<? super Long>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      MockURI.create("null");
      gson0.toJsonTree((Object) "null");
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.toJsonTree((Object) jsonNull0);
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);
      Class<? super GregorianCalendar> class1 = typeToken0.getRawType();
      gson0.fromJson("null", (Type) class1);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Locale> class2 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 12;
      Random.setNextRandom(12);
      Class<Currency> class0 = Currency.class;
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.CALENDAR_FACTORY;
      JsonArray jsonArray0 = new JsonArray();
      JsonArray jsonArray1 = jsonArray0.getAsJsonArray();
//      try { 
        gson0.fromJson((JsonElement) jsonArray1, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      MockURI.create("null");
      gson0.toJsonTree((Object) "null");
      Class<Character> class0 = Character.class;
      gson1.fromJson("null", class0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      Excluder excluder0 = gson1.excluder();
      TypeToken<Locale> typeToken0 = TypeToken.get(class1);
      TypeAdapter<Locale> typeAdapter2 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter2);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      gson0.toJsonTree((Object) "null");
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Boolean> class0 = Boolean.TYPE;
      Gson gson2 = new Gson();
      gson2.fromJson("null", (Type) class0);
      MockCalendar.getInstance();
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      TypeToken.get(class1);
      Class<Locale> class2 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, typeAdapter0);
      Class<StringBuffer> class3 = StringBuffer.class;
      TypeAdapter<StringBuffer> typeAdapter3 = gson2.getAdapter(class3);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class3, (Class<? extends StringBuffer>) class3, (TypeAdapter<? super StringBuffer>) typeAdapter3);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
//      try { 
        gson0.fromJson("%,/N?!1", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Boolean> class0 = Boolean.TYPE;
//      try { 
        gson0.fromJson("<p/x'GKbIYJ9~okFr", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#J?S94@)|zng1|{(Sk");
      gson0.toJsonTree((Object) inetAddress0);
      MockURL.getFtpExample();
      Gson gson1 = new Gson();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Boolean> class0 = Boolean.TYPE;
//      try { 
        gson0.fromJson("-#X,V;m(.LHbv:RQ", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      MockURL.getFileExample();
      Class<Long> class0 = Long.TYPE;
      gson0.fromJson("null", (Type) class0);
      MockCalendar.getInstance();
      Class<Locale> class1 = Locale.class;
      TypeAdapter<Locale> typeAdapter1 = gson0.getAdapter(class1);
      TypeAdapters.newFactory(class1, typeAdapter1);
      TypeToken<Float> typeToken0 = null;
      Excluder excluder0 = gson0.excluder();
      Gson gson1 = new Gson();
      // Undeclared exception!
//      try { 
        excluder0.create(gson0, (TypeToken<Float>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<URL> class0 = URL.class;
      TypeToken.get(class0);
      Gson gson2 = new Gson();
      Class<Long> class1 = Long.class;
      Character character0 = new Character('<');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
//      try { 
        gson1.fromJson((JsonElement) jsonPrimitive0, class1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"<\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.class;
      Gson gson1 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson1);
      int[] intArray0 = new int[7];
      intArray0[0] = 102;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getFtpExample();
      Class<URL> class1 = URL.class;
      TypeToken.get(class1);
      Gson gson2 = new Gson();
      Class<Long> class2 = Long.class;
//      try { 
        gson2.fromJson(jsonElement0, class2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_OBJECT at path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      String string0 = "YV%C{~Dr$s}f7TpfU,";
      Class<Character> class0 = Character.class;
//      try { 
        gson0.fromJson("YV%C{~Dr$s}f7TpfU,", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expecting character, got: YV%C
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      AtomicInteger atomicInteger0 = new AtomicInteger(1021);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(atomicInteger0);
      gson0.toJsonTree((Object) jsonPrimitive0);
      MockURL.getFileExample();
      Gson gson1 = new Gson();
      UUID uUID0 = MockUUID.randomUUID();
      gson0.toJsonTree((Object) uUID0);
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      Class<InetAddress> class0 = InetAddress.class;
      gson0.fromJson("null", class0);
      Class<InetAddress> class1 = InetAddress.class;
      Excluder excluder0 = new Excluder();
      TypeToken<InetAddress> typeToken0 = TypeToken.get(class1);
      excluder0.create(gson1, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class1, (TypeAdapter<InetAddress>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Gson gson0 = new Gson();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      MockURL.getFileExample();
      Gson gson1 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
//      try { 
        gson1.fromJson("Error: Expecting: bitset number value (1, 0), Found: ", type0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.entrySet();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(15);
      gson0.toJson((JsonElement) jsonObject0, (Appendable) charArrayWriter0);
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 15;
      intArray0[3] = 32;
      intArray0[4] = 15;
      intArray0[5] = 32;
      intArray0[6] = 3;
      intArray0[7] = 15;
      intArray0[8] = (-280);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getHttpExample();
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 15;
      longArray0[1] = (long) 15;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 3;
      longArray0[5] = (long) 15;
      longArray0[6] = (long) 15;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      gson0.toJsonTree((Object) bitSet0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter1);
      Class<Calendar> class1 = Calendar.class;
      Excluder excluder0 = new Excluder();
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      Excluder excluder1 = excluder0.withExclusionStrategy(exclusionStrategy0, false, false);
      Gson gson1 = new Gson();
      Class<Object> class2 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class2);
      excluder1.create(gson1, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends Calendar>) class1, (TypeAdapter<? super Calendar>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      long[] longArray0 = new long[7];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = 4673L;
      longArray0[5] = (-1L);
      longArray0[6] = (-1L);
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      gson0.toJsonTree((Object) bitSet0);
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
//      try { 
        jsonArray0.getAsJsonNull();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // This is not a JSON Null.
//         //
//         verifyException("com.google.gson.JsonElement", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockURL.getFtpExample();
      gson0.toJsonTree((Object) charArrayWriter0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Boolean> class0 = Boolean.TYPE;
//      try { 
        gson0.fromJson("0", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was NUMBER at line 1 column 2 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Gson gson1 = new Gson();
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      gson0.toJsonTree((Object) bitSet0);
      int[] intArray0 = new int[8];
      intArray0[0] = 82;
      intArray0[1] = 85;
      intArray0[2] = 89;
      intArray0[3] = (-659);
      intArray0[4] = 83;
      intArray0[5] = 75;
      intArray0[6] = 32;
      intArray0[7] = 3;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getHttpExample();
      gson0.toJsonTree((Object) null);
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter1);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      int[] intArray0 = new int[6];
      intArray0[0] = 102;
      intArray0[1] = 102;
      intArray0[2] = 102;
      intArray0[3] = 102;
      intArray0[4] = 102;
      intArray0[5] = 102;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getFtpExample();
      Class<URL> class1 = URL.class;
      TypeToken.get(class1);
      MockURL.getFileExample();
      Gson gson1 = new Gson();
//      try { 
        gson1.fromJson("0=RdY}`8", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      MockUUID.fromString((String) null);
      URI uRI0 = MockURI.create("null");
      gson1.toJsonTree((Object) uRI0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(15);
      Gson gson2 = new Gson();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      StringBuffer stringBuffer0 = new StringBuffer("Tmy5>o~a2P");
      stringBuffer0.append("yfzRBLLz2*e");
      gson0.toJsonTree((Object) stringBuffer0);
      int[] intArray0 = new int[3];
      intArray0[0] = 102;
      Gson gson1 = new Gson();
      gson0.toJsonTree((Object) gson1);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter1);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = "Tmy5>o~a2P";
      Class<Integer> class0 = Integer.TYPE;
      StringBuffer stringBuffer0 = new StringBuffer("Tmy5>o~a2P");
      stringBuffer0.append("yfzRBLLz2*e");
      gson0.toJsonTree((Object) stringBuffer0);
      int[] intArray0 = new int[3];
      intArray0[0] = 102;
      intArray0[1] = 102;
      intArray0[2] = 102;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getFtpExample();
      Class<URL> class1 = URL.class;
      TypeToken.get(class1);
      MockURL.getFileExample();
      Gson gson1 = new Gson();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Tmy5>o~a2P");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string1 = "7L@|oWW;";
//      try { 
        gson0.fromJson("7L@|oWW;", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"7L@|oWW\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.class;
      gson0.getAdapter(class0);
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
//      try { 
        gson2.fromJson(")$", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \")$\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
//      try { 
        gson0.fromJson("Tmy5>o~a2P", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"Tmy5>o~a2P\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      StringBuilder stringBuilder0 = new StringBuilder("w9gQYlmP- ");
      // Undeclared exception!
//      try { 
        gson0.toJson((Object) jsonNull0, type0, (Appendable) stringBuilder0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.google.gson.JsonNull cannot be cast to java.util.Calendar
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$27", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
//      try { 
        gson1.fromJson("2X4<+o]Q{#398/", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"2X4<+o\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.class;
      gson0.getAdapter(class0);
      Gson gson1 = new Gson();
      gson0.toJsonTree((Object) gson1);
      int[] intArray0 = new int[7];
      intArray0[0] = 102;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getFtpExample();
      Class<URL> class1 = URL.class;
      TypeToken.get(class1);
      MockURL.getFileExample();
      Gson gson2 = new Gson();
//      try { 
        gson2.fromJson("0=RdY}`8", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      UUID uUID0 = MockUUID.fromString((String) null);
      gson0.toJsonTree((Object) uUID0);
      int[] intArray0 = new int[6];
      intArray0[0] = 102;
      intArray0[1] = 102;
      intArray0[2] = 102;
      intArray0[3] = 102;
      intArray0[4] = 102;
      intArray0[5] = 102;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getFtpExample();
      // Undeclared exception!
//      try { 
        Currency.getInstance("'BRY';");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Currency", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicInteger atomicInteger0 = new AtomicInteger((-1191));
      gson0.toJsonTree((Object) atomicInteger0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1191);
      intArray0[1] = (-1191);
      intArray0[2] = (-1191);
      intArray0[3] = (-1191);
      intArray0[4] = (-1191);
      intArray0[5] = (-1191);
      intArray0[6] = (-1191);
      intArray0[7] = (-1191);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getHttpExample();
      AtomicIntegerArray atomicIntegerArray1 = new AtomicIntegerArray(9);
      gson0.toJsonTree((Object) atomicIntegerArray1);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapters.newFactory(class0, typeAdapter1);
      Random.setNextRandom((-1191));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson1);
      int[] intArray0 = new int[7];
      intArray0[0] = 102;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getFtpExample();
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      JsonDeserializer<URL> jsonDeserializer0 = (JsonDeserializer<URL>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      TreeTypeAdapter<URL> treeTypeAdapter0 = new TreeTypeAdapter<URL>((JsonSerializer<URL>) null, jsonDeserializer0, gson1, typeToken0, (TypeAdapterFactory) null);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson1, treeTypeAdapter0, class0);
      typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonElement0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Gson gson2 = new Gson();
      Class<Double> class1 = Double.TYPE;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper1 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson2, typeAdapter0, class1);
      Class<Locale> class2 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, (TypeAdapter<Locale>) typeAdapterRuntimeTypeWrapper1);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = (JsonObject)gson0.toJsonTree((Object) jsonObject0);
      jsonObject1.getAsJsonArray((String) null);
      jsonObject0.add("W~g.", jsonObject1);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
//      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonPrimitive but was com.google.gson.JsonObject
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
//      try { 
        gson0.fromJson("null", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonPrimitive but was com.google.gson.JsonNull
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<JsonArray> class0 = JsonArray.class;
      Gson gson0 = new Gson();
      Class<JsonArray> class1 = JsonArray.class;
      TypeAdapter<JsonArray> typeAdapter0 = gson0.getAdapter(class1);
      Class<GregorianCalendar> class2 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class2);
      Class<? super GregorianCalendar> class3 = typeToken0.getRawType();
      TypeAdapterRuntimeTypeWrapper<JsonArray> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<JsonArray>(gson0, typeAdapter0, class3);
      JsonArray jsonArray0 = new JsonArray();
      typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonArray0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, (TypeAdapter<JsonArray>) typeAdapterRuntimeTypeWrapper0);
      Class<Locale> class4 = Locale.class;
      Class<Locale> class5 = Locale.class;
      Gson gson1 = new Gson();
      Class<Object> class6 = Object.class;
      TypeToken<Object> typeToken1 = TypeToken.get(class6);
      TypeAdapter<Object> typeAdapter1 = gson1.getDelegateAdapter(typeAdapterFactory0, typeToken1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class4, class5, (TypeAdapter<? super Locale>) typeAdapter1);
      Class<InetAddress> class7 = InetAddress.class;
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactoryForMultipleTypes(class7, (Class<? extends InetAddress>) class7, (TypeAdapter<? super InetAddress>) typeAdapter1);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Gson gson0 = new Gson();
      MockInetAddress.anyLocalAddress();
      Boolean boolean0 = Boolean.TRUE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) boolean0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      gson0.fromJson(jsonElement0, class0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockUUID.randomUUID();
      Gson gson0 = new Gson();
      Long long0 = new Long(3552L);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(long0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      gson0.toJsonTree((Object) jsonObject0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
//      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonPrimitive but was com.google.gson.JsonObject
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      gson1.toJsonTree((Object) inetAddress0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2014147539);
      intArray0[1] = 3;
      intArray0[2] = 1822;
      intArray0[3] = 0;
      intArray0[4] = 1822;
      intArray0[5] = 8;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getHttpExample();
      Short short0 = new Short((short) (-29651));
      gson1.toJsonTree((Object) short0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter1);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      gson0.toJsonTree((Object) inetAddress0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1466879443);
      intArray0[1] = (-1466879443);
      intArray0[2] = (-1466879443);
      intArray0[3] = (-1466879443);
      intArray0[4] = (-1466879443);
      intArray0[5] = (-1466879443);
      intArray0[6] = (-1466879443);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getFtpExample();
      Short short0 = new Short((short)0);
      gson0.toJsonTree((Object) short0);
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      Class<Byte> class0 = Byte.TYPE;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter1, class0);
      Class<Locale> class1 = Locale.class;
      TypeAdapters.newFactory(class1, typeAdapter0);
      Class<Byte> class2 = Byte.class;
      TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Byte>) class2, (TypeAdapter<? super Byte>) null);
      Class<Double> class3 = Double.class;
      ObjectConstructor<Double> objectConstructor0 = (ObjectConstructor<Double>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Double> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Double>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class3, (TypeAdapter<Double>) reflectiveTypeAdapterFactory_Adapter0);
      Class<URL> class4 = URL.class;
      Class<URL> class5 = URL.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class4, (Class<? extends URL>) class5, (TypeAdapter<? super URL>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      gson0.toJsonTree((Object) gson1);
      int[] intArray0 = new int[7];
      intArray0[0] = 102;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getFtpExample();
      gson0.toJsonTree((Object) atomicIntegerArray0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      gson0.newJsonReader(pipedReader0);
      Class<Integer> class0 = Integer.TYPE;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson1, typeAdapter0, class0);
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      typeAdapterRuntimeTypeWrapper0.write(jsonWriter0, locale0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      typeAdapterRuntimeTypeWrapper0.read(jsonReader0);
      Class<Locale> class1 = Locale.class;
      TypeAdapters.newFactory(class1, typeAdapter0);
      System.setCurrentTimeMillis((-922337203685477580L));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      Class<URL> class1 = URL.class;
      TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, class0);
      Byte byte0 = new Byte((byte)0);
      gson0.toJsonTree((Object) byte0);
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper1 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter1, class0);
      Class<Locale> class2 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, typeAdapter1);
      Class<JsonPrimitive> class3 = JsonPrimitive.class;
      TypeToken<JsonPrimitive> typeToken0 = TypeToken.get(class3);
      TypeToken<URL> typeToken1 = (TypeToken<URL>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken1, typeAdapter0);
      TypeAdapter<JsonPrimitive> typeAdapter3 = gson0.getDelegateAdapter(typeAdapterFactory1, typeToken0);
      TypeAdapters.newFactory(typeToken0, typeAdapter3);
      Class<StringBuilder> class4 = StringBuilder.class;
      TypeToken<StringBuilder> typeToken2 = TypeToken.get(class4);
      TypeAdapter<StringBuilder> typeAdapter4 = gson0.getAdapter(typeToken2);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(typeToken2, typeAdapter4);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockURL.getFileExample();
      Gson gson1 = new Gson();
      MockUUID.randomUUID();
      Byte byte0 = new Byte((byte)21);
      gson0.toJsonTree((Object) byte0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      gson0.toJsonTree((Object) inetAddress0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
      Class<MockCalendar> class1 = MockCalendar.class;
      TypeToken.get(class1);
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter0, class0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.lookup(linkedList0, list0);
      typeAdapterRuntimeTypeWrapper0.toJson((Locale) null);
      Class<Locale> class2 = Locale.class;
      TypeAdapters.newFactory(class2, typeAdapter0);
      Class<Float> class3 = Float.class;
      TypeToken<Float> typeToken0 = TypeToken.get(class3);
      Excluder excluder0 = new Excluder();
      Gson gson1 = new Gson();
      excluder0.disableInnerClassSerialization();
      excluder0.create(gson1, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Float>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      gson0.toJsonTree((Object) inetAddress0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1466879443);
      intArray0[1] = (-1466879443);
      intArray0[2] = 272;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getFileExample();
      Character character0 = Character.valueOf('B');
      gson0.toJsonTree((Object) character0);
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter3 = TypeAdapters.LOCALE;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter1, class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter2);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.entrySet();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      gson0.toJson((JsonElement) jsonObject0, (Appendable) charArrayWriter0);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = (-1466879443);
      intArray0[5] = 92;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getFtpExample();
      gson0.toJsonTree((Object) charArrayWriter0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter1, class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Float float0 = new Float(0.0);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('}');
      gson0.toJson((JsonElement) jsonPrimitive0, (Appendable) charArrayWriter1);
      gson0.toJsonTree((Object) gson1);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      int[] intArray0 = new int[7];
      intArray0[0] = 102;
      intArray0[1] = (-2095201021);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      gson1.toJsonTree((Object) atomicIntegerArray0);
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      Gson gson2 = new Gson();
      TypeAdapter<Locale> typeAdapter3 = TypeAdapters.LOCALE;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson2, typeAdapter3, class0);
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter0);
      System.setCurrentTimeMillis((-2095201021));
      Class<JsonObject> class2 = JsonObject.class;
      JsonSerializer<JsonObject> jsonSerializer0 = (JsonSerializer<JsonObject>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<JsonObject> jsonDeserializer0 = (JsonDeserializer<JsonObject>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<JsonObject> class3 = JsonObject.class;
      TypeToken<JsonObject> typeToken0 = TypeToken.get(class3);
      TreeTypeAdapter<JsonObject> treeTypeAdapter0 = new TreeTypeAdapter<JsonObject>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      TypeAdapters.newFactory(class2, (TypeAdapter<JsonObject>) treeTypeAdapter0);
      Class<Float> class4 = Float.class;
      TypeToken<Float> typeToken1 = TypeToken.get(class4);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken1, (TypeAdapter<Float>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      gson0.toJsonTree((Object) inetAddress0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapters.newFactory(class0, typeAdapter0);
      Class<MockCalendar> class1 = MockCalendar.class;
      TypeToken.get(class1);
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter3 = TypeAdapters.LOCALE;
      ObjectConstructor<Locale> objectConstructor0 = (ObjectConstructor<Locale>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      JsonArray jsonArray0 = new JsonArray();
      Boolean boolean0 = Boolean.TRUE;
      jsonArray0.add(boolean0);
      // Undeclared exception!
//      try { 
        jsonArray0.getAsJsonObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Not a JSON Object: [true]
//         //
//         verifyException("com.google.gson.JsonElement", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      int[] intArray0 = new int[8];
      intArray0[0] = 13;
      intArray0[1] = (-2095201021);
      intArray0[2] = 102;
      intArray0[3] = 92;
      intArray0[4] = 102;
      intArray0[5] = (-2095201021);
      intArray0[6] = 13;
      intArray0[7] = 102;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getFtpExample();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      gson0.toJsonTree((Object) atomicBoolean0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter1);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      gson0.toJsonTree((Object) inetAddress0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1466879443);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      atomicBoolean0.compareAndSet(true, false);
      gson0.toJson((Object) atomicBoolean0);
      intArray0[1] = (-1466879443);
      intArray0[2] = 272;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      URL uRL0 = MockURL.getFileExample();
      gson0.toJsonTree((Object) uRL0);
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter3 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapters.newFactory(class0, typeAdapter2);
      System.setCurrentTimeMillis(1148L);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      gson1.toJsonTree((Object) "null");
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson1, typeAdapter1, class0);
      Class<Locale> class1 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, typeAdapter1);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      gson0.toJsonTree((Object) gson1);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      int[] intArray0 = new int[7];
      intArray0[0] = 102;
      intArray0[1] = (-2095201021);
      intArray0[2] = (-2095201021);
      intArray0[3] = (-2095201021);
      intArray0[4] = 13;
      intArray0[5] = 880;
      intArray0[6] = 92;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      URL uRL0 = MockURL.getFtpExample();
      gson0.toJsonTree((Object) uRL0);
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter1, class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, (TypeAdapter<Locale>) typeAdapterRuntimeTypeWrapper0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      Type[] typeArray0 = new Type[0];
      TypeToken.getParameterized(class0, typeArray0);
      Class<URL> class1 = URL.class;
      TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, class1);
      JsonObject jsonObject0 = new JsonObject();
      int[] intArray0 = new int[0];
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      gson0.toJsonTree((Object) mockGregorianCalendar0);
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper1 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter2, class1);
      Class<Locale> class2 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, typeAdapter2);
      Class<URI> class3 = URI.class;
      TypeToken<URI> typeToken0 = TypeToken.get(class3);
      TypeAdapter<URI> typeAdapter3 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapters.newFactoryForMultipleTypes(class3, (Class<? extends URI>) class3, (TypeAdapter<? super URI>) typeAdapter3);
      TypeToken<Class<UUID>> typeToken1 = null;
      Excluder excluder0 = gson0.excluder();
      Excluder excluder1 = excluder0.withVersion(1.0);
      Gson gson1 = new Gson();
      // Undeclared exception!
//      try { 
        excluder1.create(gson1, (TypeToken<Class<UUID>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(class0);
      Gson gson1 = new Gson();
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson1, typeAdapter0, class0);
      JsonObject jsonObject0 = new JsonObject();
      int[] intArray0 = new int[7];
      intArray0[0] = 880;
      intArray0[1] = 880;
      intArray0[2] = 880;
      intArray0[3] = 880;
      intArray0[4] = (-852);
      intArray0[5] = (-2095201021);
      intArray0[6] = 880;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      Long long0 = new Long((-2891L));
      gson0.toJsonTree((Object) long0);
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      Class<Locale> class1 = Locale.class;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper1 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson1, typeAdapter2, class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Locale>) typeAdapterRuntimeTypeWrapper1);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      Excluder excluder0 = new Excluder();
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      excluder0.disableInnerClassSerialization();
      Class<Byte> class1 = Byte.TYPE;
      TypeToken.get(class1);
      JsonArray jsonArray0 = new JsonArray();
      Locale locale0 = Locale.CANADA_FRENCH;
      Class<Object> class2 = Object.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<?>) class0, (TypeAdapter<? super Object>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      gson0.toJsonTree((Object) inetAddress0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapters.newFactory(class0, typeAdapter0);
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter2, class0);
      StringReader stringReader0 = new StringReader("gH_");
      PipedReader pipedReader0 = null;
//      try {
        pipedReader0 = new PipedReader((-1883));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pipe size <= 0
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      gson0.toJsonTree((Object) inetAddress0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapters.newFactory(class0, typeAdapter0);
      Class<MockCalendar> class1 = MockCalendar.class;
      TypeToken<MockCalendar> typeToken0 = TypeToken.get(class1);
      ObjectConstructor<MockCalendar> objectConstructor0 = (ObjectConstructor<MockCalendar>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<MockCalendar> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<MockCalendar>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<MockCalendar>) reflectiveTypeAdapterFactory_Adapter0);
      Class<StringBuffer> class2 = StringBuffer.class;
      TypeToken<StringBuffer> typeToken1 = TypeToken.get(class2);
      JsonSerializer<StringBuffer> jsonSerializer0 = (JsonSerializer<StringBuffer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<StringBuffer> treeTypeAdapter0 = new TreeTypeAdapter<StringBuffer>(jsonSerializer0, (JsonDeserializer<StringBuffer>) null, gson0, typeToken1, typeAdapterFactory0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken1, (TypeAdapter<StringBuffer>) treeTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectConstructor<MockCalendar> objectConstructor0 = (ObjectConstructor<MockCalendar>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      excluder0.excludeFieldsWithoutExposeAnnotation();
      Excluder excluder1 = excluder0.withVersion(743.3573922707002);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("'BRY';");
      JsonSerializer<URL> jsonSerializer0 = (JsonSerializer<URL>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<URL> jsonDeserializer0 = (JsonDeserializer<URL>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      TreeTypeAdapter<URL> treeTypeAdapter0 = new TreeTypeAdapter<URL>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, excluder1);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, treeTypeAdapter0, class0);
      typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonPrimitive0);
      Class<URL> class1 = URL.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends URL>) class1, (TypeAdapter<? super URL>) treeTypeAdapter0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<URL>) treeTypeAdapter0);
      Excluder excluder2 = new Excluder();
      Class<Locale> class2 = Locale.class;
      TypeAdapter<Locale> typeAdapter0 = gson0.getAdapter(class2);
      TypeToken.getArray(class0);
      Class<Float> class3 = Float.TYPE;
      Class<Locale> class4 = Locale.class;
      TypeAdapters.newFactory(class4, typeAdapter0);
      Class<Byte> class5 = Byte.class;
      Gson gson1 = new Gson();
      gson1.getAdapter(class5);
      Class<Byte> class6 = Byte.class;
      TypeToken<Byte> typeToken1 = TypeToken.get(class6);
      TypeAdapter<Byte> typeAdapter1 = gson0.getDelegateAdapter(typeAdapterFactory1, typeToken1);
      TypeAdapters.newFactory(class6, typeAdapter1);
      Class<JsonObject> class7 = JsonObject.class;
      ObjectConstructor<JsonObject> objectConstructor1 = (ObjectConstructor<JsonObject>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<JsonObject> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<JsonObject>(objectConstructor1, hashMap0);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class7, (TypeAdapter<JsonObject>) reflectiveTypeAdapterFactory_Adapter0);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      MockURL.getFileExample();
      MockUUID.randomUUID();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("W~g.");
      Class<JsonObject> class0 = JsonObject.class;
//      try { 
        gson0.fromJson("W~g.", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      Type[] typeArray0 = new Type[0];
      TypeToken.getParameterized(class0, typeArray0);
      Class<URL> class1 = URL.class;
      TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, class0);
      JsonObject jsonObject0 = new JsonObject();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-852);
      intArray0[2] = 880;
      intArray0[3] = (-2095201021);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      gson0.toJsonTree((Object) atomicIntegerArray0);
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      Class<Locale> class2 = Locale.class;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper1 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter1, class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, (TypeAdapter<Locale>) typeAdapterRuntimeTypeWrapper1);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      TypeToken.get(class0);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("KX");
      gson0.toJson((Object) jsonPrimitive0);
      Gson gson1 = new Gson();
      // Undeclared exception!
//      try { 
        gson1.toJsonTree((Object) gson0, (Type) class0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<Object> class0 = Object.class;
      TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.TIMESTAMP_FACTORY;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Gson gson1 = new Gson();
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>((Gson) null, typeAdapter1, class0);
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
//      try { 
        typeAdapterRuntimeTypeWrapper0.read(jsonReader0);
//        fail("Expecting exception: EOFException");
      
//      } catch(EOFException e) {
//         //
//         // End of input at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.BYTE_FACTORY;
      Class<URL> class1 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class1);
      TypeAdapter<URL> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class1;
      typeArray0[8] = (Type) class0;
      TypeToken.getParameterized(class1, typeArray0);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, class0);
      JsonObject jsonObject0 = new JsonObject();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("'BRY';");
      typeToken0.equals(jsonPrimitive0);
      // Undeclared exception!
//      try { 
        typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonPrimitive0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.net.MalformedURLException: no protocol: 'BRY';
//         //
//         verifyException("com.google.gson.TypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      TypeToken.get(class0);
      JsonArray jsonArray0 = new JsonArray();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Gson gson1 = new Gson();
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("+T|W9mh34q", "84U&x$%P+@]T)0ghm`L");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      // Undeclared exception!
//      try { 
        gson1.toJson(object0, (Type) class0, (Appendable) outputStreamWriter0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      Gson gson0 = new Gson();
      Class<JsonPrimitive> class1 = JsonPrimitive.class;
      TypeToken.get(class1);
      Gson gson1 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Excluder excluder1 = excluder0.withExclusionStrategy((ExclusionStrategy) null, false, true);
      excluder1.withVersion((-1429.7196012791967));
      TypeToken<Locale> typeToken0 = null;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(")>");
      gson0.toJson((JsonElement) jsonPrimitive0);
      Class<Byte> class2 = Byte.class;
      // Undeclared exception!
//      try { 
        excluder1.excludeClass(class2, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      int[] intArray0 = new int[4];
      intArray0[0] = (-164);
      intArray0[1] = 0;
      intArray0[2] = 97;
      intArray0[3] = 84;
      Excluder excluder2 = excluder1.withModifiers(intArray0);
      excluder2.disableInnerClassSerialization();
      Class<Byte> class1 = Byte.class;
      TypeToken.get(class1);
      excluder2.excludeFieldsWithoutExposeAnnotation();
      JsonArray jsonArray0 = new JsonArray();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Gson gson1 = new Gson();
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter0, class0);
      Locale locale0 = Locale.CANADA_FRENCH;
      typeAdapterRuntimeTypeWrapper0.toJson(locale0);
      Class<Locale> class2 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      ObjectConstructor<MockCalendar> objectConstructor0 = (ObjectConstructor<MockCalendar>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<MockCalendar> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<MockCalendar>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<MockCalendar>) reflectiveTypeAdapterFactory_Adapter0);
      Excluder excluder0 = new Excluder();
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      excluder0.withExclusionStrategy(exclusionStrategy0, true, true);
      Class<Byte> class1 = Byte.class;
      TypeToken.get(class1);
      excluder0.excludeFieldsWithoutExposeAnnotation();
      TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super MockCalendar>) null);
      JsonArray jsonArray0 = new JsonArray();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Gson gson0 = new Gson();
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter0, class1);
      Locale locale0 = Locale.CANADA_FRENCH;
      typeAdapterRuntimeTypeWrapper0.toJson(locale0);
      Class<Locale> class2 = Locale.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class2, (TypeAdapter<Locale>) typeAdapterRuntimeTypeWrapper0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      ObjectConstructor<MockCalendar> objectConstructor0 = (ObjectConstructor<MockCalendar>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      // Undeclared exception!
//      try { 
        gson0.toJsonTree((Object) objectConstructor0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Attempted to serialize java.lang.Class: com.google.gson.internal.ObjectConstructor. Forgot to register a type adapter?
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      Gson gson0 = new Gson();
      Class<JsonPrimitive> class1 = JsonPrimitive.class;
      TypeToken.get(class1);
      Gson gson1 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      gson0.toJsonTree((Object) gson1);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson1, typeAdapter1, class0);
      Class<Locale> class2 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, (TypeAdapter<Locale>) typeAdapterRuntimeTypeWrapper0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      Class<InetAddress> class1 = InetAddress.class;
//      try { 
        gson0.fromJson("YV%C{~Dr$s}f7TpfUZ,", class1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      ObjectConstructor<MockCalendar> objectConstructor0 = (ObjectConstructor<MockCalendar>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<MockCalendar> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<MockCalendar>(objectConstructor0, hashMap0);
      TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<MockCalendar>) reflectiveTypeAdapterFactory_Adapter0);
      Excluder excluder0 = new Excluder();
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      excluder0.withExclusionStrategy(exclusionStrategy0, true, true);
      Class<Byte> class1 = Byte.class;
      TypeToken.get(class1);
      excluder0.excludeFieldsWithoutExposeAnnotation();
      TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super MockCalendar>) null);
      Class<Integer> class2 = Integer.class;
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
//      try { 
        jsonArray0.getAsJsonObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Not a JSON Object: []
//         //
//         verifyException("com.google.gson.JsonElement", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson1);
      int[] intArray0 = new int[8];
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      MockURL.getHttpExample();
      gson1.toJsonTree((Object) jsonElement0);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapters.newFactory(class0, typeAdapter0);
      Random.setNextRandom(7);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.entrySet();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(44);
      gson0.toJson((JsonElement) jsonObject0, (Appendable) charArrayWriter0);
      Class<Object> class1 = Object.class;
      TypeToken.get(class1);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter0, class0);
      Class<Locale> class2 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, (TypeAdapter<Locale>) typeAdapterRuntimeTypeWrapper0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<URI> class0 = URI.class;
      Class<URI> class1 = URI.class;
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      Class<Object> class2 = Object.class;
      JsonObject jsonObject0 = new JsonObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      gson0.toJson((JsonElement) jsonObject0, (Appendable) charArrayWriter0);
      TypeToken<Object> typeToken0 = TypeToken.get(class2);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.TIMESTAMP_FACTORY;
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class2;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class2;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class2;
      TypeToken.getParameterized(class2, typeArray0);
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      TypeAdapters.newFactory(class0, class1, (TypeAdapter<? super URI>) treeTypeAdapter0);
      Class<JsonArray> class3 = JsonArray.class;
      Class<Object> class4 = Object.class;
//      try { 
        gson0.fromJson("mcD1QA_@n]WMT]wt", class4);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 11 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3);
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
//      try { 
        jsonArray0.getAsJsonObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Not a JSON Object: []
//         //
//         verifyException("com.google.gson.JsonElement", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      Character character0 = new Character('9');
      int int0 = 1857;
      StringBuilder stringBuilder0 = new StringBuilder(1857);
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, '(');
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      StringBuilder stringBuilder3 = stringBuilder2.append((long) 0);
      stringBuilder3.reverse();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuilder1.appendCodePoint(1857);
      gson0.toString();
      StringBuilder stringBuilder4 = stringBuilder3.append(stringBuffer0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
//      try { 
        stringBuilder4.insert(58, (CharSequence) charBuffer0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // dstOffset 58
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<Object>) null);
      Class<Byte> class1 = Byte.class;
      TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends Byte>) class1, (TypeAdapter<? super Byte>) null);
      Class<StringBuilder> class2 = StringBuilder.class;
      ObjectConstructor<StringBuilder> objectConstructor0 = (ObjectConstructor<StringBuilder>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<StringBuilder> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<StringBuilder>(objectConstructor0, hashMap0);
      StringBuilder stringBuilder0 = new StringBuilder(600);
      StringBuilder stringBuilder1 = stringBuilder0.append("com.google.gson.internal.bind.ArrayTypeAdapter");
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) typeAdapterFactory0);
      // Undeclared exception!
//      try { 
        stringBuilder2.insert(600, (double) 600);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 600
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      gson1.toString();
      gson0.toJsonTree((Object) gson1);
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapter<Locale> typeAdapter1 = TypeAdapters.LOCALE;
      Class<Locale> class0 = Locale.class;
      TypeAdapters.newFactory(class0, typeAdapter0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.BYTE_FACTORY;
      Class<URL> class1 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class1);
      TypeAdapter<URL> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class1;
      typeArray0[8] = (Type) class0;
      TypeToken.getParameterized(class1, typeArray0);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, class0);
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.get("'BRY';");
      typeToken0.equals((Object) null);
      // Undeclared exception!
//      try { 
        typeAdapterRuntimeTypeWrapper0.fromJsonTree((JsonElement) null);
//        fail("Expecting exception: AssertionError");
      
//      } catch(AssertionError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) typeAdapter0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L\"n(R");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Locale locale0 = Locale.KOREAN;
      String string0 = "yOv[WS:>3P]cSaS";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) jsonElement0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "L\"n(R";
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "yOv[WS:>3P]cSaS", objectArray0);
      gson0.toJson(jsonElement0, (Appendable) printStream0);
      Class<InetAddress> class1 = InetAddress.class;
//      try { 
        gson0.fromJson("YV%C{~Dr$s}f7TpfUZ,", class1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      Class<Currency> class0 = Currency.class;
      gson0.getAdapter(class0);
      jsonObject0.getAsJsonPrimitive("null");
      gson0.toJson((JsonElement) null, (Appendable) charArrayWriter0);
      Class<Object> class1 = Object.class;
      Class<Object> class2 = Object.class;
      TypeToken.get(class2);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.TIMESTAMP_FACTORY;
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter0, class1);
      Class<Locale> class3 = Locale.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class3, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Boolean> class1 = Boolean.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Boolean>) class1, (TypeAdapter<? super Boolean>) null);
      Class<MockCalendar> class2 = MockCalendar.class;
      ObjectConstructor<MockCalendar> objectConstructor0 = (ObjectConstructor<MockCalendar>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<MockCalendar> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<MockCalendar>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class2, (TypeAdapter<MockCalendar>) reflectiveTypeAdapterFactory_Adapter0);
      Class<Byte> class3 = Byte.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(exclusionStrategy0).shouldSkipClass(any(java.lang.Class.class));
      Excluder excluder1 = excluder0.withExclusionStrategy(exclusionStrategy0, true, true);
      Class<Byte> class4 = Byte.class;
      TypeToken<Byte> typeToken0 = TypeToken.get(class4);
      excluder0.excludeFieldsWithoutExposeAnnotation();
      excluder1.create(gson0, typeToken0);
      TypeAdapterRuntimeTypeWrapper<Byte> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Byte>(gson0, (TypeAdapter<Byte>) null, class1);
      TypeAdapters.newFactory(class3, (TypeAdapter<Byte>) typeAdapterRuntimeTypeWrapper0);
      TypeAdapters.newFactory(class2, class2, (TypeAdapter<? super MockCalendar>) null);
      Class<Integer> class5 = Integer.class;
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((JsonElement) null).when(jsonSerializer0).serialize(anyInt() , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonSerializationContext.class));
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TypeToken<Integer> typeToken1 = TypeToken.get(class5);
      TypeToken.getArray(class3);
      TreeTypeAdapter<Integer> treeTypeAdapter0 = new TreeTypeAdapter<Integer>(jsonSerializer0, jsonDeserializer0, gson0, typeToken1, typeAdapterFactory0);
      Integer integer0 = new Integer((-862));
      treeTypeAdapter0.toJsonTree(integer0);
      TypeAdapters.newTypeHierarchyFactory(class5, (TypeAdapter<Integer>) treeTypeAdapter0);
      Class<Short> class6 = Short.class;
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class6, class6, (TypeAdapter<? super Short>) null);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.class;
      Gson gson0 = new Gson();
      Class<Integer> class2 = Integer.class;
      TypeAdapter<Integer> typeAdapter0 = gson0.getAdapter(class2);
      TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Integer>) class1, (TypeAdapter<? super Integer>) typeAdapter0);
      Class<MockGregorianCalendar> class3 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class4 = MockGregorianCalendar.class;
      TypeAdapter<MockGregorianCalendar> typeAdapter1 = gson0.getAdapter(class3);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class3, (Class<? extends MockGregorianCalendar>) class4, (TypeAdapter<? super MockGregorianCalendar>) typeAdapter1);
      TypeToken<Integer> typeToken0 = TypeToken.get(class2);
      gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      Float float0 = new Float((-1.0));
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
      // Undeclared exception!
//      try { 
        gson0.toJsonTree((Object) jsonPrimitive0, (Type) class2);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.google.gson.JsonPrimitive cannot be cast to java.lang.Number
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
      Class<MockCalendar> class1 = MockCalendar.class;
      JsonSerializer<MockCalendar> jsonSerializer0 = (JsonSerializer<MockCalendar>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<MockCalendar> jsonDeserializer0 = (JsonDeserializer<MockCalendar>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TypeToken<MockCalendar> typeToken1 = TypeToken.get(class1);
      TreeTypeAdapter<MockCalendar> treeTypeAdapter0 = new TreeTypeAdapter<MockCalendar>(jsonSerializer0, jsonDeserializer0, gson0, typeToken1, typeAdapterFactory0);
      TypeAdapters.newFactory(class1, (TypeAdapter<MockCalendar>) treeTypeAdapter0);
      Class<StringBuilder> class2 = StringBuilder.class;
      Class<StringBuilder> class3 = StringBuilder.class;
      TypeAdapter<StringBuilder> typeAdapter1 = TypeAdapters.STRING_BUILDER;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class2, class3, (TypeAdapter<? super StringBuilder>) typeAdapter1);
      Class<Calendar> class4 = Calendar.class;
      ObjectConstructor<Calendar> objectConstructor0 = (ObjectConstructor<Calendar>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Calendar> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Calendar>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class4, (TypeAdapter<Calendar>) reflectiveTypeAdapterFactory_Adapter0);
      TypeAdapters.newTypeHierarchyFactory(class1, (TypeAdapter<MockCalendar>) treeTypeAdapter0);
      Class<Locale> class5 = Locale.class;
      Class<Locale> class6 = Locale.class;
      TypeToken<Locale> typeToken2 = TypeToken.get(class6);
      TypeAdapter<Locale> typeAdapter2 = gson0.getDelegateAdapter(typeAdapterFactory1, typeToken2);
      TypeAdapters.newFactoryForMultipleTypes(class5, (Class<? extends Locale>) class6, (TypeAdapter<? super Locale>) typeAdapter2);
      TypeAdapters.newFactoryForMultipleTypes(class6, (Class<? extends Locale>) class6, (TypeAdapter<? super Locale>) typeAdapter2);
      Class<Currency> class7 = Currency.class;
      Class<Currency> class8 = Currency.class;
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      TypeAdapterFactory typeAdapterFactory3 = TypeAdapters.newFactoryForMultipleTypes(class7, (Class<? extends Currency>) class8, (TypeAdapter<? super Currency>) objectTypeAdapter0);
      assertFalse(typeAdapterFactory3.equals((Object)typeAdapterFactory2));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<JsonObject> class0 = JsonObject.class;
      Class<JsonObject> class1 = JsonObject.class;
      Gson gson0 = new Gson();
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, (TypeAdapter<Object>) null, class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends JsonObject>) class1, (TypeAdapter<? super JsonObject>) typeAdapterRuntimeTypeWrapper0);
      Class<JsonPrimitive> class2 = JsonPrimitive.class;
      Class<JsonPrimitive> class3 = JsonPrimitive.class;
      TypeAdapters.newFactory(class2, class3, (TypeAdapter<? super JsonPrimitive>) null);
      Class<Long> class4 = Long.class;
      TypeToken<Long> typeToken0 = TypeToken.get(class4);
      TypeAdapter<Long> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      // Undeclared exception!
//      try { 
        gson0.toJsonTree((Object) class0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Attempted to serialize java.lang.Class: java.lang.Integer. Forgot to register a type adapter?
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeAdapters.newFactory(class0, (TypeAdapter<URL>) null);
      Class<Object> class1 = Object.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      Class<Calendar> class2 = Calendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class2);
      excluder0.create(gson0, typeToken0);
      Class<Calendar> class3 = Calendar.class;
      ArrayTypeAdapter<Calendar> arrayTypeAdapter0 = new ArrayTypeAdapter<Calendar>(gson0, (TypeAdapter<Calendar>) null, class3);
//      try { 
        arrayTypeAdapter0.fromJson("o\"Wb");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      TypeAdapter<BitSet> typeAdapter0 = TypeAdapters.BIT_SET;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, typeAdapter0);
      Class<StringBuffer> class1 = StringBuffer.class;
      Gson gson0 = new Gson();
      JsonSerializer<StringBuffer> jsonSerializer0 = (JsonSerializer<StringBuffer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<StringBuffer> jsonDeserializer0 = (JsonDeserializer<StringBuffer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<StringBuffer> class2 = StringBuffer.class;
      TypeToken<StringBuffer> typeToken0 = TypeToken.get(class2);
      TreeTypeAdapter<StringBuffer> treeTypeAdapter0 = new TreeTypeAdapter<StringBuffer>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      TypeAdapterRuntimeTypeWrapper<StringBuffer> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<StringBuffer>(gson0, treeTypeAdapter0, class2);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class1, class1, (TypeAdapter<? super StringBuffer>) typeAdapterRuntimeTypeWrapper0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory((TypeToken<Calendar>) null, typeAdapter0);
      Class<StringBuffer> class1 = StringBuffer.class;
      Excluder excluder0 = gson0.excluder();
      Class<Object> class2 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class2);
      excluder0.create(gson0, typeToken0);
      TypeAdapters.newFactory(class1, class1, (TypeAdapter<? super StringBuffer>) null);
      Class<AtomicBoolean> class3 = AtomicBoolean.class;
      Class<AtomicBoolean> class4 = AtomicBoolean.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class3, class4, (TypeAdapter<? super AtomicBoolean>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Object> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      TypeAdapters.newFactory(class0, class1, (TypeAdapter<? super Object>) typeAdapter0);
      Class<JsonArray> class2 = JsonArray.class;
      TypeAdapterFactory typeAdapterFactory0 = DateTypeAdapter.FACTORY;
      Class<JsonArray> class3 = JsonArray.class;
      TypeToken<JsonArray> typeToken1 = TypeToken.get(class3);
      TypeToken.get((Type) class2);
      Short short0 = new Short((short)1916);
      typeToken1.equals(short0);
      TypeAdapter<JsonArray> typeAdapter1 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken1);
      TypeAdapters.newTypeHierarchyFactory(class2, typeAdapter1);
      Class<Calendar> class4 = Calendar.class;
      TypeToken<Calendar> typeToken2 = TypeToken.get(class4);
      Class<Calendar> class5 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter2 = gson0.getAdapter(class5);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken2, typeAdapter2);
      Class<Character> class6 = Character.class;
      excluder0.create(gson0, typeToken0);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class6, class6, (TypeAdapter<? super Character>) null);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }
}
