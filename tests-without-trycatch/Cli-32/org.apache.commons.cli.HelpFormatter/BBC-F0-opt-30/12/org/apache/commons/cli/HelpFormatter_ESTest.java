/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:37:19 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "%$D#tj'W";
      String string1 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "%$D#tj'W", "/", options0, "o@A+:y^3q");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-472);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 0;
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options2 = options1.addOption("arg", "usage: ", true, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.renderOptions(stringBuffer1, 0, options2, 0, 60);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setNewLine("line.separator");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 872);
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = 1;
      int int1 = HelpFormatter.DEFAULT_LEFT_PAD;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "fW(P", "line.separator", options0, 17, 3, "", true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2512);
      helpFormatter0.setLeftPadding((-2512));
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      helpFormatter0.setSyntaxPrefix("--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("arg", options0, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.rtrim(" ");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      helpFormatter0.setWidth(3);
      helpFormatter0.getLongOptSeparator();
      String string0 = "org.apache.commons.cli.OptionValidator";
      Options options0 = null;
      helpFormatter0.setNewLine(" ");
      String string1 = "I(zC>l5!yo;T[";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("p\"`>.@||", "org.apache.commons.cli.OptionValidator", (Options) null, "I(zC>l5!yo;T[");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp(3, "-", "\"", options0, "arg", true);
      helpFormatter0.printHelp("1~mhMCwe t'92B", "", options0, "arg");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 501;
      Options options0 = null;
      helpFormatter0.defaultWidth = 501;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 0, (Options) null, 1224, 34);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = (-993);
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "68$k00)iH~Z";
      // Undeclared exception!
//      try { 
        options0.addOption("\n", false, "68$k00)iH~Z");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(9, ")[X[b&=%", ")[X[b&=%", (Options) null, ")[X[b&=%");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1805), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.getLongOptPrefix();
      assertEquals((-1), helpFormatter0.defaultLeftPad);
      
      Options options0 = new Options();
      Option option0 = new Option((String) null, "org.apache.commons.cli.Option");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", "--", options1, "|");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getArgName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      helpFormatter0.rtrim("                                                                          ");
      helpFormatter0.rtrim("                                                                          ");
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("G", "", false, "-o-2Jl[_Z JGlA1o?\"");
      Options options3 = options2.addOption("", false, "R)bb=0XfFf!oW-~[5m");
      // Undeclared exception!
//      try { 
        options3.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "arg", "arg", options0, "arg", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, "[");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, "1E|1\"gHdlFr=V;h3*", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2512));
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      helpFormatter0.setSyntaxPrefix("--");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "--", "--", options0, "usage: ", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.defaultLeftPad = (-999);
      helpFormatter0.rtrim(">`I~NISR1K{3*Eb&.8H");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-999));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("SUKVL=T(WD$V*P");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultOptPrefix = "";
      options0.toString();
      helpFormatter0.setWidth(34);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "usage: ");
      options0.getOptionGroups();
      option0.setLongOpt("org.apache.commons.cli.Util");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1), options1, (-1), (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      MockFile mockFile0 = new MockFile("<", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      helpFormatter0.setSyntaxPrefix("<");
      helpFormatter0.setNewLine("<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((-1234), " ", "[", options0, "org.apache.commons.cli.Options");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, "[");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setWidth(2689);
      Options options0 = new Options();
      Options options1 = options0.addOption("UPomN", "arg", true, "arg");
      Option option0 = new Option("YLa", "#E{)|XD20E9vJ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("-", options2, true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[2];
      mockPrintStream0.format("t&o35C~^9nO#M", objectArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "t&o35C~^9nO#M", "]yllzjOMBKyfB", options0, 1845, 1845, "cCShR#~vh");
      helpFormatter0.setWidth(1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(", ", options0, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(16);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 16, (-1274));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      options1.addOption("", "arg", false, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append('T');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage(printWriter0, (-815), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "MF(gWT";
      Options options1 = options0.addOption("", true, ";0euyKD}`3J");
      helpFormatter0.printHelp(";0euyKD}`3J", options0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append(',');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "MF(gWT", options1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.setNewLine("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp("68G", options0);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("68G");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 42, "arg", "--", options0, 1, 7, " ", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(74, "", "YlsPEe[0Zm/", options0, "Z'\"zi/;\"UWq");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      options0.hasLongOption("The option '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.getSyntaxPrefix();
      options0.hasOption("The option '");
      mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2345, "The option '", "", options0, 13, 62, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G2-F5JHSKY-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockFileOutputStream0.close();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("21Re}W!=*&{");
      helpFormatter0.getSyntaxPrefix();
      mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 7, "\n", "--", options0, 74, 98, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("x", "\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.setNewLine("<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(0, "--", (String) null, options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.format("usage: ", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0);
      mockPrintWriter0.append('x');
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 405, "1^_8iN{@o", "1^_8iN{@o", options0, (-1455), 21, "arg");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.setOptPrefix("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter2.rtrim("[ Options: [ short ");
      helpFormatter1.createPadding(74);
      helpFormatter2.getOptPrefix();
      helpFormatter1.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter2.renderOptions(stringBuffer0, 44, options0, 1775, 74);
      Options options1 = options0.addOption("arg", true, (String) null);
      helpFormatter0.renderOptions(stringBuffer1, 74, options1, 74, 1775);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockFileOutputStream0.close();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOption("", "org.apache.commons.cli.HelpFormatter$1", true, "KrDyW_a${HB_+gP_Oj");
      helpFormatter2.printHelp(74, "usage: ", "usage: ", options1, "-", false);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("/ #:R3k8", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      MockFile mockFile0 = new MockFile("<", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      helpFormatter0.setSyntaxPrefix("<");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "[", true, "-");
      helpFormatter0.printHelp(" ", "-", options1, "-", true);
      helpFormatter0.setNewLine("<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter0.printHelp(74, " ", "\n", options2, "", true);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options2.addOption("\n", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.toString();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "h&KIel3u$p7L\"gOF(u", "arg", options0, "h&KIel3u$p7L\"gOF(u", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      PrintStream printStream0 = mockPrintStream0.format("-", (Object[]) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      MockPrintStream mockPrintStream2 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream2);
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "t&o35C~^9nO#M", "]yllzjOMBKyfB", options0, 1856, 1856, "cCShR#~vh");
      helpFormatter0.setOptPrefix("t&o35C~^9nO#M");
      Options options1 = options0.addOption("", true, (String) null);
      helpFormatter0.printHelp(printWriter0, 1856, "EY~4uFOW`/D 07X", (String) null, options1, 13, 13, "EY~4uFOW`/D 07X", true);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("#gtr<{k<~o)&Fd", options1);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.rtrim("xkaqh");
      int int1 = (-4936);
      options1.addOption("arg", "usage: ", true, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('T');
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, 1, "org.apache.commons.cli.AlreadySelectedException", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      String string0 = "]yllzjOMBKyfB";
      helpFormatter0.setNewLine("]yllzjOMBKyfB");
      Options options0 = new Options();
      int int0 = 13;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(13, "h&KIel3u$p7L\"gOF(u", "0q9`ZW'e^I<_!b]F", options0, "arg", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      helpFormatter0.setNewLine("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      mockFile0.toURI();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      Options options1 = new Options();
      helpFormatter0.printHelp("|ZD", options0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("\n");
      helpFormatter0.getOptPrefix();
      int int0 = (-4936);
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      Options options2 = options0.addOption("", "usage: ", false, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4936), "-", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-903);
      helpFormatter0.getWidth();
      String string0 = "";
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "   ");
      String string1 = "[ARG...]";
      // Undeclared exception!
//      try { 
        options0.addOption("[ARG...]", false, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[ARG...]' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "has already been selected: '");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "arg", "arg", options0, "arg", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      MockFile mockFile0 = new MockFile("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      helpFormatter0.setSyntaxPrefix("<");
      helpFormatter0.setNewLine("<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, (String) null);
      Options options2 = options1.addOption("arg", "-", false, "<");
      helpFormatter2.printHelp(" ", options2, true);
      helpFormatter2.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.getSyntaxPrefix();
      options0.hasLongOption("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, 1, 88, "NO_ARGS_ALLOWED", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintStream0;
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 3;
      Options options0 = new Options();
      int int1 = 153;
      int int2 = 2793;
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        options1.addOptionGroup((OptionGroup) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockFileOutputStream0.close();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "-", "2a-HG=no4C'X", (Options) null, (-1899), 13, "usage: ");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!FQl+EQiqBfMN|1");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3275, ">%X)");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 3275, (Options) null, 115, 21);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";\"5JHJKg-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockFileOutputStream0.close();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((-2682), "arg", "\"", (Options) null, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "G2-F5JHSKY-";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G2-F5JHSKY-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockFileOutputStream0.close();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 23, "\n", "we/N`", (Options) null, 919, 3, "we/N`");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("9od9>KI9");
      helpFormatter2.renderOptions((StringBuffer) null, (-1757), options0, 335, 335);
      Options options1 = new Options();
      helpFormatter1.printHelp("--", options1);
      helpFormatter1.getSyntaxPrefix();
      options0.hasLongOption("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 1, "", "Pl!M^fO)#tGiL@1M;", options1, 1, 1, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";\"5JHJKg-");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      mockFileOutputStream0.close();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("+Zw02Xv^dN.mg~", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("@;&@]?+A}Ef2\"VIM7`'");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.rtrim(".-sC`Pae@y");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.rtrim("*I'=5jEdd! fm'P#");
      helpFormatter0.getOptPrefix();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 1156, ".-sC`Pae@y", options0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "pDl3>TtO@c4`c*^", "\n", options0, 3, 43, "", false);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, (String) null);
      Option option0 = new Option((String) null, false, "US!X");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("US!X", "<", options0, "US!X");
      helpFormatter0.printHelp(" [ARG]", options1, true);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";\"5JHJKg-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockFileOutputStream0.close();
      StringWriter stringWriter0 = new StringWriter(2256);
      StringWriter stringWriter1 = stringWriter0.append('-');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "\n");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("--", true, "\"");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.getSyntaxPrefix();
      options0.hasLongOption("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "Bo)f'je", "usage: ", options0, 47, 0, "`o]$$aI5N!@", false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      helpFormatter0.setNewLine("~DeF*@#if");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      mockFile0.toURI();
      Options options1 = new Options();
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = ")l#/+[3z_]+vqQ+,";
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(3, ")l#/+[3z_]+vqQ+,", "arg", options1, "usage: ", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "-");
      options1.getMatchingOptions("--");
      helpFormatter0.printHelp(44, "?F>2,XHVx)o63~A,", "87CcFp", options0, "UMPy V", true);
      Option option0 = new Option("arg", false, "~DeF*@#if");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "?F>2,XHVx)o63~A,", "~DeF*@#if", options2, (-1), 1005, ":", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      helpFormatter0.setNewLine("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      mockFile0.toURI();
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "\n", "", options0, "\n", true);
      options0.addOption("", false, "usage: ");
      helpFormatter0.printHelp("wVUQ8", options0, false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      mockFile0.getCanonicalPath();
      Options options1 = options0.addOption("arg", "-", false, " ");
      helpFormatter0.printOptions(mockPrintWriter0, 13, options1, 13, 13);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      helpFormatter0.setNewLine("--");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      mockFile0.toURI();
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "\n", "", options0, "\n", true);
      options0.addOption("", false, "usage: ");
      String string0 = ">";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", ">", options0, ">");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter1.rtrim((String) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "-");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      options1.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1616), 112, "eES<S");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "usage: ";
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setOptPrefix("@;&@]?+A}Ef2\"VIM7`'");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter0.setOptPrefix((String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.createPadding(74);
      helpFormatter0.rtrim("^tRP:s:\"+9[k_9n\"");
      helpFormatter1.getSyntaxPrefix();
      helpFormatter2.rtrim("^tRP:s:\"+9[k_9n\"");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", ":*@n", options0, 0, 3, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "bGT)m !";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("@;&@]?+A}Ef2\"VIM7`'");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.rtrim(".-sC`Pae@y");
      Options options0 = new Options();
      helpFormatter1.printHelp(" ", options0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.rtrim(" ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter1.setLongOptPrefix("21zf~DqVTS_vK3P#");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "eES<S";
      Options options0 = new Options();
      String string1 = null;
      Options options1 = options0.addOption((String) null, false, "-");
      options1.getMatchingOptions("--");
      helpFormatter0.printHelp(44, "?F>2,XHVx)o63~A,", "87CcFp", options0, "UMPsy V", true);
      Option option0 = new Option("arg", false, "~DeF*@#if");
      options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("~DeF*@#if", "YP?7v@vSgy5X:Kl [*", options1, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "bGT)m !";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("@;&@]?+A}Ef2\"VIM7`'");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.rtrim(".-sC`Pae@y");
      Options options0 = new Options();
      helpFormatter1.printHelp(" ", options0);
      helpFormatter0.getSyntaxPrefix();
      options0.hasLongOption("Cz+dThlzM");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "bGT)m !");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 74, "usage: ", ".-sC`Pae@y", options0, (-1641), (-1683), "@;&@]?+A}Ef2\"VIM7`'", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "\n";
      objectArray0[6] = (Object) "\n";
      mockPrintStream0.printf(locale0, "arg", objectArray0);
      helpFormatter0.setNewLine("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      mockFile0.toURI();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("arg");
      helpFormatter0.getOptPrefix();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 1, "");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "bGT)m !";
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(31);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 31, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "\n";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("arg", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      helpFormatter0.setNewLine("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      mockFile0.toURI();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      Options options1 = new Options();
      helpFormatter0.printHelp("|.9", options0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("\n");
      helpFormatter0.getOptPrefix();
      int int0 = (-4936);
      Options options2 = options0.addOption("", "usage: ", false, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4936), "-", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(107);
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 74, "V7:clFo.yM{I)");
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("\n", options0, true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintStream0;
      helpFormatter0.setSyntaxPrefix("");
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "\n";
      objectArray0[6] = (Object) "\n";
      mockPrintStream0.printf(locale0, "arg", objectArray0);
      helpFormatter0.setNewLine("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)61;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      mockFile0.toURI();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setWidth(9);
      helpFormatter0.printHelp("\"=FMF'%sw+n/w87fHr", options0, true);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "");
      helpFormatter0.getLongOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 74, "", "--", options0, 1, 612, "usage: ", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = "0q9`ZW'e^I<_Z!b]F";
      int int0 = 34;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 34, "\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("arg");
      helpFormatter0.getLongOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.printf("\n", (Object[]) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1801, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.findWrapPos("", 1, 0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = null;
//      try {
        printWriter0 = new MockPrintWriter("-", "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      helpFormatter0.setNewLine("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      mockFile0.toURI();
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      helpFormatter0.setNewLine("");
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0);
      bufferedOutputStream0.flush();
      BufferedOutputStream bufferedOutputStream2 = new BufferedOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(bufferedOutputStream2, false);
      mockFile0.toURI();
      Options options1 = new Options();
      helpFormatter0.setSyntaxPrefix("eX0xe");
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(146, "", "line.separator", options0, "arg", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(61, "i=a", "u_UW O5@", options0, "AP.*8Q`y7H 7U`C%");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      helpFormatter0.setNewLine("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      int int0 = (-726);
      mockFile0.toURI();
      Options options1 = new Options();
      int int1 = 13;
      boolean boolean0 = true;
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0);
      OutputStream outputStream0 = null;
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) "arg", 1, 1918);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      objectArray0[2] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockFileOutputStream0;
      objectArray0[7] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("_x>wBk(MH,iH-gLp.L", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1049), 31, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-702), "d#1%+I!aK[BwY0,Z|E", "", options0, 2, 74, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 112, "org.apache.commons.cli.OptionValidator", "we/N`", options0, 112, 0, "we/N`");
      helpFormatter0.setSyntaxPrefix("we/N`");
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(13, "we/N`", "org.apache.commons.cli.AlreadySelectedException", options0, "we/N`", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 112, "org.apache.commons.cli.OptionValidator", "we/N`", options0, 112, 0, "we/N`");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "");
      options0.hasLongOption("\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      helpFormatter0.setNewLine("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      mockFile0.toURI();
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "\n", "", options0, "\n", true);
      Options options1 = options0.addOption("", false, "usage: ");
      helpFormatter0.printHelp("ry7h^", "&VeUdc&QW^w1xY2-?+", options0, (String) null, true);
      // Undeclared exception!
//      try { 
        options1.addOption("I((/n*", (String) null, true, "E>9h@g:8Tma`w");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'I((/n*' contains an illegal character : '('
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      helpFormatter0.setNewLine("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, true);
      helpFormatter0.setLeftPadding(0);
      String string0 = "";
      Options options1 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option(" ", " ", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 112, "org.apache.commons.cli.OptionValidator", "we/N`", options0, 112, 0, "we/N`");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setWidth(1072);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "\n";
      objectArray0[6] = (Object) "\n";
      mockPrintStream0.printf(locale0, "arg", objectArray0);
      helpFormatter0.setNewLine("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      mockFile0.toURI();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.printHelp(13, "\n", "", options0, "\n", true);
      Options options1 = options0.addOption("", false, "\n");
      // Undeclared exception!
//      try { 
        options1.addOption("I((/n*", (String) null, true, "E>9h@g:8Tma`w");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'I((/n*' contains an illegal character : '('
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "bGT)m !";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("@;&@]?+A}Ef2\"VIM7`'");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.rtrim(".-sC`Pae@y");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("line.separator", "--", (Options) null, "arg", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "-");
      options1.getMatchingOptions("--");
      helpFormatter0.printHelp(44, "?F>2,XHVx)o63~A,", "87CcFp", options0, "UMPy V", true);
      Option option0 = new Option("arg", false, "~DeF*@#if");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1), options1, (-2), (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      helpFormatter0.setNewLine("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      mockFile0.toURI();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.printHelp(13, "\n", "", options0, "\n", true);
      options0.addOption("", false, "usage: ");
      helpFormatter0.findWrapPos("\n", 13, (-726));
      OutputStream outputStream0 = null;
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream((OutputStream) null);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream1 = null;
//      try {
        mockPrintStream1 = new MockPrintStream((OutputStream) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Null output stream
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setNewLine("line.separator");
      helpFormatter0.setDescPadding(872);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      URI uRI0 = MockURI.create("arg");
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile(uRI1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URI is not absolute
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Pii?V[B'AiNt[a7";
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("-", "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "org.apache.commons.cli.HelpFormatter", true, "`nFk(yxNJ4`9+^UG/");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options1, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, "", "]", options0, 0, (-778), "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-950));
      assertEquals((-950), helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      helpFormatter0.setNewLine("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      mockFile0.toURI();
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "\n", "", options0, "\n", true);
      Options options1 = options0.addOption("", false, "usage: ");
      Option option0 = new Option("", "arg");
      options0.addOption(option0);
      helpFormatter0.printHelp("`dgZD9y{S_", options1);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("E>9h@g:8Tma`w");
      helpFormatter0.getOptPrefix();
      assertEquals("", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "bGT)m !";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("@;&@]?+A}Ef2\"VIM7`'");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1527), options2, 128, 128);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("--");
      Options options1 = new Options();
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      String string0 = "";
      MockFile mockFile0 = new MockFile("", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      helpFormatter0.setNewLine("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      int int0 = (-726);
      String string1 = null;
      mockFile0.toURI();
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "\n", "", options0, "\n", true);
      Options options1 = options0.addOption("", false, "usage: ");
      // Undeclared exception!
//      try { 
        options1.addOption("I((/n*", (String) null, true, "E>9h@g:8Tma`w");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'I((/n*' contains an illegal character : '('
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "bGT)m !";
      helpFormatter0.setOptPrefix("@;&@]?+A}Ef2\"VIM7`'");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.rtrim(".-sC`Pae@y");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 3, options0, 153, 3);
      Options options1 = options0.addOption("arg", true, "arg");
      helpFormatter0.renderOptions(stringBuffer1, 153, options1, 3903, 21);
      assertEquals("bGT)m !", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ";\"5JHJKg-";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";\"5JHJKg-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockFileOutputStream0.close();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2, "\n", "we/N`", (Options) null, 919, 3, "we/N`");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("l3:}0#v(Opb", 0, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setNewLine("line.separator");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 872);
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = 1;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("l3:}0#v(Opb", 1, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("iAc*.e_F0 -%");
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(3);
      String string0 = "MIG6i7P$<|@";
      Options options0 = new Options();
      String string1 = " ";
      boolean boolean0 = true;
      String string2 = "";
      // Undeclared exception!
//      try { 
        options0.addOption(" ", "CO4y", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("_>QSKRxz|:~43");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.write(0);
      mockPrintWriter0.print((-5228L));
      mockPrintWriter0.println((-1424.2417F));
      int int0 = (-93);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-93), (-93), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "azd(";
      helpFormatter0.defaultNewLine = "azd(";
      helpFormatter0.getLongOptSeparator();
      String string1 = "l<u+<rLg%Zc<:=t@Q-";
      helpFormatter0.rtrim("l<u+<rLg%Zc<:=t@Q-");
      Options options0 = new Options();
      String string2 = "";
      Option option0 = new Option("", false, "nl*<YG\"Yr^nKeR }D:.");
      Options options1 = options0.addOption(option0);
      String string3 = "";
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options1.addOption("nl*<YG\"Yr^nKeR }D:.", false, "RW");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'nl*<YG\"Yr^nKeR }D:.' contains an illegal character : '*'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 13;
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "eES<S";
      Options options0 = new Options();
      String string1 = null;
      Options options1 = options0.addOption((String) null, false, "-");
      Option option0 = new Option("arg", false, "~DeF*@#if");
      options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("~DeF*@#if", "YP?7v@vSgy5X:Kl [*", options1, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "iHX'yHf\\ug3 a;}1)3";
      helpFormatter0.setOptPrefix(string0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      PrintWriter printWriter0 = null;
      String string0 = null;
      int int0 = (-2956);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("--", true, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 13;
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setNewLine("");
      int int0 = (-183);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-183));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = ":YrJuO)9'k444YhJx";
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "@GOa";
      options0.addOption("arg", true, (String) null);
      Option option0 = null;
//      try {
        option0 = new Option(" ", "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
