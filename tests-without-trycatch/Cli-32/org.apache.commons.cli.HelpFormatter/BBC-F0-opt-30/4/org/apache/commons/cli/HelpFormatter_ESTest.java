/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:01:02 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "BX}KtEb-=", true, "Y(SLnCx_C$Bc");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9fJSWl}?M7BJld");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1620), "BX}KtEb-=", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = 0;
      helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 3;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      mockPrintWriter0.append((CharSequence) "\n");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.close();
      helpFormatter0.renderWrappedText(stringBuffer0, 1146, 1146, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "=RXt`~,s";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("=RXt`~,s", options0, false);
      helpFormatter0.rtrim("=RXt`~,s");
      helpFormatter0.getLongOptSeparator();
      int int0 = (-659);
      helpFormatter0.defaultWidth = (-659);
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      int int1 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setLeftPadding(63);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      String string0 = " ";
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("arg", "arg", false, "");
      Option option0 = null;
//      try {
        option0 = new Option(">", "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '>'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("V4GBY9Vqr,8<}OZj");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding((-1557));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("V4GBY9Vqr,8<}OZj", "", options0, "cmdLineSyntax not provided", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 84, options0, 44, 1754);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      String string1 = "UasG";
//      try { 
        MockURI.URI("UasG", "", "--");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Expected scheme-specific part at index 5: UasG:#--
//         //
//         verifyException("java.net.URI$Parser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "J";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 48, "zgHpG");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Option option1 = new Option("arg", "-", true, "\n");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup2);
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(32, "7", "7", options0, "", true);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 22, "[ option: ", (String) null, options0, 0, 188, (String) null, true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("arg");
      options0.addOption("", false, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFile0.getCanonicalPath();
      mockPrintWriter0.print("usage: ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-4246), "-", "-", (Options) null, "-", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg");
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      options0.addOption(option0);
      helpFormatter0.printHelp(32, "7", "7", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg");
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption(option0);
      MockFile mockFile0 = new MockFile((File) null, "jeyqmkR");
      File file0 = MockFile.createTempFile("jeyqmkR", " ", (File) mockFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "-p.Gb&OW";
      objectArray0[5] = (Object) options1;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-p.Gb&OW", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-2), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      Option option0 = new Option("", (String) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      helpFormatter0.printHelp(32, "7", "", options2, "", true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("Yw~}eVr'%~h", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 10;
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, "Yw~}eVr'%~h");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "-";
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(855, "0-b?|", "0-b?|", (Options) null, " | ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.defaultWidth = 400;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption((String) null, false, "usage: ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\\');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 400, 3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg");
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(32, "7", "7", options0, "", true);
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = new Locale("Gs}DO5Fu$&U;|\"e+_");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) optionGroup0;
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "dTD*;hJI=G", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-4908), "usage: ", "org.apache.commons.cli.OptionValidator", options1, (-1107), 32, "--");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 22, "[ option: ", "", options0, 22, 22, "", false);
      helpFormatter0.createPadding(103);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "");
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("+DRA", "+DRA", (Options) null, "+DRA");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 22;
      Options options0 = new Options();
      options0.addOption("arg", true, " ");
      MockFile mockFile0 = new MockFile("Zc)mxO{.#b2", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1767, (String) null, "", options0, 234, 22, "Yzi79V:N4O", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "sR6";
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1), " | ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.addOption(option0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) "\u0000J[=)hIA&/%~";
      objectArray0[4] = (Object) optionGroup1;
      objectArray0[5] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 22, "\u0000J[=)hIA&/%~", "", options0, (-1), 574, "\u0000J[=)hIA&/%~");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("5Ai");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      Options options0 = new Options();
      Option option0 = new Option("", (String) null, false, "F84GT|2TeY;@yen<");
      Options options1 = options0.addOption((String) null, true, "arg");
      helpFormatter0.printHelp(printWriter0, 1456, "F84GT|2TeY;@yen<", (String) null, options1, 103, 45, "", false);
      helpFormatter0.createPadding(45);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.defaultWidth = 400;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption((String) null, false, "usage: ");
      MockFile mockFile0 = new MockFile("-", " ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFile0.getCanonicalPath();
      mockPrintWriter0.print("\n");
      helpFormatter0.createPadding(400);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3854), "                                                                                                                                                                                                                                                                                                                                                                                                                ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("--", " ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      int int0 = (-25);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-25), (-25), "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.append((CharSequence) "\n");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, ", ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 522, "R7mir& Q7!G", ".'P.k`wcxgUDcpTD", options1, 1015, 2075, "[", true);
      helpFormatter0.createPadding(2631);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(1015);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.defaultWidth = 400;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "usage: ");
      MockFile mockFile0 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFile0.getCanonicalPath();
      mockPrintWriter0.print("\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 400, " ", options0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2240, "", "\n", options1, 400, 400, "/experiment/-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.addOption((String) null, false, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("F&?$pBlfu)COX8");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1341, "--", (String) null, options0, 1341, (-2383), "F&?$pBlfu)COX8", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-4246);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      int int1 = 13;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "KexH7L@fJt", "", (Options) null, 21, (-4246), "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.append((CharSequence) "\n");
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", (String) null, false, "F84GT|2TeY;@yen<");
      Options options1 = options0.addOption(option0);
      options1.addOption("", false, " :: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "1k/^\" UY,={c}(", "zndZaD", options1, (-1), 1767, "   ", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("g5s72");
      MockFile mockFile1 = new MockFile("arg", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile1;
      objectArray0[1] = (Object) mockFile1;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFile1;
      objectArray0[4] = (Object) mockPrintWriter0;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "(cy%e$LG%w2?");
      StringBuffer stringBuffer0 = new StringBuffer(400);
      helpFormatter0.renderOptions(stringBuffer0, 400, options1, 400, 400);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 400, 400, "0Ii`O}NH`Sqwmo%vJ");
      helpFormatter0.setLeftPadding(1020);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.defaultWidth = 400;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("-", " ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFile0.getCanonicalPath();
      mockPrintWriter0.print("\n");
      mockFileOutputStream0.flush();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 25, "-", "6nb1jy6wsL2h?", options0, 1, 54, "JO");
      helpFormatter1.defaultLeftPad = 1967;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 25, "[ARG...]");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      String string0 = "";
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setOptionalArg(true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "--", "arg", options0, (-2), 3, "usage: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-740);
      PrintWriter printWriter0 = null;
      int int1 = 42;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "[";
      String string1 = "R7mir& Q7!G";
      Options options0 = new Options();
      String string2 = null;
      boolean boolean0 = true;
      String string3 = "w2ArhVtmH.e&]";
      Options options1 = options0.addOption((String) null, true, "w2ArhVtmH.e&]");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-740), options1, 42, 2548);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("g5s72");
      MockFile mockFile1 = new MockFile("arg", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile1;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFile1;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "A0 eqb[";
      objectArray0[6] = (Object) "g5s72";
      int int0 = (-2);
      helpFormatter0.setWidth((-2));
      PrintWriter printWriter0 = mockPrintWriter0.format("A0 eqb[", objectArray0);
      helpFormatter0.printUsage(printWriter0, 9, "org.apache.commons.cli.HelpFormatter");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(31);
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption(" ", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-740);
      Options options0 = new Options();
      String string0 = "w2ArhVtmH.e&]";
      Options options1 = options0.addOption((String) null, true, "w2ArhVtmH.e&]");
      options1.addOption("arg", (String) null, true, " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1053), "[", "R7mir& Q7!G", options1, (-1053), (-1053), (String) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      String string0 = "\"g&Xbv>qPx6ZQ>INA-";
      options0.addOption("", true, "arg");
      options0.addOption("", true, "");
      String string1 = "";
      int int0 = 2;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2132, "2T;/", "", options0, 2132, 2, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption("", true, "D^7_38m&Lc?Ud");
      String string0 = "";
      MockFile mockFile0 = new MockFile("-", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.print("gW8");
      mockFileOutputStream0.flush();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1315), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 400;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "usage: ");
      File file0 = MockFile.createTempFile("y{cwth", "y{cwth");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintStream0.printf(locale0, "Illegal option name '", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, " ");
      Option option1 = new Option("", (String) null);
      optionGroup0.addOption(option1);
      Options options2 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      options1.addOption(option1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" | ", "", options1, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile(";O{qb");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultWidth = 400;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption((String) null, false, "usage: ");
      MockFile mockFile0 = new MockFile("-", " ");
      options0.getOption(" ");
      File file0 = MockFile.createTempFile("*v<tqflY2ml?XL", "arg", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.print("");
      mockFileOutputStream0.flush();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 400, "' contains an illegal character : '", options0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLeftPadding((-12));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", "", options0, "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-740);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "w2ArhVtmH.e&]");
      options1.addOption((String) null, false, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1053), "[", "R7mir& Q7!G", options1, (-1053), (-1053), (String) null, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      helpFormatter0.setArgName("5=NCW/}9C-p|#");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      mockPrintStream0.printf(locale0, "--", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      OptionGroup optionGroup0 = new OptionGroup();
      Object object0 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 1, (-854), "A CloneNotSupportedException was thrown: ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1361));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "/&AJVofn?LS=");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", true, "");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("88b }Z^}", options3, true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string0 = "arg";
      helpFormatter0.renderWrappedText(stringBuffer0, 58, 1974, "arg");
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("arg", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("");
      options0.addOption("NQZWaRMD", false, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFile0.getCanonicalPath();
      helpFormatter0.createPadding(31);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "pR{`4%|x9|D`");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, (-2), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = helpFormatter0.defaultWidth;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      mockPrintWriter0.append((CharSequence) "\n");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.close();
      helpFormatter0.renderWrappedText(stringBuffer0, 2012, 2012, ", ");
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-740);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "w2ArhVtmH.e&]");
      options1.addOption((String) null, true, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1053), "", "R7mir& Q7!G", options1, (-1053), (-1053), (String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", (Options) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedInputStream pipedInputStream0 = new PipedInputStream(74);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      dataOutputStream0.writeFloat(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) "[";
      objectArray0[4] = (Object) dataOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 207, 14, "   ");
      helpFormatter0.setLeftPadding(207);
      helpFormatter0.setDescPadding(0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "ATH ;TVI~d$");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption(option0);
      helpFormatter1.printHelp(84, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "--", options0, "", false);
      helpFormatter1.rtrim("");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = helpFormatter0.defaultWidth;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      mockPrintWriter0.append((CharSequence) "\n");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.close();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 2012, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(32);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 32, " !(TcIlUn");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      String string0 = "";
      helpFormatter0.printUsage(printWriter0, 74, "");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, " ");
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
//      try {
        option0 = new Option("'", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '''
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "-", "-", options2, (String) null);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-740);
      String string0 = "[";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "w2ArhVtmH.e&]");
      options1.addOption((String) null, true, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1053), "[", "R7mir& Q7!G", options1, (-1053), (-1053), (String) null, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultWidth = 400;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", ",OKn6TnLu:1N");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1491), "E6vo.h}2Z", "", options1, ",OKn6TnLu:1N", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1053);
      Options options0 = new Options();
      options0.addOption((String) null, true, "w2ArhVtmH.e&]");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "w2ArhVtmH.e&]");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 50, (-1053), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-37);
      byteArray0[8] = (byte) (-26);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultDescPad = (int) (byte)1;
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.print(true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("g5s72");
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("g5s72", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "sR6";
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "t.R./- 1~1CxURCwi", "t.R./- 1~1CxURCwi", options0, "sR6", true);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 508;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      helpFormatter0.setArgName("#gP");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "L ", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "line.separator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(",OKn6TnLu:1N", ",OKn6TnLu:1N", options2, (String) null, true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("line.separator", 508, 1279);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultWidth = 400;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption((String) null, false, "usage: ");
      MockFile mockFile0 = new MockFile("-", " ");
      options0.getOption(" ");
      File file0 = MockFile.createTempFile("*v<tqflY2ml?XL", "arg", (File) mockFile0);
      mockFile0.setExecutable(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.print("");
      mockFileOutputStream0.flush();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 400, "' contains an illegal character : '", options0);
      helpFormatter0.setLeftPadding(9);
      helpFormatter0.printHelp(" ", "", options0, "");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(22);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, 7, " !(TcIlUn");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 37, 9, "iA~/%S ]");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setNewLine("*!,atK!~q1B/F");
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Yoi_\"EH+dw,VW", "*!,atK!~q1B/F", options0, "-");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.rtrim("))BEOy35O`a;");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", (-1277), (-2771));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultWidth = 400;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, (-1440), options0, 10, 404);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 404, 0, "");
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer2, (-422), 3, "usage: ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 22, 1974, "");
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1974, "", "z_NiH'JULU;et", options0, "--", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      String string0 = "";
      Options options0 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "";
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "", "", options1, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 63;
      String string0 = "'";
      String string1 = "";
      Options options0 = new Options();
      Option option0 = new Option("", "]");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "/'", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(63, "'", "", options3, "/'");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Null output stream
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = null;
      int int0 = 1;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1312, (Options) null, 1312, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("*!,atK!~q1B/F");
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.findWrapPos("4PF`1$F<x1T", 1312, 0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "sR6";
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 2012, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.rtrim("");
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
//      try { 
        MockURI.resolve(uRI0, "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal character in path at index 0: 
//         //
//         verifyException("java.net.URI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "";
      Options options0 = new Options();
      String string1 = " ";
      String string2 = "";
      // Undeclared exception!
//      try { 
        options0.addOption("-", " ", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 660;
      helpFormatter0.defaultNewLine = "";
      StringBuffer stringBuffer0 = new StringBuffer("'");
      stringBuffer0.replace(1, 1, "\"w/D/EE%:S_BMR6Y]");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 660, 660, ",PmS*@}DlbRGt h");
      String string0 = null;
      String string1 = " k`f!kB95y?[";
      String string2 = "(jgI.w*S)sP!~";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        stringBuffer1.insert((-2016), 44);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: -2016
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setNewLine("*!,atK!~q1B/F");
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int1 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 404, "m8y>Ti");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 508;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      helpFormatter0.setArgName("#gP");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = "L ";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "L ", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      mockPrintWriter0.print("qfPm|.");
      helpFormatter0.getArgName();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 508, "", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("MvNUmQUm]Fl&Gr;J#l");
      helpFormatter0.defaultDescPad = 47;
      helpFormatter0.createPadding(64);
      Options options0 = new Options();
      helpFormatter0.printHelp("                                                                ", ":%%(d'", options0, "                                                                ", true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.defaultLeftPad = 0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getArgName();
      helpFormatter0.defaultNewLine = "arg";
      helpFormatter0.setNewLine("arg");
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-738), (-1), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^KqX.=qDiNA";
      Options options0 = new Options();
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, (-211));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("V4GBY9Vqr,8<}OZj");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding((-1557));
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, true, "-");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", true, "");
      Options options4 = options3.addOption("", "usage: ", true, "hMRb2~K!c?'cs7Tanf");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "", "`/H7C`7sWfL->+j}", options4, "IqI3BSt");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 508;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      helpFormatter0.setArgName("#gP");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = "L ";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "L ", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      mockPrintWriter0.print("qfPm|.");
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 508, "", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile("usage: ", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "sR6";
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("))BEOy35O`a;");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("))BEOy35O`a;", string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " | ";
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth(1722);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptSeparator("7[Qoh&UL");
      assertEquals("7[Qoh&UL", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("kSm5KF1xvvuRI=", "kSm5KF1xvvuRI=", (Options) null, "kSm5KF1xvvuRI=", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-740);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "w2ArhVtmH.e&]");
      options1.addOption((String) null, false, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1053), "[", "R7mir& Q7!G", options1, (-1053), (-1053), (String) null, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("g5s72");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockFile1.getCanonicalPath();
      PrintWriter printWriter0 = mockPrintWriter0.format("g5s72", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, 0, "");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setDescPadding(0);
      assertEquals(0, helpFormatter0.defaultDescPad);
      assertEquals(0, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter2;
      objectArray0[2] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter2.format(locale0, "--", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 0, (Options) null, 2691, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(32);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("                                ", string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultWidth = 400;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", ",OKn6TnLu:1N");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "-", options3, "]", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = "' was specified but an option from this group ";
      helpFormatter0.setSyntaxPrefix("' was specified but an option from this group ");
      int int0 = (-3639);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
//      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-3639));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative initial size: -3639
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Cannot add value, list full.";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Cannot add value, list full.");
      mockPrintWriter0.print((-1403.0F));
      Options options0 = new Options();
      String string1 = "";
      options0.hasOption("\n");
      Option option0 = new Option("", "-", false, "");
      Options options1 = options0.addOption(option0);
      options1.addOption("", false, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 2540, options1, (-1), (-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getNewLine();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.setLongOptPrefix("--");
      String string1 = "";
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.getAbsolutePath();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 1312, 1312);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "*!,atK!~q1B/F";
      helpFormatter0.setNewLine("*!,atK!~q1B/F");
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", "usage: ", false, "]Mx0aD::S`vi(.U7");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      String string0 = "-A3o";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string2 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Option option0 = null;
//      try {
        option0 = new Option("-", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.setDescPadding((-681));
      helpFormatter0.setDescPadding((-681));
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      helpFormatter0.defaultSyntaxPrefix = ":(@$n'PTm]F)!=A";
      helpFormatter0.setNewLine("org.apache.commons.cli.Options");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      assertEquals(":(@$n'PTm]F)!=A", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setNewLine("PZf-6@j2nH");
      assertEquals("PZf-6@j2nH", helpFormatter0.getNewLine());
  }
}
