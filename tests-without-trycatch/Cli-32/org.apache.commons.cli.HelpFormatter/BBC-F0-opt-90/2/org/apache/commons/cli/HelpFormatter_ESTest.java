/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:00:31 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("<", (String) null, (Options) null, "<");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "~3.;JTiY8(p&.G";
      int int0 = 114;
      helpFormatter0.findWrapPos("~3.;JTiY8(p&.G", 114, (-96));
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("-", "~3.;JTiY8(p&.G");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // ~3.;JTiY8(p&.G
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 0;
      Options options1 = options0.addOption("arg", "-", true, "--");
      options1.getOption("-");
      // Undeclared exception!
      helpFormatter0.printHelp("-", options1, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setDescPadding((-66));
      helpFormatter0.findWrapPos("has already been selected: '", 0, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, (-66), "has already been selected: '");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2569), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" :: ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.printHelp("-", "-", options0, (String) null);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 1;
      helpFormatter0.defaultLeftPad = 1;
      String string1 = "vHB[a$";
      helpFormatter0.setOptPrefix("vHB[a$");
      helpFormatter0.defaultDescPad = 1;
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      String string2 = "ctV~-eU>`OAx,.v";
      File file0 = MockFile.createTempFile("?}'#9S'Fp3.wWEa", "ctV~-eU>`OAx,.v");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(file0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charsetName
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLeftPadding(3969);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      URI uRI0 = null;
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "--");
      helpFormatter0.defaultDescPad = (-136);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("4*<.Ly#EqIXC.UP'", options0, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-538);
      helpFormatter0.setWidth((-538));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      int int1 = 21;
      String string0 = "";
      Options options0 = new Options();
      String string1 = "[";
      String string2 = "ir/f>bRRIXCFJ=$J";
      Option option0 = null;
//      try {
        option0 = new Option("[", true, "ir/f>bRRIXCFJ=$J");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(" ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      helpFormatter0.rtrim("' contains an illegal character : '");
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 57;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 57, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2967);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOption("arg", "-", true, "--");
      helpFormatter0.printHelp("-", options1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = "P;'U.5K";
      int int0 = 31;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "P;'U.5K", "", options1, (-4350), 31, "");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = (-1289);
      helpFormatter0.defaultDescPad = (-1289);
      String string0 = "g1:iTn";
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("g1:iTn", "", options0, "g1:iTn");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "&");
      helpFormatter0.defaultWidth = (-490);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      optionGroup1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("%9_>Ec|vqQ0_l]$?zcv", "e`L!~jJRcxYY3EwuQi", options0, "|EwBbYX+DE]'Y");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("|F");
      int int0 = 4527;
      String string0 = "$I\\C{JvoA3,-R9yR*";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(4527, "|F", "org.apache.commons.cli.Option", (Options) null, "$IC{JvoA3,-R9yR*");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(false);
      options0.addOptionGroup(optionGroup1);
      String string1 = ":";
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", ",yP3A", options0, ":");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.setWidth((-1434));
      Option option0 = new Option("arg", "&");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("&", options0, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.findWrapPos("SBd!j# mP", 2, 2);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      String string0 = "SBd!j# mP";
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("bqxN", "SBd!j# mP");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      Option option0 = new Option("", true, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-363), options1, 192, 192);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      options1.addOption("arg", false, " ");
      options0.getOptionGroups();
      options1.hasLongOption("^e!8Woz(d!m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      mockPrintWriter0.close();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "arg";
      Option option0 = new Option("arg", "n~||Vjw0#h%|%>~Uy+");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-539), (String) null, options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("arg", options0, true);
      helpFormatter0.renderWrappedText(stringBuffer0, 1581, (-2), "");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "SBd!j# mP");
      helpFormatter0.printHelp(54, "SBd!j# mP", (String) null, options1, (String) null, true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(74, "C)(^bh*", "Illegal option name '", (Options) null, "arg", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1168), "XS' %\"77:{_>&jZK");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "nOFQFTO`;r";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nOFQFTO`;r");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot add value, list full.");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)106;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 1;
      Options options0 = new Options();
      Option option0 = new Option("", "Illegal option name '", false, "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options1.hasShortOption("");
      String string1 = "";
      Options options3 = options2.addOption("", "nOFQFTO`;r", false, "");
      Options options4 = options3.addOption("arg", false, ";{\"I%~rL^Vc#MMSB/L");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "Cannot add value, list full.", options4);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(1821);
      StringBuffer stringBuffer0 = new StringBuffer(" F1KUTjPP?)_NT1");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer1, 1332, 13, "--");
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter1.findWrapPos("\n", 13, (-985));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("-", "arg", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "-");
      options1.getOptionGroups();
      options1.hasLongOption("-");
      MockFile mockFile0 = new MockFile("--", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1147, "/^8Bim:eu4t&M9fV", (String) null, options1, 105, 34, (String) null, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("usage: ", 2964, 10);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "L5#L;8", true, "D,-x");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      Option option0 = new Option("arg", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(2735, "L5#L;8", "", options2, "__-># \"jk");
      helpFormatter0.rtrim("q-7vAcu&i>j7F");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      Options options0 = new Options();
      helpFormatter0.printHelp(3, " ", "SBd!# mP", options0, "-", false);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter1.renderWrappedText(stringBuffer0, 1049, 103, "_6e_lXt_+>;*@:l");
      helpFormatter0.printHelp(103, "--", "qg2P1/v", options0, "");
      helpFormatter1.getOptPrefix();
      helpFormatter1.rtrim(" ");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 1754, (-2010));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp(38, "line.separator", "line.separator", options0, "ES3;,@;y4E6");
      int int0 = (-590);
      String string0 = "%,r.OAu@6$*|DC)^3";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-590), "%,r.OAu@6$*|DC)^3");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printOptions(mockPrintWriter0, (-2055), options0, 2, 2);
      options0.hasLongOption("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(66, "", "", options0, " ", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      options0.getOptionGroups();
      options0.hasLongOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$OptionComparator", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      Options options1 = options0.addOption("", true, "k|hxp");
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp(printWriter0, (-2030), " ", "\n", options1, 2292, 0, "\"Q@Jn", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, (String) null);
      optionGroup0.addOption(option0);
      options0.getOptionGroups();
      options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(3, "--", "\n", options1, "6xG(CvamWewH@ts$", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setReadable(false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "-", "org.apache.commons.cli.OptionValidator", (Options) null, 1, 0, "-", false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "--", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOptionGroups();
      Options options2 = options0.addOptionGroup(optionGroup0);
      options2.hasLongOption("");
      int int0 = (-5557);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-5557), "o/3IXI\"88f)}4>)", "o/3IXI\"88f)}4>)", options1, "o/3IXI\"88f)}4>)", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("usage: ", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      int int0 = 74;
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 891, "arg", "", options1, (-230), 891, "l-u,+", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("cmdLineSyntax nt provided", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      String string1 = "[";
      int int0 = (-1513);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 101, "[", "--", options0, 1, (-1513), "arg", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, (-617), "r0VAB!n3", "--", (Options) null, 10, 1, "5K_9nANs", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptionGroups();
      Options options2 = options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("arg");
      int int0 = 2104;
      helpFormatter0.printHelp(2104, "$", "$", options1, "o/3IXJI\"88f)}4>)", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 83, "o/3IXJI\"88f)}4>)", "Kd?!T_g!5,i~oF'M['X", options2, 2104, 2104, "$");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(0);
      StringBuffer stringBuffer1 = new StringBuffer("9tafTv>s<wM{9&#");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer1, 74, 3, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("s$y(rzGq5`/", "\n", options0, "4F^");
      options0.getOptions();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp(9, "' contains an illegal character : '", "4F^", options0, "iM9$:o", false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      Options options1 = options0.addOption("ui0U", true, "has already been selected: '");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOptionGroups();
      options1.addOptionGroup(optionGroup0);
      options1.hasLongOption("--");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(1, "\n", "-", options0, "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(":KPN{_>~@^p%n`", "\n");
      MockFile.createTempFile("~1Al-r1Gy", "BJ/|k?X2N|NBcyi", (File) mockFile0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(1);
      StringBuffer stringBuffer1 = new StringBuffer("");
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 1, (-223), " ");
      helpFormatter0.renderWrappedText(stringBuffer2, 118, (-2), "sZJ{OR2W");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.getOptionGroups();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 896, "\n", "", options0, 220, 9, "");
      options0.hasLongOption("");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(6, "arg", "org.apache.commons.cli.Util", options0, "org.apache.commons.cli.Util", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptionGroups();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("arg");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "o/3IXI\"88f)}4>)";
      objectArray0[4] = (Object) "$";
      objectArray0[5] = (Object) options1;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "--", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-284), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      options0.addOption("arg", "--", true, " ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1292, "Az=27abc ");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "--", true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "-", "usage: ", options0, "-");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(3);
      StringBuffer stringBuffer0 = new StringBuffer("~|d%ffv{4ou20e'F[;");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 74, 74, "BD>");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("arg", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("has already been selected: '");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("!F kP=kJK>|", objectArray0);
      Locale locale0 = Locale.ROOT;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "!F kP=kJK>|", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, "");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, " ]", options0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 53, "5e`x|(]D");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      File file0 = MockFile.createTempFile("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      mockPrintWriter0.append((CharSequence) "usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      helpFormatter1.createPadding(3);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter2.renderWrappedText(stringBuffer0, 1490, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      options0.getOptions();
      int int0 = (-645);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-645), "[", (String) null, options0, (String) null);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      options0.addOption("arg", "--", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptionGroups();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "o/3\\IXI\"88f)}4>)";
      options0.hasLongOption("arg");
      helpFormatter0.printHelp(9, "o/3IXI\"88f)}4>)", "", options0, "", true);
      int int0 = (-607);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1508, "", "", options1, (-1158), (-607), "o/3IXI\"88f)}4>)", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2928));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptionGroups();
      options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("arg");
      helpFormatter0.printHelp(9, "o/3IXI\"88f)}4>)", "$", options0, "$", false);
      helpFormatter0.rtrim("jPn&BY$KC0O DL>jU");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("D", false, "[G5Yr:H*{`%L)[");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "[G5Yr:H*{`%L)[", false, "7n9%?p9");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-", options2);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2455), "tF~/", (String) null, options1, "D", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 12, 12, "*m}bS");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("NbBS:{^-Z>5y#K", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) stringBuffer1;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("NbBS:{^-Z>5y#K", objectArray0);
      mockPrintWriter0.println();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.printWrapped(printWriter0, 12, " ");
      StringBuffer stringBuffer2 = new StringBuffer(1);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      options0.addOption("", false, "[G5Yr:H*{`%L)[");
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 74;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_?,:MDBI?eIxWsoR.");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "*7eXCiE X", "[G5Yr:H*{`%L)[", options0, 74, 185, "", false);
      options0.addOption("", "usage: ", true, "usage: ");
      int int1 = 1752;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('6');
      // Undeclared exception!
//      try { 
        stringWriter1.append((CharSequence) "", 3, 74);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "[G5Yr:H*{`%L)[");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "[G5Yr:H*{`%L)[", false, "7n9%?p9");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-", options2);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("}mM3v0lcrQ@#}dVfZ9%", (-56), 2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer(")>*sj;`GGw#|I");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 22, (-572), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("3Y", (String) null, true, "");
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 1, 1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = new Locale("usage: ", "", "");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "quZGhK\u0000[u&,D+0#S";
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "quZGhK\u0000[u&,D+0#S", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object object0 = new Object();
      Object object1 = new Object();
      mockPrintWriter0.println(objectArray0[0]);
      mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 101, 0, " ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("s$y(rzGq5`/", "", options0, "4F^");
      options0.getOptions();
      options0.getOptions();
      options0.helpOptions();
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "(ls:H#=N1T[!O^Q3y ";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "s$y(rzGq5`/";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "(ls:H#=N1T[!O^Q3y ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Object object1 = new Object();
      Object object2 = new Object();
      mockPrintWriter0.println(object2);
      PrintWriter printWriter1 = mockPrintWriter0.format("Illegal option name '", objectArray0);
      helpFormatter0.printWrapped(printWriter1, 101, 0, " ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(3180);
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "--", options0, 74, (-2002), "arg");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      options0.addOption("arg", "--", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptionGroups();
      options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("arg");
      helpFormatter0.printHelp(9, "o/3IXI\"88f)}4>)", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.print(false);
      String string0 = null;
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), (String) null, (String) null, options0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 12, 12, "*m}bS");
      Options options0 = new Options();
      options0.addOption("arg", "--", true, " ");
      MockFile mockFile0 = new MockFile("NbBS:{^-Z>5y#K", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) stringBuffer1;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("NbBS:{^-Z>5y#K", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 12, " ");
      StringBuffer stringBuffer2 = new StringBuffer(1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      mockPrintWriter0.append((CharSequence) "usage: ");
      int int0 = 74;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 81, (String) null, "m6zg*>0P U7G'?@_", options0, 1, 39, "_9q9x7_3SaN-", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      mockPrintWriter0.append((CharSequence) "arg");
      String string1 = "Ey%/-T{|b7}<:`GD";
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "K|C$V$MErL", "-", options0, 3470, 3470, "Ey%/-T{|b7}<:`GD", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("s$y(rzGq5`/", "", options0, "4F^");
      options0.getOptions();
      options0.getOptions();
      options0.helpOptions();
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "(ls:H#=N1T[!O^Q3y ";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "s$y(rzGq5`/";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "(ls:H#=N1T[!O^Q3y ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Object object1 = new Object();
      Object object2 = new Object();
      mockPrintWriter0.println(object2);
      helpFormatter0.printHelp("]", options0, false);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1, "-", "(ls:H#=N1T[!O^Q3y ", options0, 1, 5993, "4F^");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      int int0 = (-1);
      mockPrintWriter0.print(true);
      String string0 = null;
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), (String) null, (String) null, options0, (-1), (-1), (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setArgName("'NDL*i");
      helpFormatter0.setDescPadding(44);
      Options options0 = new Options();
      options0.hasLongOption("-");
      helpFormatter0.printHelp("'NDL*i", "-", options0, "org.apache.commons.cli.OptionValidator", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "", options0, "[ option: ", false);
      helpFormatter0.setArgName("<f+,)T`>*E");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(4);
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(4);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      options0.addOption("pD", "", false, "h");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) null, 2081, "", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("p-bv\"(", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      mockPrintWriter0.append((CharSequence) "usage: ");
      int int0 = 74;
      int int1 = 185;
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-3318), "*7eXCiE X", "Dw>eExcS4ZbI(", options0, 74, 1, "Ey%/-T{|b7}<:`GD", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = new Locale(" [ARG]", "<");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "<";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "<";
      objectArray0[5] = (Object) mockPrintWriter1;
      objectArray0[6] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "--", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-181), "SnBk&pr", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("s$y(rzGq5`/", "", options0, "4F^");
      options0.getOptions();
      options0.getOptions();
      options0.helpOptions();
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "(ls:H#=N1T[!O^Q3y ";
      objectArray0[1] = (Object) locale0;
      Options options1 = options0.addOption((String) null, "org.apache.commons.cli.HelpFormatter$1", false, "");
      int int0 = (-403);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 0, options1, 74, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "<", true, "ttc,/o+,;;t^T5*S}}");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1, options1, 818, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption("", "-", false, "[Hd");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, 3, options1, 18, 459);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("s$y(rzGq5`/", "", options0, "4F^");
      options0.getOptions();
      options0.getOptions();
      options0.helpOptions();
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "(ls:H#=N1T[!O^Q3y ";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "s$y(rzGq5`/";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "(ls:H#=N1T[!O^Q3y ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Object object1 = new Object();
      Object object2 = new Object();
      mockPrintWriter0.println(object2);
      StringBuffer stringBuffer0 = new StringBuffer(9);
      helpFormatter0.renderOptions(stringBuffer0, 6, options0, 3, 15);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, " ");
      options1.getMatchingOptions("-");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 1, 0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-4085);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printHelp(printWriter0, 74, "usage: ", "*7eXCiE X", options0, 74, 185, "Ey%/-T{|b7}<:`GD", false);
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", "arg", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "I", "I", options0, "I", true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 1, "'NDL*i");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "--", (String) null, options0, "I", true);
      helpFormatter0.renderOptions(stringBuffer0, 118, options0, 27, 2068);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) stringBuffer0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, (-2622), options0, 1, (-3421));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-15);
      helpFormatter0.defaultLeftPad = (-15);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1184, " $jL]zHE=%w", "org.apache.commons.cli.ParseException", options0, "lN<r", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      options0.addOption("pD", "", true, "h");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("h", options1, true);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "4F^";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "A CloneNotSupportedException was thrown: ", "A CloneNotSupportedException was thrown: ", options1, "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 572, "SnBk&pr", options0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("i", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(";+.`@6V<r");
      helpFormatter0.setNewLine("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(34);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println('\'');
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, " ");
      options1.getOption("");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 18, options1, 44, (-2808));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "4F^";
      options0.getOptions();
      options0.getOptions();
      options0.helpOptions();
      helpFormatter0.defaultSyntaxPrefix = "--";
      helpFormatter0.printHelp("4F^", "4F^", options0, "");
      String string1 = "[ Options: [ short ";
      boolean boolean0 = false;
      helpFormatter0.printHelp(74, "[ Options: [ short ", "4F^", options0, "4F^", false);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(32);
      StringWriter stringWriter1 = stringWriter0.append('I');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, 32, "   ");
      Options options0 = new Options();
      String string0 = "4F^";
      helpFormatter0.printHelp("s$y(rzGq5`/", "", options0, "4F^");
      options0.getOptions();
      options0.getOptions();
      options0.helpOptions();
      helpFormatter0.defaultSyntaxPrefix = "--";
      String string1 = "";
      helpFormatter0.printHelp("4F^", "4F^", options0, "");
      String string2 = "[ Options: [ short ";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3430), "[ Options: [ short ", "4F^", options0, "4F^", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setLeftPadding((-713));
      int int0 = (-1269);
      helpFormatter0.findWrapPos(" :: ", 1829, (-713));
      helpFormatter0.setSyntaxPrefix("The option '");
      helpFormatter0.createPadding(1829);
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "4F^";
      helpFormatter0.printHelp("s$y(rzGq5`/", "-", options0, "4F^");
      Collection collection0 = new LinkedList<Integer>();
      options0.getOptions();
      options0.helpOptions();
      String string1 = "--";
      helpFormatter0.defaultSyntaxPrefix = "--";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp("4F^", "4F^", options0, "");
      int int0 = (-3430);
      String string2 = "[ Options: [ short ";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "q8?U", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "--", (String) null, options0, "I", true);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptSeparator("Fn");
      helpFormatter0.setLeftPadding(1050);
      helpFormatter0.findWrapPos("'XoJ", 1050, 0);
      helpFormatter0.setSyntaxPrefix("BTYv");
      helpFormatter0.createPadding(3507);
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("2\"TSI[vi0-;]_sGj}", 74, (-4157));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding(1);
      options0.toString();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.printHelp("G30'", options0, true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 18;
      helpFormatter0.setDescPadding(18);
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 18, 18, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "4F^";
      helpFormatter0.printHelp("s$y(rzGq5`/", "", options0, "4F^");
      options0.getOptions();
      options0.getOptions();
      options0.helpOptions();
      helpFormatter0.defaultSyntaxPrefix = "cmdLineSyntax not provided";
      helpFormatter0.printHelp("4F^", "4F^", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      String string1 = "[ Options: [ short ";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3430), "[ Options: [ short ", "4F^", options0, "4F^", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Options options0 = new Options();
      String string0 = "4F^";
      helpFormatter0.printHelp("s$y(rzGq5`/", "", options0, "4F^");
      options0.getOptions();
      options0.getOptions();
      options0.helpOptions();
      helpFormatter0.defaultSyntaxPrefix = "tw{=e";
      helpFormatter0.printHelp("4F^", "4F^", options0, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptSeparator("[");
      String string1 = "[ Options: [ short ";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3485), "[ Options: [ short ", "4F^", options0, "4F^", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" :: ", "org.apache.commons.cli.AlreadySelectedException", (Options) null, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      options0.addOption("pD", "", false, "h");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-403), options0, 1, 18);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      options0.addOption("arg", "--", true, " ");
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "4F^";
      helpFormatter0.printHelp("s$y(rzGq5`/", "", options0, "4F^");
      options0.getOptions();
      options0.getOptions();
      options0.helpOptions();
      helpFormatter0.defaultSyntaxPrefix = "--";
      helpFormatter0.printHelp("4F^", "4F^", options0, "");
      String string1 = "[ Options: [ short ";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3430), "[ Options: [ short ", "4F^", options0, "4F^", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "usage: ";
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.OptionGroup";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setNewLine("org.apache.commons.cli.OptionGroup");
      helpFormatter0.setNewLine("usage: ");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      String string0 = "u4D#(c";
      String string1 = " ] [ long ";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("/ax*>_a^%&?q/V9;_", false, "org.apache.commons.cli.HelpFormatter");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '/ax*>_a^%&?q/V9;_' contains an illegal character : '/'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("b]SP7l<");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3127), 990, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 0, options0, 0, 39);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append('-');
      helpFormatter0.printUsage(printWriter0, 1331, " ");
      String string0 = "O+xL=jv";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = null;
      // Undeclared exception!
//      try { 
        options0.addOption("\n", false, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setNewLine("dMqUDoxlwl<1Xc9$5");
      Options options0 = new Options();
      helpFormatter0.printHelp("m~M", options0);
      helpFormatter0.setOptPrefix("m~M");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("--", false, "org.apache.commons.cli.OptionGroup");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (Options) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.setWidth(0);
      int int0 = (-1);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, " ");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 1, 0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("usage: ");
      int int0 = 0;
      String string0 = null;
      Options options0 = new Options();
      String string1 = null;
      Option option0 = null;
//      try {
        option0 = new Option("-", true, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("qzwQztpL~s/pjhNLE", "--", false, "Yzq0");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'qzwQztpL~s/pjhNLE' contains an illegal character : '~'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      int int0 = 0;
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("' was specified but an option from this group ", "' was specified but an option from this group ", true, "]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '' was specified but an option from this group ' contains an illegal character : '''
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.getBuffer();
      int int1 = 171;
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      stringWriter0.write(1364);
      String string0 = "-";
      boolean boolean0 = true;
      String string1 = "";
      // Undeclared exception!
//      try { 
        options0.addOption("-", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setLongOptSeparator("oX(_M");
      StringBuffer stringBuffer1 = new StringBuffer();
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = 'D';
      charArray0[2] = 'r';
      charArray0[3] = 'P';
      stringBuffer1.append(charArray0);
      stringBuffer1.append((Object) helpFormatter0);
      stringBuffer0.append(stringBuffer1);
      int int0 = 0;
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.setLongOptPrefix("");
      Options options0 = null;
      String string0 = "g3?y\"";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "g3?y\"", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("^?N)V.DoE/");
      String string0 = "5d(d";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultOptPrefix = ".0x<UWsHE aB|i5T";
      helpFormatter0.setLeftPadding(3461);
      assertEquals(3461, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("'");
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(13);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-184), (-391), "'");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1184, "", "org.apache.commons.cli.ParseException", options0, "lN<r", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setOptPrefix((String) null);
      String string0 = "Rr}Es_]Tb";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }
}
