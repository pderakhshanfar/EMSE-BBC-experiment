/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:36:48 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter1.renderWrappedText(stringBuffer0, 3706, 10, "dQ\"BeRj79O,EYh,z5n");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "QVTi-M)", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      options0.addOption("arg", false, "--");
      // Undeclared exception!
      helpFormatter0.printHelp("7;M3g{UkDvpcC|", options0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2002);
      options0.hasShortOption("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("^Vjt8%a", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.addOption("arg", false, "--");
      helpFormatter0.defaultLongOptPrefix = "";
      StringBuffer stringBuffer0 = new StringBuffer("org.apacse5commons.cli.HDlpFormatter$OptionComparator");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", false, "usage: ");
      helpFormatter0.printHelp("h`@ML{Ig'.(5(/.", "!u.x=BU\"$!99L{", options2, "!u.x=BU\"$!99L{");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockFileOutputStream0.write(1);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, (-362), options2, 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2750, "[ Options: [ short ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) null, (-1), "-", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option((String) null, "buP}qmD<Cu-h");
      option0.setLongOpt("Illegal option name '");
      optionGroup0.addOption(option0);
      Option option1 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.getOption("");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Options options0 = new Options();
      String string0 = "--";
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "]", "NO_ARGS_ALOWED", options2, (-1), (-165), (String) null, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = (-1926);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator1).toString();
      helpFormatter0.optionComparator = comparator1;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1926), "NO_ARGS_ALLOWED", "QHerJloOjjP$#", options0, 5, 5, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1476));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("arg", "-", options0, "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setDescPadding((-356));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(1728);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("", 5101, (-1577));
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "--");
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("", "");
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "=O0ZU~}");
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 0, "=O0ZU~}");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 703, "<l'-O", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 16, "org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options0, 1938, 1938, "org.apache.commons.cli.OptionValidator");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale.forLanguageTag("arg");
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Option option0 = new Option("arg", true, "`MF3w{X$,n?Ji38^");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "<", options1);
      Object object0 = new Object();
      Option option1 = new Option((String) null, "usage: ", true, ";Mh_W$_");
      Option option2 = (Option)option1.clone();
      option2.setRequired(false);
      Options options2 = options1.addOption(option1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "org.apache.commons.cli.HelpFormatter$1", options1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1347), "<", ".;:1xC*_@f!Ay.R", options2, 4410, (-2), ".;:1xC*_@f!Ay.R", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-943);
      helpFormatter0.setLongOptPrefix("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding((-943));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 2619, 3, "sh2!x!8df)s2ttGQN'");
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "x(=jSrX:~!f", "", options1, "x(=jSrX:~!f", false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getArgName();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("ZOcbmj[j>!)}%0PQ*%o", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 117, "\n");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Options options0 = new Options();
      int int0 = 0;
      String string0 = "";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "8Jai<0K";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1524), "=f:{%_", "8Jai<0K", (Options) null, "=f:{%_", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption((String) null, " ", true, "-");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 1519, " ");
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer1, 0, options0, 3, 1519);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(67);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("", objectArray0);
      helpFormatter0.printUsage(printWriter0, 67, "A:", options0);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 88, "");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "-", " ", (Options) null, "usage: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 3118;
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3118, (Options) null, 3118, 3118);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Options options0 = new Options();
      int int0 = 0;
      String string0 = "`MF3w{X$,n?Ji38^";
      Option option0 = new Option((String) null, true, "");
      options0.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=M=/");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "3", options0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      Option option0 = new Option("SwRLj", "[", false, "=w!.%&nC<a_{{%>");
      helpFormatter0.setNewLine("?>Z9ai");
      Options options2 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOption((String) null, "", true, "?>Z9ai");
      helpFormatter0.printHelp("8F", "6XF-rO$fuA$u&'", options3, "Y$$2n`OQu", true);
      helpFormatter0.setLongOptPrefix("_p34T");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.forLanguageTag(" ");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 654, "\n", "\n", options0, 3, 3, "", true);
      helpFormatter0.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      Object object0 = new Object();
      objectArray0[4] = object0;
      String string0 = "!UX]|i[PGc";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-885);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "|Zz)N{|_6]<", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-885), options2, 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = "Dg";
      helpFormatter2.printHelp("\n", "Dg", options0, "arg", true);
      helpFormatter2.setLongOptPrefix("arg");
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter3.printWrapped((PrintWriter) mockPrintWriter0, 1, (-771), "usage: ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.hasLongOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("\n", "Dg", options0, "arg", true);
      helpFormatter2.setLongOptPrefix("arg");
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((String) null, options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.hasLongOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp("arg", "n2I}s18\"`~>@2SMA0", options0, "arg", true);
      helpFormatter2.setLongOptPrefix("D7");
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.rtrim("\n");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "arg";
      objectArray0[1] = (Object) "Dg";
      objectArray0[2] = (Object) "D7";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "usage: ";
      objectArray0[5] = (Object) "D7";
      objectArray0[6] = (Object) "D7";
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printWrapped(printWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 2151, options0, 74, 11);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1198), 1, "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.forLanguageTag("org.apache.commons.cli.OptionGroup");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) " | ";
      objectArray0[2] = (Object) "org.apache.commons.cli.OptionGroup";
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) stringWriter0;
      Object object2 = new Object();
      objectArray0[7] = object2;
      objectArray0[8] = (Object) " | ";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " | ", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "org.apache.commons.cli.OptionGroup", "org.ap>che.commons.cli.AlreadySelectedExc'ptHon", options0, (-1133), 31, " | ", true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.forLanguageTag(" ");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 654, "<?Y4&V.$ClLI];", "<?Y4&V.$ClLI];", options0, 3, 3, "v", true);
      helpFormatter0.findWrapPos("org.apache.commons.cli.AlreadySelectedException", 0, 654);
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2249);
      helpFormatter0.setLongOptSeparator("Bseo?7OA@");
      Options options0 = new Options();
      Locale.forLanguageTag("U)b$$O-nm");
      Options options1 = new Options();
      helpFormatter0.getOptionComparator();
      String string0 = "4-RDMZ-E'I@Sgnt#";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("j5)oI2 r^3", "", options0, "4-RDMZ-E'I@Sgnt#");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(3, "Ps)pMo'Xqh} j3", "_'?VH2|-Ivg|ni^0F", options0, "usage: ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setDescPadding((-2214));
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 108, 13, "C#bM");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(108, "C#bM", "=T{9zp07b#cO", options0, "Illegal option name '");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale.forLanguageTag("arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "`MF3w{X$,n?Ji38^");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "", options1);
      Object object0 = new Object();
      Option option1 = new Option((String) null, "usage: ", true, ";Mh_W$_");
      option1.clone();
      options1.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOption((String) null, "usage: ", true, (String) null);
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("arg", "org.apache.commons.cli.Option", options1, "]", true);
      helpFormatter0.setLongOptPrefix("]");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale.forLanguageTag("arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "`MF3w{X$,n?Ji38^");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "", options1);
      Object object0 = new Object();
      Option option1 = new Option((String) null, "usage: ", true, ";Mh_W$_");
      option1.clone();
      Options options2 = options1.addOption(option1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1347), "<", "'^/CL!Oz", options2, 4410, (-2), "'^/CL!Oz", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1), "usage: ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      options0.getOptionGroups();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 74, 1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Option option0 = new Option("SwRLj", ">", true, "arg");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", "--", true, "SwRLj");
      helpFormatter0.printHelp(" [ARG]", "CAh9YP3", options0, "6XF-rO$fuA$u&'", true);
      helpFormatter0.setLongOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.hasLongOption("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = new Options();
      helpFormatter0.printHelp("ED~=Aa'", (String) null, options1, "usage: ", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.rtrim("-%|y7<");
      helpFormatter1.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = 0;
      String string0 = "";
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.renderOptions((StringBuffer) null, 32, options0, 32, 0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, options1, 15, (-1460));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("Bseo?7OA@");
      assertEquals("Bseo?7OA@", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.getOptionComparator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("5OrUuleVxA51al$)A.5", "v2HtGiNN8O,=", (Options) null, "[");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "-");
      options1.hasLongOption("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter2.printHelp("\n", "=JMqO", options2, "~)b+", true);
      helpFormatter2.setLongOptPrefix("+`Pi&n");
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Uc/V8lh2c=[1_$f";
      objectArray0[1] = (Object) "Dg";
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) "+`Pi&n";
      PrintWriter printWriter0 = mockPrintWriter0.printf("Uc/V8lh2c=[1_$f", objectArray0);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter2.printWrapped(printWriter0, 448, "EczVz~A%");
      helpFormatter4.setWidth(74);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.hasLongOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("<", "Dg", options0, "arg", true);
      helpFormatter2.setLongOptPrefix("arg");
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((-200), "=H(YY0O\"?.SZbx_i", "--", options0, " | ", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.forLanguageTag(" ");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[4] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 654, "+!pJd>x/6", (String) null, options0, 31, 3534, (String) null, true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.Options", true, ">");
      Option option0 = new Option("SwRLj", ">", true, "arg");
      Options options2 = new Options();
      options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(31, "org.apache.commons.cli.Options", "U`", options3, "6)BpAWPG`)an");
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1179, "", "", options1, "Cannot add value, list full.");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.hasLongOption("$B~$D<Uf");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptionComparator((Comparator) null);
      helpFormatter1.setOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 0, "--");
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("cmdLineSyntax not provided", "arg");
      MockFile mockFile1 = new MockFile("org.apache.commons.cli.HelpFormatter");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.apache.commons.cli.Util");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.append((CharSequence) "org.apache.commons.cli.HelpFormatter$OptionComparator");
      int int0 = 121;
      Object object0 = new Object();
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 10, "zM WK#UC;Y", "@5SO8EA*s", options0, 121, 121, "[ARG...]", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("arg");
      helpFormatter0.printHelp("~Zz", options0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(bufferedOutputStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1318), "\u0002J3*!@q");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.setDescPadding(2);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      Options options1 = options0.addOption("", (String) null, false, "");
      helpFormatter0.printHelp("M#{n}0m3kdN", "", options1, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "j`~Gk", "usage: ", options0, 31, 54, "usage: ", true);
      helpFormatter1.rtrim((String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      helpFormatter0.printOptions(mockPrintWriter0, 611, options1, 1, 2347);
      helpFormatter0.getDescPadding();
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, 32, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.hasLongOption("f;h");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("org.apache.commons.cli.AlreadySelectedException", "S{:", options0, "usage: ", false);
      helpFormatter0.setLongOptPrefix("usage: ");
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.rtrim("Hu9(MH{,h2kmD");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter2;
      objectArray0[1] = (Object) "$B~$D<Uf";
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "$B~$D<Uf";
      objectArray0[5] = (Object) helpFormatter3;
      mockPrintWriter0.printf("le'", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, "cmdLineSyntax not provided");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.hasLongOption("$B~$D<Uf");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("has already been selected: '", "3Z#%4CUr*", options0, "50%DtJeiyK", true);
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "$B~$D<Uf";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "$B~$D<Uf";
      objectArray0[4] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 74, "\n");
      helpFormatter0.setWidth(6208);
      // Undeclared exception!
//      try { 
        helpFormatter2.printUsage(printWriter0, 3, (String) null, options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("cmdLineSyntax not provided", "arg");
      MockFile mockFile1 = new MockFile("org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.append((CharSequence) "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Object object0 = new Object();
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 10, "zM WK#UC;Y", "@5SO8EA*s", options0, 121, 121, "[ARG...]", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("arg");
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions(printWriter0, 52, options0, (-636), 121);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('g');
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.setOptPrefix("-");
      helpFormatter0.getLongOptPrefix();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 7, (String) null, ", ", options1, 3, 1701, "--", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      MockFile mockFile0 = new MockFile("cmdLineSyntax not provided", "arg");
      MockFile mockFile1 = new MockFile("org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "org.apache.commons.cli.HelpFormatter$OptionComparator");
      int int0 = 121;
      helpFormatter0.printWrapped(printWriter0, 121, 10, "");
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.rtrim("");
      helpFormatter0.setOptPrefix("");
      Options options0 = null;
      int int1 = 36;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 10, "1dGE#qt$", "DqbTyfgXXf", (Options) null, 36, 121, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.hasLongOption("$B~$D<Uf");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, "", false, "");
      helpFormatter1.printHelp("usage: ", "3Z#%4CUr*", options1, "", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("O=&v\"/R094#");
      helpFormatter2.getLongOptSeparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.rtrim("usage: ");
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter("usage: ", "gS@Gm");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // gS@Gm
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-115);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 571, 32);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      String string0 = "arg";
      Locale locale0 = Locale.forLanguageTag("arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "`MF3w{X$,n?Ji38^");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "", options1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "arg";
      objectArray0[6] = (Object) "arg";
      objectArray0[7] = (Object) "arg";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      Options options2 = new Options();
      String string1 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 654, "", "", options2, 45, 58, (String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.forLanguageTag(" ");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 654, "'L^/CuL!z", "'L^/CuL!z", options0, 31, 3, "v", true);
      helpFormatter0.rtrim("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 654, (Options) null, 654, 31);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.FRANCE;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "855Sl&FV)Pe=M";
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      mockPrintWriter0.printf(locale0, "855Sl&FV)Pe=M", objectArray0);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(41);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 5133, "+x3-~(2Bh+TI;z<k");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "", "usage: ", options0, (-2604), 41, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      String string0 = "$B~$D<Uf";
      options0.hasLongOption("$B~$D<Uf");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("has already been selected: '", "3Z#%4CUr*", options0, "50%DtJeiyK", true);
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 47, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append('g');
      Options options0 = new Options();
      String string0 = "";
      options0.hasLongOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", (String) null, (Options) null, "gV_4~-9_0", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(9);
      String string0 = " [ARG]";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" [ARG]");
      Locale locale0 = Locale.forLanguageTag("/=mP{S");
      Object object0 = new Object();
      Object object1 = new Object();
      mockPrintWriter0.printf(locale0, "V", (Object[]) null);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "vC", "vC", options0, (-2), 3940, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('g');
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 3532, "50%DtJeiyK", "50%DtJeiyK", options0, 3532, 31, "");
      options0.getOption((String) null);
      options0.hasLongOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("`b4 )kBMFj@~#36[", ":n#xa8H", options0, "-", false);
      helpFormatter1.setLongOptPrefix(" ");
      Options options1 = new Options();
      helpFormatter1.printHelp(printWriter0, 23, "if;NGSwqJJyb3CXYx", "", options1, 63, 3408, "fZ}r", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      PrintWriter printWriter0 = mockPrintWriter0.format("]", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 64, "h#xhd\"[hx<Y}6Nw|");
      helpFormatter1.setWidth(1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append('g');
      Options options0 = new Options();
      helpFormatter0.setDescPadding(108);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 547, 10, "Illegal option name '");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(10, "be|=.}[st3itn5MV:", "be|=.}[st3itn5MV:", options0, "=T{9zp07b#cO");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append('g');
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptSeparator("aP~>c/u\"4h8Eddv-*4");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3532, "", "", options1, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.append('l');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter2.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 0, 5, "");
      helpFormatter0.setLeftPadding(44);
      helpFormatter0.rtrim("");
      helpFormatter0.setOptPrefix("");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-9), 125, "sMaD");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('g');
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 3532, "50%DtJeiyK", "50%DtJeiyK", options0, 3532, 31, "");
      options0.getOption((String) null);
      options0.hasLongOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("`b4 )kBMFj@~#36[", ":n#xa8H", options0, "-", false);
      helpFormatter1.setLongOptPrefix(" ");
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2559), "h#xhd\"[hx<Y}6Nw|");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      options0.hasShortOption("");
      Options options1 = new Options();
      options1.getOption(" ");
      options1.hasLongOption("--");
      String string0 = "s_plXx+";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "", options0, "s_plXx+", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("Bseo?7OA@");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, ">", false, "Bseo?7OA@");
      Option option0 = new Option("arg", "", false, ">");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(117, "j9*A -([56..OxHM", "6)BpAWPG`)an", options3, "j9*A -([56..OxHM");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "6)BpAWPG`)an", "", options2, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("Aa)}5p>");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("so", "Aa)}5p>", false, "usage: ");
      options0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option1 = new Option("so", false, (String) null);
      Options options2 = options1.addOption(option1);
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("so", "so", options2, (String) null);
      helpFormatter0.getWidth();
      options1.getOptions();
      option1.setArgName("Aa)}5p>");
      options3.getMatchingOptions("--");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Aa)}5p>");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 884, options0, (-2), 3159);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("NBXw;un+bYwu");
      helpFormatter0.setDescPadding((-1));
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", "", false, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("NBXw;un+bYwu", "NBXw;un+bYwu", options1, "-", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(10);
      helpFormatter0.setSyntaxPrefix("M0E");
      helpFormatter0.rtrim("--");
      helpFormatter0.setOptPrefix(",J's`oJMiYsy8p|+(S");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("M0E");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 0, "");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ Options: [ short ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("   ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.hasLongOption("$B~$D<Uf");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "3Z#%4CUr*", options0, "50%DtJeiyK", true);
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "$B~$D<Uf";
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 13, 74, "-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      mockFile0.setExecutable(false, false);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-848), "[ option: ", "FlAh@O?%(`", options0, 484, 2, "}Xj~");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append('g');
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 10, (-3415), "ii d");
      helpFormatter0.setLeftPadding(9);
      helpFormatter0.rtrim("--");
      helpFormatter0.setOptPrefix("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 10, "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.setArgName("yZY73Jg2op!Q");
      Options options0 = new Options();
      options0.hasShortOption("IQ|bqYvrF)^_P%`fU[<");
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(1358, "o/j)u", "arg", options0, "yZY73Jg2op!Q", false);
      helpFormatter0.printHelp("VN&'Fi2y3C8Ah", "(zl:aUX4", options0, "org.apache.commons.cli.Options");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Option option0 = null;
//      try {
        option0 = new Option("--", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      Options options0 = new Options();
      options0.hasShortOption((String) null);
      options0.getOption("IQ|bqYvrF)^_P%`fU[<");
      options0.hasLongOption("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("   ");
      boolean boolean0 = false;
      helpFormatter1.printHelp("CxFK`", "", options0, "", false);
      helpFormatter1.setLongOptPrefix("   ");
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.rtrim("5lPF");
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter("$Nk+,qS4J<~n0", "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      Options options0 = new Options();
      options0.hasShortOption((String) null);
      options0.getOption("IQ|bqYvrF)^_P%`fU[<");
      options0.hasLongOption("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("CxFK`", "", options0, "", false);
      helpFormatter1.setLongOptPrefix("arg");
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.rtrim("5lPF");
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter("$Nk+,qS4J<~n0", "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append('g');
      Options options0 = new Options();
      options0.hasLongOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("50%DtJeiyK", ":n#xa8H", options0, "   ", false);
      helpFormatter1.setLongOptPrefix("-");
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim(" ");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, " ");
      helpFormatter0.setWidth(74);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintWriter0.printf(locale0, "org.apache.commons.cli.AlreadySelectedException", objectArray0);
      helpFormatter0.rtrim("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptPrefix("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 25, 25, "");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("Aa)}5p>");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("so", "Aa)}5p>", false, "usage: ");
      options0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option1 = new Option("so", false, (String) null);
      Options options2 = options1.addOption(option1);
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("so", "so", options2, (String) null);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(1);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setOptPrefix(" :: ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter1.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2), "Aa)}5p>");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-1), "--");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("Aa)}5p>");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("so", "Aa)}5p>", false, "usage: ");
      options0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Option option1 = new Option("so", false, (String) null);
      Options options2 = options1.addOption(option1);
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("so", "so", options2, (String) null);
      helpFormatter0.getWidth();
      option1.setArgName("Aa)}5p>");
      helpFormatter0.printHelp("f/X8UQW>QKX^1", options3, false);
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), ",g'R(vDf", "", options1, (String) null);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("NBXw;un+bYwu");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setDescPadding((-20));
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "A5ME/B}9'9 RV^p3P|");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('g');
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 3532, "50%DtJeiyK", "50%DtJeiyK", options0, 3532, 31, "");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "50%DtJeiyK", options0, "v2Ht{iNN8O,=");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "@^t=Cx7a", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setOptPrefix("727Om");
      helpFormatter0.setDescPadding(813);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-843), 0, "6");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("Aa)}5p>");
      String string0 = "so";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("so", "Aa)}5p>", false, "usage: ");
      options0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option1 = new Option("so", false, (String) null);
      Options options2 = options1.addOption(option1);
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("so", "so", options2, (String) null);
      helpFormatter0.getWidth();
      option1.setArgName("Aa)}5p>");
      helpFormatter0.printHelp("f/X8UQW>QKX^1", options3, false);
      helpFormatter0.getSyntaxPrefix();
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("", "kc@[6");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "_nx2";
      helpFormatter0.defaultNewLine = "_nx2";
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter$1";
      String string2 = "";
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setSyntaxPrefix("line.separator");
      helpFormatter0.setNewLine("line.separator");
      helpFormatter0.createPadding(10);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
//      try {
        option0 = new Option(",Fw1Ra", "arg", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ',Fw1Ra' contains an illegal character : ','
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 0, 10, "--");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      int int0 = 0;
      int int1 = 10;
      String string0 = "--";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 0, 10, "--");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.findWrapPos("", 0, 731);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1), int0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = 74;
      Options options0 = new Options();
      int int1 = 493;
      String string0 = "Qq!q";
      options0.hasShortOption("Qq!q");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "", "}", options0, 493, 0, "JH6-;Jv");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "OBZCqBL\"T<.Le0L~<";
      String string1 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setOptPrefix("SW");
      helpFormatter0.setLongOptPrefix("OBZCqBL\"T<.Le0L~<");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("bxEvqQLnh", 3, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      StringWriter stringWriter0 = new StringWriter(31);
      int int1 = 31;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "org.apache.commons.cli.AlreadySelectedException", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 602, "Sx/ <JGb1%:(s3M", "Sx/ <JGb1%:(s3M", options0, 31, (-1513), "Sx/ <JGb1%:(s3M", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "#L";
      helpFormatter0.setOptPrefix("#L");
      String string1 = "ZT<pB2!`";
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", false, "#L");
      option0.setValueSeparator('}');
      options2.hasShortOption("org.apache.commons.cli.Options");
      String string2 = "[ Options: [ short ";
      // Undeclared exception!
//      try { 
        options3.addOption("#L", "#L", true, "[ Options: [ short ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '#L' contains an illegal character : '#'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.setArgName("yZY73Jg2op!Q");
      Options options0 = new Options();
      options0.hasShortOption("IQ|bqYvrF)^_P%`fU[<");
      options0.getOption("");
      options0.hasLongOption("`b4 )kBMFj@~#36[");
      helpFormatter0.printHelp("arg", "yZY73Jg2op!Q", options0, "arg", true);
      helpFormatter0.setLongOptPrefix("yZY73Jg2op!Q");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("arg");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("yZY73Jg2op!Q", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 91;
      helpFormatter0.setDescPadding(91);
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int1 = 0;
      String string0 = "S";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        options1.addOption(":sFH#!", "-", true, " ] [ long ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ':sFH#!' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('g');
      String string0 = "50%DtJeiyK";
      Options options0 = new Options();
      String string1 = "";
      helpFormatter0.printHelp(printWriter0, 3532, "50%DtJeiyK", "50%DtJeiyK", options0, 3532, 31, "");
      helpFormatter0.getOptionComparator();
      String string2 = "[";
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(741, "", (String) null, options0, "[", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 447;
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 447, options0, 447, 447);
      helpFormatter0.getOptPrefix();
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = '[';
      charArray0[2] = 'S';
      charArray0[3] = 'h';
      charArray0[4] = '8';
      charArray0[5] = 'c';
      charArray0[6] = 'T';
      charArray0[7] = '`';
      charArray0[8] = 'g';
      // Undeclared exception!
//      try { 
        stringBuffer0.insert(3610, charArray0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 3610
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = stringBuffer0.append((Object) helpFormatter0);
      int int0 = 1;
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "");
      int int1 = 1;
      Options options0 = new Options();
      stringBuffer1.append(">");
      // Undeclared exception!
//      try { 
        options0.addOption(" ", "", true, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("'");
      helpFormatter0.setNewLine("'");
      // Undeclared exception!
//      try { 
        MockURI.resolve((URI) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1625);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      String string0 = "";
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("pfk1-", "The option '", true, "The option '");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'pfk1-' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("-", "*@.M/^");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // *@.M/^
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('R');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3569, (-1547), "}&7,&:Sv2");
      assertEquals("R}&7,&:Sv2", stringBuffer0.toString());
      assertEquals(74, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "ye#~jCMY3Xl";
      helpFormatter0.defaultArgName = "ye#~jCMY3Xl";
      helpFormatter0.setArgName("!q:Po07QSiA");
      String string1 = "<";
      helpFormatter0.setSyntaxPrefix("<");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      int int0 = 13;
      helpFormatter0.setLeftPadding(13);
      // Undeclared exception!
//      try { 
        MockFile.createTempFile(" ", " :: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      int int0 = (-93);
      helpFormatter0.setWidth((-93));
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "W++";
      helpFormatter0.setArgName("W++");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charsetName
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }
}
