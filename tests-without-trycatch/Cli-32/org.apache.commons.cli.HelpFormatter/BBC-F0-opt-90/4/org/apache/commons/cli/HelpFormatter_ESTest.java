/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:01:30 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("sWI]()%G'192EGe", "sWI]()%G'192EGe", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      int int0 = (-638);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("Wm`F2j)^!$ayu", true, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'Wm`F2j)^!$ayu' contains an illegal character : '`'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      helpFormatter0.rtrim("cmdLineSyntax not provided");
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 10, 10);
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
//      try {
        option0 = new Option("--", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("l", "arg", false, "-");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "usage: ");
      optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "=q[\\l#]^=R&h'4n_sd";
      StringBuffer stringBuffer0 = new StringBuffer("=q[l#]^=R&h'4n_sd");
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 0, 64);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      Option option0 = new Option("arg", "usage: ", false, "-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      option0.setArgName("");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp("arg", "arg", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.getNewLine();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getDescPadding();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      String string0 = ",;u}&4%";
      helpFormatter0.rtrim(",;u}&4%");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.defaultNewLine = "~7={FnS( &";
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "t@ BhkJ^\"HwIn|q!?";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) "[ option: ";
      objectArray0[4] = (Object) "[ option: ";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "[ option: ";
      objectArray0[7] = (Object) "[ option: ";
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.UK;
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "|yZnAt ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter1, 0, "|yZnAt ", options0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 955, options0, 955, 955);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.setLeftPadding(44);
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1522, "b}4v~Ww> 3n@1>j", (String) null, options0, 1522, 13, "", false);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultDescPad = (-881);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.defaultLeftPad = (-2653);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(74, "--", "", options0, "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 933, "Hg YSfQ,!'DeP", "Hg YSfQ,!'DeP", options0, 4193, 0, "");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLeftPad = (-22);
      Options options1 = options0.addOptionGroup(optionGroup0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("}+QQ<jYoW~!", "}+QQ<jYoW~!", options1, "}+QQ<jYoW~!", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp("m(ygCXk~@%xDFR+", options0);
      helpFormatter0.printOptions(mockPrintWriter0, 18, options0, 18, 71);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "\n", "", options0, 0, 0, (String) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options0;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1359, "", options2);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 34, "M>g", "M>g", options1, 313, (-786), "M>g");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " ");
      Option option0 = new Option("", "o", true, "--");
      option0.setArgName("");
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) optionGroup0;
      objectArray0[3] = (Object) stringBuffer0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 125, "", "", options0, (-2), (-909), "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("usage: ", options0);
      helpFormatter2.getLongOptSeparator();
      helpFormatter2.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) null, 3, "usage: ", " ", options0, (-1809), 1, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0);
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "-", "", options0, (-62), 2351, "\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " ");
      Option option0 = new Option("", "o", true, "--");
      option0.setArgName("");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("'^d3_P", "'^d3_P", options2, "", true);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), (String) null, options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = new StringBuffer(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 58, "=F1DF0Au", "usage: ", options0, 74, 10, (String) null, true);
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "wHrD=\" V}]LD^qUw", "k", options0, 0, (-2764), "k", false);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "[");
      Options options2 = options1.addOption("", "--", false, " ");
      Option option0 = new Option("arg", "--", true, "");
      options2.helpOptions();
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options3.getOptions();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options3.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("usage: ", ",'w~IK2", options3, "", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = new StringBuffer(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", false, "--");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 116, "-", "", options1, 90, 1772, "-", true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      Option option0 = new Option("arg", false, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("QMgLkw3g;Y'{?h09ve", "QMgLkw3g;Y'{?h09ve", options1, "QMgLkw3g;Y'{?h09ve", false);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
//      try { 
        stringBuffer0.insert(2, 'C');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      options0.addOption("", "--", true, "--");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 525, 916, "Cannt add valu, list full.");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) null, 74, "0F");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "[");
      Options options2 = options1.addOption("", "--", false, " ");
      Option option0 = new Option("arg", "--", true, "");
      options2.getMatchingOptions("usage: ");
      option0.setArgName("arg");
      Options options3 = options2.addOption(option0);
      helpFormatter1.setWidth((-3298));
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("usage: ", ",'w~IK2", options3, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = new StringBuffer(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "usage: ", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(53);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "arg";
      objectArray0[3] = (Object) stringBuffer0;
      objectArray0[4] = (Object) filterOutputStream0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 64, "mG?:t@Fk/PA'Dm/", "usage: ", options0, 4503, (-4236), "`", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = new StringBuffer(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4503, "\n", "-", options1, 0, 74, "", false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = ":^|0/(w;~Zbuh.4(E!";
      helpFormatter0.setOptPrefix("arg");
      helpFormatter0.getDescPadding();
      String string0 = "org.apache.commons.cli.Option";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Option", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" | ");
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2042, ">'", "3]6!4Qo@", (Options) null, "3]6!4Qo@");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-85));
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("J 0LRs %URXG", options0, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "[");
      Options options2 = options1.addOption("", "--", false, " ");
      Option option0 = new Option("arg", "--", true, "");
      options2.getMatchingOptions("Sx|Q93");
      option0.setArgName("arg");
      Options options3 = options2.addOption(option0);
      helpFormatter1.printHelp("usage: ", ",'w~IK2", options3, "F.fMh'", true);
      helpFormatter1.setOptPrefix("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1689), "", "--", options1, "2/x~;*L~eu%DlzpZ6", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Cannot add value, list full.";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("Cannot add value, list full.", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 64;
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("'", "'", (Options) null, "'", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~cmX8-y'@H;U/nX");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2876);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2876), "Y[^U?");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("", "p", true, "j,b]Mq1{g9|;in");
      options1.hasLongOption("p");
      helpFormatter0.setLongOptPrefix("k/4d_?mdT91Mc-,=;$Z");
      helpFormatter0.createPadding(899);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("k/4d_?mdT91Mc-,=;$Z");
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 1049, options0, 1559, 1049);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "Cannot add value, list full.", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("", "p", true, "j,b]Mq1{g9|;in");
      options1.hasLongOption("p");
      helpFormatter0.setLongOptPrefix("k/4d_?mdT91Mc-,=;$Z");
      helpFormatter0.createPadding(899);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("k/4d_?mdT91Mc-,=;$Z");
      helpFormatter1.printHelp(1559, "--", "", options1, "", true);
      File file0 = MockFile.createTempFile("nqA(jEkBMo(0", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 0, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "#cOi";
      helpFormatter0.printHelp("#cOi", "#cOi", options0, "", true);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2532, "#cOi", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Cannot add value, list full.";
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("arg", false, "arg");
      options1.hasLongOption("");
      helpFormatter0.printHelp("Cannot add value, list full.", options1, false);
      String string1 = "-Ii";
      helpFormatter0.setLongOptPrefix("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '$';
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getLongOptSeparator();
      int int0 = 1;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "-Ii");
      int int1 = 37;
      StringBuffer stringBuffer2 = new StringBuffer("\n");
      helpFormatter0.renderWrappedText(stringBuffer2, 1, 1, "   ");
      PrintWriter printWriter0 = null;
      String string2 = "<.slu(gKK@/";
      options1.addOption("", false, "-Ii");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 34, "org.apache.commons.cli.HelpFormatter$1", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options0 = new Options();
      options0.addOption("", "p", false, "j,b]Mq1{g9|;in");
      helpFormatter0.printHelp("Cannot add value, list full.", options0, false);
      helpFormatter0.setSyntaxPrefix("Cannot add value, list full.");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 74, 2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      boolean boolean0 = false;
      Option option0 = new Option("xR1", "G@5w");
      options0.addOption(option0);
      Options options1 = options0.addOption("arg", false, "arg");
      options1.hasLongOption("p");
      helpFormatter0.printHelp("Cannot add value, list full.", options1, false);
      String string0 = "-Ii";
      helpFormatter0.setLongOptPrefix("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '$';
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        options1.addOption("--", "Pzxe", false, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Option option0 = new Option("arg", "--");
      option0.setArgName("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      Options options2 = options1.addOption(option0);
      options2.addOption(option0);
      helpFormatter0.printHelp("arg", "arg", options1, (String) null, true);
      helpFormatter0.setOptPrefix("F.fMh'");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(',');
      stringWriter1.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "<4&_ei";
      helpFormatter0.createPadding(32);
      helpFormatter0.createPadding(32);
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 2398, options0, 2245, 369);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2245, 36, "M^s|I\"");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "p";
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("arg", false, "arg");
      options1.hasLongOption("p");
      helpFormatter0.printHelp("Cannot add value, list full.", options1, false);
      boolean boolean0 = true;
      Options options2 = new Options();
      options2.addOption("", "Cf`f`Q", false, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0);
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("+@D)o#]");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 424, " ", "7|t^dJO K;?B2N#Tdh*", options0, 13, 13, "-", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("", "p", true, "j,b]Mq1{g9|;in");
      options1.hasLongOption("p");
      helpFormatter0.setLongOptPrefix("k/4d_?mdT91Mc-,=;$Z");
      helpFormatter0.createPadding(899);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(13);
      helpFormatter0.renderWrappedText(stringBuffer0, 899, (-2801), "   ");
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 97, (String) null, "cs!-oIzb]#=uyR1", options0, 587, 1987, "[", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("arg", false, "arg");
      options1.hasLongOption("p");
      helpFormatter0.printHelp("Cannot add value, list full.", options1, false);
      helpFormatter0.setLongOptPrefix("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '$';
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "-Ii");
      StringBuffer stringBuffer2 = new StringBuffer("\n");
      helpFormatter0.renderWrappedText(stringBuffer2, 1, 1, "   ");
      options1.addOption("", false, "-Ii");
      StringBuffer stringBuffer3 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer1, 1, 1, "usage: ");
      helpFormatter0.getLongOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<\">-PU|'/p/0egI@-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "   ";
      objectArray0[2] = (Object) options1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 115, "", "L", options1, 1, 1861, "L", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1775);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "[");
      helpFormatter1.setNewLine(",'w~2");
      helpFormatter0.createPadding(3);
      helpFormatter1.getWidth();
      helpFormatter0.printHelp(74, "arg", "&mI1,]q", options1, "b", true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("arg", true, "arg");
      options1.hasLongOption("");
      helpFormatter0.printHelp("Cannot add value, list full.", options1, true);
      helpFormatter0.setLongOptPrefix("");
      options1.addOption("", "fF2EbS@", true, "usage: ");
      String string0 = ")`fBUo.De";
      Option option0 = null;
//      try {
        option0 = new Option(")`fBUo.De", "]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ')`fBUo.De' contains an illegal character : ')'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", "arg", options0, "");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1775);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "[");
      Options options2 = options1.addOption("", "--", false, " ");
      Option option0 = new Option("arg", "--", true, "");
      Options options3 = options2.addOption(option0);
      helpFormatter1.printHelp("usage: ", ",'w~IK2", options3, "F.fMh'", true);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((-2), "\n", (String) null, options3, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1773);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = (-1818);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1818), (-1818), "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1773);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.rtrim("");
      helpFormatter0.printHelp("' was specified but an option from this group ", "", options1, "[");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("", 32, 1773);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      helpFormatter0.setLongOptPrefix("p");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "-Ii");
      StringBuffer stringBuffer2 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer1, 452, 1, "W^((+");
      Options options1 = new Options();
      Options options2 = options0.addOption("arg", "W^((+", true, "-Ii");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "(*WB", "   ", options2, (-2594), 452, "W^((+", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("arg", false, "arg");
      options1.hasLongOption("p");
      helpFormatter0.printHelp("Cannot add value, list full.", options1, false);
      helpFormatter0.setLongOptPrefix("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '$';
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "cmdLineSyntax not provided");
      StringBuffer stringBuffer2 = new StringBuffer("\n");
      helpFormatter0.renderWrappedText(stringBuffer2, 1, 1, "   ");
      PrintWriter printWriter0 = null;
      Options options2 = options1.addOption("", false, "cmdLineSyntax not provided");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "cmdLineSyntax not provided", "<.slu(gKK@/", options2, 37, 85, "Cannot add value, list full.", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("arg", false, "arg");
      options1.hasLongOption("p");
      helpFormatter0.printHelp("Cannot add value, list full.", options1, false);
      options0.hasLongOption("p");
      helpFormatter0.printHelp("N>", options1, true);
      helpFormatter0.setLongOptPrefix("cmdLineSyntax not provided");
      helpFormatter0.createPadding(9);
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "", "Y", options1, "bXS]U#]PD1%9t8\"`9dR", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "5w%Q{n$02Y3seJ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(406, "kBXVj+UFOF", "", (Options) null, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1773);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.rtrim("");
      helpFormatter0.printHelp("' was specified but an option from this group ", "", options1, "[");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "The option '");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5084, "", options1);
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " ");
      Option option0 = new Option("", "o", true, "--");
      option0.setArgName("");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("6_ a>>|R", "", options2, "o", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "[");
      Options options2 = options1.addOption("", "--", false, " ");
      Option option0 = new Option("arg", "--", true, "");
      options2.getMatchingOptions("usage: ");
      options2.helpOptions();
      option0.setArgName("arg");
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options3.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("usage: ", ",'w~IK2", options3, "", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      Options options1 = options0.addOption((String) null, "CVij\"c|\u0007\"&U", true, "");
      helpFormatter0.printHelp("m:k", options1, false);
      helpFormatter0.setSyntaxPrefix("CVij\"c|\u0007\"&U");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-1585));
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter1.renderWrappedText(stringBuffer0, 74, (-1917), "j,b]Mq1{g9|;in");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("", "p", true, "j,b]Mq1{g9|;in");
      options1.hasLongOption("p");
      helpFormatter0.setLongOptPrefix("k/4d_?mdT91Mc-,=;$Z");
      helpFormatter0.createPadding(899);
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1288), "p", "k/4d_?mdT91Mc-,=;$Z", options1, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "[");
      Options options2 = options1.addOption("", "--", false, " ");
      Option option0 = new Option("arg", "--", true, "");
      options2.getMatchingOptions("Sx|Q93");
      option0.setArgName("arg");
      Options options3 = options2.addOption(option0);
      helpFormatter1.printHelp("usage: ", ",'w~IK2", options3, "F.fMh'", true);
      helpFormatter1.setOptPrefix("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1689), "", "--", options1, "2/x~;*L~eu%DlzpZ6", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      options0.addOption("", "p", false, "j,b]Mq1{g9|;in");
      options0.hasLongOption("");
      helpFormatter0.printHelp("p", options0, false);
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.createPadding(8);
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(64, "   ", "        ", options0, " [ARG]", true);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1775);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "[");
      Options options2 = options1.addOption("", "--", false, " ");
      Option option0 = new Option("arg", "--", true, "");
      Options options3 = options2.addOption(option0);
      helpFormatter1.printHelp("usage: ", ",'w~IK2", options3, "F.fMh'", true);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setNewLine("^HV@i@c\tS");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setDescPadding(1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 104, 31);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "p";
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("", "p", false, "usage: ");
      options1.hasLongOption("p");
      helpFormatter0.printHelp("Cannot add value, list full.", options1, false);
      helpFormatter0.setLongOptPrefix("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '$';
      charArray0[2] = 'x';
      charArray0[3] = 'R';
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-429));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("", "p", false, "j,b]Mq1{g9|;in");
      options1.hasLongOption("p");
      helpFormatter0.printHelp("Cannot add value, list full.", options1, false);
      helpFormatter0.setLongOptPrefix("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '$';
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "cmdLineSyntax not provided");
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 37, 74, "NE-BIA");
      helpFormatter0.renderWrappedText(stringBuffer2, 1, 1, "   ");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("", "p", false, "j,b]Mq1{g9|;in");
      helpFormatter0.printHelp("Cannot add value, list full.", options0, false);
      helpFormatter0.setSyntaxPrefix("Cannot add value, list full.");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter1.renderOptions(stringBuffer0, 32, options1, 74, 3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "F;lR]", options0, "%IBJpD&ms", true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setNewLine((String) null);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2979, options0, 3036, 1668);
      helpFormatter0.renderWrappedText(stringBuffer1, 74, 74, "p?}N@lwZ':#$\"yng2*)");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("", "p", false, "j,b]Mq1{g9|;in");
      helpFormatter0.printHelp("Cannot add value, list full.", options0, false);
      helpFormatter0.setSyntaxPrefix("Cannot add value, list full.");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(0);
      helpFormatter1.printHelp("p", "Qp", options1, "", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter2.setLongOptSeparator("Cannot add value, list full.");
      helpFormatter2.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 1315;
      Options options0 = new Options();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        options0.addOption("-", "arg", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = ", ";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", ", ", options0, "yxX#W49YH<h tp2'K1");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      helpFormatter0.printHelp("p", "", options0, "5@poEj", true);
      Options options1 = options0.addOption("", "p", false, "j,b]Mq1.Q{9q;in");
      helpFormatter0.printHelp("Cannot add value, list full.", options0, false);
      helpFormatter0.setSyntaxPrefix("Cannot add value, list full.");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(0);
      helpFormatter1.printHelp("p", "Qp", options1, "", false);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setNewLine("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      helpFormatter1.printHelp("-", "}1#o:`tJRJ[3", options1, "--");
      helpFormatter2.createPadding(0);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "F;lR]", options0, "%IBJpD&ms", true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.createPadding(325);
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(63, "%IBJpD&ms", "                                                                                                                                                                                                                                                                                                                                     ", options0, "                                                                                                                                                                                                                                                                                                                                     ", true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 31;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultNewLine = "i";
      helpFormatter0.defaultNewLine = "i";
      String string0 = ";$36v^_rwd{z[MpOn";
      helpFormatter0.defaultLeftPad = 44;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 1, ";$36v^_rwd{z[MpOn");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "\n", options0, "\n", true);
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter0.setNewLine("");
      helpFormatter1.createPadding(2066);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.defaultDescPad = 60;
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp(2066, "", "--", options0, " ", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("--");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      String string0 = helpFormatter0.createPadding(1711);
      helpFormatter0.printHelp(1711, "--", "", options0, (String) null);
      helpFormatter0.printHelp(1711, string0, "--", options0, "n##$G^b2XP8Fzv^Q0Ni");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("", "p", false, "j,b]Mq1{g9|;in");
      helpFormatter0.printHelp("Cannot add value, list full.", options0, false);
      helpFormatter0.setSyntaxPrefix("Cannot add value, list full.");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(0);
      helpFormatter1.printHelp("p", "Qp", options1, "", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.setNewLine("-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "J 0LRs %URXG";
      Options options0 = new Options();
      options0.hasLongOption("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-429), "cmdLineSyntax not provided");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("", "p", false, "j,b]Mq1{g9|;in");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("Cannot add value, list full.", options1, false);
      helpFormatter0.setLongOptPrefix("");
      char[] charArray0 = new char[5];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      charArray0[0] = 'B';
      charArray0[1] = '$';
      charArray0[2] = 'x';
      charArray0[3] = 'R';
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1044), "Cannot add value, list full.");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1773);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1788), " ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      helpFormatter0.setNewLine("SW-z9}u");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 25, 25, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("J 0LRs %URXG", options0, true);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setDescPadding(0);
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("J 0LRs %URXG", options0, true);
      helpFormatter0.setSyntaxPrefix((String) null);
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "%IBJpD&ms", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultLeftPad = 735;
      helpFormatter0.getNewLine();
      String string0 = "";
      String string1 = "A CloneNotSupportedException was thrown: ";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      helpFormatter0.setSyntaxPrefix("   ");
      int int0 = (-610);
      Options options0 = null;
      int int1 = (-1038);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-610), (Options) null, (-610), (-1038));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim(" [ARG]");
      int int0 = 456;
      StringWriter stringWriter0 = new StringWriter(456);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("J9", true, " [ARG]");
      Option option0 = null;
//      try {
        option0 = new Option(helpFormatter0.defaultNewLine, boolean0, helpFormatter0.defaultSyntaxPrefix);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      boolean boolean0 = false;
      String string0 = "j,b]Mq1{g9|;in";
      Options options1 = options0.addOption("", "p", false, "j,b]Mq1{g9|;in");
      options1.hasLongOption("p");
      helpFormatter0.printHelp("Cannot add value, list full.", options1, false);
      String string1 = "cmdLineSyntax not provided";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1872, "Cannot add value, list full.");
      helpFormatter0.setLongOptPrefix("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '$';
      charArray0[2] = 'x';
      charArray0[3] = 'R';
      charArray0[4] = 'L';
      // Undeclared exception!
//      try { 
        mockPrintWriter0.write(charArray0, 13, 74);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.BufferedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0);
      helpFormatter0.createPadding(171);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("   ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine(" ");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1277;
      helpFormatter0.setDescPadding(9);
      String string0 = "org.apache.commons.cli.OptionGroup";
      String string1 = "vQ7TiSMPbSnL";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string2 = "";
      options2.addOption((String) null, "", true, ", ");
      Option option0 = null;
//      try {
        option0 = new Option("-", " ", true, "[ Options: [ short ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("", "p", false, "j,b]Mq1{g9|;in");
      options1.hasLongOption("p");
      helpFormatter0.printHelp("Cannot add value, list full.", options1, false);
      helpFormatter0.setLongOptPrefix("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '$';
      charArray0[2] = 'x';
      charArray0[3] = 'R';
      charArray0[4] = 'L';
      helpFormatter0.createPadding(74);
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(13, "j,b]Mq1{g9|;in", "                                                                          ", options1, "j,b]Mq1{g9|;in", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultDescPad = 3948;
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 1902, 1902, "");
      Options options0 = new Options();
      String string1 = "d>,C+VGW_=;82J%I";
      // Undeclared exception!
//      try { 
        options0.addOption("d>,C+VGW_=;82J%I", "d>,C+VGW_=;82J%I", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'd>,C+VGW_=;82J%I' contains an illegal character : '>'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("", "p", false, "j,b]Mq1{g9|;in");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("Cannot add value, list full.", options1, false);
      helpFormatter0.setLongOptPrefix("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '$';
      charArray0[2] = 'x';
      charArray0[3] = 'W';
      charArray0[4] = 'L';
      helpFormatter0.createPadding(74);
      helpFormatter0.getWidth();
      helpFormatter0.printHelp((int) '$', "j,b]Mq1{g9|;in", "                                                                          ", options1, "j,b]Mq1{g9|;in", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 2, "\n");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      String string0 = "";
      String string1 = "Ak~'$";
      options0.addOption("", false, "Ak~'$");
      Option option0 = new Option("", "\n", true, "");
      Options options1 = options0.addOption(option0);
      option0.setLongOpt(" ");
      options1.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "[ option: ", "", options1, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1773);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "+|B#= .Bu";
      helpFormatter0.defaultLongOptPrefix = "+|B#= .Bu";
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.setSyntaxPrefix("' was specified but an option from this group ");
      stringBuffer0.codePoints();
      stringBuffer0.append(false);
      stringBuffer0.codePoints();
      // Undeclared exception!
//      try { 
        stringBuffer0.setCharAt(74, ')');
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.defaultArgName = ":^|0/(w;~Zbuh.4(E!";
      helpFormatter0.setOptPrefix("arg");
      helpFormatter0.getDescPadding();
      String string0 = "org.apache.commons.cli.Option";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Option", (Options) null);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.getMatchingOptions("--");
      options0.addOption("", "p", false, "j,b]Mq1{g9|;in");
      helpFormatter0.printHelp("Cannot add value, list full.", options0, false);
      helpFormatter0.setArgName("p");
      helpFormatter0.setSyntaxPrefix("Cannot add value, list full.");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 32, "t1c!L*t`Kb]?hy2CA>i");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "BOdcff'.&VwR2Q+";
      helpFormatter0.getWidth();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.getBuffer();
      int int1 = 0;
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      String string1 = "F@<njL9,7Yv\"J\"u";
      // Undeclared exception!
//      try { 
        options0.addOption("F@<njL9,7Yv\"J\"u", "arg", false, "F@<njL9,7Yv\"J\"u");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'F@<njL9,7Yv\"J\"u' contains an illegal character : '@'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SKw{!AX!Vbf");
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option(">", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '>'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.defaultLongOptPrefix = "hS";
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setArgName("gC7jQ4jh:zsm\"T");
      helpFormatter0.setOptPrefix("gC7jQ4jh:zsm\"T");
      int int0 = 3133;
      helpFormatter0.setWidth(3133);
      String string1 = "#1hf=- ";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("Vvuj~n=", "gC7jQ4jh:zsm\"T", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'Vvuj~n=' contains an illegal character : '~'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "BOdcff'.&VwR2Q+";
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("BOdcff'.&VwR2Q+", (-398), (-2));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultNewLine = "i";
      helpFormatter0.defaultNewLine = "i";
      String string0 = ";$36v^_rwd{z[MpOn";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 326, 326, ";$36v^_rwd{z[MpOn");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3744);
      String string0 = " ";
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.appendCodePoint(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 1454, 0, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("-", false, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1889;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1889, "", "", options0, "NEl.U.~x2");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\\#=ryO}C#%9xFe}6%g";
      int int0 = 1;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "org.apache.commons.cli.HelpFormatter");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("QOR(G~GC'\"S4");
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(1796);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, "-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      int int0 = 2806;
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      stringBuffer0.codePoints();
      Locale locale0 = new Locale("89B36FOwRZJ");
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "`qm>87{Drc`o", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2806, "`qm>87{Drc`o");
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", "usage: ", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      File file0 = MockFile.createTempFile("   ", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('|');
      int int0 = 9;
      helpFormatter0.printWrapped(printWriter0, 9, 0, "   ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) file0;
      // Undeclared exception!
//      try { 
        mockPrintWriter0.printf((String) null, objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 209;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 209, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      String string0 = "[";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      mockFileOutputStream0.write(byteArray0);
      Options options0 = new Options();
      options0.getOption("\"");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), options0, (-2), 0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }
}
