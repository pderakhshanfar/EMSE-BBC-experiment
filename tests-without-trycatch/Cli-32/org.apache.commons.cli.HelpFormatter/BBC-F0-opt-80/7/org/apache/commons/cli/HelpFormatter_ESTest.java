/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:01:50 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.rtrim("");
      helpFormatter0.setDescPadding((-185));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(44, "gF,Y3r~PD$2", (String) null, options0, "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Q');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", false, "-");
      int int0 = 1391;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 1391, 0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 1806;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1806, (-718), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultDescPad = 42;
      String string0 = "H,40V1M-r";
      Options options0 = new Options();
      Options options1 = options0.addOption("e", "", false, "org.apache.commons.cli.Options");
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("0M", "H,40V1M-r", options1, "", true);
      String string1 = null;
      helpFormatter0.defaultOptPrefix = null;
      options0.getOptions();
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(3);
      helpFormatter0.getOptPrefix();
      int int0 = (-3235);
      String string2 = "";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("usage: ", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.createPadding(13);
      helpFormatter0.defaultDescPad = (-2);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("u", ">", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, false, " | ");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-585), "\n", options3);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.cli.Option cannot be cast to java.lang.Comparable
//         //
//         verifyException("java.util.ComparableTimSort", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.close();
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) stringWriter1;
      objectArray0[8] = (Object) stringWriter0;
      stringWriter0.flush();
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      stringWriter0.append((CharSequence) "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 1, (-3391), "<nK^j:XSl .wQf_O1");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.defaultOptPrefix = "1";
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 7, "\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions((PrintWriter) null, 1, options0, 14, 64);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "Z.=+ wlAb+e1?i(r4T");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2033, "=7%|@o+n1O3()0", "arg", options0, (-3499), (-2), ", ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-4652));
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 8, "arg");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-756);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.defaultDescPad = (-756);
      helpFormatter0.defaultWidth = (-756);
      String string0 = "y|?pTn3#S\"`20R]vL6";
      PrintWriter printWriter0 = null;
      Options options0 = null;
      int int1 = 2;
      String string1 = "org.apache.commons.cli.ParseException";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("' contains an illegal character : '", (Options) null, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      option0.setArgName("");
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 13, "3");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.ParseException");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.findWrapPos(" ]", 2, (-1));
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("-", "]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(" ", " ", options0, " ");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = " ]";
      Option option0 = new Option((String) null, false, " ]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      option0.setArgName(",,7U.s/P{_-?1(i~");
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      String string1 = "~9y";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "~9y", options1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 772, (byte)63, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("");
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "--", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultDescPad = 714;
      helpFormatter0.setNewLine("");
      helpFormatter0.defaultLeftPad = 1849;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.defaultLeftPad = 1849;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      helpFormatter0.defaultDescPad = 1849;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.renderWrappedText(stringBuffer0, 2225, 78, " ");
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos("Y(hh<`O[j)MCUmBH_4", 1849, 2225);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("");
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-3978), "3Bl{uz\"o]9Q8", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-1351);
      String string0 = ">cE(Fg2D24dw?bhU";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2846, ">cE(Fg2D24dw?bhU", "", (Options) null, "line.separator", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "[Zl", "[Zl", options0, "[Zl");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("NO_ARGS_ALLOWED", "v", (Options) null, "v", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("--");
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("line.separator", options1);
      MockFile mockFile0 = new MockFile("line.separator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 120, "", options0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("--");
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("line.separator", options1);
      MockFile mockFile0 = new MockFile("line.separator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp(1644, "k2 SDi", "", options0, "k2 SDi", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 90, "line.separator", "k2 SDi", options0, 90, (-2), "line.separator", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-90), " | ", "J[ham&iZgYZM7V.g_", options0, 3, 74, "usage: ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("D)1aA");
      String string0 = ">";
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'q';
      mockPrintWriter0.print(charArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-298), (-298), " | ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "e$>h";
      helpFormatter0.defaultDescPad = (-539);
      Options options0 = new Options();
      options0.getMatchingOptions("peuy/ygJL:z5M2c[UR");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", " ", options0, "--");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "--");
      Option option0 = new Option((String) null, false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", false, "Q8!;asc!#");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      option0.setArgName("Z!*xs;");
      option0.setArgName((String) null);
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("I!`ra\"HDe;41p", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("--");
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("07oVX'HHp", options1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(63, "' was specified but an option from this group ", "", (Options) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, ">{>#_");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-53), "", "", options1, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "c[g>/boB'e-TF?xl";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("c[g>/boB'e-TF?xl", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(printWriter0, 3, " ", "-", options0, 59, 1271, (String) null, false);
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1));
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", "", options0, "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 73, "\"", "--", options0, 64, 74, "-", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "*2ZQeC";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3271), "*2ZQeC", "*2ZQeC", options0, "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('7');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      String string0 = null;
      Options options0 = null;
      helpFormatter0.setLongOptPrefix(")~O");
      mockPrintWriter0.println(">A4C>5F`^8{4k*y");
      int int0 = 13;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4551, (String) null, (String) null, (Options) null, 13, 13, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.GERMAN;
      Options options0 = new Options();
      options0.addOption("arg", true, "<");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "AT@ne`L_;";
      objectArray0[2] = (Object) locale1;
      mockPrintWriter0.printf("--", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 74, "R+a0}8g*'Npjx#R", "Y9p2Vr'h!L", options0, 74, 74, "", false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) "AT@ne`L_;";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      Object object1 = new Object();
      objectArray0[8] = object1;
      mockPrintWriter0.printf(" ", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 42, "usage: ", (String) null, options0, 1, 74, "6`nFf}k.@%ZU_f,r", false);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, (-3534), options0, 0, 0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3534), "<");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 9, options0, 959, 959);
      helpFormatter0.rtrim("NO_ARGS_ALLOWED");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 22, 3, "c^V4EYwt[Q8vhl)+f");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.US;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.rtrim("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", false, " ");
      options1.getMatchingOptions("-");
      helpFormatter0.printHelp("\n", "-", options0, "usage: ");
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getDisplayVariant();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("gBUw+TPM^");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter2.renderOptions(stringBuffer0, (-182), options0, 1, 60);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("<", " ] [ long ", (Options) null, "<");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "--");
      Options options3 = options2.addOption("yh", "--", true, "");
      Option option0 = new Option("", "", true, "");
      helpFormatter0.printHelp("gkEdILJ", "=A(n_^k,", options3, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1934));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o}");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "-");
      helpFormatter0.renderOptions(stringBuffer0, 63, options1, 11, 31);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "--");
      Options options3 = options2.addOption("yh", "--", true, "");
      Option option0 = new Option("", "", true, "");
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "]ADbCluA4]k@une", options4);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "-", options0, " ", false);
      helpFormatter1.rtrim("arg");
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.GERMAN;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "--");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "<@Cr%\"]C";
      objectArray0[3] = (Object) "<@Cr%\"]C";
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup0);
      options0.addOption((String) null, true, (String) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter1.printf("[ARG...]", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 2, "|^-8SB& BPybl/bY", "[ARG...]", options1, 640, 530, "ue", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      Options options0 = new Options();
      options0.hasShortOption("@");
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      helpFormatter1.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("w:b5U KY#DNl", "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8aYC!?[<psU\"DCF");
      helpFormatter0.findWrapPos("bkNt2\u0006.[*viy;", 3098, 3098);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "T<IxuS:IMmS+5$j3!");
      options1.addOption("", "usage: ", false, "w*Y3P@\"x\"a5m-M");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedInputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) pipedInputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", true, "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(dataOutputStream0);
      mockPrintWriter1.printf("AT@ne`L_;", objectArray0);
      helpFormatter0.printHelp(printWriter0, 26, "x9Y\"e8%m5_MiW&", "", options3, 74, 640, "<", false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption((String) null, false, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("The opt' ion '", "The opt' ion '", options0, "The opt' ion '");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 325, 325, "");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("-", "-", options0, "{JM$luSyh");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{JM$luSyh");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 53, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedInputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) pipedInputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      int int0 = 123;
      String string0 = "7\"3h3la?mM";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", true, "usage: ");
      int int1 = (-284);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 123, "7\"3h3la?mM", "x9Y\"ei8%m5_MiWb&", options3, 0, (-284), "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option((String) null, "\"");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(" ", options1, true);
      helpFormatter0.printHelp("X=v8@97H`oubB8", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "--");
      Options options1 = options0.addOption(option0);
      option0.setType((Object) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "arg", "arg", options1, 32, 1244, "--");
      helpFormatter0.defaultOptPrefix = "X";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "q", "jhRrs", options0, 9, 32, "--");
      helpFormatter0.createPadding(31);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 110, "jhRrs", "org.apache.commons.cli.AlreadySelectedException", (Options) null, 545, 24, "/>_al]rD-~wV");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      mockPrintWriter0.printf("", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "--", true, "@~1b!pPv");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 4419, "p2K_Gh", "gFVaU_AZ4,V", options1, 4419, (-483), "Cb*jV!LQv.", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintWriter0.print((-756L));
      Locale locale1 = Locale.forLanguageTag("arg");
      objectArray0[2] = (Object) mockFileOutputStream0;
      locale0.getDisplayVariant(locale1);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale2 = Locale.CANADA;
      locale0.getDisplayCountry(locale2);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-276), (String) null, "", (Options) null, (-276), (-276), "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "P,";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P,");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("--");
      String string1 = null;
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "", options1, (String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8aYC!?[<psU\"DCF");
      helpFormatter0.findWrapPos("bkNt2\u0006.[*viy;", 3098, 3098);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "-", options0, "");
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Locale locale0 = Locale.FRENCH;
      String string0 = "";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      Locale locale1 = Locale.GERMANY;
      String string1 = "";
      mockPrintWriter0.printf(locale1, "", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 805, options0, 805, 0);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 805, 0, "Illegal option name '");
      helpFormatter0.renderWrappedText(stringBuffer2, 805, 0, "");
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = helpFormatter1.defaultLeftPad;
      int int1 = HelpFormatter.DEFAULT_DESC_PAD;
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("f}`=/l");
      helpFormatter0.printHelp(462, "=fNYg", "org.apache.commons.c!i.Opti ns", options0, "RZ0v;S^2qYeS;=I*");
      helpFormatter0.setOptPrefix("RZ0v;S^2qYeS;=I*");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "-", false, "Z:SX>nRXcxoN/r%2\"");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1053, options3, 713, (-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Options options0 = new Options();
      String string0 = "`m84";
      String string1 = "--";
      OptionGroup optionGroup0 = null;
      String string2 = "AA";
      options0.hasShortOption("`m84");
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      helpFormatter1.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("w:b5U KY#DNl", "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.GERMAN;
      locale1.getDisplayVariant();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getMatchingOptions("");
      helpFormatter1.printHelp(" ", "--", options0, "sQvpD19NVgB@+");
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.printHelp(640, "-", " ", options0, "#.*H5l", false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption((String) null, true, "arg");
      helpFormatter0.getOptionComparator();
      options0.hasOption((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-4080), "'M,~", "Yumkm[", options1, 2, (-995), "*@^FqWcj(7v", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-448), (-448), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedInputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) pipedInputStream0;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", true, "usage: ");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "", "", options2, (-1), (-1070), "*@^FqWcj(7v", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.write(3);
      String string0 = "";
      int int0 = 3;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 3, (-247));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("", " ", true, "--");
      int int0 = helpFormatter0.defaultLeftPad;
      int int1 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter1.rtrim("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionValidator");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 846, options0, 1, (-389));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.GERMAN;
      locale0.getDisplayVariant();
      Options options0 = new Options();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options0, true);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0BjTlq;", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "4CqJj!{NkrC;>QNAG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "4CqJj!{NkrC;>QNAG";
      objectArray0[1] = (Object) "0BjTlq;";
      Object object0 = new Object();
      mockPrintWriter0.print(3232L);
      Locale locale1 = Locale.forLanguageTag("[");
      Locale locale2 = Locale.CHINA;
      locale0.getDisplayVariant(locale2);
      mockPrintWriter0.printf(locale1, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale3 = Locale.CANADA;
      locale1.getDisplayCountry(locale0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 63;
      String string0 = "=P]fegJg1";
      Options options0 = new Options();
      String string1 = null;
      Options options1 = options0.addOption("", "", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 63, "=P]fegJg1", options2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string1 = "\\_;_ Z2eBy,6'u\"";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2, 2, "5@Opvw5");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintWriter0.print((-756L));
      Locale locale1 = Locale.forLanguageTag("arg");
      locale1.getDisplayVariant();
      objectArray0[2] = (Object) mockFileOutputStream0;
      locale0.getDisplayVariant(locale1);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale2 = Locale.CANADA;
      locale0.getDisplayCountry(locale2);
      Options options0 = new Options();
      helpFormatter0.printHelp("ix;-", "T", options0, "");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("ow$N$&)+m9n%t", "arg", options0, "r?G8/b&eH&3/frD)");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.GERMAN;
      locale0.getDisplayVariant();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("has already been selected: '", "1w`?Z7]", options0, "");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("bkNt2\u0006.[*viy;", 3, 3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0BjTlq;", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "4CqJj!{NkrC;>QNAG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayVariant();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "   ");
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      options0.addOption("", false, "");
      options0.hasShortOption("");
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("", " ", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.Option", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.format("M", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter1, 672, "--");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedInputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) pipedInputStream0;
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Options options0 = new Options();
      options0.addOption("", "arg", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setDescPadding(4663);
      helpFormatter3.printHelp("kaumY;", "arg", options0, "zHss(|b");
      helpFormatter2.getArgName();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-275), "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.print('&');
      mockPrintWriter0.print((float) 1);
      helpFormatter0.rtrim("[ option: ");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintWriter0.print((-756L));
      Locale.forLanguageTag("arg");
      objectArray0[2] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale1 = Locale.CANADA;
      locale0.getDisplayCountry(locale1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "w,7BtZmdM=+2-9");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("arg", false, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("DHn", options2, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-275), "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.print((float) 1);
      mockPrintWriter1.println((long) 74);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2203, "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2509), (Options) null, 6, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "4CqJj!{NkrC;>QNAG";
      objectArray0[1] = (Object) "0BjTlq;";
      locale0.getDisplayVariant();
      objectArray0[2] = (Object) "0BjTlq;";
      objectArray0[4] = (Object) "4CqJj!{NkrC;>QNAG";
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "0BjTlq;", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      options0.hasOption("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "3,d(,]u}^{f\"", "", options0, (String) null);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.ENGLISH;
      mockPrintWriter0.printf(locale0, "usage: ", (Object[]) null);
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options3.addOption("c", true, "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.printf("arg", (Object[]) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1805, "!H(,`kRyv97[;+)H", "<", options1, 640, 4, "PZHg.,H0", true);
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 105, 105);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "");
      Option option0 = new Option((String) null, "arg", false, (String) null);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("{<;W!MK2", "org.apache.commons.cli.AlreadySelectedException", options2, (String) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintWriter0.print((-756L));
      Locale locale1 = Locale.forLanguageTag("arg");
      objectArray0[2] = (Object) mockFileOutputStream0;
      locale0.getDisplayVariant(locale1);
      mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "-");
      helpFormatter0.printHelp(">", options1, false);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("bkNt2\u0006.[*viy;", 3098, 3098);
      helpFormatter0.setArgName("5YPB+77SLFHz+i-JM^d");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "org.apache.commons.cli.AlreadySelectedException", true, "w*Y3P@\"x\"a5m-M");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", options1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", " ", true, "--");
      helpFormatter1.printHelp("org.apache.commons.cli.Option", options1, false);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", " ", true, "--");
      helpFormatter1.printHelp("-", options1, false);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 103, 0, "Bl4Cy'}E-6 d<tcR Y+");
      helpFormatter0.setLeftPadding(103);
      helpFormatter0.setLongOptPrefix("iL:l6MLv$wc,");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, (String) null, (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "";
      String string1 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      String string2 = " :: ";
      // Undeclared exception!
//      try { 
        options0.addOption("--", false, " :: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultOptPrefix = " ";
      // Undeclared exception!
//      try { 
        MockURI.parseServerAuthority((URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0BjTlq;", "usage: ");
      String string0 = "4CqJj!{NkrC;>QNAG";
      MockFile mockFile1 = new MockFile(mockFile0, "4CqJj!{NkrC;>QNAG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "4CqJj!{NkrC;>QNAG";
      objectArray0[1] = (Object) "0BjTlq;";
      locale0.getDisplayVariant();
      objectArray0[2] = (Object) "0BjTlq;";
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "4CqJj!{NkrC;>QNAG";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockFile1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 0, "4CqJj!{NkrC;>QNAG");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.setWidth((-2596));
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("-", "{VD`XAPs", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("+lJ[", 3, 3);
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(97, "'", "", (Options) null, (String) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("Oq");
      helpFormatter0.defaultSyntaxPrefix = "c\"Uo[Oc";
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.getArgName();
      String string0 = "G,T<";
      helpFormatter0.setSyntaxPrefix("G,T<");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      String string0 = "RD\\2d@gg6s%hC";
      Options options0 = new Options();
      helpFormatter0.setDescPadding(0);
      Options options1 = options0.addOption("", false, "RD\u0002d@gg6s%hC");
      options1.addOption("", "--", false, "--");
      options1.helpOptions();
      // Undeclared exception!
//      try { 
        options1.addOption(" | ", "", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ' | ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-274));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg", 0, 1);
      Locale locale0 = new Locale("-");
      Object[] objectArray0 = new Object[7];
      Locale locale1 = Locale.ENGLISH;
      mockPrintWriter0.println('6');
      locale0.getDisplayName(locale1);
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) printWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      mockPrintWriter0.format(locale0, "arg", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, 1, "");
      helpFormatter0.createPadding(1);
      MockFile mockFile0 = new MockFile("yfG+] j|[NH&yLI^");
      File file0 = MockFile.createTempFile("D2Vqh~ %L2gHL?l$f", "|fAt5l*Axl", (File) mockFile0);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(file0, "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7zJ";
      helpFormatter0.setNewLine("7zJ");
      String string1 = "^WrENAgE/r%";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
//      try {
        option0 = new Option("-", true, "R%");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = (-3186);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3186), (-4043), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = null;
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-1922));
      String string1 = "";
      options0.toString();
      options0.hasOption("--");
      // Undeclared exception!
//      try { 
        options0.addOption("\"h =nSz?s$IR", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '\"h =nSz?s$IR' contains an illegal character : '\"'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ".YPr>jEAzzezGsdn";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".YPr>jEAzzezGsdn");
      mockPrintWriter0.print((double) 3);
      helpFormatter0.setDescPadding((-771));
      Locale locale0 = new Locale("Z6M7o|", ".YPr>jEAzzezGsdn");
      mockPrintWriter0.printf(locale0, "line.separator", (Object[]) null);
      mockPrintWriter0.print((long) 74);
      String string1 = "n";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-153), "n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintWriter0.print((-756L));
      Locale.forLanguageTag("arg");
      objectArray0[2] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale1 = Locale.CANADA;
      locale0.getDisplayCountry(locale1);
      helpFormatter0.defaultNewLine = null;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-574);
      helpFormatter0.setWidth((-574));
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = null;
      // Undeclared exception!
//      try { 
        mockPrintWriter0.printf((String) null, (Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedInputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) pipedInputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", true, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-1070), "7\"3h3la?mM", "x9Y\"ei8%m5_MiWb&", options3, 0, (-276), "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("bkNt2\u0006.[*viy;", 3098, 3098);
      helpFormatter0.setArgName("5YPB+77SLFHz+i-JM^d");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "org.apache.commons.cli.AlreadySelectedException", false, "w*Y3P@\"x\"a5m-M");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", options1);
      assertEquals("5YPB+77SLFHz+i-JM^d", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      String string0 = "QlNWEKu)p=3+";
      helpFormatter0.setOptPrefix("QlNWEKu)p=3+");
      helpFormatter0.findWrapPos("", 278, 278);
      helpFormatter0.getSyntaxPrefix();
      int int0 = 0;
      String string1 = "5'uGy+ -^Wx";
      String string2 = "--";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      Options options2 = options1.addOption("W", false, "QlNWEKu)p=3+");
      // Undeclared exception!
//      try { 
        options2.addOption(" ?r", "-", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ' ?r' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      mockFile0.getCanonicalPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "CV3nf-SZ]3Xl4*pr{";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "CV3nf-SZ]3Xl4*pr{";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "CV3nf-SZ]3Xl4*pr{";
      objectArray0[4] = (Object) "CV3nf-SZ]3Xl4*pr{";
      objectArray0[5] = (Object) "CV3nf-SZ]3Xl4*pr{";
      objectArray0[6] = (Object) "/experiment/-";
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) "/experiment/-";
      mockPrintWriter0.printf("CV3nf-SZ]3Xl4*pr{", objectArray0);
      mockPrintWriter0.close();
      mockFile0.toURL();
      int int0 = 0;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptPrefix("/experiment/-");
      String string1 = "Z1qL7~dS";
      Options options0 = new Options();
      options0.addOption("", true, "knlj)~U$Q|8");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("--", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "erLYJ^{BVd)q";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      assertEquals("erLYJ^{BVd)q", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("-", "]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7~`BE8";
      helpFormatter0.setLongOptPrefix("7~`BE8");
      helpFormatter0.setSyntaxPrefix("7~`BE8");
      helpFormatter0.setWidth(31);
      helpFormatter0.setDescPadding(31);
      helpFormatter0.setLeftPadding(2116);
      int int0 = (-1);
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1470), "", "&jU0#8fzg8=\"bP#e/~", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }
}
