/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:02:33 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 1, "--");
      helpFormatter0.renderWrappedText(stringBuffer1, 31, (-482), "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 10;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, 74, "\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup2);
      int int1 = 15;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 15, "", options1);
      helpFormatter0.printHelp(34, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", options1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter((-2261));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "\n", options0, "\n");
      helpFormatter0.getNewLine();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-1533), (-135));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "q*8'w;CCk");
      helpFormatter0.setArgName("q*8'w;CCk");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp("{KAMnc:| f-jT\"Sg", "", options0, "DU}2E", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, 74, "\n");
      PrintWriter printWriter0 = mockPrintWriter0.append('g');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "j>R!T");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage(printWriter0, 10, "", options1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "j>R!T", ";fLr\"pDMlw", options0, 64, 64, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setArgName("--");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultLeftPad = (-2395);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2395));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1903), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 89, "--", options0);
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "|DOG", options0, "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, " ");
      helpFormatter0.setArgName("");
      helpFormatter0.setDescPadding((-4476));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("has already been slected: '", "has already been slected: '", options0, "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 101;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      int int1 = (-917);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 101, "has already been selected: '", "", options0, 101, (-917), "has already been selected: '");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      Options options0 = new Options();
      options0.addOption("arg", true, "!q53.\"o>Z Y6[O)V2");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, (-3020), "");
      helpFormatter1.findWrapPos("\n", 38, (-3020));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", ".MUEQzb%-C", true, "");
      // Undeclared exception!
//      try { 
        options1.addOption("2Hxc^TmRE$gJ@j", false, "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '2Hxc^TmRE$gJ@j' contains an illegal character : '^'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("V", "arg", true, (String) null);
      helpFormatter1.printHelp("-", "-", options1, "\n", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "usage: ");
      helpFormatter0.getWidth();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 902, "[", (String) null, options0, 902, 902, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(98);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.defaultLongOptPrefix = "*u51x";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2510, 2510, "*u51x");
      int int0 = 0;
      Options options1 = new Options();
      int int1 = 1231;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "*u51x", "org.apache.commons.cli.Options", options0, (-1117), 0, (String) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      Options options0 = new Options();
      Options options1 = options0.addOption("oM", true, "!q53.%o>ZW6[O)&2");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("usage: ");
      Options options2 = options1.addOption((String) null, "usage: ", false, "usage: ");
      options2.getOptionGroups();
      options2.hasLongOption("G/");
      helpFormatter1.printHelp(" ", "usage: ", options0, "oM", true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "|j*HB<4";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "ggw\"b26.?Cz";
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      Options options0 = null;
      int int0 = 0;
      String string1 = "";
      helpFormatter0.createPadding(25);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("ggw\"b26.?Cz", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 2, "\n");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 963, 1678, "8f7j]g");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      helpFormatter1.printHelp(1678, "AM[&{ kK+", "D#8S", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.getWidth();
      helpFormatter1.getArgName();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2900, 2900, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, (-429), "XkYyA^ih9'>U");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "|j*)B<4");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "ggw\"b26.?Cz";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.defaultLeftPad = (-885);
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("BoXX(srv:D");
      Options options0 = new Options();
      int int0 = 1;
      options0.hasShortOption("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(78, "\n", "BoXX(srv:D", options0, "BoXX(srv:D");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2510, 2510, " ");
      helpFormatter0.setArgName("9W?Z;d");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 30, "org.apache.commons.cli.HelpFormatter$1", " ", options0, 74, 1350, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "\n");
      helpFormatter0.getNewLine();
      helpFormatter0.renderOptions((StringBuffer) null, 8, options0, 1020, 1);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "|j*)B<4");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "ggw\"b26.?Cz";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp(1, "\n", "", options0, "\n");
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = "ZR5%Bk";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "n";
      PrintWriter printWriter0 = null;
      int int0 = (-352);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-352), "--");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2510, 2510, "");
      helpFormatter0.setArgName(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 65, 2510);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter1.renderOptions(stringBuffer0, 54, options0, 2510, 74);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, " ", "u=wFE?s\"4^Ao", options0, "<");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", ",3w4t{%~ca\"cwtuy");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, "usage: ", (Options) null, (-139), 1595, "-", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 2510, options0, 29, 0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ").when(comparator0).toString();
      doReturn((-834)).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = options0.addOption("", true, "\n");
      options1.addOption("y", true, "L8RR{");
      helpFormatter0.defaultWidth = (-1936);
      helpFormatter0.printHelp(35, "G@Il", "", options1, "_N:3G9Sc");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("0s", false, "arg");
      Option option0 = new Option((String) null, "-");
      optionGroup0.setSelected(option0);
      Option option1 = new Option("arg", "", false, "<");
      Options options3 = options2.addOption(option1);
      Options options4 = options3.addOption("", "The option '", true, "arg");
      options4.hasLongOption("0s");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("0s", "--", options0, "arg", false);
      helpFormatter1.getOptPrefix();
      helpFormatter2.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = options0.addOption("", true, "\n");
      options1.addOption("y", true, "L8RR{");
      helpFormatter0.defaultWidth = (-1936);
      helpFormatter0.printHelp(35, "G@Il", "", options1, "_N:3G9Sc");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "0s";
      Options options0 = null;
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1374, "--", "arg", (Options) null, 445, 1, "org.apache.commons.cli.ParseException", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2510, 2510, "");
      helpFormatter0.setArgName(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printOptions(mockPrintWriter0, 3, options1, 65, 2510);
      Options options2 = options0.addOption("", ", ", false, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 65, "", options2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Option option0 = new Option("arg", "]J");
      options1.addOption(option0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("arg");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2510, 2510, "");
      helpFormatter0.setArgName(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printOptions(mockPrintWriter0, 3, options1, 65, 2510);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1350, "org.apache.commons.cli.HelpFormatter$1", "Uy`k", options0, 3, 2448, "", true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(63);
      helpFormatter0.createPadding(1);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "\"'";
      PrintWriter printWriter0 = mockPrintWriter0.printf("\"'", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "-");
      Option option0 = new Option("", "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, (-3166), options3, 63, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      options0.addOption("arg", false, "--");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 964, " ] [ long ");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", true, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2581, 0, "sXWb(~a>?<&Na 2");
      helpFormatter0.setArgName(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printOptions(mockPrintWriter0, 2510, options1, 2581, 1);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 38, "sXWb(~a>?<&Na 2", "usage: ", options1, 117, 2324, "SJRQOelofh8B $");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("a75&=i&p,d", "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Options options1 = options0.addOption((String) null, true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2623, 1, "--");
      helpFormatter1.setArgName("(J0jRZ");
      options1.hasLongOption("usage: ");
      helpFormatter1.getOptPrefix();
      helpFormatter0.printHelp("oM", (String) null, options1, "9TnHKV%}4Zi", false);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "arg";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("a75&=i&p,d", "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      mockPrintWriter1.format(locale0, "", (Object[]) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 18, "v", "", options0, 4562, 9, "");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "oM");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "\"");
      helpFormatter0.setArgName(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printOptions(mockPrintWriter0, 3, options1, 31, 3);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 12, "Uy`k", "]", options0, 14, 856, "", true);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(2958);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.print(2447.0F);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setArgName(".g]Hv$& :Y@{:KA");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.toString();
      helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 1, 34);
      boolean boolean0 = true;
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, " ] [ long ", " ] [ long ", options0, 12, 32, "0[]X4x2k/r(TF;jK", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(dataOutputStream0, false, "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      mockPrintWriter0.close();
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      boolean boolean0 = true;
      String string0 = "oM";
      Options options1 = options0.addOption("", true, "oM");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "\"";
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "\"");
      helpFormatter1.setArgName(" ");
      options1.hasLongOption("aVKU;=HAc");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((-391), "P#D7", " ", options1, "\"", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 2208, (-3042), "HZ");
      helpFormatter1.setArgName("org.apachd.commons.cli.HelpFowmatter$1");
      options0.hasLongOption("");
      helpFormatter1.getOptPrefix();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "Xq");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(317);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 62;
      mockPrintWriter1.println("\n");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "=c4|CgQ}) gi";
      objectArray0[4] = (Object) "                                                                                                                                                                                                                                                                                                                             ";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) "=c4|CgQ}) gi";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "=c4|CgQ}) gi", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, 62, "                                                                                                                                                                                                                                                                                                                             ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, ", ");
      int int0 = 32;
      options0.addOption("", false, "oM");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, 32, "oM");
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1, options1, (-1186), 115);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      Options options0 = new Options();
      options0.addOption("", true, "oM");
      helpFormatter0.setArgName("\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "\n", options0, "-", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "", "", options0, 3, 1, "-", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      mockPrintWriter0.close();
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "oM");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      helpFormatter1.printOptions(mockPrintWriter1, 0, options1, 74, 74);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      mockPrintWriter0.close();
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      Options options0 = new Options();
      options0.addOption("", true, "oM");
      helpFormatter0.printHelp("-", "oM", options0, "\n", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2044, "|`HT", "", options0, (-1115), 1, "]", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "--";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "-", "", options0, "");
      helpFormatter0.getWidth();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(74, "RE", "", options0, (String) null);
      helpFormatter0.getWidth();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      mockPrintWriter0.close();
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "oM");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "\"");
      helpFormatter1.setArgName(" ");
      options1.hasLongOption("aVKU;=HAc");
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      boolean boolean0 = false;
      String string0 = "arg";
      String string1 = null;
      Option option0 = null;
//      try {
        option0 = new Option("--", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.close();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("\n");
      options1.hasLongOption("[ Options: [ short ");
      helpFormatter2.getOptPrefix();
      helpFormatter1.printHelp("--", "oM", options0, "cmdLineSyntax not provided", true);
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 24, "--", (String) null, options1, 644, (-3014), "--");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      mockPrintWriter0.close();
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "oM");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "\"");
      helpFormatter1.setArgName(" ");
      options1.hasLongOption("aVKU;=HAc");
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter1.printHelp("arg", "", options1, "has already been selected: '", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "M}ZvL3", options1, 811, 1857, "-", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 2491;
      Options options0 = null;
      int int1 = 3;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2491, (Options) null, 2491, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'J';
      charArray0[2] = '~';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.print(1.0F);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'd';
      objectArray0[1] = (Object) '~';
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "]", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped(printWriter0, (-1655), 422, "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "\n");
      String string0 = "y";
      options1.addOption("y", true, "L8RR{");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 0, "");
      helpFormatter0.setArgName("org.apache.commons.cli.HelpFormatter");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 58, 2456);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      mockPrintWriter0.close();
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      Options options0 = new Options();
      options0.addOption("", true, "oM");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "\"");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 74, 21, "\n");
      helpFormatter0.setArgName("oM");
      helpFormatter2.setOptionComparator(comparator0);
      helpFormatter2.getNewLine();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(2958);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '<';
      charArray0[5] = 'd';
      charArray0[6] = '/';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.print(2447.0F);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) " :: ";
      objectArray0[1] = (Object) ".g]Hv$& :Y@{:KA";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, ".g]Hv$& :Y@{:KA", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(mockPrintWriter0, 3240, options1, 2958, 2);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "usage: ", "arg", options0, 64, 44, "--", false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptPrefix("?NX!mM");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 64, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "oM");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "\"");
      helpFormatter0.setArgName(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printOptions(mockPrintWriter0, 3, options1, 31, 3);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 12, "Uy`k", "]", options0, 14, 856, "", false);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptPrefix("?NX!mM");
      Options options1 = options0.addOptionGroup(optionGroup0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "-", "", options0, "");
      helpFormatter0.getWidth();
      helpFormatter1.printHelp("usage: ", "eDq_W=hw", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("a75&=i&p,d", "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      mockPrintWriter1.format(locale0, "", (Object[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 18, "", "", options0, 4562, 11, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      mockPrintWriter0.close();
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "oM");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "\"");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "usage: ");
      helpFormatter0.setArgName("t>");
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "'A:BC>2", "r", options1, 32, 93, "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("arg", "org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 31, "", "", options0, 31, (-2), "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 910, 0, "");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      Options options0 = new Options();
      helpFormatter0.printHelp("RGA", options0);
      Options options1 = new Options();
      helpFormatter0.printHelp(56, "RGA", "' contains an illegal character : '", options1, "jv", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter2.getOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("Cannot add value, list full.");
      int int0 = (-1456);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1456), "Cannot add value, list full.");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      mockPrintWriter0.format("\n", objectArray0);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.findWrapPos("AKD*)4XU/", 74, 74);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 111, "");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[1] = '/';
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "s";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("usage: ", "usage: ", (Options) null, "usage: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      Options options0 = new Options();
      helpFormatter0.printHelp("\"wwzKE<^HTbi<l=rP", "", options0, "UrL}?G%)");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(5529, "", "", options0, "$PN=b)`)M", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      helpFormatter0.setLongOptPrefix("?NX!mM");
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(140, "The option '", "QKv3|;hR-59", options0, "");
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("?NX!mM", "t1TC37fgH#+@TgdP;#I", options0, (String) null, false);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      Options options0 = new Options();
      options0.addOption("", true, "oM");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "\"");
      helpFormatter1.setArgName(" ");
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 1, options0, 1, 936);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(">|N9i~=", options0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos(" ", 0, 1);
      helpFormatter0.printHelp("OpZ3!(R=ao~u$H#n~J", options0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3826, 74, "OpZ3!(R=ao~u$H#n~J");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-2820);
      mockPrintWriter0.checkError();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getMatchingOptions("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2820), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = (-2);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), 1555, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 103;
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      helpFormatter0.printHelp("OZ39Ap%", options0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      String string0 = "";
      int int0 = 10;
      helpFormatter0.findWrapPos("", 10, 504);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h>Q!]qW4iG]iO<kV");
      helpFormatter0.defaultNewLine = " ] [ long ";
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringBuffer0.append(74);
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("line.separator");
      Options options0 = new Options();
      options0.getOption(" ] [ long ");
      options0.getOptions();
      helpFormatter0.printHelp("9?flS}y", options0);
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("-", "", options0, "orn]*=0Klq=:", true);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = null;
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      String string2 = "d^&dS@._hHT'";
      StringBuffer stringBuffer1 = new StringBuffer(3);
      helpFormatter0.getDescPadding();
      String string3 = " :: ";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 0, " :: ");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptPrefix("?NX!mM");
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(140, "The option '", "QKv3|;hR-59", options0, "");
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("?NX!mM", "t1TC37fgH#+@TgdP;#I", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("6", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = " ] [ long ";
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(74, "--", "", (Options) null, "Gv");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (Options) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '<';
      charArray0[4] = 'd';
      mockPrintWriter0.print(charArray0);
      Object[] objectArray0 = new Object[1];
      helpFormatter0.defaultArgName = " :: ";
      objectArray0[0] = (Object) "[ Options: [ short ";
      mockPrintWriter0.print((float) 3);
      mockPrintWriter0.printf((Locale) null, "[ Options: [ short ", objectArray0);
      helpFormatter0.findWrapPos("", 3, 31);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      Options options0 = new Options();
      options0.addOption("", true, "oM");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "\"";
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "\"");
      helpFormatter1.setArgName(" ");
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 1, (-4599), "   ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      helpFormatter0.defaultNewLine = " ] [ long ";
      helpFormatter0.rtrim(" ] [ long ");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
//      try { 
        stringBuffer0.insert(74, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 74
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer1 = stringBuffer0.append(3);
      helpFormatter0.renderWrappedText(stringBuffer1, 889, 624, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("{#wu]7>-QAwt<+,3D");
      helpFormatter1.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      Options options0 = new Options();
      options0.getOption("arg");
      options0.getOptions();
      helpFormatter1.printHelp("arg", options0);
      helpFormatter1.printHelp(" ", "7>,vT-:fCve", options0, "O!|5HXc7/b_");
      Options options1 = new Options();
      helpFormatter0.printHelp("<Mh%C9 .FZDvaI5niFM", "org.apache.commons.cli.HelpFormatter", options0, "line.separator", false);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = " ] [ long ";
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringBuffer0.append(74);
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("line.separator", "Se0H(/fMw0@_5Cy", (Options) null, "g|o1]KnsR<^N9LG", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 0;
      String string0 = null;
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      String string2 = "d^&dS@._hHT'";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "d^&dS@._hHT'");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = " ] [ long ";
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringBuffer0.append(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 889, 624, "");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("line.separator");
      Options options0 = new Options();
      options0.getOption(" ] [ long ");
      options0.getOptions();
      helpFormatter0.printHelp("9?flS}y", options0);
      helpFormatter0.printHelp("O!|5HXc7/b_", "Y", options0, "");
      Options options1 = new Options();
      helpFormatter0.printHelp("O!|5HXc7/b_", "5ZG:G0e", options1, (String) null, false);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '/';
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(1, "arg", (String) null, (Options) null, "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      mockPrintWriter0.format("\n", objectArray0);
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(0);
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter("/Dq>+gMr:8k", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "oM");
      Options options2 = options1.addOption("arg", "_Cw", true, "&,(f rmhtf");
      helpFormatter0.printUsage(printWriter0, 3663, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "\n", "iSukKB^Ir,sJJCikC`<", (Options) null, "0s");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptPrefix("?NX!mM");
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasLongOption("usage: ");
      Options options2 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "The option '", "", options2, "The option '");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", (-1140), (-1140));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = null;
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, (String) null, "g|o1]KnsR<^N9LG", (Options) null, "The option '");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "oM");
      Options options2 = options1.addOption("arg", "_Cw", true, "&,(f rmhtf");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "~-FXGZesgYT0d3";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "~-FXGZesgYT0d3", (Options) null, "~-FXGZesgYT0d3", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-356), options1, 13, (-843));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 4930;
      helpFormatter0.setWidth(4930);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "BWqt1Me[oW9{AC";
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("", "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      String string0 = "8?j3>cRa";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
//      try {
        option0 = new Option("\n", "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '<';
      charArray0[4] = 'd';
      mockPrintWriter0.print(charArray0);
      Object[] objectArray0 = new Object[1];
      helpFormatter0.defaultArgName = " :: ";
      objectArray0[0] = (Object) "[ Options: [ short ";
      mockPrintWriter0.print((float) 3);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "[ Options: [ short ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 3, 3, "[ Options: [ short ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.setDescPadding((-3756));
      helpFormatter0.createPadding(31);
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("                               ", "32]i");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 32]i
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "' was specified but an option from this group ";
      helpFormatter0.defaultSyntaxPrefix = "' was specified but an option from this group ";
      helpFormatter0.setOptPrefix("A CloneNotSupportedException was thrown: ");
      helpFormatter0.defaultSyntaxPrefix = null;
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(31, "A CloneNotSupportedException was thrown: ", "A CloneNotSupportedException was thrown: ", (Options) null, "A CloneNotSupportedException was thrown: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "MB#<U/8iQ=Sj";
      helpFormatter0.setSyntaxPrefix("MB#<U/8iQ=Sj");
      helpFormatter0.setNewLine("MB#<U/8iQ=Sj");
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultNewLine = "MB#<U/8iQ=Sj";
      helpFormatter0.setOptPrefix("MB#<U/8iQ=Sj");
      helpFormatter0.setLongOptPrefix("Z-S\"_._aP|!]0");
      String string1 = "--";
      String string2 = "";
      String string3 = "Muc86u\\EFbSx6sC/\\";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("MB#<U/8iQ=Sj", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'MB#<U/8iQ=Sj' contains an illegal character : '#'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      String string1 = "The option '";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptPrefix("?NX!mM");
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasLongOption("usage: ");
      // Undeclared exception!
//      try { 
        options1.addOption("-", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "\n";
      mockPrintWriter0.format("\n", objectArray0);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("AKD*)4XU/", 74, 74);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      assertEquals("", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("u9KOK@@|;cybPrhZ");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-880), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = "arg";
//      try { 
        MockURI.URI("", "arg", " ", "arg");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Relative path in absolute URI: ://arg%20#arg
//         //
//         verifyException("java.net.URI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(998);
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.getNewLine();
      int int0 = 31;
      String string0 = "f6e|[8P";
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", true, "'`qUA");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      String string1 = "";
      // Undeclared exception!
//      try { 
        options3.addOption("'`qUA", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ''`qUA' contains an illegal character : '''
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = " ] [ long ";
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringBuffer0.append(74);
      int int0 = 624;
      helpFormatter0.renderWrappedText(stringBuffer0, 889, 624, "");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("line.separator");
      Options options0 = new Options();
      options0.getOption(" ] [ long ");
      options0.getOptions();
      helpFormatter0.printHelp("9?flS}y", options0);
      helpFormatter0.printHelp("O!|5HXc7/b_", "Y", options0, "");
      helpFormatter0.printHelp(624, "O!|5HXc7/b_", "[", options0, "9?flS}y", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }
}
