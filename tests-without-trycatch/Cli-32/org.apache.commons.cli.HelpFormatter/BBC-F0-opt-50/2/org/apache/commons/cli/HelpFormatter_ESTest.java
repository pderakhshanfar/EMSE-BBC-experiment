/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:59:55 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultWidth = (-360);
      Option option0 = new Option("arg", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      optionGroup1.setSelected(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("\n", "\n", options0, "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      optionGroup0.addOption(option0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp("usage: ", " ", options0, "usage: ", true);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, 1347);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "#{+sbnQ, #OA^");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, 74, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1499);
      helpFormatter0.setLeftPadding((-1499));
      helpFormatter0.setWidth(2371);
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1499));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "!ET$Ff", options0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultWidth = 74;
      StringBuffer stringBuffer0 = new StringBuffer(">");
      stringBuffer0.append(0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 34, (-2527), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!E$F");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "!E$F", (String) null, options0, 247, 268, (String) null, false);
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("--");
      helpFormatter0.defaultWidth = (-1321);
      StringBuffer stringBuffer0 = new StringBuffer("<C?31@-/<$`1}#ybma");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "\n");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      helpFormatter0.rtrim("                                                                          ");
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 117, "                                                                          ", "", (Options) null, 3, 117, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      helpFormatter0.defaultLeftPad = (-4925);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      optionGroup1.setRequired(false);
      options0.addOptionGroup(optionGroup1);
      optionGroup1.setSelected(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("\n", options0, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("arg", "-");
      File file0 = MockFile.createTempFile("arg", (String) null, (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, " ", "arg", options0, 247, 1, "", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp(3, "x8NvP.*0/Qs@Lf1HWcZ", "", options0, "--", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.findWrapPos(" ]", 0, 0);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.setLeftPadding(73);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-79));
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("8qA", "l[", options0, "l[");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(44);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('V');
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 44, (Options) null, 44, 44);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("bi4HW", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1429, "\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setSyntaxPrefix("bX^XAm  tBViz");
      helpFormatter0.findWrapPos(" ", 4, 4);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = " ";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, (String) null, " ", options0, 0, 2, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(20, "!T-", "!T-", options0, "{S1H");
      Locale locale0 = Locale.JAPAN;
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected((Option) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 13, "o8xmVutLh-", options0);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("N9ULlm<~B5'%}\"<kP", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)11;
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options0, (byte)118, 3);
      helpFormatter0.renderWrappedText(stringBuffer1, 19, (byte)118, "s+H:A!S");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Option option0 = new Option("", "", true, " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", (String) null, true, "BIMKG3<6JW~PsZgT");
      options2.addOption((String) null, false, "--");
      String string0 = "A CloneNotSupportedException was thrown: ";
      Options options3 = options0.addOption("arg", true, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "A CloneNotSupportedException was thrown: ", "jIFKrsJlXTr", options3, 3233, 3233, "jIFKrsJlXTr", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "{S1H";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "{S1H", "{S1H", options1, "eCZA(~|TZAS");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("-", "--", (Options) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "--";
      options0.addOption("arg", "usage: ", true, "usage: ");
      helpFormatter0.printHelp("*<)tk&`>Fz%BW,6bP", "mOg`&ODOL4tdpT", options0, "*<)tk&`>Fz%BW,6bP", true);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 2, options0, 2, 25);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "FG.cfedt1");
      Options options1 = options0.addOption(option0);
      Options options2 = options0.addOption("$", true, "line.separator");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3233, "line.separator", "org.apache.commons.cli.Option", options2, 10, 10, "}~exejms0b8~Vj_$", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", "--", options1, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(378);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(378, "QHeDfry;1Qg_s:h>]", "Illegal option name '", (Options) null, "Illegal option name '", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", " ");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), (String) null, "arg", options0, "bH,<aGGXcVO6q");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "!T-", "!T-", options0, "{S1H");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%2gHN%WL");
      Locale locale0 = Locale.JAPAN;
      helpFormatter0.setLongOptSeparator("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected((Option) null);
      Option option0 = new Option("", "%2gHN%WL");
      option0.setOptionalArg(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("!zEY_", options0, true);
      helpFormatter0.getNewLine();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("usage: ");
      helpFormatter0.setDescPadding((-2));
      options0.toString();
      options0.toString();
      options0.toString();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("IMe~/~SAM?^9lEz", "IMe~/~SAM?^9lEz", options0, "IMe~/~SAM?^9lEz", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(14, "!T-", "!T-", options0, "{S1H");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%2gHN%WL");
      Locale locale0 = Locale.JAPAN;
      Options options1 = options0.addOption((String) null, "org.apache.commons.cli.HelpFormatter", true, "-");
      options0.hasLongOption("Og`&ODOL4tdpT");
      helpFormatter0.printHelp("{S1H", options0, true);
      helpFormatter0.printHelp("!T-", "%2gHN%WL", options1, "org.apache.commons.cli.HelpFormatter", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 6, "{S1H", "--", options1, 43, 14, "\n", false);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp("nuhedO", "", options0, "");
      options0.hasLongOption(" ");
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.chars();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("\n", "Oh[j5v8Sw3\"vqv(&E", (Options) null, "Oh[j5v8Sw3\"vqv(&E", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      String string0 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options0);
      mockPrintWriter0.write(1);
      helpFormatter1.rtrim((String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("_~91v(XbN6F4TN?>+L");
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 3);
      StringBuffer stringBuffer0 = null;
//      try {
        stringBuffer0 = new StringBuffer((CharSequence) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "bH,<aGGXcVO6q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("+-l63InYdbl7", options0);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("?OMOYA!S-y}mgI\"s\"D");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options1 = options0.addOption("", "--", false, " ");
      helpFormatter0.renderOptions(stringBuffer0, 1791, options0, 1, 1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Option option0 = new Option("NO_ARGS_ALLOWED", true, "?OMOYA!S-y}mgI\"s\"D");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 0, "-", options2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "bH,<aGGXcVO6q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("+-l63InYdbl7", options0);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("?OMOYA!S-y}mgI\"s\"D");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      options0.addOption("", "--", false, " ");
      options0.addOption("", "--", true, "line.separator");
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions(mockPrintWriter0, (-2696), options0, 18, 1751);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "bH,<aGGXcVO6q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("[", options0);
      helpFormatter1.rtrim("|fYI");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      options1.addOption("", (String) null, false, "\n");
      helpFormatter1.printOptions(mockPrintWriter0, 1, options0, 3, 1);
      options0.addOptionGroup(optionGroup0);
      helpFormatter2.getDescPadding();
      helpFormatter1.findWrapPos("arg", 74, 91);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4789, " ", "", options0, 1, 1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "bH,<aGGXcVO6q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(3);
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[13];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      stringBuffer0.append(charArray0);
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.chars();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "The option '", "usage: ", options0, 3, 3, "cEY>m+5+e/?", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2349);
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!iHo[cAF@QC1thD5");
      Locale locale0 = Locale.US;
      String string1 = "Illegal option name '";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "!iHo[cAF@QC1thD5";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "Illegal option name '";
      objectArray0[6] = (Object) "Illegal option name '";
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Illegal option name '", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.checkError();
      PrintWriter printWriter1 = mockPrintWriter1.format("w0|KtPmh;_4MeHON", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter1, (-2349), "Illegal option name '");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "bH,<aGGXcVO6q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("[", options0);
      helpFormatter1.rtrim("|fYI");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      mockFile0.mkdirs();
      Options options2 = options1.addOption("", (String) null, false, "\n");
      options0.addOption((String) null, "--", false, (String) null);
      helpFormatter1.printOptions(mockPrintWriter0, 1, options0, 3, 1);
      options0.addOptionGroup(optionGroup0);
      stringBuffer0.append("--");
      helpFormatter2.renderOptions(stringBuffer0, 2571, options2, 3, 815);
      helpFormatter1.getWidth();
      helpFormatter2.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "bH,<aGGXcVO6q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("+-l63InYdbl7", options1);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("?OMOYA!S-y}mgI\"s\"D");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      options1.addOption("", "9mozH8JTHlmW7=aR`V", false, " ");
      helpFormatter0.renderOptions(stringBuffer0, 1791, options0, 1, 1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, " ", options1, 1125, 1, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", " ", false, "J@qYbs/-Y()");
      Options options1 = options0.addOption(option0);
      String string1 = "";
      options0.addOption("", true, " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "MWVLk)_Dz].7>&^5v&", "J@qYbs/-Y()", options1, 44, 15, "MWVLk)_Dz].7>&^5v&", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = " ";
      Options options0 = new Options();
      String string1 = "";
      Option option0 = new Option("", "", true, " ");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "", "WN;z5Tsjk", options1, 9, 1, " ", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "bH,<aGGXcVO6q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("+-l63InYdbl7", options1);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.chars();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "");
      helpFormatter1.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.createPadding(608);
      helpFormatter2.getDescPadding();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.findWrapPos("", 1, 1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "bYld@E_m '");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      String string0 = "{S1H";
      String string1 = "rJ&w";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3663), "rJ&w", "rJ&w", options0, "rJ&w");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp("nuhedO", "", options0, "");
      helpFormatter0.printHelp("B |g=~O0\"*'j.]u_'", "nuhedO", options0, "", true);
      helpFormatter0.createPadding(1);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLeftPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("B |g=~O0\"*'j.]u_'", 1, 0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Option option0 = new Option("", "", true, " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3233, " ", " ", options2, (-1), (-1), "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      String string0 = "nuhedO";
      String string1 = "";
      helpFormatter0.printHelp("nuhedO", "", options0, "");
      int int0 = 1;
      String string2 = "B |g=~O0\"*'j.]u_'";
      options0.hasLongOption(" ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp(",&\"JNA\"*P5_;HfxI", "", options0, "Q T");
      helpFormatter0.createPadding(10);
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.getOptPrefix();
      helpFormatter0.setLeftPadding(3);
      helpFormatter1.findWrapPos(" ", 10, 218);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 13;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, 13, "Qs8uHO6HB`");
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("", "XP60kx})IGhW6>4J@#", false, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        options1.addOption("line.separator", "-", false, "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'line.separator' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      char[] charArray0 = new char[3];
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, "+^&+X^`Ont~Qe*b:(|");
      charArray0[0] = 'O';
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer1);
      stringWriter1.append('C');
      stringWriter0.append((CharSequence) "usage: ", 0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-407), "JV@SFRoHXLYFHngsEe5");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      helpFormatter0.createPadding(10);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.ENGLISH;
      locale0.getDisplayCountry(locale1);
      Options options0 = new Options();
      locale1.getDisplayCountry();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLeftPadding(79);
      helpFormatter0.findWrapPos("-", 1, 392);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      char[] charArray0 = new char[3];
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, "+^&+X^`Ont~Qe*b:(|");
      charArray0[0] = 'O';
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer1);
      stringWriter1.append('C');
      stringWriter0.append((CharSequence) "usage: ", 0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "", options0);
      // Undeclared exception!
      helpFormatter0.printHelp(">fl#=T`-_|T\"8it>W", "+^&+X^`Ont~Qe*b:(|", options0, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "bH,<aGGXcVO6q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("+-l63InYdbl7", options1);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("?OMOYA!S-y}mgI\"s\"D");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options2 = options1.addOption("", "9mozH8JTHlmW7=aR`V", false, " ");
      Options options3 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 1791, options3, 1, 1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5, "]", options2);
      helpFormatter0.getNewLine();
      helpFormatter1.getOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1791, "--", options3);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "!T-", "!T-", options0, "{S1H");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%2gHN%WL");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3528, "%2gHN%WL", options0);
      helpFormatter0.setLongOptSeparator("D|Ln");
      helpFormatter0.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected((Option) null);
      Option option0 = new Option("b", "D|Ln");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("!zEY_", options0, true);
      helpFormatter0.printHelp("D|Ln", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 1948, "%2gHN%WL", "9#", options0, (-1), 31, (String) null);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.rtrim("org.apace.commons.cli.HelpFormatter$1");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "!T-", "!T-", options0, "{S1H");
      options0.hasLongOption("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%2gHN%WL");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.checkError();
      objectArray0[1] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3528, "%2gHN%WL", options0);
      helpFormatter0.setLongOptSeparator("D|Ln");
      helpFormatter0.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected((Option) null);
      Option option0 = new Option("", "D|Ln");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("!zEY_", options0, true);
      optionGroup1.setRequired(true);
      optionGroup1.toString();
      helpFormatter0.printHelp("tDR2Z[HbB8Dz]Y", "tDR2Z[HbB8Dz]Y", options1, "D|Ln", true);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "bH,<aGGXcVO6q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintWriter0.printf(locale0, "+-l63InYdbl7", (Object[]) null);
      Locale locale1 = Locale.ENGLISH;
      locale0.getDisplayCountry(locale1);
      Options options0 = new Options();
      locale1.getDisplayCountry();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Option option0 = new Option((String) null, false, "");
      options0.addOption(option0);
      Option option1 = new Option("arg", false, "YdGxk?oi7b`BRJ");
      option1.setType("bH,<aGGXcVO6q");
      options0.addOption(option1);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 3949, 1900);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "bH,<aGGXcVO6q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("+-l63InYdbl7", options1);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("?OMOYA!S-y}mgI\"s\"D");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options2 = options1.addOption("", "9mozH8JTHlmW7=aR`V", false, " ");
      Options options3 = options1.addOptionGroup(optionGroup0);
      stringBuffer0.reverse();
      helpFormatter0.renderOptions(stringBuffer0, 1791, options3, 1, 1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5, "]", options2);
      helpFormatter0.getNewLine();
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g{ ![<uagTpX/VNR6");
      MockFile mockFile0 = new MockFile("arg", "bH,<aGGXcVO6q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Options options0 = new Options();
      options0.getOption("--");
      helpFormatter0.printHelp("bH,<aGGXcVO6q", "", options0, "line.separator", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "!T-", "!T-", options0, "{S1H");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%2gHN%WL");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3528, "%2gHN%WL", options0);
      helpFormatter0.setLongOptSeparator("D|Ln");
      helpFormatter0.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected((Option) null);
      Option option0 = new Option("", "D|Ln");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("!zEY_", options0, true);
      helpFormatter0.printHelp("D|Ln", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-745), (-1), "%2gHN%WL");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "[", false, "\n");
      helpFormatter0.printHelp(",", "[", options1, "mOg`&ODOL4tdpT", false);
      helpFormatter0.rtrim(" }");
      helpFormatter0.getOptionComparator();
      helpFormatter0.findWrapPos("mOg`&ODOL4tdpT", 19, 798);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2145, "2^");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      char[] charArray0 = new char[3];
      stringBuffer0.insert(0, "+^&+X^`Ont~Qe*b:(|");
      charArray0[0] = 'O';
      helpFormatter0.setWidth(0);
      charArray0[1] = '&';
      charArray0[2] = 'N';
      stringBuffer0.append(charArray0);
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = new StringBuffer('&');
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultDescPad = 2869;
      helpFormatter0.createPadding(2869);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getLeftPadding();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("line.separator");
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", 0, (-1320));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "[", true, "\n");
      options1.hasLongOption("B |g=~O0\"*'j.4u_'");
      helpFormatter0.printHelp("[", options0, true);
      helpFormatter0.printHelp(",", "[", options1, "mOg`&ODOL4tdpT", false);
      helpFormatter0.createPadding(3);
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos("L%WhdZVj5y", 91, 3);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "[", true, "\n");
      options1.hasLongOption("B |g=~O0\"*'j.4u_'");
      helpFormatter0.printHelp(",", "[", options1, "mOg`&ODOL4tdpT", false);
      helpFormatter0.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1080;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) "e8n045}tq";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "e8n045}tq";
      objectArray0[5] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      helpFormatter0.printUsage(printWriter0, 35, (String) null, options1);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(111, " [ARG]", " [ARG]", options0, "{S1H");
      options0.hasLongOption("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%2gHN%WL");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.checkError();
      objectArray0[1] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3528, "%2gHN%WL", options0);
      helpFormatter0.setLongOptSeparator("D|Ln");
      helpFormatter0.getWidth();
      Options options1 = options0.addOption((String) null, true, "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "", options1);
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp(2197, "usage: ", (String) null, options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("org.apache.commons.cli.OptionValidator");
      helpFormatter0.printHelp("org.apache.commons.cli.Util", "org.apache.commons.cli.Util", options0, "org.apache.commons.cli.Util", true);
      helpFormatter0.createPadding(10);
      helpFormatter0.rtrim("          ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLeftPadding(242);
      helpFormatter0.findWrapPos("-", 10, 79);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "!T-", "!T-", options0, "{S1H");
      options0.hasLongOption("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%2gHN%WL");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.checkError();
      objectArray0[1] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3528, "%2gHN%WL", options0);
      helpFormatter0.setLongOptSeparator("D|Ln");
      helpFormatter0.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected((Option) null);
      Option option0 = new Option("", "D|Ln");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("!zEY_", options0, true);
      helpFormatter0.printHelp("tDR2Z[HbB8Dz]Y", "tDR2Z[HbB8Dz]Y", options1, "D|Ln", true);
      helpFormatter0.printHelp(printWriter0, 3528, "D|Ln", "", options1, 74, 3528, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 3367;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 1, 3367);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "bH,<aGGXcVO6q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("+-l63InYdbl7", options1);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("?OMOYA!S-y}mgI\"s\"D");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options2 = options1.addOption("", "9mozH8JTHlmW7=aR`V", false, " ");
      Options options3 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.setDescPadding(1);
      stringBuffer0.reverse();
      helpFormatter0.renderOptions(stringBuffer0, 1791, options3, 1, 1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5, "]", options2);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[3];
      mockPrintWriter0.append('j');
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "e8n045}tq";
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("e8n045}tq", objectArray0);
      Option option0 = new Option("", " ", false, "arg");
      Options options0 = new Options();
      options0.addOption(option0);
      helpFormatter0.getLongOptSeparator();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "!T-", "!T-", options0, "{S1H");
      options0.hasLongOption("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%2gHN%WL");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.checkError();
      objectArray0[1] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3528, "%2gHN%WL", options0);
      helpFormatter0.setLongOptSeparator("D|Ln");
      helpFormatter0.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected((Option) null);
      Option option0 = new Option("", "D|Ln");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("!zEY_", options0, true);
      helpFormatter0.printHelp("tDR2Z[HbB8Dz]Y", "tDR2Z[HbB8Dz]Y", options1, "D|Ln", true);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "e8n045}tq";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPAN;
      PrintWriter printWriter0 = mockPrintWriter1.printf("arg", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "HG*@)C");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-1194), "", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 91;
      int int1 = (-794);
      String string0 = "Aj\"u%tsa9dqoJ0{]?R";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 91, (-794), "Aj\"u%tsa9dqoJ0{]?R");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "!T-", "!T-", options0, "{S1H");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%2gHN%WL");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("--", objectArray0);
      Options options1 = new Options();
      Options options2 = options0.addOption("", false, "[ Options: [ short ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "", options2);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "bH,<aGGXcVO6q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("+-l63InYdbl7", options1);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("?OMOYA!S-y}mgI\"s\"D");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      options1.addOption("", "9mozH8JTHlmW7=aR`V", false, " ");
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.renderOptions(stringBuffer0, 1791, options2, 1, 1);
      helpFormatter1.setNewLine("p6VX)Xs]@LeFqBdI");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      char[] charArray0 = new char[3];
      String string0 = "+^&+X^`Ont~Qe*b:(|";
      stringBuffer0.insert(0, "+^&+X^`Ont~Qe*b:(|");
      charArray0[0] = 'O';
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "+^&+X^`Ont~Qe*b:(|", options0, "w;(eQ1dLqEI^P ig", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "!T-", "!T-", options0, "{S1H");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{S1H");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3528, "-", options0);
      helpFormatter0.setLongOptSeparator("D|Ln");
      helpFormatter0.getWidth();
      Option option0 = new Option("", "D|Ln");
      helpFormatter0.printHelp("!zEY_", options0, true);
      helpFormatter0.printHelp("D|Ln", options0);
      helpFormatter0.findWrapPos(";VRIV\"eCtFMf}CV^", 74, 31);
      helpFormatter0.printOptions(mockPrintWriter0, (-2), options0, 3528, 31);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultWidth = 111;
      String string0 = "S4,du_M }W";
      helpFormatter0.setArgName("S4,du_M }W");
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-864), "S4,du_M }W", "S4,du_M }W", (Options) null, (-864), (-864), "S4,du_M }W");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("N(yp4)x-O$|ukIl");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, (-1), (-1375));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "!T-", "!T-", options0, "{S1H");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%2gHN%WL");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3528, "%2gHN%WL", options0);
      helpFormatter0.setLongOptSeparator("D|Ln");
      helpFormatter0.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected((Option) null);
      Option option0 = new Option("", "D|Ln");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("!zEY_", options0, true);
      helpFormatter0.printHelp("D|Ln", options0);
      helpFormatter0.printHelp("{S1H", "cmdLineSyntax not provided", options0, ")f:*");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(341);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("cV/~HM^3sM{YI");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1862;
      Options options0 = new Options();
      helpFormatter0.printHelp("-+c,41G9r{", options0, false);
      helpFormatter0.renderWrappedText(stringBuffer0, 1862, 1862, "uh4FCyn");
      helpFormatter0.getArgName();
      int int1 = (-2072);
      helpFormatter0.setWidth((-2072));
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("--", ">");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // >
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "org.apache.commons.cli.ParseException");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "ZG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printUsage(printWriter0, 1157, "vX1%dx");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("ZG", 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "bH,<aGGXcVO6q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "+-l63InYdbl7", (Object[]) null);
      String string0 = "`%Rinz*8R~:D@&r&366";
      Locale locale1 = Locale.ENGLISH;
      locale0.getDisplayCountry(locale1);
      String string1 = "YdGxk?oi7b`BRJ";
      Options options0 = new Options();
      String string2 = null;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Option option0 = new Option((String) null, false, "");
      options0.addOption(option0);
      Option option1 = new Option("arg", false, "YdGxk?oi7b`BRJ");
      option1.setType("bH,<aGGXcVO6q");
      Options options1 = options0.addOption(option1);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "`%Rinz*8R~:D@&r&366", "YdGxk?oi7b`BRJ", options1, (-2014), 0, "bH,<aGGXcVO6q", false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("VPO,");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = 'l';
      charArray0[2] = '<';
      charArray0[3] = 'I';
      charArray0[4] = '{';
      charArray0[5] = 'H';
      charArray0[6] = ';';
      stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 4559, 0, "VPO,");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1950);
      String string0 = "${ c+a/6(kJf";
      helpFormatter0.setSyntaxPrefix("${ c+a/6(kJf");
      String string1 = "has already been selected: '";
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "org.apache.commons.cli.ParseException";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-864), "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", (Options) null, (-864), (-864), "org.apache.commons.cli.ParseException");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      char[] charArray0 = new char[3];
      String string0 = "+^&+X^`Ont~Qe*b:(|";
      stringBuffer0.insert(0, "+^&+X^`Ont~Qe*b:(|");
      charArray0[0] = 'O';
      helpFormatter0.setWidth(0);
      charArray0[1] = '&';
      charArray0[2] = 'N';
      stringBuffer0.append(charArray0);
      int int0 = 2869;
      stringBuffer0.chars();
      helpFormatter0.defaultArgName = "OXWsPu>m\"+Jerv 8h1{";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 2869, "=o1l{-LY#/iNnO");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      helpFormatter0.setArgName(" | ");
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("");
      MockFile mockFile0 = new MockFile("A~");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "!T-", "!T-", options0, "{S1H");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%2gHN%WL");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3528, "%2gHN%WL", options0);
      helpFormatter0.setLongOptSeparator("DELS");
      helpFormatter0.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected((Option) null);
      Option option0 = new Option("", "DELS");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("!zEY_", options0, true);
      helpFormatter0.rtrim("");
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1080;
      helpFormatter0.defaultWidth = 1080;
      helpFormatter0.setLongOptSeparator("");
      String string0 = "E<V4cN";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "E<V4cN", options0, "E<V4cN");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 32;
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      String string1 = "'-1#.d!s[ubIZF2";
      helpFormatter0.setWidth((-5391));
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("9%91@P{", "", options0, "cmdLineSyntax not provided", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-6271), options1, (-6271), (-6271));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      int int0 = 672;
      helpFormatter0.defaultDescPad = (-55);
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(672, (String) null, "-", options0, "-", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("]1$n2x;vNg=F");
      helpFormatter0.setLongOptPrefix("]1$n2x;vNg=F");
      helpFormatter0.setWidth(74);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      char[] charArray0 = new char[3];
      stringBuffer0.insert(0, "arg");
      charArray0[0] = 'O';
      helpFormatter0.setWidth(0);
      charArray0[1] = '&';
      charArray0[2] = 'N';
      stringBuffer0.append(charArray0);
      int int0 = 2869;
      String string0 = "=o1l{-LY#/iNnO";
      stringBuffer0.chars();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 2869, "=o1l{-LY#/iNnO");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "bH,<aGGXcVO6q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("[", options0);
      helpFormatter1.rtrim("|fYI");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options2 = options1.addOption("", (String) null, false, "\n");
      helpFormatter1.printOptions(mockPrintWriter0, 1, options0, 3, 1);
      options0.addOptionGroup(optionGroup0);
      stringBuffer0.append("--");
      helpFormatter2.renderOptions(stringBuffer0, 2571, options2, 3, 815);
      helpFormatter1.getWidth();
      helpFormatter2.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 908;
      String string0 = "has already been selected: '";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 908, "has already been selected: '");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "e8n045}tq";
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("e8n045}tq", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "[ARG...]");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.defaultSyntaxPrefix = "--";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-1675), " ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      options0.getOption("usage: ");
      options0.toString();
      options0.toString();
      options0.toString();
      helpFormatter0.printHelp("IMe~/~SAM?^9lEz", "IMe~/~SAM?^9lEz", options0, "IMe~/~SAM?^9lEz", true);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter$1");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("org.apache.commons.cli.HelpFormatter$1", string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      String string0 = "[";
      int int0 = 0;
      String string1 = "";
      String string2 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string3 = "\\bQ-}";
      // Undeclared exception!
//      try { 
        options0.addOption("X ", "usage: ", true, "\bQ-}");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'X ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      String string1 = "'";
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("'", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }
}
