/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:57:38 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.setLongOptSeparator("?ewba7BCH(");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 15;
      stringBuffer0.setLength(15);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 897);
      stringBuffer1.append(3);
      stringBuffer1.append((double) 3);
      helpFormatter0.renderOptions(stringBuffer1, 3, options0, 1, 74);
      helpFormatter1.renderOptions(stringBuffer1, 74, options0, 897, 74);
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("", "--");
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = '?';
      charArray0[2] = 'd';
      stringBuffer0.insert(3, charArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println((long) 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "--", "usage: ", options0, 1, 3, "E]x,f#,h", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "&m1e!~E.[|30O";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 64, "&m1e!~E.[|30O");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)102;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2425, 2425, " ]");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      Options options0 = new Options();
      Option option1 = new Option("arg", "org.apache.commons.cli.AlreadySelectedException");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup2);
      Options options2 = options1.addOption(option1);
      options2.addOptionGroup(optionGroup0);
      option1.setArgs(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "pGs2GBzt@P", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("~J6FLX}@n($", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultDescPad = (-1);
      optionGroup0.addOption(option0);
      option0.setArgName("");
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      option0.setArgs(3);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "arg", "arg", options0, "org.apache.commons.cli.OptionGroup");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLongOptPrefix("iXFMlv}N%Nd`3X~%;}.");
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options1 = options0.addOption((String) null, true, (String) null);
      helpFormatter0.printHelp(74, "iXFMlv}N%Nd`3X~%;}.", "iXFMlv}N%Nd`3X~%;}.", options1, (String) null, false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp(74, "usage: ", "", options0, "", false);
      helpFormatter0.printHelp(74, " ", (String) null, options0, "]");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X7\"O!re)R@|3*");
      Option option0 = new Option("arg", false, "usage: ");
      helpFormatter0.setLeftPadding((-2));
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      option0.setArgName("");
      option0.getValues();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.setArgs(74);
      helpFormatter0.rtrim("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(100, "org.apache.commons.cli.HelpFormatter$1", "", options1, "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "1G-", true, "usage: ");
      options0.addOption(option0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      helpFormatter0.setSyntaxPrefix("\n");
      String string0 = "I}Y:v]$hWn589sP(N+";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "CfYGO$jtU;IEw)");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(74, "j9yf#h%H3a<h,&+", "}cD0n{JnM//a Y", (Options) null, "}cD0n{JnM//a Y");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("", "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.addOption("arg", "", true, "-");
      helpFormatter0.printHelp("\n", options0, true);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = 40;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 40);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 91, options2, 13, 91);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("line.separator");
      helpFormatter0.printHelp(1, "\n", "\n", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("eEw", false, "arg");
      Options options2 = options0.addOption("arg", "usage: ", false, "arg");
      helpFormatter0.printHelp("usage: ", options2, true);
      helpFormatter1.printHelp(10, "\n", "&;", options0, "usage: ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 113, "arg", options1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1951, options0, 1951, 78);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("--");
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      mockFileOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 105, "org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, 102, 2910, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("31-{Zu(sO*)0`f<@@N");
      helpFormatter0.setLongOptPrefix("jH%5ap|?N`e'(GA2fV7");
      helpFormatter0.createPadding(945);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.write("-");
      int int0 = 44;
      String string0 = ".>^/U";
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "-");
      Options options1 = options0.addOption(option0);
      options1.toString();
      helpFormatter0.printHelp(1899, "NO_ARGS_ALLOWED", "?ahYvi]l-V[0ArNu>0", options1, "?ahYvi]l-V[0ArNu>0", true);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 849, (Options) null, 849, 122);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X7\"O!e)R@|3*");
      Option option0 = new Option("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      option0.setArgName("");
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setSyntaxPrefix("");
      options0.addOption("arg", false, "<0j\"7k8ja,oozqGU");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("RZDoC\u0004");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-2912);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setOptPrefix("X4Z&o");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Option option0 = new Option("arg", "usage: ", false, "\n");
      option0.setArgName("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("kzbgTx}=[T{?-T", options0, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.print(false);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((-2127), "\n", "org.apache.commons.cli.Util", options0, "-", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X7\"O!e)R@|3*");
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setArgName("X7\"O!e)R@|3*");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(9, "EwRS<AgL|Y4L>Jh% ", "\"nK5D&el", options0, "", true);
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("LE!");
      helpFormatter0.renderWrappedText(stringBuffer0, 13, (-2374), "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(195, "I--", "[ option: ", (Options) null, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" | ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 1381, options0, 1, (-1958));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg", "--").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.printHelp("<'@K1Q8-8y/C", "", options0, "<'@K1Q8-8y/C", false);
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options1 = new Options();
      mockPrintWriter1.println((Object) "<'@K1Q8-8y/C");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 47, "<'@K1Q8-8y/C", "", options1, 0, 0, (String) null, false);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("X4Z&o");
      helpFormatter0.setArgName("X4Z&o");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "-", "2uR", options0, ";i<z)CA2-IJB", false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("]", "?,Bf}t#eC` bbv`/xD+").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("<'@K1Q8-8y/C", "", options0, "<'@K1Q8-8y/C", true);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setArgName("@s6`L J3<)/");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("dX%J=OL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("~!VD'<-~]xg", objectArray0);
      mockPrintWriter0.format("[$D\"+_D:N*", objectArray0);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 0, 424, "<'@K1Q8-8y/C");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X7\"O!e)R@|3*");
      Option option0 = new Option("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      option0.setArgName("");
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setSyntaxPrefix("");
      option0.setArgs(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setSyntaxPrefix("\"");
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.addOption("", false, "--");
      helpFormatter1.printHelp(63, "   ", "6GnP", options0, " ", true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      options0.getOptions();
      options0.getMatchingOptions("");
      helpFormatter0.setArgName("}2mh.8BXutg(3N");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setLongOptPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}2mh.8BXutg(3N");
      mockPrintWriter0.printf("", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "@s6`L J3<)/");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim(" | ");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      Collection collection0 = options0.getOptions();
      options0.getMatchingOptions("/");
      helpFormatter0.setArgName("--");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setLongOptPrefix(" ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZPU]n(yD4k6-[tZ?y");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) comparator1;
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) comparator1;
      objectArray0[3] = (Object) options0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) collection0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "~!VD'<-~]xg";
      mockPrintWriter0.printf("uuYbrr=Se", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "~!VD'<-~]xg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("Wy:6AprBVR");
      String string0 = "=F>~ yE9[";
      String string1 = "dY#Ck^'";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "i]p58vA!}eFV6", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 1, "", "", options0, (-1044), (-1044), "org.apache.commons.cli.Util");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, true);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", true);
      options0.getMatchingOptions("usage: ");
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgs((-23));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("'", options1);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 119, "--", "j*\f<(t_F*.", options1, 38, 3, ", ", true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, true);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", true);
      options0.getMatchingOptions("usage: ");
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      option0.setValueSeparator('9');
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("--");
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.setSyntaxPrefix("RBF][V0a&>6t_$WJU0!");
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "   ", ">", options0, "j*\f<(t_F*.", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "'", "zI(Qc,(", options0, "86cboHp'I:2/L");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("X4Z&o");
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options1 = new Options();
      mockPrintWriter0.println((Object) stringBuffer0);
      helpFormatter0.defaultNewLine = "'UMS";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, (String) null, "", options1, (-2), 5, "'UMS", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      String string0 = "'";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("'", options0, true);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("p$fx=Tjd", "k", (Options) null, "'", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, true);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", true);
      options0.getMatchingOptions("usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}l+uxklm)");
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("--");
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      option0.setArgs((-23));
      options0.hasLongOption("arg");
      helpFormatter0.setSyntaxPrefix("RBF][V0a&>6t_$WJU0!");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("RBF][V0a&>6t_$WJU0!", options0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 119, "j*\f<(t_F*.", (String) null, options0, 38, 3, "", false);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, true);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", true);
      options0.getMatchingOptions("usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}l+uxklm)");
      helpFormatter0.setWidth(3);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("--");
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgs((-23));
      options0.hasLongOption("arg");
      helpFormatter0.setSyntaxPrefix("RBF][V0a&>6t_$WJU0!");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("'", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter1.format("-", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, (-475), "<");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, true);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", true);
      options0.getMatchingOptions("usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}l+uxklm)");
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("--");
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgs((-23));
      options0.hasLongOption("arg");
      helpFormatter0.setSyntaxPrefix("RBF][V0a&>6t_$WJU0!");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("'", options1);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4117, (String) null, options1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "\n").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.printHelp("<'@K1Q8-8y/C", "D", options0, "<'@K1Q8-8y/C", true);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", (String) null, (String) null, (String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      options0.getOptions();
      options0.getMatchingOptions(" ");
      helpFormatter0.setArgName("@s6`L J3<)/");
      helpFormatter0.setLongOptSeparator("D");
      helpFormatter0.setLongOptPrefix("dX%J=OL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) comparator0;
      mockPrintWriter0.printf("~!VD'<-~]xg", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "~!VD'<-~]xg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "_dv-xWn1CMEB>QD", options0);
      helpFormatter0.printHelp("O~", options0, true);
      helpFormatter0.printHelp(9, "dX%J=OL", "", options0, " ");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.defaultNewLine = "@)6G";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      stringWriter0.write("@)6G");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "@)6G", "l", options1, 62, 1, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", false);
      options0.getMatchingOptions("usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}l+uxklm)");
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("--");
      optionGroup1.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgs(3);
      options0.hasLongOption("arg");
      helpFormatter0.setSyntaxPrefix("]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((String) null, options1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "\n").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.printHelp("<'@K1Q8-8y/C", "n", options0, "<'@K1Q8-8y/C", true);
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      options0.getOptions();
      options0.getMatchingOptions("");
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "dX%J=OL";
      objectArray0[1] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("iHSX3:x4", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "dcpWDEFM~lsBf6D$");
      helpFormatter0.printUsage(printWriter0, 9, "org.apache.commons.cli.HelpFormatter", options0);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, true);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", true);
      options0.getMatchingOptions("usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}l+uxklm)");
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("--");
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgs(3);
      options0.hasLongOption("arg");
      helpFormatter0.setSyntaxPrefix("RBF][V0a&>6t_$WJU0!");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("'", options1);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4117, (String) null, options1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) " | ";
      objectArray0[2] = (Object) "IkD*!b}OV[";
      mockPrintWriter0.printf(" | ", objectArray0);
      Options options0 = new Options();
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter1.println(objectArray0[1]);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "^m0Oa.3[)(:#<-f!", "", options0, 2192, 86, "", true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-201);
      Options options0 = new Options();
      String string0 = " ";
      int int1 = 74;
      helpFormatter0.setOptPrefix("X4Z&o");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      stringBuffer0.setLength(11);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 95, " ");
      // Undeclared exception!
//      try { 
        options0.addOption("X4Z&o", "--", true, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'X4Z&o' contains an illegal character : '&'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "X7\"O!e)R@|3*";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X7\"O!e)R@|3*");
      MockFile mockFile0 = new MockFile("@8\"TM+SI|jPQ4o");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      boolean boolean0 = true;
      int int0 = 13;
      String string1 = "A CloneNotSupportedException was thrown: ";
      String string2 = "[ option: ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "--");
      options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "X7\"O!e)R@|3*", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("GwgUNnL&_=#asWENV[", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      helpFormatter0.setWidth(379);
      helpFormatter0.printHelp("b/", "GwgUNnL&_=#asWENV[", options0, "", true);
      helpFormatter0.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 12, "org.apache.commons.cli.HelpFormatter$OptionComparator");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", false);
      options0.getMatchingOptions("usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}l+uxklm)");
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("--");
      optionGroup1.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgs(3);
      options0.hasLongOption("arg");
      helpFormatter0.setSyntaxPrefix("RBF][V0a&>6t_$WJU0!");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("'", options1);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4117, (String) null, options1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, true);
      helpFormatter0.getDescPadding();
      String string0 = "hext-cB$D/FR$";
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", true);
      options0.getMatchingOptions("usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}l+uxklm)");
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Option option0 = new Option("arg", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      optionGroup0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 23, "}l+uxklm)");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-989);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "<'@K1Q8-8y/C";
      String string1 = "n";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("<'@K1Q8-8y/C", "n", options0, "<'@K1Q8-8y/C", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("The option '");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderOptions(stringBuffer0, (-17), options0, 53, 3775);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-17), "", "", options0, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      Options options0 = new Options();
      helpFormatter0.setDescPadding(167);
      helpFormatter0.printHelp("'", options0, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", false);
      options0.getMatchingOptions("usage: ");
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j*\f<(t_F*.");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printUsage(printWriter0, 167, "");
      helpFormatter0.setLongOptSeparator("'");
      helpFormatter0.rtrim("hext-cB$D/FR$");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 74, 2061);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "gE*}i ", false, "");
      String string1 = "";
      Option option0 = new Option("", (String) null);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(731, (String) null, "Nb^Rv&U>&fGEj+R", options2, "Nb^Rv&U>&fGEj+R");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.findWrapPos("usage: ", 3, 0);
      helpFormatter0.setWidth(6);
      Options options0 = new Options();
      Option option0 = new Option("", "'");
      Options options1 = options0.addOption(option0);
      helpFormatter0.setSyntaxPrefix("f|qPJC");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 6, "1", options0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 6, "f|qPJC", options1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      int int0 = 958;
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 958, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", false);
      options0.getMatchingOptions("usage: ");
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j*\f<(t_F*.");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printUsage(printWriter0, 3, "");
      helpFormatter0.setLongOptSeparator("'");
      helpFormatter0.rtrim("hext-cB$D/FR$");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptSeparator("[");
      helpFormatter0.setLongOptPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZoFrs6E4E>f\"Qiil");
      String string0 = "~!VD'<-~]xg";
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", (Object[]) null);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-3273), "[");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      helpFormatter0.printHelp("GwgUNnL&_=#asWENV[", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      helpFormatter0.setWidth(379);
      helpFormatter0.printHelp("b/", "GwgUNnL&_=#asWENV[", options0, "", true);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp(3, "GwgUNnL&_=#asWENV[", "8o.Sfa`}'M^cGIeul", options1, "a>ci-LxQ'pbH +Q*", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg", "85", (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.printHelp("<'@K1Q8-8y/C", "", options0, "<'@K1Q8-8y/C", false);
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
      helpFormatter0.printHelp(13, "A CloneNotSupportedException was thrown: ", "D", options0, "CBpO9R", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(696, "85", (String) null, options1, "85", false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("Pj<Vy3[bev");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("=X0#0[KExb[3Av", "\n", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "", "", options0, (String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P+Ol\"GH70rYI=*lVm^");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.append((CharSequence) "usage: ");
      mockPrintWriter1.println((Object) mockPrintWriter0);
      mockPrintWriter1.println(" ");
      mockPrintWriter0.println(2134L);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 74, "zr`");
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), (String) null, (String) null, (Options) null, "\n", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1341;
      helpFormatter0.findWrapPos("usage: ", 3, 0);
      helpFormatter0.setWidth(6);
      Options options0 = new Options();
      Option option0 = new Option("", "'");
      Options options1 = options0.addOption(option0);
      String string0 = "";
      // Undeclared exception!
//      try { 
        options1.addOption("-", "", false, "k=5(klw$Pq=<p|");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1997, "", options0);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLeftPadding((-1044));
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderOptions(stringBuffer0, (-1044), options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", " ").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.printHelp("<'@K1Q8-8y/C", "", options0, "<'@K1Q8-8y/C", true);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setArgName("@s6`L J3<)/");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("dX%J=OL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "   ";
      objectArray0[1] = (Object) "@s6`L J3<)/";
      objectArray0[2] = (Object) "   ";
      objectArray0[3] = (Object) "<'@K1Q8-8y/C";
      objectArray0[4] = (Object) comparator1;
      objectArray0[5] = (Object) "<'@K1Q8-8y/C";
      mockPrintWriter0.printf("Zckwn=tR*fCR<*RNx", objectArray0);
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.println((Object) options1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-2834), "ld:x;rt|])", "", options1, (-1454), 1606, "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      helpFormatter0.printHelp("GwgUNnL&_=#asWENV[", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      helpFormatter0.setWidth(379);
      helpFormatter0.printHelp("b/", "GwgUNnL&_=#asWENV[", options0, "", true);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("\u0007@}-G#");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("usage: ");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X7\"O!e)R@|3*");
      Option option0 = new Option("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      option0.setArgName("");
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setSyntaxPrefix("");
      option0.setArgs(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setSyntaxPrefix("\"");
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("", false, "--");
      helpFormatter1.printHelp("DxLSC*2h)_Uf", options2);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 2624, "arg", " ", options2, (-827), (-1), "ky_@F#UQ,rfU@[WrBw", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg", "85").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.printHelp("<'@K1Q8-8y/C", "", options0, "<'@K1Q8-8y/C", false);
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter1.printf("IkD*!b}OV[", objectArray0);
      Options options1 = new Options();
      Object object1 = new Object();
      mockPrintWriter0.println(object1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 47, "'UMS", (String) null, options0, 0, (-2), "has already been selected: '", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1997, "", options0);
      helpFormatter0.setSyntaxPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", "--", options0, "s2be'-2XgmDW*%-0");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X7\"O!e)R@|3*");
      helpFormatter0.setWidth(922);
      helpFormatter0.setLongOptSeparator("X7\"O!e)R@|3*");
      helpFormatter0.rtrim("YGIAk+]");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("JI:-&hf2", 1248, 5287);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (byte) (-119), (Options) null, (byte)122, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", false);
      options0.getMatchingOptions("usage: ");
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      optionGroup0.setSelected(option0);
      Option option1 = new Option("arg", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      optionGroup1.setRequired(false);
      options0.addOptionGroup(optionGroup1);
      options0.hasLongOption("arg");
      helpFormatter0.setWidth(0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "usage: ", "iZ*YEe_D0kf", options0, "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dYNX}iO@EjJ{:_>");
      String string0 = "t>o<eZ";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("t>o<eZ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      int int0 = 1997;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-616), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-979);
      helpFormatter0.setDescPadding(1009);
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      mockPrintStream0.close();
      objectArray0[1] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Locale locale0 = Locale.FRANCE;
      mockPrintWriter0.printf(locale0, "i:p", objectArray0);
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("~!VD'<-~]xg", objectArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.printWrapped(printWriter0, 34, 36, "% WUw=zEkm");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "'");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (String) null, options1, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 657, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.defaultDescPad = (-979);
      helpFormatter0.setDescPadding(1009);
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf("J", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Locale locale0 = Locale.FRANCE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "/*4Vyf2-y&xyw", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-979), "J", "", (Options) null, 0, (-979), "v`l/w0", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("31-{Zu(sO*)0`f<@@N");
      helpFormatter0.setLongOptPrefix("jH%5ap|?N`e'(GA2fV7");
      helpFormatter0.createPadding(977);
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) "arg", 977, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultLeftPad = 1;
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setWidth(0);
      String string1 = "";
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("iwKEY`c3/C6L2hZ;", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'iwKEY`c3/C6L2hZ;' contains an illegal character : '`'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, "", "", options0, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      options0.helpOptions();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "fQZs?]zsrRn";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("fQZs?]zsrRn", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-528), 656, "fQZs?]zsrRn");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("line.separator");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "\n", "\n", options0, "jf}-Jeiko#n\"|fQd|", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("<'@K1Q8-8y/C", "", options0, "<'@K1Q8-8y/C", true);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setArgName("@s6`L J3<)/");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("dX%J=OL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("~!VD'<-~]xg", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 0, 424, "<'@K1Q8-8y/C");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 0;
      helpFormatter0.setLongOptPrefix("\n");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Object object0 = new Object();
      stringBuffer0.append(object0);
      String string0 = "*<:`";
      // Undeclared exception!
//      try { 
        stringBuffer0.insert((-2123), "*<:`");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: -2123
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("Cannot add value, list full.", "_7");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "_7";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) mockPrintWriter1;
      objectArray0[6] = (Object) helpFormatter0;
      mockPrintWriter1.printf("usage: ", objectArray0);
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2197);
      helpFormatter0.setLongOptSeparator("$XY~");
      helpFormatter0.defaultArgName = "$XY~";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("line.separator");
      helpFormatter0.setLongOptSeparator("zKH4qeTa9q=s;TND^?");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X7\"O!e)R@|3*");
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      option0.setArgName("");
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setSyntaxPrefix("");
      option0.setArgs(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setSyntaxPrefix("\"");
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.addOption("", true, "--");
      helpFormatter1.printHelp(63, "   ", "6GnP", options0, " ", true);
      helpFormatter0.findWrapPos("", 3, 63);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("f2|yU[]A@7g(ns,.Y!!");
      Options options0 = new Options();
      helpFormatter0.printHelp("f2|yU[]A@7g(ns,.Y!!", options0, false);
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.printHelp("hext-cB$D/FR$", "", options0, "hext-cB$D/FR$", true);
      options0.getMatchingOptions(" ");
      helpFormatter0.setWidth((-1));
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("f^)G", false, "7_BQ~M;QbGP|a");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'f^)G' contains an illegal character : '^'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1997, "", options0);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLeftPadding((-1044));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", false);
      options0.getMatchingOptions("usage: ");
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgs(3);
      options0.hasLongOption("arg");
      helpFormatter0.setSyntaxPrefix("RBF][V0a&>6t_$WJU0!");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("'", options1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, true);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", true);
      options0.getMatchingOptions("usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}l+uxklm)");
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("--");
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgs((-23));
      options0.hasLongOption("arg");
      helpFormatter0.setSyntaxPrefix("RBF][V0a&>6t_$WJU0!");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("'", options1);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 119, "RBF][V0a&>6t_$WJU0!", (String) null, options1, 38, 3, ", ", true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-201);
      Options options0 = new Options();
      String string0 = " ";
      int int1 = 74;
      helpFormatter0.setOptPrefix("X4Z&o");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 95, " ");
      // Undeclared exception!
//      try { 
        options0.addOption("X4Z&o", "--", true, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'X4Z&o' contains an illegal character : '&'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", false);
      options0.getMatchingOptions("usage: ");
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("--");
      optionGroup1.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgs(3);
      options0.hasLongOption("arg");
      helpFormatter0.setSyntaxPrefix("RBF][V0a&>6t_$WJU0!");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("'", options1);
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$1", 103, 64);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.defaultDescPad = (-979);
      helpFormatter0.setDescPadding(1009);
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Locale locale0 = Locale.FRANCE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "i:p", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-979), "", "", (Options) null, 0, (-979), "v`l/w0", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = (-2);
      helpFormatter0.setWidth((-2));
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options2, (-2), (-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      helpFormatter0.printHelp("GwgUNnL&_=#asWENV[", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      helpFormatter0.defaultDescPad = 379;
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("GwgUNnL&_=#asWENV[", options1);
      assertEquals("", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = ";!i;";
      helpFormatter0.findWrapPos("#AA80:0F+}%UtJ[", 485, 485);
      String string0 = " ";
      String string1 = " :: ";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption(";!i;", "]9pbrp00C)c^*_j2,", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ';!i;' contains an illegal character : ';'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("Cannot add value, list full.", "_7");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "_7";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) mockPrintWriter1;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("usage: ", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-2), "usage: ", "", options0, (-2), (-2834), " | ", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "tr ?d.5[XFt8VmQ/O|E";
      helpFormatter0.setSyntaxPrefix("tr ?d.5[XFt8VmQ/O|E");
      int int0 = 0;
      String string1 = "k!1<t~x`+,VQ";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", "--", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 3, 0);
      helpFormatter0.setWidth(6);
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("f|qPJC");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 6, "usage: ", "@$", options0, 62, 0, "arg");
      helpFormatter0.printHelp(1239, "f|qPJC", "f|qPJC", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("X4Z&o");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Option option0 = new Option("", "usage: ", false, "\n");
      option0.setArgName("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.setArgs(34);
      options0.hasLongOption("");
      helpFormatter0.setSyntaxPrefix("X4Z&o");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("X4Z&o", options1);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "X4Z&o", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName("");
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "5D q1hQpGl");
      Options options2 = options1.addOption("dWHr", "--", true, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!'o&Y\"N`Z";
      int int0 = (-1);
      int int1 = 1341;
      int int2 = (-3097);
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      Options options1 = options0.addOption("", "usage: ", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string1 = null;
      // Undeclared exception!
//      try { 
        options2.addOption("-", false, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j*\f<(t_F*.");
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("hext-cB$D/FR$", "'", options0, "j*\f<(t_F*.", false);
      options0.getMatchingOptions("usage: ");
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(false);
      options0.addOptionGroup(optionGroup1);
      options0.hasLongOption("arg");
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("j*\f<(t_F*.", " | ", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "X7\"O!e)R@|3*";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X7\"O!e)R@|3*");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "X7\"O!e)R@|3*");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.defaultSyntaxPrefix = "R\u0004b7)j`";
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.delete();
      mockPrintWriter0.append('w');
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 1431, options0, 596, 32);
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptPrefix("--");
      PrintWriter printWriter0 = null;
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-661), "gzO+2v)n{IY", "gzO+2v)n{IY", options1, 2217, 3, (String) null, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "Xo&4H{$:y";
      helpFormatter0.defaultDescPad = 507;
      helpFormatter0.defaultDescPad = 507;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.defaultSyntaxPrefix = "Q<";
      helpFormatter0.setSyntaxPrefix("$>nBk!YN,+/");
      helpFormatter0.defaultDescPad = 731;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$>nBk!YN,+/");
      Options options0 = new Options();
      mockPrintWriter0.print((String) null);
      Option option0 = new Option("x6C", true, "oc/+J~q=%me");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 507, "QJenP+", "", options1, 731, 507, "LDB\"sMnv6\"CE@");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName(":v`!E7");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setSyntaxPrefix("$>nBk!YN,+/");
      assertEquals("$>nBk!YN,+/", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!'o&Y\"N`Z";
      helpFormatter0.defaultLeftPad = 1341;
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("!'o&Y\"N`Z", (-1), 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " :: ";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", " :: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         //  :: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = (-2058);
      int int1 = (-1);
      String string0 = null;
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile("usage: ", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
//      }
  }
}
