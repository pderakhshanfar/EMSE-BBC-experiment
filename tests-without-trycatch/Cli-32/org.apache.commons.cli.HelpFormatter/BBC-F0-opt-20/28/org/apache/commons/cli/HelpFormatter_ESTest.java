/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:31:53 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.defaultSyntaxPrefix = null;
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-719), "w)]&_ 3~A!F:;8A@Yx");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1160;
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 36, options0, 8, 36);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", ",pDm", options0, ",pDm");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 1171;
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-291), (Options) null, 29, 1235);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-482);
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Option option0 = new Option("HnA", true, "");
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("arg", options1, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultOptPrefix = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = '>';
      charArray0[2] = 'w';
      charArray0[3] = '2';
      charArray0[4] = '*';
      charArray0[5] = 'C';
      charArray0[6] = '2';
      stringWriter0.write(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      Option option0 = new Option("g", (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, false, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options2, 11, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1048);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      helpFormatter0.setOptPrefix("   ");
      helpFormatter0.setSyntaxPrefix("6H(kmkJ^mxmo)|.");
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(102);
      helpFormatter0.getDescPadding();
      String string0 = "tdTD+>";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "";
      // Undeclared exception!
//      try { 
        options1.addOption("                                                                                                      ", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '                                                                                                      ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3425));
      helpFormatter0.rtrim("");
      helpFormatter0.rtrim("");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 119, 119, "J=nbWUXk2/.PPALPn|}");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setDescPadding(3);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "";
      Options options0 = new Options();
      String string1 = "\"?6QlecJ|?o";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = " [ARG]";
      helpFormatter0.defaultSyntaxPrefix = "arg";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3553), (-3553), " [ARG]");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("HnA", true, "");
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(",M`NKmjV", options1, true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "";
      options0.hasShortOption("swVdh");
      Option option0 = new Option("arg", true, "usage: ");
      option0.setArgName(",M`NKmjV");
      options0.addOption(option0);
      helpFormatter0.printHelp("HnA", options0, true);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "--");
      Option option0 = new Option("OEO", "ffcr/ZNpzl!7Vd", false, "usage: ");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", "S&+}bz[", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, ";dV%p?cDE2M~QY)Q", "", options4, 0, (-170), "[ option: ");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "D{_sik$['M.x";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("D{_sik$['M.x");
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "cmdLineSyntax not provided", "arg", options0, "");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "]";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 37, "]", "#*bTBoMYfl?D@%Yd}j|", options0, 37, 37, "@h3wZ^UHyATmMC#>");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("=24IE&", "NO_ARGS_ALLOWED", (Options) null, "-k{`f~tAS&pAS", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ");
      mockPrintWriter0.print((double) 3);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      mockPrintWriter0.print((Object) optionGroup1);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "rylIe$|o4+M", "ip2yQl", options0, 1282, 34, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 6, options0, 6, 6);
      Options options1 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 10, options1, 10, 10);
      Option option0 = new Option("arg", true, "usage: ");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp("nA", "nA", options2, "nA");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-1), options0, 6, 73);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "\n", "BU{SbM-j$2Ot3jKyq", options1, "\n", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2(P(n.!iYU");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3073, 1, "!EN7");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.createPadding(0);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("!EN7", 3073, 1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "arg");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", "2(P(n.!iYU", true, "usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 190, "", options3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("");
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string0 = "";
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) optionGroup1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) optionGroup1;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      mockPrintWriter0.printf("--", objectArray0);
      Locale locale0 = Locale.ENGLISH;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer(88);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions(stringBuffer0, 275, (Options) null, 37, 36);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-56);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 649, "", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "");
      Options options2 = options1.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("", false, (String) null);
      Options options3 = options0.addOption((String) null, (String) null, false, "usage: ");
      options3.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(4444, "arg", "dk(Jhh4/J5Z[!", options1, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "has already been selected: '");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      optionGroup0.toString();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "[]", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 2;
      Object object0 = new Object();
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("The option '", "The option '", options0, "_}76K");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 34, "");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-32);
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) (byte)9;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (byte)9, (Options) null, (byte) (-32), (byte)9);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object object0 = new Object();
      helpFormatter0.setDescPadding((-1014));
      Object object1 = new Object();
      Options options0 = new Options();
      String string0 = "line.separator";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("}b[bJt)FjV2", "}b[bJt)FjV2", options0, "line.separator");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byte byte0 = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)125;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-3797);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      options1.hasOption("usage: ");
      Options options2 = options1.addOption("", true, "usage: ");
      option0.toString();
      options2.getMatchingOptions("\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((int) (byte)104, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options2, "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.toString();
      Option option0 = new Option("arg", true, (String) null);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("[]", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("arg");
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 8, "#ZX,(RzuDP'o#", "_", options0, 3, 34, "*K", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "'", false, "hM");
      helpFormatter0.printHelp("[%R!Hw#EnI*{RdO2l[", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "Kpb(2FQxLu1.>_JrNN_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2811, "q4C", (String) null, options0, 2811, (-997), "\n", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Options options1 = null;
      String string0 = null;
      String string1 = "";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("arg", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(3, "\n", "\n", (Options) null, "--", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object object0 = new Object();
      Locale locale0 = new Locale("arg", "usage: ");
      Object object1 = new Object();
      Object object2 = new Object();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator(comparator0);
      options0.hasLongOption("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "Is'`SfAJT17MX", "usage: ", options0, 90, 90, "usage: ", false);
      Options options1 = new Options();
      helpFormatter0.printHelp("Is'`SfAJT17MX", "Is'`SfAJT17MX", options0, "Is'`SfAJT17MX", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "|Kzbc.**", "|Kzbc.**", options0, 3, 9, "=");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup0.setRequired(false);
      Option option0 = new Option("arg", false, "usage: ");
      Options options1 = options0.addOption(option0);
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, ".NpR^", (Object[]) null);
      String string0 = null;
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage(printWriter0, 284, (String) null, options2);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("arg", (-404), 284);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object object0 = new Object();
      Object object1 = new Object();
      Options options0 = new Options();
      mockPrintWriter0.flush();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 431, (String) null, (String) null, options0, 34, 98, ">", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object object0 = new Object();
      Object object1 = new Object();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "fIwoEjYhC", "fIwoEjYhC", options0, 1, 1, "fIwoEjYhC", true);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(63, "\n", "\n", options0, "\n", false);
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", "arg", options1, "--", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 63;
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "5ZNK[cZr^>1I`qe=hLV", true, "arg");
      helpFormatter0.printHelp("+", " ]", options2, (String) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printOptions(mockPrintWriter0, (-466), options1, 6057, 1694);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.findWrapPos((String) null, 74, (-1455));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = 2031;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 38, 2031, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Options options1 = new Options();
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("The option '", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.rtrim(" ");
      int int0 = 2081;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2081, "A CloneNotSupportedException was thrown: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.rtrim(" ");
      int int0 = 111;
      helpFormatter0.findWrapPos(" ", 2081, 111);
      String string1 = "q2$9C^(?c]J*k{";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "q2$9C^(?c]J*k{");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // q2$9C^(?c]J*k{
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "   ";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "   ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      mockPrintWriter1.printf("--", objectArray0);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2, "has already been selected: '", "8(e5pYHnNQU", options1, 16, 565, "G");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      char[] charArray0 = new char[17];
      charArray0[2] = '\u0000';
      helpFormatter0.setOptionComparator(comparator0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "FN{ ]S#ES}*I`UbCWY";
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintWriter0.printf("FN{ ]S#ES}*I`UbCWY", objectArray0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 34, 9, "usage: ");
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 817, 32, "usage: ");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("&M$$T]Z$AUscl`", "/N;", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("");
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      int int0 = 14;
      String string0 = ".:TFfH~";
      Options options1 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(14, "?uhO)/", ".:TFfH~", (Options) null, "{([jZr*pURkV:");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      char[] charArray0 = new char[17];
      charArray0[0] = 'l';
      charArray0[2] = '*';
      helpFormatter0.setOptionComparator(comparator0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "FN{ ]S#ES}*I`UbCWY";
      Object object0 = new Object();
      objectArray0[1] = object0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      mockPrintWriter0.printf("FN{ ]S#ES}*I`UbCWY", objectArray0);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 11, 11, "Z<");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      helpFormatter0.findWrapPos("\n", 63, (-2720));
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("0i\"Uo\"{j");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 63, "[ARG...]", "$>^!wbd", options0, (-2), (-2), "$>^!wbd");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      char[] charArray0 = new char[17];
      charArray0[0] = 'l';
      charArray0[2] = '*';
      helpFormatter0.setOptionComparator(comparator0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "FN{ ]S#ES}*I`UbCWY";
      Object object0 = new Object();
      objectArray0[1] = object0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      PrintWriter printWriter0 = mockPrintWriter0.printf("FN{ ]S#ES}*I`UbCWY", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 11, "FN{ ]S#ES}*I`UbCWY", "8(e5pYHnNQU", options0, 2, 3, "FN{ ]S#ES}*I`UbCWY");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[0];
      Locale locale0 = Locale.ENGLISH;
      option0.setOptionalArg(true);
      Options options1 = new Options();
      Option option1 = new Option("arg", "");
      helpFormatter0.findWrapPos("", 1170, 2771);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      char[] charArray0 = new char[17];
      charArray0[0] = 'l';
      charArray0[2] = '*';
      helpFormatter0.setOptionComparator(comparator0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "FN{ ]S#ES}*I`UbCWY";
      Object object0 = new Object();
      objectArray0[1] = object0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      PrintWriter printWriter0 = mockPrintWriter0.printf("FN{ ]S#ES}*I`UbCWY", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 16, "FN{ ]S#ES}*I`UbCWY", "8(e5pYHnNQU", options0, 2, 3, "FN{ ]S#ES}*I`UbCWY");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.KOREA;
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "line.separator");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = object0;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) helpFormatter0;
      Options options0 = new Options();
      char[] charArray0 = new char[0];
      mockPrintWriter0.println(charArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 116, "org.apache.commons.cli.HelpFormatter$OptionComparator", "#EC0T", options0, 74, 113, "", false);
      helpFormatter0.setLongOptSeparator("#EC0T");
      helpFormatter0.setDescPadding((-1039));
      helpFormatter0.setOptPrefix("org.apache.commons.cli.OptionValidator");
      mockPrintWriter0.println();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.Option", options0, 9, 1, "#EC0T");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(",GE{/]$");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      int int0 = 2;
      helpFormatter0.findWrapPos("", 2, 1666);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.setLength(429);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer1, (-179), options0, 1666, 3521);
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter((File) null, "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(2771, "{([jZr*pURkh:", "{([jZr*pURkh:", options1, "{([jZr*pURkh:");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("\n", objectArray0);
      Locale locale0 = Locale.ENGLISH;
      mockPrintWriter0.printf(locale0, "i`iD/O", objectArray0);
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), 2771, "g\"C^'I");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      int int0 = (-2720);
      helpFormatter0.findWrapPos("\n", 63, (-2720));
      StringBuffer stringBuffer0 = null;
//      try {
        stringBuffer0 = new StringBuffer((-2720));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "");
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'Q';
      charArray0[2] = '*';
      charArray0[3] = '\"';
      mockPrintWriter0.print(charArray0);
      String string0 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2022, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
//      try { 
        optionGroup0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.OptionGroup", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object object0 = new Object();
      Locale locale0 = new Locale("arg", "usage: ");
      helpFormatter0.getLongOptSeparator();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      mockPrintWriter0.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), (String) null, "BAdA;bD>;BA{", options0, "BAdA;bD>;BA{", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('G');
      int int0 = (-412);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-412), (-412), "org.apache.commons.cli.HelpFormatter$OptionComparator");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options2, "org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      locale0.getDisplayCountry();
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) helpFormatter0;
      Object object2 = new Object();
      objectArray0[8] = object2;
      mockPrintWriter0.format(locale0, "arg", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("k", "South Korea", (Options) null, "^TpQ['rU3");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      locale0.getDisplayCountry();
      Object object1 = new Object();
      Object object2 = new Object();
      mockPrintWriter0.format(locale0, "--", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3814, "South Korea", "Is'`SfAJT17MX", options0, 1, 90, "--", true);
      helpFormatter0.setLongOptSeparator("j`o");
      helpFormatter0.setDescPadding(2);
      helpFormatter0.setOptPrefix("_xsd7PjR=xI;(-i:");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      locale0.getDisplayCountry();
      Object object1 = new Object();
      Object object2 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      Options options0 = new Options();
      int int0 = (-657);
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 1600, "", "", options1, (-5), (-657), "k", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2296), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = object1;
      Object object3 = new Object();
      objectArray0[2] = object3;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = object0;
      Options options0 = new Options();
      char[] charArray0 = new char[0];
      mockPrintWriter0.println(charArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 116, "org.apache.commons.cli.HelpFormatter$OptionComparator", "#EC0T", options0, 74, 113, "", false);
      helpFormatter0.setLongOptSeparator("#EC0T");
      int int0 = (-1039);
      helpFormatter0.setDescPadding((-1039));
      helpFormatter0.setOptPrefix("org.apache.commons.cli.OptionValidator");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3493), "org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.forLanguageTag("\n");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "&M$$T]Z$AUscl`";
      objectArray0[3] = (Object) helpFormatter0;
      mockPrintWriter0.format(locale0, "", objectArray0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1580), "wUSV8<H_[,I8y(f7Sy", "rj(Vb X!B3c", options1, 74, 3, "arg", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "e^T,]2GfHQj'SD[!W";
      Options options0 = new Options();
      options0.hasLongOption("e^T,]2GfHQj'SD[!W");
      helpFormatter0.printHelp("e^T,]2GfHQj'SD[!W", "e^T,]2GfHQj'SD[!W", options0, "e^T,]2GfHQj'SD[!W");
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringBuffer0.append(true);
      stringBuffer0.reverse();
      int int0 = 9;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2750), options0, 9, (-2002));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "t<{Yq[5FI";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "t<{Yq[5FI", "", options0, "<", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "d({mhh4/J5Z[!";
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      helpFormatter0.rtrim("d({mhh4/J5Z[!");
      stringBuffer0.setLength(74);
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      locale0.getDisplayCountry();
      Object object1 = new Object();
      Object object2 = new Object();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("j`o");
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.setOptPrefix("South Korea");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(">jo_y#", options0);
      helpFormatter0.setWidth(0);
      options0.hasOption("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = new Locale("D4&;TLaaTn/");
      helpFormatter0.defaultOptPrefix = "usage: ";
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(locale1, "usage: ", objectArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      locale0.getDisplayName();
      Option option0 = new Option("AvM5F", "arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("H_Gk", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "H_Gk", "<e5_78,qJ^:Y+3r", options1, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.findWrapPos("usage: ", 1, 1);
      helpFormatter0.setOptPrefix("");
      String string0 = "Xexxfs2z#@{VUbF:!";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("--", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("&M$$T]Z$AUscl`", "/N;", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getLeftPadding();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "&Ex&R/6WJ??$*";
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-851);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("&Ex&R/6WJ??$*", options0, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      byteArrayOutputStream0.write((-1064));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "The option '");
      helpFormatter0.setNewLine((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos(" V|bj*b~Zld)iy`/1w", (-3107), (-4869));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object object0 = new Object();
      helpFormatter0.setSyntaxPrefix(")N");
      Object object1 = new Object();
      Object object2 = new Object();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "Is'`SfAJT17MX", "usage: ", options0, 90, 90, "usage: ", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(")N", ")N", options0, "");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("lUxrutKe^HX!");
      int int0 = 13;
      String string0 = ",MUDx-q";
      String string1 = "j";
      Options options0 = new Options();
      Option option0 = new Option("", false, " ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        options1.addOption("bI{c3rmh 4e*tLS{", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'bI{c3rmh 4e*tLS{' contains an illegal character : '{'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 446;
      stringBuffer0.codePoints();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 446, 446, "f@Z:b");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      String string0 = "t<{Yq[5FI";
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "t<{Yq[5FI", "", options0, "<", false);
      helpFormatter0.getLongOptSeparator();
      String string1 = "gC";
      options0.addOption("gC", "--", false, "k4Wf q{S;N2YNN");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "t<{Yq[5FI");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // t<{Yq[5FI
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = (-2959);
      helpFormatter0.setWidth((-2959));
      helpFormatter0.getLongOptPrefix();
      String string0 = "";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      Options options0 = new Options();
      String string1 = "xO";
      String string2 = "";
      Options options1 = options0.addOption("xO", true, "");
      String string3 = "";
      String string4 = "W&r_>Q5~r6Dy";
      Option option0 = new Option("", "|WH:}Y");
      options1.addOption(option0);
      Option option1 = new Option("", "W&r_>Q5~r6Dy");
      option1.setValueSeparator('l');
      options1.addOption(option1);
      // Undeclared exception!
//      try { 
        option1.addValue("xO");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, (String) null, (String) null, (Options) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "o[id+0D`9Wh(FSJ", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1273), (String) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "&UQHyz");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("mPGz.aDEn0x", "", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'mPGz.aDEn0x' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "P~SE@nFQBw+";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.createPadding(0);
      boolean boolean0 = true;
      options1.hasShortOption("arg");
      String string1 = "}=F's!5d?\\\"iS";
      // Undeclared exception!
//      try { 
        options1.addOption("-", false, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "k/,mO";
      helpFormatter0.defaultSyntaxPrefix = "k/,mO";
      int int0 = 44;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 44, 44);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2));
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setWidth(1);
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      assertEquals(1, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 1;
      helpFormatter0.findWrapPos("", 1, 1);
      helpFormatter0.setOptPrefix("");
      String string1 = "Xexxfs2z#@{VUbF:!";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("--", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptPrefix("n9<");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("n9<");
      int int0 = (-2967);
      Options options0 = new Options();
      options0.hasOption("--");
      mockPrintWriter0.print(3);
      int int1 = 2062;
      options0.getOption(" [ARG]");
      mockPrintWriter0.checkError();
      mockPrintWriter0.println((double) 74);
      options0.helpOptions();
      Option option0 = null;
//      try {
        option0 = new Option("HQZ!)h", "Lez}Z5(mM3gKMtK6CYb");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'HQZ!)h' contains an illegal character : '!'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      String string0 = "Yr(sfzVeg[s|[,XL";
      helpFormatter0.defaultOptPrefix = "Yr(sfzVeg[s|[,XL";
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "arg");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // arg
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", "i", true, "--");
      Options options3 = options2.addOption("i", true, "--");
      options3.addOption(option0);
      helpFormatter0.printHelp("", "i", options0, "");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", "", true, "#E");
      Options options3 = options2.addOption("", true, "#E");
      options3.addOption(option0);
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      Options options4 = options1.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp("=1", options4, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.rtrim("org.apache.commons.cli.HelpFormatter$1");
      assertEquals("org.apache.commons.cli.HelpFormatter$1", string0);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "";
      Option option0 = new Option("arg", true, "usage: ");
      option0.setArgName(",M`NKmjV");
      options0.addOption(option0);
      helpFormatter0.printHelp("HnA", options0, true);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      String string0 = null;
      Options options1 = options0.addOption((String) null, true, "org.apache.commons.cli.Options");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 988, options1, 3747, 32);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      int int0 = 6;
      helpFormatter0.renderOptions(stringBuffer1, 104, options1, 6, 988);
      int int1 = 22;
      helpFormatter0.defaultDescPad = 22;
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile((String) null, "[P,");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.getAbsoluteFile();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "-", "[P,", options1, (-618), 104, (String) null, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(2771, "{([jZr*pURkh:", "{([jZr*pURkh:", options1, "{([jZr*pURkh:");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.ENGLISH;
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "i`iD/O", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter1, (-2), "79L:-pA|~TA|>dd1;l", "", options0, 1, 9, "org.apache.commons.cli.Option");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("W]3R");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "W]3R";
      objectArray0[1] = (Object) "W]3R";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printUsage(printWriter0, 719, "W]3R");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.setLength(13);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1659, options0, 31, 15);
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      int int0 = (-2675);
      String string0 = "";
      int int1 = (-959);
      String string1 = "usage: ";
      String string2 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("+{_Sj", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '+{_Sj' contains an illegal character : '+'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      locale0.getDisplayCountry();
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) helpFormatter0;
      Object object2 = new Object();
      objectArray0[8] = object2;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 1600, "k", "", options0, 1600, (-657), "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasShortOption(" ");
      Option option0 = new Option("arg", true, "usage: ");
      options0.addOption(option0);
      helpFormatter0.printHelp("nA", options0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      ObjectOutputStream objectOutputStream0 = null;
//      try {
        objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.BufferedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.setLongOptSeparator("l");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Option option0 = new Option("arg", false, "szOBgJj,''");
      option0.setArgName("--");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.getNewLine();
      int int1 = 3572;
      helpFormatter0.createPadding(3572);
      int int2 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = null;
//      try {
        stringBuffer0 = new StringBuffer((-4169));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(2771, "{([jZr*pURkh:", "{([jZr*pURkh:", options1, "{([jZr*pURkh:");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("\n", objectArray0);
      Locale locale0 = Locale.ENGLISH;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "i`iD/O", objectArray0);
      helpFormatter0.getDescPadding();
      helpFormatter0.printUsage(printWriter0, 2771, "i`iD/O", options1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1580, "", "i`iD/O", options1, 96, 74, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("[ Options: [ short ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("nA", true, ":");
      helpFormatter0.setLeftPadding(0);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(":", options2, true);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("[ Options: [ short ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(2771, "{([jZr*pURkh:", "{([jZr*pURkh:", options1, "{([jZr*pURkh:");
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals("-", string0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 9;
      String string0 = "O3FlgWO";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", "yu*</r");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "d(FJhh4/J5Z[!";
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("d(FJhh4/J5Z[!", 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2));
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setWidth(74);
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0);
      String string0 = "org.apache.commons.cli.Option";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option", "\n");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("3Dei.pBJrvS~3zidE");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('o');
      int int0 = 9;
      // Undeclared exception!
//      try { 
        stringWriter1.append((CharSequence) "arg", 1, 9);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }
}
