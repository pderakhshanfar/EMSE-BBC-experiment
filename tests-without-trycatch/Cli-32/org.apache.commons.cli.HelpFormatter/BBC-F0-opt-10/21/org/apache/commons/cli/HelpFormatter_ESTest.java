/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 09:47:15 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOption("arg");
      helpFormatter0.defaultLeftPad = 3;
      Option option0 = new Option("arg", true, " ");
      options0.addOption(option0);
      option0.setArgName("arg");
      MockFile.createTempFile("lC/{B)lp5re{3~v", "--", (File) null);
      option0.setArgName("");
      helpFormatter0.printHelp(2464, "org.apache.commons.cli.HelpFormatter$OptionComparator", "lC/{B)lp5re{3~v", options0, "lC/{B)lp5re{3~v");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLeftPad = 3;
      Option option0 = new Option("arg", true, " ");
      options0.addOption(option0);
      option0.setArgName("arg");
      File file0 = MockFile.createTempFile("lC/{B)lp5re{3~v", "--", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "lC/{B)lp5re{3~v", 3, 3);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-3615), "lC/{B)lp5re{3~v", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-226);
      helpFormatter0.defaultWidth = (-226);
      String string0 = null;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-226));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, 74, "usage: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 220, options0, 114, 220);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 4, options0, 19, (-169));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      helpFormatter0.setWidth(2008);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      int int0 = 8;
      mockPrintStream0.print((double) 3);
      mockPrintStream0.checkError();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ] [ long ", " ] [ long ", (Options) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n", true, "]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      OptionGroup optionGroup3 = new OptionGroup();
      OptionGroup optionGroup4 = optionGroup3.addOption(option0);
      optionGroup4.setSelected(option0);
      Options options2 = options1.addOption("", "", false, " [ARG]");
      options2.addOptionGroup(optionGroup2);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "YQkX-h~.k868[O ", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-611), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "1x%");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.toString();
      optionGroup1.setSelected(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "org.apache.commons.cli.OptionGroup", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2, "]", "usage: ", options0, 1, 74, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printOptions(printWriter0, 765, options0, 1266, 703);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(294, "usage: ", "-", options0, "arg");
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "1x%");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "org.apache.commons.cli.OptionGroup", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      String string0 = "usage:e ";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "--";
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-886), ", ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("XV", true, "u-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "arg", false, "XV");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption("", false, "arg");
      helpFormatter0.printHelp(1631, "Cannot add value, list full.", "Cannot add value, list full.", options4, "wcTYjp@><24?MeP.", true);
      helpFormatter0.rtrim(" ");
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "1x%");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 10, "usage: ", "org.apache.commons.cli.OptionGroup", options2, 1000, 34, "org.apache.commons.cli.OptionGroup", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(8);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printHelp(printWriter0, 8, "Z47.)v,t @S}", (String) null, options0, 8, 2, "w", false);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = ">V?i>I4#K{y&";
      helpFormatter0.setDescPadding((-1557));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 2027;
      stringWriter0.write("");
      helpFormatter0.renderWrappedText(stringBuffer0, 2027, 23, "]");
      URI uRI0 = MockURI.create("");
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile(uRI0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URI is not absolute
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "}";
      helpFormatter0.rtrim("}");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, "}");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, ", ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 2776, "usage: ", "", options0, 6, (-1664), "B%)!1s`");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      helpFormatter0.printHelp(12, "e_vP)X0", "e_vP)X0", options1, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 12, 12);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setOptPrefix("arg");
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-1473));
      Options options1 = options0.addOption("", false, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(56, "]", "]", options1, "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 113, (-1), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ";\"x!ls]BBL";
      helpFormatter0.defaultLeftPad = 885;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "\n", false, "]|Z)V)@>");
      String string1 = null;
      String string2 = "Illegal option name '";
      Options options3 = options2.addOption((String) null, true, "Illegal option name '");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("' contains an illegal character : '", options3, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 644, "--", "--", options0, 0, 0, "--", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 27, (String) null, options0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 27, "cmdLineSyntax not provided", options1);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("{s7|V[hM2$l>Ab2)7");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "{s7|V[hM2$l>Ab2)7");
      options0.hasOption(" ");
      MockFile mockFile1 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-3342), "{s7|V[hM2$l>Ab2)7", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.getMatchingOptions("");
      helpFormatter0.setWidth(0);
      String string1 = "fW5-yjJP-^";
      String string2 = null;
      // Undeclared exception!
      helpFormatter0.printHelp("SO!;%,#", options0, false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("BTIDc2X:)2=! R24+MU");
      helpFormatter0.printHelp(11, "=qNYjX", "rKW![cPx7{x", options0, "=qNYjX");
      helpFormatter0.findWrapPos("BTIDc2X:)2=! R24+MU", 11, 5);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3, "-", "arg", options0, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, " ", "-", (Options) null, "T9G0PO:W`7n>2!!vT");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile("\n");
      mockFile1.setWritable(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "arg");
      helpFormatter0.printHelp("C {LZIZHXNey", "F+ndZXL ", options1, "C {LZIZHXNey");
      Options options2 = new Options();
      options1.toString();
      helpFormatter0.findWrapPos("", 1, 13);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("4Q6k", "F+ndZXL ", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "8@e:L~~";
      MockFile mockFile0 = new MockFile(" ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, " ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 517, "8@e:L~~", "8@e:L~~", (Options) null, 710, 2, "KlF");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options1 = options0.addOption("arg", false, "arg");
      Option option0 = new Option("u5", false, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(2185, "u5", "u5", options2, "]");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "org.apache.commons.cli.Option";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Option", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, true, "usage: ");
      helpFormatter0.printHelp(3249, "org.apache.commons.cli.Options", "", options1, "org.apache.commons.cli.Options");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) fileSystemHandling0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 2082, 2082, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 3249, options2, 3249, 17);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setSyntaxPrefix(";");
      MockFile mockFile0 = new MockFile("yx");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = new Locale("--", "=0<AH7sqk``Coi", "vawCb#}KYw7!IQ");
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 30, "+zb", "+zb", options0, (-337), 30, "yx", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      List list0 = new LinkedList<Integer>();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1020, "Oqv{&|ZEeh4", options0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2373, "u");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setOptPrefix("arg");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 55, 55, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-2102), 55, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("");
      helpFormatter0.printHelp(755, "\"", (String) null, options0, "");
      helpFormatter0.printHelp(755, "--", "", options0, " ", false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(10, "rKW![cPx7{x", (String) null, options0, ";XJUX'@M-A$.3h*W99");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1473));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", true, "usage: ");
      helpFormatter0.printOptions(mockPrintWriter0, 644, options1, 644, 76);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "", objectArray0);
      helpFormatter0.printHelp(printWriter0, 76, "1xhd%qN", "", options1, 644, 44, "1xhd%qN", false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setOptPrefix("arg");
      Options options0 = new Options();
      Option option0 = new Option("", "3nb^E +)K.FR<2ejK>");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix(" [ARG]");
      helpFormatter1.setOptionComparator((Comparator) null);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter1.renderOptions(stringBuffer0, (-2310), options0, 539, 1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append('U');
      Options options0 = new Options();
      options0.hasOption("-");
      File file0 = MockFile.createTempFile("usage: ", "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      options0.addOption("", "org.apache.commons.cli.Util", true, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, (String) null, "org.apache.commons.cli.Util", options0, 74, 5, (String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions((PrintWriter) null, 1, options1, 3868, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "arg");
      helpFormatter0.printOptions(mockPrintWriter0, 644, options0, 0, 1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 644, "Q=80AC", "Q=80AC", options1, 0, 0, "Q=80AC", true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "arg");
      helpFormatter0.printOptions(mockPrintWriter0, 644, options0, 0, 1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 644, "Y", "org.apache.commons.cli.HelpFormatter$1", options1, 13, 13, "", false);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-20);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Pr_F~k,@j");
      Options options0 = new Options();
      options0.getMatchingOptions("\"");
      Options options1 = options0.addOption("", false, "3nb^E +)K.FR<2ejK>");
      options1.hasOption("3nb^E +)K.FR<2ejK>");
      helpFormatter0.printHelp(2547, "h8sRFr@}l.", "", options1, "");
      helpFormatter0.printHelp("1", "nsX =!B64y2DK`", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "F+ndZXL ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultOptPrefix;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 0, "-", "usage: ", options0, 3, 3, "");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, ">", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "arg");
      helpFormatter0.printOptions(mockPrintWriter0, 644, options0, 0, 1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-3514), "{'|MR4S]-", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      options0.addOption("", "", false, "arg");
      helpFormatter0.printOptions(mockPrintWriter0, 644, options0, 0, 1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "--", options0, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Pr_F~k,@j");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("", false, "3nb^E +)K.FR<2ejK>");
      options1.hasOption("3nb^E +)K.FR<2ejK>");
      helpFormatter0.printHelp(2547, "h8sRFr@}l.", "", options1, "");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2547, 1055, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 16, 2547, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile("\n");
      mockFile1.setWritable(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "arg");
      helpFormatter0.printHelp("C {LZIZHXNey", "F+ndZXL ", options1, "C {LZIZHXNey");
      Options options2 = new Options();
      options1.toString();
      helpFormatter0.findWrapPos("", 1, 13);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Pr_F~k,@j");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "3nb^E +)K.FR<2ejK>");
      options1.hasOption("3nb^E +)K.FR<2ejK>");
      helpFormatter0.printHelp(2547, "h8sRFr@}l.", "", options1, "");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(")WtS4>X.k");
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = helpFormatter0.defaultOptPrefix;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, (String) null, ";a;=C^*%mZ*:)Rdj", options0, 74, 176, "/s%n|bYTP");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix(";");
      MockFile mockFile0 = new MockFile("--");
      Options options0 = new Options();
      helpFormatter0.printHelp("o", "o", options0, "");
      Options options1 = new Options();
      options0.toString();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("-", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "F+ndZXL ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "arg");
      Option option0 = new Option("T", false, "T");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "JraTjxX%&.Bj:){b9u", "", options2, "F+ndZXL ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append('U');
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 52, 52, "\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Pr_F~k,@j");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "3nb^E +)K.FR<2ejK>");
      options1.hasOption("3nb^E +)K.FR<2ejK>");
      options0.hasLongOption("--");
      helpFormatter0.printHelp(2547, "h8sRFr@}l.", "", options1, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("Pr_F~k,@j", (-725), (-1731));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix(";");
      MockFile mockFile0 = new MockFile("--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = new Locale("+zb", "}+1t[0XdWzOYX=^p", "--");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "}+1t[0XdWzOYX=^p";
      objectArray0[1] = (Object) "}+1t[0XdWzOYX=^p";
      objectArray0[2] = (Object) "}+1t[0XdWzOYX=^p";
      objectArray0[3] = (Object) "gm>q@Y5+LXo";
      objectArray0[4] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "gm>q@Y5+LXo", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "1", false, "F+ndZXL ");
      helpFormatter0.printOptions(printWriter0, 644, options1, 1, 1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("gm>q@Y5+LXo");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 644, "", options0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "F+ndZXL ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "arg");
      Option option0 = new Option("", false, "");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, ";", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append('U');
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", false, "-");
      options1.hasOption("");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "h8sRFr@}l.", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options1, "-");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "]", " ]", options0, (-885), 0, "]", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("l;s}Uu(FIPB#7K;F");
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      MockFile mockFile0 = new MockFile("", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 45, (-258), "l;s}Uu(FIPB#7K;F");
      String string0 = "<OQ*Z |s*h9y";
      Option option0 = null;
//      try {
        option0 = new Option("lxxlj!m7yiWV`0", "<OQ*Z |s*h9y");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'lxxlj!m7yiWV`0' contains an illegal character : '!'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setSyntaxPrefix(";");
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "F+ndZXL ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "arg");
      Option option0 = new Option("", false, "");
      option0.setArgName(";");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, ";", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Pr_F~k,@j");
      Options options0 = new Options();
      String string0 = "3nb^E +)K.FR<2ejK>";
      Options options1 = options0.addOption("", false, "3nb^E +)K.FR<2ejK>");
      options1.hasOption("3nb^E +)K.FR<2ejK>");
      String string1 = "ASXVqjvT";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X{{J");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.setDescPadding(1950);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("=J-ciT");
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = helpFormatter0.defaultOptPrefix;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1526), "org.apache.commons.cli.HelpFormatter$1", "\"n6:_", options1, (-1526), 942, (String) null);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix(";");
      MockFile mockFile0 = new MockFile("--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = new Locale("+zb", "}+1t[0XdWzOYX=^p", "--");
      Locale locale1 = Locale.UK;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "gm>q@Y5+LXo";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "", objectArray0);
      Options options0 = new Options();
      options0.addOption("", "usage: ", true, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 3, options0, 2718, 9);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      String string0 = "";
      String string1 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (String) null, options0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("$uXr4'pdX`j]g1FW&a");
      Options options0 = new Options();
      Options options1 = new Options();
      options1.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = null;
      options1.addOption((String) null, "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", true, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2184), options1, 0, (-5));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "$uXr4'pdX`j]g1FW&a";
      helpFormatter0.setOptPrefix("$uXr4'pdX`j]g1FW&a");
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, false);
      int int1 = (-1522);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1522), "KjIip#xLq^gQHvmS", "KjIip#xLq^gQHvmS", options0, 18, 0, "KjIip#xLq^gQHvmS", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("-", 74, 74);
      helpFormatter0.setSyntaxPrefix(" ");
      MockFile mockFile0 = new MockFile("--");
      String string0 = "F+ndZXL ";
      MockFile mockFile1 = new MockFile(mockFile0, "F+ndZXL ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter("--");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      PrintWriter printWriter0 = null;
      String string0 = "5w%:J@#XL=4";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 554, ";");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter(mockFile0, "},Dx$45C");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // },Dx$45C
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 1334, (-2001), "-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 74;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.defaultLeftPad = 64;
      Option option0 = new Option((String) null, true, (String) null);
      Options options2 = options1.addOption(option0);
      option0.setArgName("arg");
      int int1 = 1516;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 74, options2, 32, 1516);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("$uXr4'pdX`j]g1FW&a");
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", false, "h8sRFr@}l.");
      options1.hasOption("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, "", "", options1, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 2851, "");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setOptPrefix("$uXr4'pdX`j]g1FW&a");
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = false;
      String string2 = "h8sRFr@}l.";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "j", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setArgName("\n");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "org.apache.commons.cli.Options");
      String string1 = "(KJu>J\"@V)9lup6;";
      boolean boolean1 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(0, ">c~6.]Az`$~R", "", options1, "(KJu>J\"@V)9lup6;", false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(")WtS4>X.k");
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = helpFormatter2.defaultOptPrefix;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" [ARG]");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 2679, "arg");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "-", " [ARG]", options0, 74, 74, "^*s@c");
      helpFormatter2.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix(";");
      MockFile mockFile0 = new MockFile("--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = new Locale("+zb", "}+1t[0XdWzOYX=^p", "--");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "}+1t[0XdWzOYX=^p";
      objectArray0[1] = (Object) "}+1t[0XdWzOYX=^p";
      objectArray0[2] = (Object) "}+1t[0XdWzOYX=^p";
      objectArray0[3] = (Object) "gm>q@Y5+LXo";
      objectArray0[4] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "gm>q@Y5+LXo", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "1", false, "F+ndZXL ");
      helpFormatter0.printOptions(printWriter0, 644, options1, 1, 1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("gm>q@Y5+LXo");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("$uXr4'pdX`j]g1FW&a");
      Options options0 = new Options();
      Options options1 = new Options();
      options1.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1096), "", "1?G", options0, (-5), 0, "TX");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-855), "", "", options0, 94, 1, "TX");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append('U');
      helpFormatter0.rtrim("mioPV 1yb#");
      MockFile mockFile0 = new MockFile("");
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 63, "", "3", options0, (-1401), 3, "mioPV 1yb#", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix(";");
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "F+ndZXL ");
      Options options0 = new Options();
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ";";
      PrintWriter printWriter0 = mockPrintWriter0.format("F+ndZXL ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-885), "", "", options0, 0, 0, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("l;s}Uu(FIPB#7K;F");
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      helpFormatter0.rtrim("arg");
      MockFile mockFile0 = new MockFile(" ");
      Options options1 = new Options();
      options1.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-738), "l;s}Uu(FIPB#7K;F", "l;s}Uu(FIPB#7K;F", options0, 31, (-1595), "usage: ", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.defaultNewLine = "-";
      helpFormatter0.setOptPrefix("l;s}Uu(FIPB#7K;F");
      Options options0 = null;
      String string0 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((-3815), "j`c_=4X^u|", "--", (Options) null, " P$ks|\"QWT2Thc[=j", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "]", " ]", options0, (-885), 0, "]", true);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0, true);
      String string0 = "";
      Options options1 = options0.addOption("", true, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", options1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("=J-ciT", options0, true);
      String string0 = "";
      helpFormatter0.printHelp("=J-ciT", options0);
      StringBuffer stringBuffer0 = null;
      int int0 = 0;
      Option option0 = null;
//      try {
        option0 = new Option("\"XRzJ{B3SQ,;", "--", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '\"XRzJ{B3SQ,;' contains an illegal character : '\"'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 0, 0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printOptions(mockPrintWriter0, 59, options0, 0, 59);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(59, "", "usage: ", options0, (String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1482), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "n!j.`5*5k$nG5", (Options) null, (-1482), (-1482), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintWriter0.printf(locale0, "usage: ", (Object[]) null);
      int int0 = 0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("l;s}Uu(FIPB#7K;F");
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      helpFormatter0.rtrim("arg");
      MockFile mockFile0 = new MockFile(" ");
      String string0 = "U'Z";
      MockFile mockFile1 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "U'Z");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // U'Z
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      helpFormatter1.setWidth(74);
      helpFormatter0.getArgName();
      helpFormatter1.getSyntaxPrefix();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", "fFWASK\"[Qy[~xbo_[.y", true, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(276);
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter1.setNewLine("8n.?|6O\"])D+<futR");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("5*nf2.?");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append('U');
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix(";");
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "F+ndZXL ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "arg");
      Option option0 = new Option("", false, "");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, ";", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.getOptionComparator();
      String string1 = "e&";
      helpFormatter0.setArgName("e&");
      helpFormatter0.setArgName("e&");
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile(" ", "arg");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "\n");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = ",q";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",q");
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-201), ";{ApSV");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) " ", (-182), (-3254));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", (Object[]) null);
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "";
      String string1 = null;
      Options options1 = options0.addOption("", (String) null, true, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 0, options1, 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      String string1 = "_!\\(I'Xj;_";
      String string2 = "";
      helpFormatter0.defaultDescPad = 74;
      String string3 = "[^foO97jD1{Kp";
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        options1.addOption("usage: ", true, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("The option '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.createNewFile();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      helpFormatter0.setLongOptPrefix("The option '");
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 2851, "");
      assertEquals("The option '", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptPrefix("PU[F^c=");
      String string0 = "[ Options: [ short ";
      helpFormatter0.setLongOptPrefix("[ Options: [ short ");
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      String string1 = "rhWvV8WHyL";
      String string2 = " [ARG]";
//      try { 
        MockURI.URI("has already been selected: '", "rhWvV8WHyL", "!", 1, " [ARG]", "has already been selected: '", "usage: ");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Relative path in absolute URI: has already been selected: '://rhWvV8WHyL@!:1%20%5BARG%5D?has%20already%20been%20selected:%20'#usage:%20
//         //
//         verifyException("java.net.URI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "org.apache.commons.cli.AlreadySelectedException");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      int int0 = 916;
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("-", "org.apache.commons.cli.HelpFormatter$1", true, "%9:*");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "s?68e\"yj(";
      helpFormatter0.setLongOptSeparator("s?68e\"yj(");
      helpFormatter0.defaultDescPad = 0;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix(";");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";");
      Locale locale0 = new Locale("IWJ.mg|qC63yO'B2LB", "}+1t[0XdWzOYX=^p", "--");
      helpFormatter0.setLeftPadding(4143);
      Options options0 = new Options();
      options0.addOption((String) null, "1", true, "F+ndZXL ");
      Option option0 = null;
//      try {
        option0 = new Option(";", true, "gm>q@Y5+LXo");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ';'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1739);
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      String string1 = "6~ZX;*gNp5;}#p0G&lR";
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int1 = 13;
      String string0 = "J_\"NQIYV}u4TvF/\\-l";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = "org.apache.commons.cli.HelpFormatter";
      Option option0 = null;
//      try {
        option0 = new Option("org.apache.commons.cli.HelpFormatter", " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      String string0 = "--";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "--");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      String string0 = "Cannot add value, list full.";
      helpFormatter0.defaultNewLine = "Cannot add value, list full.";
      helpFormatter0.setOptPrefix("l;s}Uu(FIPB#7K;F");
      int int0 = 0;
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getNewLine();
      String string1 = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("Cannot add value, list full.");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2780;
      helpFormatter0.setWidth(2780);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("");
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.setArgName((String) null);
      String string1 = "Z1$Y]y0*?";
      Option option0 = null;
//      try {
        option0 = new Option(" ", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Option option0 = new Option("", "", false, "org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(34, "\n", "", options2, (String) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.Options");
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.helpOptions();
      helpFormatter0.printHelp("=J-ciT", options0, true);
      helpFormatter0.printHelp("=J-ciT", options0);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      int int0 = 931;
      StringBuffer stringBuffer0 = new StringBuffer(931);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options0, 1420, 3);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions(stringBuffer1, 3, options0, 1, (-267));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "=J-ciT";
      Options options0 = new Options();
      boolean boolean0 = false;
      boolean boolean1 = true;
      helpFormatter0.printHelp("=J-ciT", options0, true);
      String string1 = "";
      // Undeclared exception!
//      try { 
        options0.addOption("=J-ciT", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '=J-ciT' contains an illegal character : '='
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 621;
      String string0 = "' was specified but an option from this group ";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string1 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(621, "' was specified but an option from this group ", "' was specified but an option from this group ", (Options) null, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      String string0 = "dlK6|52V_t$c6p";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("dlK6|52V_t$c6p", "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "8@e:L~~";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "<";
      Option option0 = null;
//      try {
        option0 = new Option("8@e:L~~", "8@e:L~~", false, "<");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '8@e:L~~' contains an illegal character : '@'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
