/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:00:06 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-747);
      String string0 = "cHG?'m|oS1i%Q0?P0";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-747), "cHG?'m|oS1i%Q0?P0", "cHG?'m|oS1i%Q0?P0", (Options) null, "cHG?'m|oS1i%Q0?P0", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " ");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "-", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      option0.setArgs(1);
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(32);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--", 1, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions(mockPrintWriter0, (-625), options1, 3, 21);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(", ", "", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      option0.setArgs(1);
      option0.setArgName("");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(0, " :: ", "F4y_)_W$.", options0, "arg", false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "--");
      option0.setArgs(1);
      option0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding((-4694));
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "[ option: ";
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, (-1480), "Z=psp9@Ji'~>xctgH");
      helpFormatter0.setLongOptSeparator("\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "#5>h");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      stringBuffer1.insert(0, (long) 3);
      options2.getMatchingOptions("--");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]Yvy<^q");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", (String) null, options0, 1, 74, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = (-42);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("usage: ", options0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "bec?{DJ@VtldJ}?| 12";
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 14, "bec?{DJ@VtldJ}?| 12");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "", "zMY|ls#i9pg", options1, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      option0.setArgs(1);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("", "@N$Vr49b.|'{<CJn", true, "\n");
      helpFormatter1.printHelp("[ARG...]", "<R9i~N*?Am;45N]", options2, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1585), "   ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-81);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("x", "x", options0, " ", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", "-", true, "--");
      String string0 = "line.separator";
      option0.setArgName("line.separator");
      Options options1 = options0.addOption(option0);
      String string1 = "mUVq'y/9\"2]ttM";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) option0;
      objectArray0[4] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "-", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, (-2), options1, 4422, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, "--");
      option0.setArgName("line.separator");
      options0.addOption(option0);
      helpFormatter0.printHelp("mUVq'y/9\"2]ttM", options0, true);
      helpFormatter0.printHelp("mUVq'y/9\"2]ttM", options0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)103;
      byteArray0[0] = (byte)103;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)38;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("\n");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "usage: ", false, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 5541, "", "", options2, (int) (byte) (-2), (-178), ".a)}W%pLX-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("xC");
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 81, "roo80 ^#12? V:z", "olf9OKQ>e", options0, 0, 0, "   ", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 28;
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int1 = 0;
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions((PrintWriter) null, 1, options0, 2533, 9);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("T<!-Aw", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int0 = 2563;
      String string0 = " ";
      Options options0 = new Options();
      int int1 = (-3399);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2563, "T<!-Aw", " ", options0, 10, (-3399), "TaSq5/kT.:dzA@O!a3m", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 26;
      helpFormatter0.defaultLeftPad = 26;
      helpFormatter0.rtrim("XfVPi`^");
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('#');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      int int1 = 3;
      String string0 = "<";
      Options options0 = new Options();
      int int2 = (-1536);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 3, "<", "arg", options0, 26, (-1536), (String) null, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("line.separator");
      StringWriter stringWriter0 = new StringWriter(81);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 81, "line.separator", "roo80 ^#12? V:z", options0, 81, 81, "line.separator", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(296);
      helpFormatter0.renderWrappedText(stringBuffer0, 296, 918, " ");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "2&{?FkDu-vc>67 [I#");
      options0.addOption(option0);
      String string0 = "S?o@zwk|<s";
      helpFormatter0.defaultWidth = (-2);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("S?o@zwk|<s", options0, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("\n", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(1, "-", "arg", options0, (String) null, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      helpFormatter0.setArgName("gZZvvY`qsgQ-L");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("o&9xW&LU", "", options1, "o&9xW&LU", true);
      helpFormatter0.printHelp(" ", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), " ", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.createPadding(119);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-1286));
      helpFormatter0.defaultLongOptPrefix = ">";
      helpFormatter0.printHelp(112, ">", "", options0, "");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("vPb)m(:nF", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-1284));
      helpFormatter0.setDescPadding((-1284));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(13, "xUC#2esU@'UkeD<9+", ">", options0, ">");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, (String) null);
      options0.addOption(option0);
      helpFormatter0.printHelp("m2Vq'y/!\"2]ttM", options0, true);
      helpFormatter0.printHelp("m2Vq'y/!\"2]ttM", "usage: ", options0, "usage: ", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-1575), 58);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(74);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.printHelp(74, "<", "<", options0, "");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      boolean boolean0 = true;
      helpFormatter0.setArgName("gZZvvY`qsgQ-L");
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(5144, ">", "~K6qV", (Options) null, "U1*+JY");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, "1KvUo>j");
      Options options2 = options1.addOption("", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options4, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("x]xG", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printWrapped(printWriter0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1410));
      helpFormatter0.setWidth((-1982));
      helpFormatter0.getWidth();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("'Qjc4nO51\"z06^S", "", options0, "'Y&`]J^ [-pAkSZ;e=", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile.createTempFile("cmdLineSyntax not provided", "-");
      Options options0 = new Options();
      Option option0 = new Option("", "s{bmW]cVs");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "cmdLineSyntax not provided");
      Options options3 = options2.addOption((String) null, "X$*", true, "2$h_\"s@R");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 237, "cmdLineSyntax not provided", options3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      helpFormatter0.setArgName("gZZvvY`qsgQ-L");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("t21DUVnpnOT,/_d{A", "--", options0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("T<!-Aw", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderOptions((StringBuffer) null, (-2), options0, 74, 3);
      helpFormatter1.setLongOptSeparator("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter2.printWrapped(printWriter0, 3, "T<!-Aw");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", options0, false);
      Options options1 = options0.addOption("Np", false, "N0-(_BmKrI");
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.helpOptions();
      helpFormatter0.printHelp(" | ", "ayOH[VsNuOYj-RJ?QN2", options1, " ] [ long ", false);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, (String) null, options1);
      OptionGroup optionGroup0 = new OptionGroup();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Option option0 = new Option((String) null, "cmdLineSyntax not provided");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "8La}uA}3o-B*3", "", options2, (-1), 64, "#QznU[XV", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("-");
      helpFormatter0.printHelp("K[@wHwh3LKF_q}b1is", "", options0, "ayOH[VsNuOYj-RJ?QN2", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("o`1m4wng[%c=", (String) null, (Options) null, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Object object0 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("--", 9, 12);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 64, 64, " ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("xUC@2esU@'UkeD<9+", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1207);
      helpFormatter0.printHelp("--", "--", options0, "f/]Er ");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, (String) null);
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      String string0 = "Os }";
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 1, "-", "has already been selected: '", options1, 64, 1, "Os }", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "arg", "arg", options0, 64, 3, "--", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      String string0 = "\\I?Y,T/bg";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("I?Y,T/bg", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("T<!-Aw", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 3, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      File file0 = MockFile.createTempFile("cmdLineSyntax not provided", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, ">", "ccT$Z}>j?DlRC?!ap{,", options0, "#}C.29/q");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 0, (String) null, "Ox$FRnCpP\"", options0, (-4469), 0, "2{&i L2=MI(VtT\"", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasOption("");
      options1.hasLongOption("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "", "-", options1, 0, 3, "-", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "L[2Dw1e0H&3@I~wRx", "L[2Dw1e0H&3@I~wRx", options1, 1239, 1239, "L[2Dw1e0H&3@I~wRx", false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      Options options0 = new Options();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[PUHK");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 101, " | ", "[PUHK", options0, (-1215), 52, "hDJ2g5:=]Y5>)lv");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0, true);
      options0.addOption("_cj", true, "r");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("ayOH[VsNuOYj-RJ?QN2", "cmdLineSyntax not provided", options0, "CjQ0L>7%Q0%;VaEE#", false);
      helpFormatter0.getWidth();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "cmdLineSyntax not provided");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 4121, "53=FN~AY9j+t=p/", "-", (Options) null, (-1120), 4159, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0, true);
      options0.addOption("_cj", true, "r");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("ayOH[VsNuOYj-RJ?QN2", "cmdLineSyntax not provided", options0, "CjQ0L>7%Q0%)VaEE#", false);
      int int0 = helpFormatter0.defaultLeftPad;
      int int1 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.defaultDescPad = (-1369);
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("TA!eAJw", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("TA!eAJw");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("usage: ");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 50, "usage: ", "org.apache.commons.cli.HelpFormatter$1", options0, 74, 2, "arg");
      helpFormatter1.printHelp(74, "-", "--", options0, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter2.printWrapped(printWriter0, 3, "TA!eAJw");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("T<!-Aw", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) " ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("usage: ");
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      helpFormatter0.setArgName("TA!eAJw");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("TA!eAJw");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter1.getArgName();
      PrintWriter printWriter0 = mockPrintWriter0.append('K');
      helpFormatter1.printUsage(printWriter0, 3, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(517, "-8Y#C*yZ-", "V'OgM& xw", options0, "arg", true);
      boolean boolean0 = false;
      helpFormatter0.printHelp("-8Y#C*yZ-", options0, false);
      Options options1 = new Options();
      boolean boolean1 = true;
      // Undeclared exception!
//      try { 
        options1.addOption("\"@d,_8wKf;i{O}p", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '\"@d,_8wKf;i{O}p' contains an illegal character : '\"'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("TA!eAJw", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      Option option0 = new Option("arg", true, "\n");
      helpFormatter1.setArgName("' was specified but an option from this group ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("-", "9S)A9a/{SBh^", options1, "TA!eAJw", true);
      helpFormatter0.getWidth();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 3, "-");
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("-");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option("", true, "--");
      helpFormatter1.setArgName("c|3QXP2EQcC}");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("", true, "org.apache.commons.cli.AlreadySelectedException");
      Options options2 = options1.addOption(option1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("c|3QXP2EQcC}", "2_',", options2, "9S)A9a/{SBh^", true);
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = null;
//      try {
        stringBuffer0 = new StringBuffer((-1056));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1541);
      String string0 = " | ";
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" | ", options0, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("T})Np");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) " | ";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) " | ";
      objectArray0[5] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1921, "   ");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "--", "usage: ", options0, "-");
      helpFormatter1.setSyntaxPrefix("-");
      helpFormatter1.setSyntaxPrefix("@fUxy|");
      options0.hasShortOption("usage: ");
      options0.hasShortOption("\n");
      helpFormatter0.setWidth((-2089));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "@fUxy|";
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) options0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter1;
      objectArray0[8] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "T})Np", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 23, "   ");
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("AIoAO\",k>sA0,");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("\n");
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp(printWriter0, 3, "usage: ", "%lXd}^t", options0, 1, 65, ";6neq//Yy@24");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = new Options();
      String string0 = "TA!eAJw";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("TA!eAJw", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("TA!eAJw");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) " ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 31, "usage: ", "org.apache.commons.cli.HelpFormatter$1", options0, 74, 2, "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", options0, false);
      Options options1 = options0.addOption("Np", false, "N0-(_BmKrI");
      options1.hasShortOption(" ");
      helpFormatter0.printHelp(" | ", "ayOH[VsNuOYj-RJ?QN2", options1, " ] [ long ", false);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, (String) null, options1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      File file0 = MockFile.createTempFile("cmdLineSyntax not provided", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object object0 = new Object();
      mockPrintWriter0.format("~<s~qx~^v=e", (Object[]) null);
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "cmdLineSyntax not provided");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("TA!eAJw", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Option option0 = new Option("arg", true, "\n");
      helpFormatter1.setArgName("' was specified but an option from this group ");
      options0.addOption(option0);
      helpFormatter1.printHelp("3A}'p#2`[](Y", "", options0, "' was specified but an option from this group ", false);
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-==m_TK89\"\\5";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", true, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 44, options1, 44, 95);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0, false);
      Options options1 = options0.addOption("Np", false, "N0-(_BmKrI");
      options1.hasShortOption(" ");
      String string0 = " ] [ long ";
      helpFormatter0.printHelp("\n", "ayOH[VsNuOYj-RJ?QN2", options1, " ] [ long ", false);
      helpFormatter0.getWidth();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "ayOH[VsNuOYj-RJ?QN2");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // ayOH[VsNuOYj-RJ?QN2
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("T<!-Aw", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter2.printWrapped(printWriter0, 3, "T<!-Aw");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("TA!eAJw", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("usage: ");
      helpFormatter1.printHelp(74, "-", "--", options0, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter2.printWrapped(printWriter0, 3, "TA!eAJw");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-", "").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("[bdgH-=Z6");
      helpFormatter1.setOptionComparator(helpFormatter0.optionComparator);
      Options options0 = new Options();
      helpFormatter1.printHelp("--", "CzdB2[5LtVT^rIiVS", options0, "--", true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("T})Np");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options0;
      helpFormatter0.setWidth(1207);
      helpFormatter0.printOptions(mockPrintWriter0, 1207, options0, 38, 31);
      helpFormatter0.printHelp(1207, "<*", "|s@[0l2D.S`\"6GY4sH", options0, "]");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setSyntaxPrefix("@fUxy|");
      options0.hasShortOption("usage: ");
      options0.hasShortOption("arg");
      helpFormatter0.setWidth(3);
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 373, 1309, "*t0@dq");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "--", "usage: ", options0, "-");
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter1.setSyntaxPrefix("@fUxy|");
      options0.hasShortOption("usage: ");
      options0.hasShortOption("\n");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderOptions(stringBuffer0, 1309, options0, 3, 1);
      helpFormatter1.setWidth(7);
      helpFormatter0.getArgName();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter1.getWidth();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 373, 1309, "*t@dq");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "--", "usage: ", options0, "-");
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter1.setSyntaxPrefix("@fUxy|");
      options0.hasShortOption("usage: ");
      options0.hasShortOption("\n");
      Option option0 = new Option((String) null, false, (String) null);
      options0.addOption(option0);
      helpFormatter1.printHelp("usage: ", "[ARG...]", options0, " ", false);
      helpFormatter1.getWidth();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", options0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option((String) null, false, (String) null);
      helpFormatter0.setArgName("(Nj");
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("(Nj", "", options1, "(Nj", false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", options0, false);
      Options options1 = options0.addOption("Np", false, "N0-(_BmKrI");
      options1.hasShortOption(" ");
      helpFormatter0.printHelp(" | ", "ayOH[VsNuOYj-RJ?QN2", options1, " ] [ long ", false);
      helpFormatter0.getWidth();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object object0 = new Object();
      mockPrintWriter0.format("--", (Object[]) null);
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "sB {68H*Q49nk;N8z");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-1207), ".m>3IsD%GP", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setSyntaxPrefix("@fUxy|");
      options0.hasShortOption("usage: ");
      MockFile mockFile0 = new MockFile("@fUxy|");
      helpFormatter0.findWrapPos("' was specified but an option from this group ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix(";r");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1028;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) "arg");
      mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "-==m_TK89\"\u0005");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(69);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("|q&81R~");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 4742, "-");
      helpFormatter0.setLongOptSeparator("xwdUt@MUHe<");
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = " | ";
      helpFormatter0.printHelp(" | ", options0, false);
      helpFormatter0.setWidth(1207);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 10, options0, 1207, 10);
      // Undeclared exception!
//      try { 
        stringBuffer1.insert(124, (long) 1207);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 124
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      String string1 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, (-1480), "Z=psp9@Ji'~>xctgH");
      helpFormatter0.setLongOptSeparator("\n");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("TA!eAJw", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) " ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("usage: ");
      helpFormatter2.setOptionComparator(comparator0);
      Options options1 = new Options();
      helpFormatter0.printHelp("usage: ", " ", options0, "(", true);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-==m_TK89\"\u0005");
      Options options0 = new Options();
      helpFormatter0.printHelp("-==m_TK89\"\u0005", options0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "-==m_TK89\"\u0005";
      objectArray0[2] = (Object) "-==m_TK89\"\u0005";
      objectArray0[3] = (Object) mockPrintWriter1;
      objectArray0[4] = (Object) "-==m_TK89\"\u0005";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "-==m_TK89\"\u0005";
      mockPrintWriter1.format("-==m_TK89\"\u0005", objectArray0);
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "-==m_TK89\"\u0005", options0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "--", "usage: ", options0, "-");
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter1.setSyntaxPrefix("@fUxy|");
      options0.hasShortOption("usage: ");
      options0.hasShortOption("\n");
      String string0 = "-";
      String string1 = "";
//      try { 
        MockURI.URI("@7-sKam+ZWBp-:73%1m", "[ARG...]", "arg", "X0=");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Relative path in absolute URI: @7-sKam+ZWBp-:73%1m://[ARG...]arg#X0=
//         //
//         verifyException("java.net.URI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "--", "usage: ", options0, "-");
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter1.setSyntaxPrefix("@fUxy|");
      options0.hasShortOption("usage: ");
      options0.hasShortOption("\n");
      helpFormatter1.printHelp("usage: ", "[ARG...]", options0, " ", false);
      helpFormatter1.getWidth();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      File file0 = MockFile.createTempFile("2kXFNwyb\"s#D", ".m4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      helpFormatter0.defaultArgName = "x";
      mockPrintWriter0.append((CharSequence) "x");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "`x");
      helpFormatter0.setLongOptSeparator("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("_)q7");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object object0 = new Object();
      mockPrintWriter0.format("~<s~qx~^v=e", (Object[]) null);
      Options options1 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, "Lz", true);
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("zWsB?m|t");
      helpFormatter1.setOptionComparator(helpFormatter0.optionComparator);
      Options options0 = new Options();
      helpFormatter1.printHelp("--", "CzdB2[5LtVT^rIiVS", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("   ");
      Options options0 = new Options();
      helpFormatter1.printHelp(17, "   ", "   ", options0, " ");
      helpFormatter1.setSyntaxPrefix("");
      options0.hasShortOption("--");
      options0.hasShortOption("");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", "e21uu", options0, "m", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.format("--", objectArray0);
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setWidth(9);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("_TpnGsvG@X");
      helpFormatter0.createPadding(0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      stringBuffer1.append((-805.43735159418));
      helpFormatter0.renderWrappedText(stringBuffer1, 9, 1478, "");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "fR";
      helpFormatter0.setSyntaxPrefix("9$O#cA:arN;Gd1g");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth(31);
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 31, (Options) null, (-907), 32);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      String string0 = "@D8l<vd-s4\"1ra3$U(";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 128, "@D8l<vd-s4\"1ra3$U(");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "-==m_TK89\"\u0005");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "   ";
      helpFormatter0.rtrim((String) null);
      helpFormatter0.createPadding(117);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      int int0 = 3032;
      String string0 = "";
      String string1 = "<Q8EZo-;NR[Ia";
      Options options0 = new Options();
      String string2 = "[";
      boolean boolean0 = true;
      Options options1 = options0.addOption("", "[", true, "org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        options2.addOption("-", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "\"C");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos(" ", (-2), (-1271));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "|}c\" P?RG(";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("|}c\" P?RG(", 559, (-4110));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1410));
      helpFormatter0.setWidth((-1982));
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        MockFile.createTempFile(" ", "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "a=gz|'";
      Options options0 = new Options();
      Option option0 = new Option("", true, (String) null);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, "", "a=gz|'", options1, "a=gz|'");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-==m_TK89\"\\5";
      helpFormatter0.setArgName("-==m_TK89\"\u0005");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(31, "CH_pQ64S?|}3Uo", "org.apache.commons.cli.HelpFormatter$1", options0, "org.apache.commons.cli.HelpFormatter$1");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", false, "usage: ");
      Option option0 = new Option("arg", true, "-");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("_ ,u[", options2, false);
      helpFormatter0.printHelp("usage: ", "_ ,u[", options1, "(z-Jk]/", true);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      option0.setArgs(1);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("");
      Options options1 = new Options();
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "--", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, (-1480), "Z=psp9@Ji'~>xctgH");
      helpFormatter0.setLongOptSeparator("\n");
      Options options0 = new Options();
      options0.toString();
      Options options1 = options0.addOption("arg", true, "#5>h");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(3, "[ option: ", "\n", options1, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, (String) null);
      options0.addOption(option0);
      helpFormatter0.printHelp("m2Vq'y/!\"2]ttM", options0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "arg", options0, "usage: ", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      String string0 = " [ARG]";
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, (-1480), "Z=psp9@Ji'~>xctgH");
      helpFormatter0.setLongOptSeparator("\n");
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "#5>h";
      Options options1 = options0.addOption("arg", true, "#5>h");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      stringBuffer1.insert(0, (long) 3);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-1480), options2, 0, 3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", options0, false);
      helpFormatter0.setWidth(1207);
      helpFormatter0.printHelp(1207, " | ", ">", options0, "");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = " | ";
      helpFormatter0.printHelp(" | ", options0, false);
      helpFormatter0.setWidth(1207);
      helpFormatter0.printHelp(1207, " | ", ">", options0, "");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      File file0 = MockFile.createTempFile("2kXFNwyb\"s#D", ".m4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      helpFormatter0.defaultArgName = "x";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) ".m4";
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) ".m4";
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("x", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "x");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "";
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultWidth = 1467;
      helpFormatter0.setWidth(1467);
      helpFormatter0.setArgName(".1l");
      String string1 = "";
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option(".1l", "org.apache.commons.cli.AlreadySelectedException");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '.1l' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "[ option: ";
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, (-1480), "Z=psp9@Ji'~>xctgH");
      helpFormatter0.setLongOptSeparator("\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "#5>h");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int0 = 0;
      stringBuffer1.insert(0, (long) 3);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-1480), options2, 0, 3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "' was specified but an option from this group ";
      StringBuffer stringBuffer0 = new StringBuffer("' was specified but an option from this group ");
      helpFormatter0.renderWrappedText(stringBuffer0, 482, 0, "Jf~AU6|)LBy*JbuNT;");
      helpFormatter0.setOptPrefix("' was specified but an option from this group ");
      int int0 = 0;
      String string1 = "kTy,5Msw^Pd?#";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setArgName("   ");
      String string0 = "Zs3 d vtX=]OhS+k";
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
//      try { 
        options0.addOption("',", false, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '',' contains an illegal character : '''
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2737));
      assertEquals((-2737), helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "%D \"tY%F9O33";
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter1.setOptionComparator((Comparator) null);
      Options options1 = new Options();
      helpFormatter1.printHelp("zWsB?m|t", "-", options0, "-", false);
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("-", "FAsg1au+Qj2o");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1259);
      int int0 = (-3451);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-3451));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-4128));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "~";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "");
      // Undeclared exception!
//      try { 
        options2.addOption("usage: ", "-", false, "~");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = helpFormatter0.createPadding(36);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("                                    ", string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      helpFormatter0.setDescPadding(10);
      helpFormatter0.getWidth();
      helpFormatter0.setNewLine("");
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.setNewLine("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      String string1 = "' was specified but an option from this group ";
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option(" ", "line.separator");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "[";
      helpFormatter0.getOptPrefix();
      int int0 = 0;
      MockFile mockFile0 = new MockFile("\n", "NTX1-|~H?70Lc-a");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charsetName
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1651, 1651, "b,W5*5");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        stringBuffer1.insert(10, (CharSequence) null);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 10
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }
}
