/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:05:05 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-477));
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "\n", "\n", options0, "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ option: ";
      helpFormatter0.setNewLine("");
      String string1 = "7#1hW5FZ{>6";
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
//      try { 
        optionGroup0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.OptionGroup", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      Options options0 = new Options();
      helpFormatter0.printHelp("line.separator", "O<%", options0, "line.separator");
      options0.getMatchingOptions("");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "O<%");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 4938, "p|%Gbd~.0");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("h..,Q{7=ch;Fz|");
      Options options0 = new Options();
      helpFormatter0.printHelp(1, "\n", "\n", options0, "\n");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator((String) null);
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(11, "J!UB=o$,m>H?5", "-", options1, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 548, "cmdLineSyntax not provided", "-", options1, 0, 93, "J!UB=o$,m>H?5", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.defaultWidth = 1;
      Option option0 = new Option("v8", " ");
      boolean boolean0 = true;
      option0.setLongOpt("@*@zjzY)(8]DJf~");
      int int0 = helpFormatter0.defaultDescPad;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("--", options0, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 24, "2e-5=h!Qe<>x", (String) null, options0, 24, 24, (String) null, false);
      helpFormatter0.printHelp(24, "HQ", "[ option: ", options0, "");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-112);
      helpFormatter0.createPadding(4);
      helpFormatter0.rtrim(" ");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "l\"<`ZP3C";
      String string1 = null;
      String string2 = "X}N7ZZC&?2";
      boolean boolean0 = false;
      String string3 = "kQJe5wZH7#a";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("E%\"");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "--", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, int0, string0, options0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("Illegal option name '");
      helpFormatter0.setSyntaxPrefix("M");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth(3);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "\n", "\n", options0, "UGE!e%UR`tH>J");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "org.apache.commons.cli.HelpFormatter", "", options0, (-1597), 0, "org.apache.commons.cli.HelpFormatter", true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 181;
      helpFormatter0.setDescPadding(181);
      StringWriter stringWriter0 = new StringWriter(803);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 803, "");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.append('8');
      String string1 = "qYUG*uil>(uq<m#{a(";
      String string2 = "org.apache.commons.cli.Options";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("+|:X1gFc.'&W$t@&TQd", "", true, "+|:X1gFc.'&W$t@&TQd");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '+|:X1gFc.'&W$t@&TQd' contains an illegal character : '+'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(101, " ", "--", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter1.getArgName();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Option option0 = new Option("v8", "H67}");
      Options options1 = options0.addOption(option0);
      option0.setLongOpt("");
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 37, "-", "arg", options0, 3, 74, "--", true);
      helpFormatter2.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(10, "usage: ", "-", options1, "J!UB=o$,m>H?5");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("Illegal option name '");
      helpFormatter0.getNewLine();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.createPadding(48);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(43, "--", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options1, "\n", false);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('`');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 32, (-2436), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator comparator0 = helpFormatter2.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter1.getArgName();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getArgName();
      helpFormatter1.setOptPrefix("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 37;
      String string0 = "arg";
      Options options0 = new Options();
      Option option0 = new Option("v8", "H67}");
      Options options1 = options0.addOption(option0);
      boolean boolean0 = true;
      options1.addOption("", true, "");
      helpFormatter2.optionComparator = comparator0;
      int int1 = 67;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options1, 10, 74);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options1 = options0.addOption("1", true, (String) null);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", (String) null, options1, 3, 1, "-", true);
      helpFormatter2.getDescPadding();
      int int0 = 64;
      String string1 = "]";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("line.separator", false, "J!UB=o$,m>H?5");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'line.separator' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter1.getArgName();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getArgName();
      helpFormatter1.setOptPrefix("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Option option0 = new Option("v8", "H67}");
      Options options1 = options0.addOption(option0);
      option0.setRequired(true);
      Options options2 = options1.addOption("", true, "");
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 37, "-", "arg", options2, 67, 74, "--", true);
      helpFormatter2.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(10, "usage: ", "-", options1, "J!UB=o$,m>H?5");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter1.getArgName();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getArgName();
      helpFormatter1.setOptPrefix("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Option option0 = new Option("v8", "H67}");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "");
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 37, "-", "arg", options2, 67, 74, "--", true);
      helpFormatter2.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(10, "usage: ", "-", options1, "J!UB=o$,m>H?5");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp(";W=QpkoRWe5.q|'U&b", options0);
      helpFormatter3.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter2.findWrapPos((String) null, 3, (-3155));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      helpFormatter0.defaultWidth = 2;
      helpFormatter0.defaultOptPrefix = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setArgName("){w>j");
      PrintWriter printWriter0 = null;
      int int0 = 3881;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "[");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "";
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter1.setOptPrefix("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options1 = new Options();
      Option option0 = new Option("", "' contains an illegal character : '");
      options1.addOption(option0);
      mockPrintWriter0.print((Object) "v8");
      Options options2 = options1.addOption("", "' contains an illegal character : '", true, "-");
      Options options3 = options2.addOption("arg", true, "arg");
      String string0 = "hi@9 {-wseN!%pWCn";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 16, "M@P", "v8", options3, 2209, 1, "hi@9 {-wseN!%pWCn", true);
      helpFormatter1.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string1 = "nXo_4%";
      Options options4 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1), "", "--", options4, (-1325), 3, "]b");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      String string0 = "Illegal option name '";
      options0.hasShortOption("Illegal option name '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      String string1 = "";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 644, "Ld8D~0PJ~", "", options0, 644, (-1419), "Illegal option name '", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter1.setOptPrefix("-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ld8D~0PJ~");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "", options0, 1, 74, "", true);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 2997, "Ty7[+8_MzfZF", "arg", options0, 1083, 1, ">", true);
      // Undeclared exception!
//      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, (-814), "usage: ", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-38));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = (-1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("KOZd&%vlO7af0AH", "arg", options1, "HEP9p6", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      helpFormatter0.setOptPrefix("y59Sd'HtdW\" QA(9t");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("", true, "arg");
      Options options1 = new Options();
      helpFormatter1.printHelp(", ", options1, true);
      helpFormatter1.setOptPrefix("L");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.getSyntaxPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 3, " ", "{IHr%+JIQ]#T)~", options1, 3, 44, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter1.renderWrappedText(stringBuffer0, 19, 1, " ");
      helpFormatter1.getArgName();
      helpFormatter1.setOptPrefix("y59Sd'HtdW\" QA(9t");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp("arg", " | ", options0, "-", true);
      Options options1 = new Options();
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "-", "-", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter1.getArgName();
      helpFormatter1.setOptPrefix("org.apache.commons.cli.Options");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options0.addOption((String) null, true, "");
      helpFormatter0.printHelp("--", "\n", options0, "", true);
      Options options1 = new Options();
      helpFormatter0.printHelp("]", options1, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter1.printHelp("M$?~(I~Ll'_Z4@<ruf@", ":k@>1 /Q@@g)icZ+Df", options2, "");
      helpFormatter2.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter1.getArgName();
      helpFormatter1.setOptPrefix("-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ld8D~0PJ~");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "", options0, 1, 74, "", true);
      int int0 = (-112);
      Option option0 = new Option((String) null, false, "&@N1{AU>ppp}3K>");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(mockPrintWriter0, 3247, options1, 74, 1);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2655), (String) null, "", options0, (-112), 32, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      helpFormatter0.rtrim("J(~8KJx");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter1.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("--");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, (-2), "s", " ", options0, 3, 32, "-", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("arg", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter1.getArgName();
      helpFormatter1.setOptPrefix("y59Sd'HtdW\" QA(9t");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ld8D~0PJ~");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "", options0, 1, 74, "", true);
      int int0 = (-112);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2655), (String) null, "", options0, (-112), 32, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-38));
      Options options0 = new Options();
      Option option0 = new Option("", "\n", true, "H");
      Options options1 = options0.addOption(option0);
      options1.toString();
      helpFormatter0.printHelp(968, "m4=4xnO@oe0P<:Z", "6e:>]rO?P~_", options1, "l<;Q1ZN", true);
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(968, "l<;Q1ZN", "m4=4xnO@oe0P<:Z", options0, "");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = 1;
      Options options0 = null;
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "", "", (Options) null, 32, 1, (String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("Omj~ y*d|.}&?h=");
      helpFormatter0.getOptPrefix();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultOptPrefix = "t BgE?6>6Chk";
      helpFormatter0.defaultNewLine = null;
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("3{lQK", ">~+|%*+uOwFkv4^\"", (Options) null, "+nJfOD@wlWMh");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter1.getArgName();
      helpFormatter1.defaultWidth = 3;
      helpFormatter1.setOptPrefix("y59Sd'HtdW\" QA(9t");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      boolean boolean0 = true;
      options0.addOption("", true, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("arg", " | ", options0, "-", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption((String) null);
      helpFormatter0.printHelp(644, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "org.apache.commons.cli.HelpFormatter", options0, "P*F_P", false);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
      helpFormatter2.getArgName();
      helpFormatter1.setOptPrefix("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, false, "");
      helpFormatter1.printHelp("ZM=4}+#d", "ZM=4}+#d", options1, "5ay(7{", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "ScU8G`;p,-bb{'w";
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions((PrintWriter) null, (-1), options0, 74, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("Gm<!w`]lW2a7t3\"Z");
      options0.toString();
      options0.hasShortOption("\n");
      helpFormatter0.printHelp(74, "Gm<!w`]lW2a7t3\"Z", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, (String) null, true);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 139, "E", "Gm<!w`]lW2a7t3\"Z", options0, 139, 16, "[");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "Illegal option name '");
      MockFile mockFile1 = new MockFile(mockFile0, "Illegal option name '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(64);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(filterOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 37, "usage: ", "bI3*E}", options0, 101, 518, "N|0?t.OU4g9");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "usage: ", "arg", options0, 1, 101, "");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter1.getArgName();
      helpFormatter1.setOptPrefix("y59Sd'HtdW\" QA(9t");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options0.addOption("", true, "arg");
      helpFormatter1.printHelp("arg", " | ", options0, "-", true);
      Options options1 = new Options();
      helpFormatter2.printHelp(", ", options1, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "", options2, " ");
      helpFormatter2.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption("arg", "usage: ", true, "--");
      Option option0 = new Option("arg", "");
      Object object0 = new Object();
      option0.setType(object0);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(74, "-", "}80&2{gb", options2, "usage: ", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      options1.addOption("tS", true, "arg");
      MockFile mockFile0 = new MockFile("\n", ":^XKN]H0");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-2), ":^XKN]H0", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("org.apache.commons.cli.OptionGroup");
      Options options0 = new Options();
      Options options1 = new Options();
      options1.toString();
      options0.hasShortOption(" ");
      helpFormatter0.printHelp(10, " :: ", "", options1, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter1.getArgName();
      helpFormatter1.setOptPrefix("arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2311), "org.apache.commons.cli.OptionGroup", "\"", options0, 1, 3, "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("org.apache.commons.cli.OptionGroup");
      Options options0 = new Options();
      Options options1 = new Options();
      options1.toString();
      options0.hasShortOption(" ");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, (-1641), options1, 103, 103);
      helpFormatter0.printHelp(10, " :: ", "", options1, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter1.getArgName();
      helpFormatter1.setOptPrefix("arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.printHelp(6, "-", (String) null, options1, " :: ");
      helpFormatter1.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      helpFormatter0.getNewLine();
      String string0 = "--";
      helpFormatter0.setWidth(32);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-935), ">");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      options0.getMatchingOptions("");
      options0.toString();
      options0.hasShortOption(" ");
      helpFormatter0.rtrim("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      helpFormatter0.getNewLine();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
      helpFormatter1.setOptPrefix("");
      Options options0 = new Options();
      options0.toString();
      Options options1 = options0.addOption("", false, "-");
      helpFormatter2.printHelp(63, "~zlsw(qYUWkpF", "", options1, "--");
      helpFormatter1.printHelp("-", "", options1, "usage: ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 25, "J'B4(*", "arg", options0, 14, (-100), "usage: ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Options options0 = new Options();
      options0.toString();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Util");
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000002 ] [ long {} ]", (String) null, options0, "org.apache.commons.cli.Util");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 92, "p{!Qs\"rWpjoM!mC(");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      helpFormatter0.getNewLine();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("arg");
      helpFormatter1.rtrim("");
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getMatchingOptions("O2kbrCbJLz-Z+Lf[si*");
      options0.toString();
      options0.hasShortOption("[ Options: [ short java.util.HashMap@0000000007 ] [ long {} ]");
      Options options2 = options1.addOption((String) null, true, (String) null);
      helpFormatter1.printHelp(3, "--", "", options2, "-", false);
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("org.apache.commons.cli.OptionGroup");
      Options options0 = new Options();
      Options options1 = new Options();
      options1.helpOptions();
      options1.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile(">^,riTtbVI3\")@");
      MockFile mockFile1 = new MockFile(mockFile0, "!s%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-472), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("-");
      helpFormatter0.getOptionComparator();
      File file0 = MockFile.createTempFile("jM5+}7p>(", "A CloneNotSupportedException was thrown: ");
      MockFile mockFile0 = new MockFile(file0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2841, 3139, "-");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp("CJp9kg|+!", options0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7+Z-";
      String string1 = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      Options options1 = new Options();
      options0.getMatchingOptions("usage: ");
      options0.toString();
      options0.hasShortOption("i9>Be;y:gmA<&/");
      int int0 = 10;
      Options options2 = options1.addOption((String) null, "", false, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("-");
      int int1 = 2841;
      String string0 = "~:K&'I%[Za-?ig6H`";
      Options options0 = new Options();
      options0.toString();
      boolean boolean0 = false;
      options0.toString();
      options0.hasShortOption("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2841, "~:K&'I%[Za-?ig6H`", "-", options0, "~:K&'I%[Za-?ig6H`", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      options0.toString();
      options0.getOption("pIo-@\"x2E[;4*");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S|Zn:r:");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "au*D");
      options0.hasShortOption("Illegal option name '");
      helpFormatter0.printHelp(644, "Illegal option name '", "Illegal option name '", options0, "Illegal option name '", false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("5dM;OMdVl?Icoj&A");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOption("arg", false, "\n");
      helpFormatter0.printHelp("-", "", options1, "", false);
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 949, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("au*D", 3, (-2358));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      filterOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-58);
      filterOutputStream0.write(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      int int0 = (-4028);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-4028), (-4028), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("-");
      Options options1 = options0.addOption("arg", "usage: ", true, "--");
      Option option0 = new Option("arg", "");
      Object object0 = new Object();
      option0.setType(object0);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(74, "org.apache.commons.cli.HelpFormatter$1", "}80&2{gb", options2, "L(uU2/Cf", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("");
      Options options3 = options1.addOption("tS", true, "arg");
      helpFormatter0.printHelp("   ", (String) null, options3, "3]Vu$0Ntr7P`", true);
      helpFormatter0.printHelp("DTf", options0, false);
      helpFormatter0.printHelp(" ", "", options0, "L(uU2/Cf");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      Options options1 = new Options();
      options0.getMatchingOptions("usage: ");
      options0.toString();
      options0.hasShortOption("i9>Be;y:gmA<&/");
      Options options2 = options0.addOption("", false, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(10, "", "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", options2, "S095?&>!`");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("org.apache.commons.cli.OptionGroup");
      Options options0 = new Options();
      Options options1 = new Options();
      options1.toString();
      options0.hasShortOption(" ");
      helpFormatter0.printHelp(10, " :: ", "", options1, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter1.getArgName();
      helpFormatter1.setOptPrefix("arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.printHelp("arg", ">2h'Hk<~", options0, "arg", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "l\"afMFnZ", "-", options1, " :: ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7'+Z=-";
      String string1 = "";
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      Options options1 = new Options();
      options0.toString();
      options0.hasShortOption("i9>Be;y:gmA<&/");
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(10, "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", "7'+Z=-", options0, "org.apache.commons.cli.OptionGroup", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = " |Q& ";
      String string1 = "7'+Z=-";
      Options options0 = null;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(10, (String) null, (String) null, (Options) null, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" |Q& ");
      helpFormatter0.setWidth((-3972));
      helpFormatter0.getNewLine();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("arg");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
      helpFormatter1.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      helpFormatter2.printHelp(63, "~zlsw(qYUWkpF", "", options1, "--");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", (Options) null, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("-");
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("arg");
      helpFormatter0.printHelp(2841, "~:K&'I%[Za-?ig6H`", "-", options0, "~:K&'I%[Za-?ig6H`", false);
      helpFormatter0.getOptionComparator();
      File file0 = MockFile.createTempFile("jM5+}7p>(", "A CloneNotSupportedException was thrown: ");
      MockFile mockFile0 = new MockFile(file0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2841, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("arg");
      StringBuffer stringBuffer0 = new StringBuffer("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      int int0 = 1;
      int int1 = (-5196);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-5196), " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), (-733), "hZKj^p");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth((-38));
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("-");
      Options options1 = options0.addOption("arg", "usage: ", true, "--");
      Option option0 = new Option("arg", "");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(1887, "org.apache.commons.cli.HelpFormatter$1", "}80&2{gb", options2, "L(uU2/Cf", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("");
      Options options3 = options0.addOption("DTf", "QX", false, "");
      helpFormatter0.printHelp("arg", "", options3, "", true);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ", "DTf");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // DTf
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "org.apache.commons.cli.HelpFormatter$1", (Options) null, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte) (-59);
      byteArray0[8] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      options0.toString();
      String string1 = "z2";
      options0.hasShortOption("z2");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3070), "$i?j:0PS&8Vg", "}80&2{gb", options0, "L(uU2/Cf", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('N');
      helpFormatter0.printUsage(printWriter0, 581, "");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", " ", (Options) null, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      int int1 = 644;
      String string0 = "lZ.h*'7";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int2 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-844), "lZ.h*'7");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-15));
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(" | ");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      int int0 = (-38);
      helpFormatter0.setWidth((-38));
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("' was specified but an option from this group ");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter1.setOptPrefix("arg");
      helpFormatter0.getArgName();
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-223), options0, 2487, (-38));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("\n");
      helpFormatter0.printHelp(2841, "~:K&'I%[Za-?ig6H`", "", options0, "~:K&'I%[Za-?ig6H`", false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      helpFormatter0.printHelp("arg", "", options0, "dlwiwVLL|Ab", false);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "7'+Z=-";
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "7'+Z=-", "7'+Z=-", (Options) null, "7'+Z=-", false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("-");
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("arg");
      helpFormatter0.printHelp(2841, "~:K&'I%[Za-?ig6H`", "-", options0, "~:K&'I%[Za-?ig6H`", false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      helpFormatter0.printHelp("arg", "-", options0, "dlwiwVLL|Ab", false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 1615);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1615, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("\n");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, (-2711), options1, 1, 1);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 1, options1, (-2711), 227);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "?r";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "usage: ";
      int int0 = 0;
      String string2 = "`d-c)udMt+q";
      String string3 = "pN1_(lP!x~~Vi";
      // Undeclared exception!
      helpFormatter0.printHelp(int0, string1, string2, options0, string3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "1A@4rATy3d6hiy=uN";
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append(2769);
      int int0 = 0;
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setSyntaxPrefix((String) null);
      StringBuffer stringBuffer0 = new StringBuffer(" | ");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 2483, options0, 2483, 2483);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "7+'+Z=-";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, "7+'+Z=-", "7+'+Z=-", (Options) null, "7+'+Z=-", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("D", "D", (Options) null, "D");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2966;
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.Option";
      helpFormatter0.setLeftPadding(2966);
      helpFormatter0.getWidth();
      String string0 = helpFormatter0.createPadding(2966);
      helpFormatter0.setArgName(string0);
      helpFormatter0.setOptPrefix(string0);
      helpFormatter0.getLeftPadding();
      String string1 = "";
      helpFormatter0.rtrim("");
      String string2 = "org.apache.commons.cli.OptionGroup";
      Options options0 = new Options();
      Option option0 = new Option("", "Z9L|Z=RW8v}(R@s", false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        options1.addOption(">", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '>'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 256;
      Options options0 = new Options();
      String string0 = "):*~tU@";
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      Options options0 = new Options();
      int int0 = (-4818);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, (-578), options0, (-1365), (-4818));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      helpFormatter0.setOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      String string1 = "o$tWW{JM(";
      helpFormatter0.setNewLine("o$tWW{JM(");
      int int0 = (-274);
      int int1 = 154;
      String string2 = "<)nI;]4NS~-@{\"+";
      MockPrintStream mockPrintStream0 = new MockPrintStream("<)nI;]4NS~-@{\"+");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
//      try { 
        mockPrintStream0.print((char[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "=^!NRQ (vy5Q,)-m";
      PrintWriter printWriter0 = mockPrintWriter0.format("=^!NRQ (vy5Q,)-m", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockFile0.setReadable(true, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, 677, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(" ", string0);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, int0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      String string1 = "has already been selected: '";
      helpFormatter0.setOptPrefix("has already been selected: '");
      helpFormatter0.getLeftPadding();
      String string2 = "&5";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("&5", "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "5}B&^iB";
      Options options0 = new Options();
      helpFormatter0.printHelp("5}B&^iB", (String) null, options0, (String) null, false);
      File file0 = MockFile.createTempFile("5}B&^iB", "");
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("Illegal option name '");
      helpFormatter0.printHelp(644, "Illegal option name '", "Illegal option name '", options0, "Illegal option name '", false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("5dM;OMdVl?Icoj&A");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOption("arg", false, "\n");
      helpFormatter2.printHelp("m@Bo[ags.6nP7j1vrj", "", options1, "5ay(7{", false);
      helpFormatter0.printHelp("-", options0, false);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter2.printHelp("arg", (String) null, options1, " ]");
      String string0 = helpFormatter2.getArgName();
      assertEquals("arg", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      String string0 = "~zlsw(qYUWkpF";
      Options options1 = new Options();
      options0.addOption((String) null, false, " [ARG]");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((-1939), "\n", "arg", options0, "-lMW;");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix(">");
      helpFormatter0.defaultLeftPad = 490;
      helpFormatter0.findWrapPos("", 0, 468);
      helpFormatter0.setLongOptSeparator((String) null);
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string2 = "";
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Option option0 = new Option("", "org.apache.commons.cli.AlreadySelectedException", true, "\n");
      options1.addOption(option0);
      // Undeclared exception!
//      try { 
        option0.addValue("AuZF8y(uzaoj3C~&U");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 258, (-3129), "6g9VY-=&OF");
      int int0 = 31;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("\n", " ", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "F$:j_{/yKroF.C`";
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("F$:j_{/yKroF.C`");
      String string1 = "{O||[B$uE";
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", "-", true, "{O||[B$uE");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 442;
      helpFormatter0.setDescPadding(442);
      helpFormatter0.setLongOptPrefix("r@");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int1 = (-5547);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 442, options2, (-5547), 442);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "zm)_b9/>^/2K5DE}F\"";
      String string0 = "^~j*m";
      helpFormatter0.defaultLongOptPrefix = "^~j*m";
      helpFormatter0.setLongOptPrefix("^~j*m");
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      String string1 = "has already been selected: '";
      // Undeclared exception!
//      try { 
        options0.addOption("[%0/zl", "has already been selected: '", true, "^~j*m");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[%0/zl' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "iy";
      helpFormatter0.defaultSyntaxPrefix = "iy";
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.defaultArgName = "iy";
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      int int0 = 1053;
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption(" ", "--", true, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "O<%";
      helpFormatter0.defaultArgName = null;
      Options options0 = new Options();
      helpFormatter0.printHelp("line.separator", "O<%", options0, "line.separator");
      int int0 = 4938;
      Options options1 = new Options();
      options1.getMatchingOptions("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 4938, "org.apache.commons.cli.Option", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      PrintWriter printWriter0 = null;
      int int0 = (-208);
      helpFormatter0.defaultDescPad = (-208);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-208), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.defaultLongOptPrefix = "Xn_Yh]S1Jf.dV8,QR,]";
      helpFormatter0.getDescPadding();
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      PrintWriter printWriter0 = null;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2778), "usage: ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }
}
