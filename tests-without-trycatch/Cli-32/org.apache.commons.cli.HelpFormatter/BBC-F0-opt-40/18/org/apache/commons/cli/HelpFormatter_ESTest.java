/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:18:47 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "X#1Z]+ om #x");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      helpFormatter0.printHelp("6+)0<ZX", "`BvaO<OG=W}dlFv_x*", options0, "k/^lZf'ru");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2);
      helpFormatter0.rtrim("");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", false, "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, ")F`Ok3=L4l+Y50Y", ")F`Ok3=L4l+Y50Y", options1, (-1), (-1499), "(xW2UpJdH2iNcT~C");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.defaultWidth = 427;
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.rtrim("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.getLongOptSeparator();
      String string0 = null;
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("LIlFaP", "", (Options) null, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.printOptions(mockPrintWriter0, 1619, options0, 1619, 33);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, "", "", options0, (-197), (-1848), "OP]~K)t!K<b[>&g-", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-364), options1, 443, 2391);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1358;
      stringBuffer0.ensureCapacity(3);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1358, options0, 1358, 1358);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.setLeftPadding(1358);
      helpFormatter0.defaultDescPad = (-687);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", "", options0, "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Ue\"_r");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 10;
      helpFormatter0.renderOptions(stringBuffer0, 2147, options0, 10, 1172);
      options0.addOption("", "-", false, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ue\"_r");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-463), options0, 1, (-463));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 0;
      String string0 = "6+)0<ZX";
      String string1 = "`BvaO<OG=W}dlFv_x*";
      // Undeclared exception!
      helpFormatter0.printHelp("kyRzn{7BA Q4+K8", options0, true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("xX/2?FI`}IYWiNR.?m", objectArray0);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "xX/2?FI`}IYWiNR.?m", options0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.defaultNewLine = "";
      Options options0 = new Options();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-3339));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("K.M>uccM", " ", options0, "^ ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1);
      LinkedList<OptionGroup> linkedList0 = new LinkedList<OptionGroup>();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(10, ",?VGu2*$V!", ",?VGu2*$V!", options0, "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1));
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringBuffer0.ensureCapacity(12);
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), (Options) null, (-1), (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1684);
      Options options1 = new Options();
      options1.getMatchingOptions(", ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("J`$8vxf>[nO", "J`$8vxf>[nO", options1, "J`$8vxf>[nO");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      helpFormatter0.printHelp("--", options1, true);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-415);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options0 = new Options();
      helpFormatter0.defaultArgName = " ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", options0, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, (String) null);
      helpFormatter0.printHelp(")gG0\"Z>Cs>,$h", options1, true);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      options0.addOption("arg", "\n", true, "-");
      helpFormatter0.printHelp("--", options0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 918, "*i8", "*i8", options0, 10, 1, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-2), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(147);
      helpFormatter0.optionComparator = null;
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1222);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("arg", "usage: ", true, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-Sm;@0L+rw", options0, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.Options", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2780, "org.apache.commons.cli.Options", "USWlb4,B98oV", (Options) null, (-649), 2780, "KTcbyFzm:");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream("]");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "]";
      objectArray0[4] = (Object) "\n";
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "'BfNt#YMt?d~-==", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 2211, "'BfNt#YMt?d~-==", "]", (Options) null, 1498, 1498, "'BfNt#YMt?d~-==");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(10);
      Options options0 = new Options();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.rtrim("(57JLAGEm");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("--");
      int int0 = 3;
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) printWriter0;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintWriter1;
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "-", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter1, 3, "/R-8rTMRk)", "/R-8rTMRk)", (Options) null, 31, (-1239), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "\n", true, "-");
      helpFormatter0.defaultArgName = null;
      helpFormatter0.printHelp("--", options0, true);
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1927), "", (String) null, options0, "<", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLeftPadding((-5706));
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, ">O4Y;+kpNB#;k&2Da:l", "<", options0, ">O4Y;+kpNB#;k&2Da:l", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = "]";
      String string1 = HelpFormatter.DEFAULT_ARG_NAME;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "]", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2474);
      helpFormatter0.defaultWidth = (-2474);
      String string0 = "!O\\|-;}N@m\"/R;1m1";
      Options options0 = null;
      int int1 = 20;
      helpFormatter0.setDescPadding(20);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("!O|-;}N@m\"/R;1m1", "<)$3$N$H(OHB]fV@P7@", (Options) null, "<)$3$N$H(OHB]fV@P7@", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "' was specified but an option from this group ", (String) null, options0, (String) null, false);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "(^ l");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.getLongOptPrefix();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "Dmz~ r-KX!GU", " ] [ long ", options0, " ] [ long ", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "   ");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "-", "", (Options) null, "--", false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 52, (String) null, "[h", options0, 52, 52, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 52, " ", " ", options0, 52, 52, "", true);
      mockPrintStream0.print('R');
      helpFormatter0.printOptions(mockPrintWriter0, 52, options0, 52, 115);
      helpFormatter0.findWrapPos("", 52, 1157);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Locale locale0 = Locale.GERMAN;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "   ", (String) null, options0, 5, 2, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 889;
      String string0 = "i%*F9cn$~O";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" | ", " | ", (Options) null, " | ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile((File) null, "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "org.apache.commons.cli.Option", objectArray0);
      helpFormatter0.printHelp(printWriter0, 34, "arg", "", options0, 31, 3, (String) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "", true, "#flw?_0YUgQ");
      helpFormatter0.printHelp("iZ:;", options1, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('C');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 74, "Bko/P-vvZzSh|n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 10, "", "c P(72hu9IaU", options0, 10, 34, "c P(72hu9IaU");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.printf(locale0, "-", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      mockPrintWriter0.print((-1L));
      Options options0 = new Options();
      options0.addOption((String) null, (String) null, true, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, " ", " ", options0, 2, 2, "Dp)/*99{05;6Z85", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1697);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = new StringWriter(176);
      StringWriter stringWriter2 = stringWriter1.append('j');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "org.apache.commons.cli.HelpFormatter$1", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = new Options();
      options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("K", "--", false, "--");
      options0.addOption(option0);
      stringWriter1.close();
      helpFormatter0.printHelp("Oir``b~65+u_ABRk4o", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.append('|');
      MockPrintWriter mockPrintWriter2 = null;
//      try {
        mockPrintWriter2 = new MockPrintWriter("", "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getSyntaxPrefix();
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "4e3F7KWMU2O:ev<<*", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", "", true, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1945, "--", "", options2, 1945, (-2165), " ]", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = helpFormatter0.createPadding(4146);
      helpFormatter0.createPadding(3);
      Options options0 = new Options();
      helpFormatter0.printHelp("   ", string0, options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      String string1 = HelpFormatter.DEFAULT_ARG_NAME;
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions((PrintWriter) null, 32, options0, 3, (-1466));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(3);
      Options options0 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "-");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", "", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(4146);
      helpFormatter0.createPadding(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, string0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", false, "1}V_KWM.");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", false, "usage: ");
      Options options4 = options3.addOption("", "e<</oR*:Ft'", false, string0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1191, string0, options4);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "--");
      options1.addOption(option0);
      Options options2 = options0.addOption((String) null, "usage: ", true, "org.apache.commons.cli.Options");
      helpFormatter0.printHelp("--", options2, true);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1110, "K@bDp0a?/lq)9A", "-", options0, "A", false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) locale0;
      mockPrintStream0.printf((Locale) null, "Bz [;>dN* A|:m(", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 13, "", "%,bN 7r%", options0, 1, 1, "arg", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Null output stream
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getSyntaxPrefix();
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintStream mockPrintStream0 = new MockPrintStream("'>Zd");
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      mockPrintStream0.printf(locale0, "a6", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(3);
      Options options0 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "-");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(" ", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.getNewLine();
      helpFormatter1.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "<";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) "[ optio: ";
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.format("G)z@61Z=x49", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter1, false);
      mockPrintWriter1.append('b');
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 3, "G)z@61Z=x49", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      char char0 = 'j';
      stringWriter1.append('j');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "Oir``b~65+u_ABRk4o");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "OPSlxj(E*GaB;x{P4", true, "Z%]");
      options2.addOption(option0);
      helpFormatter0.printHelp("K", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 3, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(13);
      helpFormatter0.getNewLine();
      Options options0 = null;
      Options options1 = new Options();
      int int0 = 1;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "\n", "4V$:Z?", (Options) null, (String) null);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getSyntaxPrefix();
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      String string2 = "'>Zd";
      MockPrintStream mockPrintStream0 = new MockPrintStream("'>Zd");
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      mockPrintStream0.printf(locale0, "a6", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      String string3 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.getNewLine();
      String string4 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", (-795), (-795));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter0.getLongOptSeparator();
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ",cn'";
      objectArray0[1] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) ",cn'";
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) "--";
      MockFile mockFile0 = new MockFile("~?hp'BZ||`$*#");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 74);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 22, "org.apache.commons.cli.OptionGroup");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getSyntaxPrefix();
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintStream mockPrintStream0 = new MockPrintStream("'>Zd");
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      mockPrintStream0.printf(locale0, "a6", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, " ", "", options0, 74, 3, "", true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(3);
      Options options0 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "-");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("\n", " ", options0, "[ optio: ");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLeftPadding(782);
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter0.getLongOptSeparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",cn'");
      Object object0 = new Object();
      Object object1 = new Object();
      MockFile mockFile0 = new MockFile("sc!{`1oP|RB\"/}zkYv=");
      mockFile0.getCanonicalPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 3);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, ", ", (String) null, options0, 13, 3, "Sh", true);
      helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 13, 1613);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1613, 3, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "Cannot add value, list full.", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "Cannot add value, list full.");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      Locale locale0 = Locale.KOREA;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "-", (Object[]) null);
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0, 74);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      locale0.getDisplayVariant();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "=A?m", ":^TtOS|e", options1, 1070, 1070, "hz{M8K<&N7{YT", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(4146);
      helpFormatter0.createPadding(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, string0);
      helpFormatter0.getLongOptSeparator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("   ");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(4146);
      helpFormatter0.createPadding(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "", (Object[]) null);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(printStream0, 3);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "' contains an illegal character : '");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      stringWriter1.append('j');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "Oir``b~65+u_ABRk4o");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "OPSlxj(E*GaB;x{P4", true, "Z%]");
      options2.addOption(option0);
      helpFormatter0.printHelp("K", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter1.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append('j');
      helpFormatter1.printUsage(printWriter0, 5549, "QAnDaCs/5PIw]", options0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter0.getSyntaxPrefix();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintStream mockPrintStream0 = new MockPrintStream("'>Zd");
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0, 3);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter0.getLongOptSeparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.cli.HelpFormatter$1");
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ",cn'";
      objectArray0[1] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) ",cn'";
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) "--";
      mockPrintStream0.printf(locale0, "", objectArray0);
      MockFile mockFile0 = new MockFile("~?hp'BZ||`$*#");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 74);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 666, ", ", ":^TtOS|e", options0, 1070, 1070, "", false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.renderOptions((StringBuffer) null, 5, options0, 38, 3);
      helpFormatter1.getLongOptSeparator();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("org.apache.commons.cli.HelpFormatter$1", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.HelpFormatter$1' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      String string1 = ",cn'";
      MockPrintStream mockPrintStream0 = new MockPrintStream(",cn'");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "   ";
      objectArray0[2] = (Object) "a8W4It-@t";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "a8W4It-@t";
      mockPrintStream0.printf(locale0, ",cn'", objectArray0);
      mockPrintStream0.println((-912.233F));
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "", "r31~=BPZ-4[Z+6", options0, "a8W4It-@t", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(3);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1358, options0, 1358, 1358);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.setLeftPadding(1358);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[9];
      objectArray0[7] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = (Object) stringWriter0;
      stringWriter0.append((CharSequence) "--");
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.print(',');
      PrintWriter printWriter1 = mockPrintWriter1.format("-", objectArray0);
      helpFormatter0.printUsage(printWriter1, 2333, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setArgName("-");
      char[] charArray0 = new char[1];
      mockPrintWriter0.println(charArray0);
      helpFormatter0.setSyntaxPrefix("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, 4691, "bIP,Z^,.^#", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(1991);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer1, 1944, options0, 2062, 890);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options0, false);
      helpFormatter1.printHelp("-", options0, false);
      helpFormatter1.setLeftPadding(117);
      helpFormatter1.printHelp("e%m}", "arg", options0, "[9P*vRlR$%<", false);
      helpFormatter1.setLeftPadding((-3797));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter0.rtrim("");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((-2525), " ", "arg", options0, "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(13);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      stringWriter1.append('j');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "Oir``b~65+u_ABRk4o");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "OPSlxj(E*GaB;x{P4", true, "Z%]");
      options2.addOption(option0);
      helpFormatter0.printHelp("K", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter0.getSyntaxPrefix();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options0 = new Options();
      options0.addOption("", true, "");
      Option option0 = new Option("arg", true, "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream("a8W4It-@t");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) option0;
      objectArray0[1] = (Object) "";
      objectArray0[0] = (Object) " ";
      objectArray0[3] = (Object) "   ";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "arg", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 3, 1210);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter0.getLongOptSeparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",cn'");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "   ";
      objectArray0[2] = (Object) "a8W4It-@t";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "a8W4It-@t";
      mockPrintStream0.printf(locale0, ",cn'", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, ",cn'");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'F';
      charArray0[2] = '-';
      charArray0[3] = 'B';
      charArray0[4] = 'Q';
      charArray0[5] = 'Z';
      charArray0[6] = 'c';
      charArray0[7] = '7';
      mockPrintWriter0.println(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(74, "arg", "org.apache.commons.cli.HelpFormatter", (Options) null, "--");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(3);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1358, options0, 1358, 1358);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.setLeftPadding(1358);
      helpFormatter0.printHelp(" ", "", options0, "", true);
      helpFormatter0.setLeftPadding(1358);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      options0.hasOption("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(101, "", " ", options0, "fvX");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      helpFormatter0.createPadding(3);
      helpFormatter0.getSyntaxPrefix();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 13;
      StringWriter stringWriter0 = new StringWriter(13);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append('j');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "Oir``b~65+u_ABRk4o");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "OPSlxj(E*GaB;x{P4", true, "Z%]");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", false, "-");
      helpFormatter0.printHelp("cSkN0`", options4);
      stringWriter2.getBuffer();
      Options options5 = new Options();
      String string0 = null;
      boolean boolean0 = false;
      Options options6 = options5.addOption("arg", (String) null, false, (String) null);
      stringWriter1.flush();
      String string1 = "2t lp#]mc54F4 ";
      options5.toString();
      // Undeclared exception!
//      try { 
        options6.addOption("2t lp#]mc54F4 ", "--", false, "?>]P,R9VsbbP}&GVI,");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '2t lp#]mc54F4 ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("\n");
      String string0 = "";
      String string1 = "";
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(31, "pTct_+;wIALd*9+q[*", "UMH4|7p-V(%^-7L7", (Options) null, "aoe* Cv.9]'?D53,", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(1);
      Options options0 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 2, 966, "");
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter0.getSyntaxPrefix();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "S->bX$r\";aOETnad(");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.hasOption("");
      helpFormatter0.printHelp(373, "I", "I", options2, "gd[VKbQ");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("c", options0);
      helpFormatter0.rtrim("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 119, options0, 119, 89);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1, options1, 32, 32);
      stringBuffer0.append((long) 74);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1416, options0, 0, 32);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((long) 74);
      stringBuffer0.ensureCapacity(3);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 74, 74);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.lookup(linkedList0, linkedList1);
      Object[] objectArray0 = null;
      Locale.forLanguageTag(" ");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      MockFile mockFile0 = new MockFile("\n", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      mockFile0.getAbsoluteFile();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = null;
      mockFile0.setLastModified(3020L);
      mockPrintWriter1.format((Locale) null, "HN#", objectArray0);
      printWriter0.format("org.apache.commons.cli.HelpFormatter", objectArray0);
      String string0 = "Tl,&jpu^MU{";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "org.apache.commons.cli.AlreadySelectedException");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = (-2042);
      int int1 = (-2899);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2042), (-2899), "A CloneNotSupportedException was thrown: ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(3);
      Options options0 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "-");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("aal}kR'DiFj:j>5eVE", " ", options0, "[ option: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      MockFile mockFile0 = new MockFile("\n", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "";
      mockPrintWriter0.printf("usage: ", objectArray0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) mockPrintStream0;
      objectArray1[1] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(13);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter1.rtrim("-");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1358;
      stringBuffer0.ensureCapacity(3);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1358, options0, 1358, 1358);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.setLeftPadding(1358);
      helpFormatter0.printHelp(" ", "", options0, "", true);
      helpFormatter0.setLeftPadding(1358);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
//      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Already connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 740, 31);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("");
//      try { 
        MockURI.URI("usage: ", "--", (String) null);
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Illegal character in opaque part at index 6: usage: :--
//         //
//         verifyException("java.net.URI$Parser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(3);
      Options options0 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "-");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("\n", " ", options0, "[ option: ");
      helpFormatter0.printHelp("--", options0, false);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "-");
      int int0 = (-1642);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, 0, options0, (-1030), 21);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("%q,w1EYqkm(");
      helpFormatter0.defaultLongOptPrefix = "Xi+9[%n";
      StringWriter stringWriter0 = new StringWriter();
      String string0 = helpFormatter0.defaultOptPrefix;
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("[ Options: [ short ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setSyntaxPrefix("RhS");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      mockPrintWriter0.print('$');
      helpFormatter0.optionComparator = comparator0;
      mockPrintWriter0.println(true);
      mockPrintWriter0.flush();
      helpFormatter0.defaultArgName = "@+itH<C\"+qL1B";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "");
      helpFormatter0.setNewLine("zBB0");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getWidth();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      int int1 = (-3523);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options0, (-3523), (-3523));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (String) null, options0, "E@-YVFL%g-Y4wQ'");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) stringWriter0;
      stringWriter0.append((CharSequence) "--");
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.format("-", objectArray0);
      helpFormatter0.printUsage(printWriter1, 2333, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setArgName("-");
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 2333, 2333, "The option '");
      helpFormatter0.setArgName("M^E8u5^2f)P?in&$(c");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0);
      assertEquals("", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(3);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1358, options0, 1358, 1358);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.setLeftPadding(1358);
      helpFormatter0.printHelp(" ", "[", options0, "org.apache.commons.cli.Options", true);
      helpFormatter0.setLeftPadding(1358);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
//      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Already connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      MockFile mockFile0 = new MockFile("\n", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockFile0.setLastModified(3020L);
      PrintWriter printWriter1 = mockPrintWriter1.format((Locale) null, "--", objectArray0);
      mockPrintWriter1.format("usage: ", objectArray0);
      helpFormatter0.printUsage(printWriter1, 74, "Tl,&jpu^MU{");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 0, "");
      assertEquals("", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options0, false);
      // Undeclared exception!
//      try { 
        options0.addOption(".$P_U636e/&hKo@H", " ", false, "org.apache.commons.cli.HelpFormatter");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '.$P_U636e/&hKo@H' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(3);
      assertEquals("   ", string0);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertEquals(" ", string1);
      
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getOptPrefix();
      String string2 = helpFormatter0.getOptPrefix();
      assertEquals("-", string2);
      
      String string3 = helpFormatter0.rtrim("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("$3c|N7.8Kdi,25;Gth!", "arg", false, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '$3c|N7.8Kdi,25;Gth!' contains an illegal character : '|'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      int int0 = 32;
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 1, 0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      int int1 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getWidth();
      int int2 = (-2);
      helpFormatter0.setLeftPadding((-2));
      String string0 = null;
      Options options0 = null;
      helpFormatter0.defaultOptPrefix = "Q^#4.";
      StringBuffer stringBuffer0 = new StringBuffer("zU\"J&-s*");
      // Undeclared exception!
//      try { 
        stringBuffer0.append((CharSequence) " ", (-2), 706);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // start -2, end 706, s.length() 1
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      String string1 = "Q'EI=_{";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", (Options) null, "Q'EI=_{", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", true, "b[~a01T;2pq\"%$_");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      helpFormatter0.setWidth(13);
      helpFormatter0.getSyntaxPrefix();
      int int1 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 13, 0, "usage: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.setLongOptSeparator("4a");
      int int0 = 502;
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 502, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.FRANCE;
      String string0 = "cmdLineSyntax not provided";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(locale0, "cmdLineSyntax not provided", objectArray0);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      int int0 = (-857);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-857), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = null;
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 13, (Options) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 9, 9);
      String string1 = "";
      Options options0 = new Options();
      String string2 = "e(.h8qj9";
      String string3 = "n3+{48wJ[O(k.]t";
      // Undeclared exception!
//      try { 
        options0.addOption("-", "e(.h8qj9", true, "n3+{48wJ[O(k.]t");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-195));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) stringWriter0;
      stringWriter0.append((CharSequence) "--");
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.format("-", objectArray0);
      helpFormatter0.printUsage(printWriter1, 2333, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setArgName("-");
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.setSyntaxPrefix("-");
      String string0 = "bI\\P,Z^,.^#";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "bIP,Z^,.^#", "bIP,Z^,.^#", (Options) null, "bIP,Z^,.^#");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }
}
