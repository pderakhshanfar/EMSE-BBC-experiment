/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 18:40:02 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;
import javax.xml.stream.util.StreamReaderDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FromXmlParser_ESTest extends FromXmlParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      streamReaderDelegate0.setParent(streamReaderDelegate0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IntNode intNode0 = IntNode.valueOf(3193);
      IOContext iOContext0 = new IOContext(bufferRecycler0, intNode0, true);
      FromXmlParser fromXmlParser0 = null;
//      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 3987, 3, (ObjectCodec) null, streamReaderDelegate0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = FromXmlParser.Feature.collectDefaults();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, propertyAccessor0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      FromXmlParser fromXmlParser0 = null;
//      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 2, (-2560), objectReader0, streamReaderDelegate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}
