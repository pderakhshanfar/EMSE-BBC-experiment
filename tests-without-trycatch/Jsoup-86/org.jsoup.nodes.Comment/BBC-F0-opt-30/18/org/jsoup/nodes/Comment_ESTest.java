/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 17:55:26 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Comment_ESTest extends Comment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("");
      MockFile mockFile0 = new MockFile("L@.fP-_8CK}%I:?%#", "L@.fP-_8CK}%I:?%#");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(0);
      comment0.outerHtmlHead(mockPrintStream0, (-547), document_OutputSettings1);
      assertEquals(8L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment("_^<X'wMN3|8={2");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2676);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      comment0.outerHtmlTail(charArrayWriter0, 2676, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment("0fU{$4_(<o>N", (String) null);
      String string0 = comment0.nodeName();
      assertEquals("#comment", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comment comment0 = new Comment((String) null, "EDfQ8\"-IegR*IO");
      String string0 = comment0.getData();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment("q5H#No", "q5H#No");
      comment0.clearAttributes();
      String string0 = comment0.getData();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment(">DF,Ze*ZE");
      comment0.reparentChild(comment0);
      // Undeclared exception!
      comment0.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment("<", "B1Go");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      comment0.value = (Object) pipedWriter0;
      // Undeclared exception!
//      try { 
        comment0.toString();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.io.PipedWriter cannot be cast to java.lang.String
//         //
//         verifyException("org.jsoup.nodes.LeafNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment("H/zH)jJu6\"", "H/zH)jJu6\"");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "@t7i");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(2938);
      // Undeclared exception!
      comment0.outerHtmlHead(stringBuffer0, 2938, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("C`3s_d3 :<}q\"z", "");
      CharBuffer charBuffer0 = CharBuffer.allocate(841);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        comment0.outerHtmlHead(charBuffer0, 841, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("<");
      StringBuilder stringBuilder0 = new StringBuilder("org.jsoup.nodes.Comment");
      // Undeclared exception!
//      try { 
        comment0.outerHtmlHead(stringBuilder0, 0, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Comment", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("_^<X'wMN3|8={2");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2676);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        comment0.outerHtmlHead(charArrayWriter0, (-3828), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comment comment0 = new Comment("!", "VZ'Ns~m");
      MockFileWriter mockFileWriter0 = new MockFileWriter("!", false);
      comment0.value = (Object) mockFileWriter0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        comment0.outerHtmlHead(mockFileWriter0, 4603, document_OutputSettings0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.evosuite.runtime.mock.java.io.MockFileWriter cannot be cast to java.lang.String
//         //
//         verifyException("org.jsoup.nodes.LeafNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comment comment0 = new Comment("<!--");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
//      try { 
        comment0.outerHtmlHead(pipedWriter0, 3833, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      // Undeclared exception!
//      try { 
        comment0.isXmlDeclaration();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Comment", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comment comment0 = new Comment("\"z*Pj$ b|cih{rYI");
      Object object0 = new Object();
      comment0.value = object0;
      // Undeclared exception!
//      try { 
        comment0.isXmlDeclaration();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Object cannot be cast to java.lang.String
//         //
//         verifyException("org.jsoup.nodes.LeafNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      // Undeclared exception!
//      try { 
        comment0.asXmlDeclaration();
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      // Undeclared exception!
//      try { 
        comment0.asXmlDeclaration();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Comment", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comment comment0 = new Comment("&*|HE:.8@G>O", (String) null);
      // Undeclared exception!
//      try { 
        comment0.asXmlDeclaration();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comment comment0 = new Comment("<", "B1Go");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      comment0.value = (Object) pipedWriter0;
      // Undeclared exception!
//      try { 
        comment0.asXmlDeclaration();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.io.PipedWriter cannot be cast to java.lang.String
//         //
//         verifyException("org.jsoup.nodes.LeafNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comment comment0 = new Comment("0fU{$4_(<o>N", (String) null);
      String string0 = comment0.getData();
      assertEquals("0fU{$4_(<o>N", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comment comment0 = new Comment("@t7i");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertFalse(xmlDeclaration0.hasParent());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comment comment0 = new Comment("?\"z*Pj$`b|cihArYI");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comment comment0 = new Comment("!org.jsoup.parser.Token$StartTag", "!");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comment comment0 = new Comment("H/zH)jJu6\"", "H/zH)jJu6\"");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comment comment0 = new Comment("q5H#No", "q5H#No");
      assertEquals("#comment", comment0.nodeName());
      
      comment0.clearAttributes();
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comment comment0 = new Comment("\"z*Pj^ b|cih{rYI");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\"z*Pj^ b|cih{rYI");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
//      try { 
        comment0.outerHtmlHead(charBuffer0, 717, document_OutputSettings1);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comment comment0 = new Comment("0fU{$4_(<o>N", (String) null);
      String string0 = comment0.toString();
      assertEquals("\n<!--0fU{$4_(<o>N-->", string0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comment comment0 = new Comment("H/zH)jJu6\"", "H/zH)jJu6\"");
      comment0.asXmlDeclaration();
  }
}
