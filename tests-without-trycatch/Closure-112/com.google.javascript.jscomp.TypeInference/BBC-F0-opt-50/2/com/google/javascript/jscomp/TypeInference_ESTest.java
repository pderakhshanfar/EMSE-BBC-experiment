/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 17:51:24 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeReplaceKnownMethods;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TypeInference;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import java.io.ByteArrayOutputStream;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInference_ESTest extends TypeInference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "b");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      // Undeclared exception!
//      try { 
        TypeInference.getBooleanOutcomes(booleanLiteralSet0, (BooleanLiteralSet) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "prototype");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.FALSE;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      assertSame(booleanLiteralSet0, booleanLiteralSet1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.FALSE;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, true);
      assertSame(booleanLiteralSet0, booleanLiteralSet1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "*{yc4&wKeBv\b:yT1H");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1029);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.TypeInference");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "b");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "mb(c:|h$R2+]sw@c");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "*{yc4&wKeBv\b:yT1H");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      // Undeclared exception!
//      try { 
        compiler0.parseTestCode("b");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "}vi~du]W\"03_qU4N");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "2");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "msg.no.colon.prop");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "JSC_NAME_DEFINED_LATE");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "*{yc4&KeBv\b:yT1H");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "it\"@\"y80w0L>");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "h@Gt^6.%Q9");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        compiler0.parseTestCode("b");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "it\"@\"y80w0L>");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler1, "");
      Node node1 = new Node(54, node0, node0, node0, 879, (-1952));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler1.getReverseAbstractInterpreter();
      Scope scope0 = Scope.createGlobalScope(node1);
      TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
      TypeInference typeInference0 = new TypeInference(compiler1, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
      node1.setType(56);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "JSC_UNDEFINED_NAME");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "TY<t2");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "Fzy$+ F");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "replaceIdGenerators");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "sde4}FpD");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
//      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "by");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }
}
