/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 22:02:56 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.PeepholeCollectPropertyAssignments;
import com.google.javascript.jscomp.TypeInference;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInference_ESTest extends TypeInference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("2Q3", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      MockPrintStream mockPrintStream0 = new MockPrintStream("2Q3");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("2Q3", "replaceMessages");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.FALSE;
      // Undeclared exception!
//      try { 
        TypeInference.getBooleanOutcomes((BooleanLiteralSet) null, booleanLiteralSet0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node[] nodeArray0 = new Node[1];
      MockPrintStream mockPrintStream0 = new MockPrintStream("2Q3");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("2Q3", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      MockPrintStream mockPrintStream0 = new MockPrintStream("2Q3");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("2Q3", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node[] nodeArray0 = new Node[1];
      MockPrintStream mockPrintStream0 = new MockPrintStream("26Q3");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("26Q3", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.FALSE;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      assertSame(booleanLiteralSet0, booleanLiteralSet1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" Q");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode(" Q", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node[] nodeArray0 = new Node[1];
      MockPrintStream mockPrintStream0 = new MockPrintStream("2Q3");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("2Q3", "JS_INXISTENT_ENUM_ELEET");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node[] nodeArray0 = new Node[1];
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("type", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseTestCode("rPpfQlaceMelsaget");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("type", "type");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node[] nodeArray0 = new Node[1];
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("2Q3", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseTestCode("JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("26Q3", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("<6V@`$bEohAAEf", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      MockPrintStream mockPrintStream0 = new MockPrintStream("2Q3");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("2Q3", "JSC_INEXISTENR_ENUMIELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode(".J6x~mvU", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      MockPrintStream mockPrintStream0 = new MockPrintStream("2Q3");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("JSC_INEXISTENT_ENUM_ELEMENT", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("JSC_INEXISTENT_ENUM_ELEMENT", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode(" }xDk:,}\tK1B", "Ca");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("0Qv", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Q3");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("Q3", "Q3");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node[] nodeArray0 = new Node[1];
      MockPrintStream mockPrintStream0 = new MockPrintStream("2Q3");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("2Q3", "JSC_INEXISTENT_ENUM_oLEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node[] nodeArray0 = new Node[7];
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseTestCode("rpfQlacelsaget");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("3", "replaceMessages");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      MockPrintStream mockPrintStream0 = new MockPrintStream("2Q");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("2Q", "replaceMessages");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("<6V@`$bEohAAE)uf", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node[] nodeArray0 = new Node[1];
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("Q", "Q");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("type", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("Q", "Q");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node[] nodeArray0 = new Node[7];
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseTestCode("rPpfQlaceMelsaget");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.TypeInference");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeInference", "replaceMessages");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node[] nodeArray0 = new Node[20];
      MockPrintStream mockPrintStream0 = new MockPrintStream("2Q3");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("2Q3", "JSC_INEXISTENT_ENUM_ELEMENT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseTestCode("JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node[] nodeArray0 = new Node[1];
      MockPrintStream mockPrintStream0 = new MockPrintStream("2Q3");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("2Q3", "JSC_INEXISTENR_ENUMIELEMENT");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("2Q3");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
//      try { 
        compiler0.parseTestCode("replaceMessages");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseTestCode("rpfQlacelsaget");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("23", "JSC_INEXISTENT_ENUM_ELEMENT");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }
}
