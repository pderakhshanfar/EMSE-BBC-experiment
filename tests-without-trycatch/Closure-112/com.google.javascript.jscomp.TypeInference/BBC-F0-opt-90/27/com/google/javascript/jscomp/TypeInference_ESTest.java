/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 22:10:57 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSortedMap;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeInference;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInference_ESTest extends TypeInference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, true);
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
//      try { 
        TypeInference.getBooleanOutcomes((BooleanLiteralSet) null, (BooleanLiteralSet) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(38, node0, (-146), 421);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node1, flowScope0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // NAME is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.rhino.head.Scriptable", "com.google.javascript.rhino.head.Scriptable", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("TX^`S");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(38, node0, node0, node0, 8, 2);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // NAME 8 is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.jscomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      TypeInference typeInference0 = null;
//      try {
        typeInference0 = new TypeInference(compiler1, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.Compiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.scomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(21, "", 2389, 128);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.Yoogle.java|crit.scomp.TypeJnference$1", "com.Yoogle.java|crit.scomp.TypeJnference$1", "com.Yoogle.java|crit.scomp.TypeJnference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(35, node0, 29, 101);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(37, node0, 50, 42);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(15, node0, 36, 55);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(16, node0, 4181, 149);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("jqmUs=", "jqmUs=", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(101, node0, 32, 112);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node1, flowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascrit.scomp.TypeInfere%ce$1", "com.google.javascrit.scomp.TypeInfere%ce$1", "com.google.javascrit.scomp.TypeInfere%ce$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      node0.setType(35);
      FlowScope flowScope0 = typeInference0.flowThrough(node0, linkedFlowScope0);
      typeInference0.branchedFlowThrough(node0, flowScope0);
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascrit.scomp.TypeInfere%ce$1", "com.google.javascrit.scomp.TypeInfere%ce$1", "com.google.javascrit.scomp.TypeInfere%ce$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.scomp.TypeInfere%ce$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      node0.setType(49);
      FlowScope flowScope0 = typeInference0.flowThrough(node0, linkedFlowScope0);
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("comgoogle.aascrit.jcomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(85, node0, 114, 39);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.xtra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(95, node0, (-1112), (-5489));
      Node node2 = new Node(100, node1, 29, 42);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node2, flowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(100, node0, 1736, 5);
      node0.setType(31);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.TRUE;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      assertSame(booleanLiteralSet1, booleanLiteralSet0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("JSC_VAR_MULTIPLY_DECLARED_ERROR", "JSC_VAR_MULTIPLY_DECLARED_ERROR", "JSC_VAR_MULTIPLY_DECLARED_ERROR");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      Node node1 = new Node(100, node0, 400000, 1);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(30, node0, 1, 57);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(4, node0, (-2750), 512);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // RETURN does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("B7Wv8OOh`5G4O7lb`", "B7Wv8OOh`5G4O7lb`", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(3, node0, 49, 154);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(155, node0, 15, 100);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.jscomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(154, node0, 4095, 119);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // STRING_KEY 4095 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("^37YFrX~LJf", "^37YFrX~LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("esg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(153, node0, 52, 203);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // LABEL_NAME 52 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("tw'ZX0qk~}SHOmV80+k", "com.google.javascrit.jscomp.TypeInference$1", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.jscomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(152, node0, 1, 57);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DEBUGGER 1 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SourceFile.fromCode("com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(151, node0, 4095, 139);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("jqmUs=", "jqmUs=", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = Node.newString(150, "%<AP,aqeJ[ff&", 49, 151);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 150
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(149, node0, 29, 2);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // CONST 29 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(148, node0, 148, 101);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // SETTER_DEF 148 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = Node.newString(147, "constant {0} assigned a value more than once", 400000, 0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // GETTER_DEF constant {0} assigned a value more than once 400000 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(146, node0, 136, (-2090));
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 146
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.jscomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(145, node0, 15, 577);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TyeInfrence$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(144, node0, 15, 53);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("b37YF@{LJf", jSTypeNative0);
      ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("", codingConvention_AssertionFunctionSpec0, "com.google.javascrit.jscomp.TypeInference$1", codingConvention_AssertionFunctionSpec0, "b37YF@{LJf", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      node0.setType(143);
      FlowScope flowScope1 = typeInference0.flowThrough(node0, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.jscomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(142, node0, (-1882), 46);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = Node.newString(141, "com.google.javascrit.jscomp.TypeInference$1", 50, 42);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{Lf", "b37YF@{Lf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{Lf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(140, node0, 46, 147);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 140
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.jscomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(139, node0, 36, 891);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = Node.newString(138, "constant {0} assigned a value more than once", 400000, 0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 138
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer", "b37YF@{LJf", "com.google.javascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T7P^x#i(//)DQpH5y;");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(137, node0, 101, 13);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = Node.newString(136, "", 1396, 400000);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("X$1}W", "; ", "INTERFACE");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(135, "d?*e(_hd^9z7-", 57, 759);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 135
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = Node.newString(134, "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer", 37, 957692532);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(133, node0, 133, 126);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = Node.newString(131, "msg.extra.trailing.comma", 2487, 47);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 131
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(129, node0, (-898), 0);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("tw'ZX0qk~}SHOmV80+k", "com.google.javascrit.jscomp.TypeInference$1", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.jscomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(128, node0, 4388, 57);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(127, node0);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.jscomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(126, node0, 36, 145);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.rhino.head.Scriptable", "com.google.javascript.rhino.head.Scriptable", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("TX^`");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(125, node0, 4095, 39);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("!", "!", "com.google.javascrit.scomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = new Node(124, node0, 150, 37);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("B7Wv8OOh`5G4O7lb`", "B7Wv8OOh`5G4O7lb`", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = Node.newString(123, "msg.extra.trailing.comma", 2, 3488);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(122, node0, (-425), 2563);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(121, node0, 32, 4095);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 121
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("#f?aC%R3q=vs]");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(120, node0, 2, 4);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      node0.setType(119);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, flowScope0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("B7Wv8OOh`5G4O7lb`", "B7Wv8OOh`5G4O7lb`", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, hashMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(118, node0, 60, 110);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{Lf", "b37YF@{Lf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{Lf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(117, node0, (-2176), 3791);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // CONTINUE does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = Node.newString(116, "msg.extra.trailing.comma", 49, 139);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(115, node0, 1, 100);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("EtsBYi|i)c\"^8CW");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(114, node0, 49, (-2504));
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DO does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(113, node0, (-1022), 57);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // WHILE does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("comgoogle.aascrit.jcomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(112, node0, 114, 399);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DEFAULT_CASE 114 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37{LJf", "b37{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(111, "com.google.javascrit.jscomp.TypeInference$1", 894, 50);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(110, node0, 32, 1736);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // SWITCH 32 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("@wLJI");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(109, node0, 15, 2607);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37{LJf", "b37{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(108, node0, 15, 1);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // IF 15 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(107, node0, 3, 100);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 107
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(106, node0, 2990, 100);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 106
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("comgoogle.aascrit.jcomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(104, node0, 114, 399);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 104
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37{LJf", "b37{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("", jSTypeNative0);
      ImmutableBiMap<String, CodingConvention.AssertionFunctionSpec> immutableBiMap0 = ImmutableBiMap.of("", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableBiMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = Node.newString(103, "com.google.javascrit.jscomp.TypeInference$1", 2909, 31);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.xtra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(102, node0, 29, 42);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("B7Wv8OOh`5G4O7lb`", "B7Wv8OOh`5G4O7lb`", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(99, node0, 39, 1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("7A]t\"", "7A]t\"", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(98, node0, 49, 39);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "cfm.google.javascrit.j+comp.TypeInference$8");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(97, "cfm.google.javascrit.j+comp.TypeInference$8", 16, (-1784));
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.jscomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(96, node0, 48, 140);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(95, node0, (-1112), (-5489));
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("comgoogle.aascrit.jcomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(94, node0, 56, 55);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("comgoogle.aascrit.jcomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(92, node0, 114, 39);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.scomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(91, node0, 29, 2389);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = Node.newString(90, "b37YF@{LJf", 30, 2809);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.scomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(89, node0, 29, 2389);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.TQpeInference$1", "com.google.javascript.jscomp.TQpeInference$1", "com.google.javascript.jscomp.TQpeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      node0.setType(87);
      FlowScope flowScope0 = typeInference0.flowThrough(node0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("XTh>%a");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(83, node0, 0, 38);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // PARAM_LIST 0 : ? does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "cfm.google.javascrit.j+comp.TypeInference$8");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = Node.newString(82, "cfm.google.javascrit.j+comp.TypeInference$8", 4013, 152);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = Node.newString(81, "b37YF@{LJf", 30, 2809);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("comgoogle.aascrit.jcomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(80, node0, 114, 39);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 80
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("comgoogle.aascrit.jcomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(79, node0, 1, 1139);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascrit.scomp.TypeInfere%ce$1", "com.google.javascrit.scomp.TypeInfere%ce$1", "com.google.javascrit.scomp.TypeInfere%ce$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      node0.setType(78);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.scomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(77, node0, 29, 2389);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = Node.newString(76, "b37YF@{LJf", 306, 2809);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      node0.setType(75);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.flowThrough(node0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = Node.newString(74, "", 4013, 5);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "cfm.google.javascrit.j+comp.TypeInference$8");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = Node.newString(72, "cfm.google.javascrit.j+comp.TypeInference$8", 150, (-1784));
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(71, node0, 4, 46);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "cfm.google.javascrit.j+comp.TypeInference$8");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(70, node0, 0, 15);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.scomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      node0.setType(68);
      FlowScope flowScope1 = typeInference0.flowThrough(node0, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.scomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(67, node0, 29, 2389);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.scomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(66, node0, (-1648), 2);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(65, node0, 37, (-1386));
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "cfm.google.javascrit.j+comp.TypeInference$8");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      node0.setType(61);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(60, node0, 29, 2389);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("7A]t\"", "7A]t\"", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("comgoogle.aascrit.jcomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      node0.setType(59);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1", "com.google.javascrit.scomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(58, node0, 42, 3253);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(57, node0, (-8), 37);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("tw'ZX0qk~}SHOmV80+k", "com.google.javascrit.jscomp.TypeInference$1", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.jscomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(56, node0, 149, 46);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("jqmUs=", "jqmUs=", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(55, node0, (-1744), 37);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 55
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("tw'ZX0qk~}SHOmV80+k", "com.google.javascrit.jscomp.TypeInference$1", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.jscomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(54, node0, 835, (-1029));
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("='8OP~)n");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(53, node0, 1281, 124);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 53
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(52, node0, (-519), 1);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(51, node0, 50, 1655);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("tw'ZX0qk~}SHOmV80+k", "com.google.javascrit.jscomp.TypeInference$1", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.jscomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(50, node0, 16, 52);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 50
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("tw'ZX0qk~}SHOmV80+k", "com.google.javascrit.jscomp.TypeInference$1", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.jscomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(48, node0, 0, 4388);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 48
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(47, node0, 12, 117);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(46, node0, 52, 132);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "cfm.google.javascrit.j+comp.TypeInference$8");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(45, "cfm.google.javascrit.j+comp.TypeInference$8", 16, (-1776));
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(43, node0, 30, 32);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // FALSE 30 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(42, node0, 12, (-8));
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // THIS does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(39, node0, 4181, 4095);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Number node not created with Node.newNumber
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(36, node0, 2, (-969));
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = Node.newString(32, "constant {0} assigned a value more than once", 135, (-1817));
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // TYPEOF constant {0} assigned a value more than once : string does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = Node.newString(30, "5=hu@q'obr~c8+FD", 57, 152);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(29, node0, (-29), 4095);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // NEG : number does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.jscomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = Node.newString(26, "com.google.javascrit.jscomp.TypeInference$1", 49, 57);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // NOT com.google.javascrit.jscomp.TypeInference$1 49 : boolean does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = Node.newString(24, "com.google.javascript.jscomp.TypeInference$1", 56, 150);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DIV com.google.javascript.jscomp.TypeInference$1 56 : number does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(23, node0, 54, 2);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascrit.scomp.TypeInfere%ce$1", "com.google.javascrit.scomp.TypeInfere%ce$1", "com.google.javascrit.scomp.TypeInfere%ce$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      node0.setType(20);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.flowThrough(node0, linkedFlowScope0);
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascrit.jscomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = Node.newString(18, "com.google.javascrit.jscomp.TypeInference$1", 49, 57);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{Lf", "b37YF@{Lf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{Lf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(17, node0, 1393, 114);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      node0.setType(16);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, flowScope0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(12, node0, 39, 217);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("b37YF@{LJf", jSTypeNative0);
      ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("", codingConvention_AssertionFunctionSpec0, "com.google.javascrit.jscomp.TypeInference$1", codingConvention_AssertionFunctionSpec0, "b37YF@{LJf", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = new Node(11, node0, 130, 38);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("comgoogle.aascrit.jcomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(10, node0, (-40), 47);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.Yoogle.java|crit.scomp.TypeJnference$1", "com.Yoogle.java|crit.scomp.TypeJnference$1", "com.Yoogle.java|crit.scomp.TypeJnference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      node0.setType(35);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Function literal argument refers to undefined this argument");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(8, node0, 15, 4095);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T7P^x#i(//)DQpH5y;");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      Node node1 = new Node(7, node0, 1818, (-1725));
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("comgoogle.aascrit.jcomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(5, node0, (-367), 101);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 5
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node1 = Node.newString(4, "b37YF@{LJf", 4, (-795));
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // RETURN b37YF@{LJf does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("B7Wv8OOh`5G4O7lb`", "B7Wv8OOh`5G4O7lb`", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.SYN_BLOCK;
      controlFlowGraph0.connect(node0, controlFlowGraph_Branch0, node0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, flowScope0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = new Node(37, node0, 50, 42);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("7A]t\"", "7A]t\"", "comgoogle.aascrit.jcomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("comgoogle.aascrit.jcomp.TypeInference$1");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      node0.setType(86);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node0, linkedFlowScope0);
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.extra.trailing.comma");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, flowScope0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "com.google.javascrit.jscomp.TypeInference$1");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b37YF@{LJf");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      node0.setType(31);
      FlowScope flowScope0 = typeInference0.flowThrough(node0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("b37YF@{LJf", "b37YF@{LJf", "cfm.google.javascrit.j+comp.TypeInference$8");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = compilerInput0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      node0.setType(101);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node0, flowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }
}
