/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 15:47:13 GMT 2021
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.ShapeList;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShapeList_ESTest extends ShapeList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      Point point0 = new Point(37, (-3374));
      Line2D.Float line2D_Float0 = new Line2D.Float(point0, point0);
      // Undeclared exception!
//      try { 
        shapeList0.setShape(Integer.MAX_VALUE, line2D_Float0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.util.AbstractObjectList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      // Undeclared exception!
//      try { 
        shapeList0.setShape((-372), rectangle2D0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires index >= 0.
//         //
//         verifyException("org.jfree.chart.util.AbstractObjectList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      shapeList0.set(1, "%fb=ER51S^Ws6@");
      // Undeclared exception!
//      try { 
        shapeList0.getShape(1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.awt.Shape
//         //
//         verifyException("org.jfree.chart.util.ShapeList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      ShapeList shapeList1 = new ShapeList();
      shapeList0.set(7455, shapeList1);
      // Undeclared exception!
      shapeList0.equals(shapeList1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      boolean boolean0 = shapeList0.equals(shapeList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      boolean boolean0 = shapeList0.equals(rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-1110.562966832), (-1288.21), (-1110.562966832), (double) 8);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      Shape shape0 = affineTransform0.createTransformedShape(rectangle0);
      shapeList0.setShape(0, shape0);
      shapeList0.getShape(0);
      assertEquals(1, shapeList0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      Shape shape0 = shapeList0.getShape(0);
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      shapeList0.hashCode();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      Object object0 = shapeList0.clone();
      boolean boolean0 = shapeList0.equals(object0);
      assertTrue(boolean0);
  }
}
