/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 12:24:54 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2175.62F;
      floatArray0[1] = Float.NEGATIVE_INFINITY;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3.4028235E38F);
      floatArray0[6] = 1503.4093F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2175.62F, Float.NEGATIVE_INFINITY, 0.0F, 0.0F, 0.0F, (-3.4028235E38F), 1503.4093F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-3.4028235E38F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
//      try { 
        MathArrays.normalizeArray(doubleArray0, Float.NEGATIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer((-967));
      assertEquals((-967), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 75;
      Integer integer1 = new Integer(75);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(75, (int)integer1);
      assertNotNull(integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Pair<Integer, Object> pair0 = (Pair<Integer, Object>) mock(Pair.class, new ViolatedAssumptionAnswer());
      Field<Pair<Integer, Object>> field0 = (Field<Pair<Integer, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, int0, 2146511909);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2750.519217;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = (-1631.4916907);
      doubleArray0[3] = (-2928.71291);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {2750.519217, -0.0, (-1631.4916907), (-2928.71291)}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(9.007199254740992E15, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2.4774474641513177E19, -0.0, (-1.469517074058916E19), (-2.6379500740302324E19)}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1.525600696165658E39, double1, 0.01);
      assertArrayEquals(new double[] {2.4774474641513177E19, -0.0, (-1.469517074058916E19), (-2.6379500740302324E19)}, doubleArray0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3.905893874858427E19, double2, 0.01);
      assertArrayEquals(new double[] {2.4774474641513177E19, -0.0, (-1.469517074058916E19), (-2.6379500740302324E19)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-676);
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new int[] {(-676)}, intArray0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double4 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double4, 0.01);
      assertArrayEquals(new double[] {2.4774474641513177E19, -0.0, (-1.469517074058916E19), (-2.6379500740302324E19)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[9][6];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray0;
      doubleArray2[8] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-635.42410784);
      doubleArray1[1] = 143.176978788153;
      doubleArray1[2] = 2690.45693;
      doubleArray1[3] = (-5314.76);
//      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
//      try { 
        MathArrays.normalizeArray(doubleArray0, 114.6948);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, -\u221E at index 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = (-3606);
      intArray0[2] = (-1284);
      intArray0[0] = (-2146360486);
      intArray0[4] = 287;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1284);
      intArray1[1] = 2;
      intArray1[2] = (-3606);
      intArray1[3] = 287;
      intArray1[4] = (-2146360486);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-2241104), int0);
      assertArrayEquals(new int[] {(-2146360486), (-3606), (-1284), 0, 287}, intArray0);
      assertArrayEquals(new int[] {(-1284), 2, (-3606), 287, (-2146360486)}, intArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-3606);
      doubleArray0[1] = (double) 287;
      doubleArray0[2] = (double) 287;
      doubleArray0[3] = (double) (-2146360486);
      doubleArray0[4] = (double) (-2146360486);
      doubleArray0[5] = (double) (-2241104);
      doubleArray0[6] = (double) (-3606);
      doubleArray0[7] = (double) (-1284);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-3606.0), 287.0, 287.0, (-2.146360486E9), (-2.146360486E9), (-2241104.0), (-3606.0), (-1284.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.4342944622039795;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-1605.5002539701395);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (-1628.87142449329);
      doubleArray0[5] = (-0.2499999997677497);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.4342944622039795, 1.34217729E8, (-1605.5002539701395), 3.834E-20, (-1628.87142449329), (-0.2499999997677497)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.868588924407959, 2.68435458E8, (-3211.000507940279), 7.668E-20, (-3257.74284898658), (-0.4999999995354994)}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.4342944622039795, 1.34217729E8, (-1605.5002539701395), 3.834E-20, (-1628.87142449329), (-0.2499999997677497)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.868588924407959, 2.68435458E8, (-3211.000507940279), 7.668E-20, (-3257.74284898658), (-0.4999999995354994)}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1040.9320272765);
      doubleArray2[2] = 3.834E-20;
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1040.9320272765, double1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1040.9320272765), 3.834E-20}, doubleArray2, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[2] = "";
      stringArray0[3] = "@qPJW7&<";
      stringArray0[4] = "p\u0006Z31";
      stringArray0[5] = "wki9Awe]t";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 275.228F;
      floatArray0[1] = (-1.4E-45F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {275.228F, (-1.4E-45F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1.4E-45F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1.4E-45F);
      doubleArray0[3] = (double) 275.228F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 275.228F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(389.2311658563514, double0, 0.01);
      assertArrayEquals(new double[] {(-1.401298464324817E-45), 0.0, (-1.401298464324817E-45), 275.2279968261719, 0.0, 275.2279968261719}, doubleArray0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4.9E-324);
      doubleArray0[1] = (-4.9E-324);
      doubleArray0[2] = (-4.9E-324);
      doubleArray0[3] = (-4.9E-324);
      double[] doubleArray1 = MathArrays.scale((-4.9E-324), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4.9E-324), (-4.9E-324), (-4.9E-324), (-4.9E-324)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-4.9E-324), (-4.9E-324), (-4.9E-324), (-4.9E-324)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4.9E-324), (-4.9E-324), (-4.9E-324), (-4.9E-324)}, doubleArray2, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1.0E-323, double0, 0.01);
      assertArrayEquals(new double[] {(-4.9E-324), (-4.9E-324), (-4.9E-324), (-4.9E-324)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4.9E-324), (-4.9E-324), (-4.9E-324), (-4.9E-324)}, doubleArray2, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-4.9E-324), (-4.9E-324), (-4.9E-324), (-4.9E-324)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1236.5444F;
      floatArray0[2] = (-803.8044F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 1236.5444F, (-803.8044F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-653.0F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-653.0F)}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-653.0F)}, floatArray0, 0.01F);
      
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, (-653.0F));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 3000;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 3000);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-96.122);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {(-96.122), Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[2][3];
      long[] longArray1 = new long[9];
      longArray1[0] = 6722166367014452318L;
      longArray1[1] = (-79L);
      longArray1[2] = 9154082963658192752L;
      longArray1[3] = 3093L;
      longArray1[4] = 0L;
      longArray1[5] = 2125L;
      longArray1[6] = 2147483647L;
      longArray1[7] = 1L;
      longArray1[8] = 710L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1L;
      longArray0[1] = longArray2;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -79 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 947);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-123.6617984);
      doubleArray0[2] = (-854.8076782226562);
      doubleArray0[3] = 1413.531410177;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, (-123.6617984), (-854.8076782226562), 1413.531410177}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, (-9.482386701311999E-18), 15292.240383522241, 211414.10955028437, 381096.4941936564, (-2416595.005656397), 1998071.0475569782}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3165814.8475026875, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, (-123.6617984), (-854.8076782226562), 1413.531410177}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, (-9.482386701311999E-18), 15292.240383522241, 211414.10955028437, 381096.4941936564, (-2416595.005656397), 1998071.0475569782}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {Float.NaN, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1287.714F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1287.714F;
      floatArray1[1] = Float.NaN;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {Float.NaN, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1287.714F, Float.NaN}, floatArray1, 0.01F);
      
      boolean boolean2 = MathArrays.equals(floatArray1, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {1287.714F, Float.NaN}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-683.162511084);
      doubleArray0[1] = (-2208.93935667621);
      doubleArray0[2] = (-1006.33);
      doubleArray0[3] = 791.772808;
      doubleArray0[4] = (-1922.493050651591);
      doubleArray0[5] = (-1322.8421640182);
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 6.52E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.4579163213298629E19, double0, 0.01);
      assertArrayEquals(new double[] {(-683.162511084), (-2208.93935667621), (-1006.33), 791.772808, (-1922.493050651591), (-1322.8421640182), 1.304E19, 6.52E18}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long[] longArray0 = new long[2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      long[][] longArray1 = new long[7][4];
      longArray1[0] = longArray0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0217439756338078E-10;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 2.17333333333333325E18;
      doubleArray0[3] = 3382.3;
      doubleArray0[4] = 4.3466666668008858E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4.8597210712195922E18, double0, 0.01);
      assertArrayEquals(new double[] {2.0217439756338078E-10, 1.34217729E8, 2.17333333333333325E18, 3382.3, 4.3466666668008858E18}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long[] longArray0 = new long[2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      long[][] longArray1 = new long[7][4];
      longArray1[5] = longArray0;
      longArray1[2] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(7, longArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1290.2180735949453);
      doubleArray0[1] = 1751.237553812357;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1290.2180735949453));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1290.2180735949453), 1751.237553812357}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3610.829365921837, (-4901.047439516782)}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1.3241655637677416E7), double0, 0.01);
      assertArrayEquals(new double[] {(-1290.2180735949453), 1751.237553812357}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3610.829365921837, (-4901.047439516782)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 833.418;
      doubleArray0[1] = 0.49999999999999994;
      doubleArray0[2] = 0.9305076599121094;
      doubleArray0[3] = 0.9375;
      doubleArray0[4] = (-1556.7045665);
      doubleArray0[5] = 0.167;
      doubleArray0[6] = 3240.3673353;
      doubleArray0[7] = (-0.25);
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {833.418, 0.49999999999999994, 0.9305076599121094, 0.9375, (-1556.7045665), 0.167, 3240.3673353, (-0.25)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2720;
      intArray0[1] = 1;
      intArray0[2] = 134217729;
      intArray0[3] = 0;
      intArray0[4] = (-2763);
      intArray0[5] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2720, 1, 134217729, 0, (-2763), 1}, intArray0);
      
      Field<FieldElement<FieldElement<String>>> field0 = (Field<FieldElement<FieldElement<String>>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-133), 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-968);
      doubleArray1[1] = (double) (-968);
      doubleArray1[2] = 145373.21547639908;
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-5114.127189358);
      doubleArray0[0] = (-5114.127189358);
      double double1 = 1314.68;
      doubleArray0[1] = 1314.68;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double2 = 8.0E298;
      doubleArray1[0] = 8.0E298;
      doubleArray1[1] = (-5114.127189358);
      doubleArray1[2] = (-5114.127189358);
      doubleArray1[3] = 1314.68;
      doubleArray1[4] = 1314.68;
      doubleArray1[5] = (-5114.127189358);
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3394.92);
      doubleArray0[1] = (-20.0);
      double double0 = MathArrays.linearCombination(2159.43876392907, (-3394.92), (-0.25), (-4.068233003401932E-9), (-20.0), 3796.463075735034, (-1045.34), (-1.0));
      assertEquals((-7406005.769952778), double0, 0.01);
      
      MathArrays.scaleInPlace((-1585.6746702), doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {5383238.651355384, 31713.493404, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1331);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(1331, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {5383238.651355384, 31713.493404, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(1331, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {5383238.651355384, 31713.493404, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((-1045.34), 2444.70742412571, 0.0, (-3033.28846711996), (-1450.0), (-95.75336), 216.63422, 1000.76);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2199909.2247283696), double1, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1331, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {5383238.651355384, 31713.493404, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2374.4363F);
      floatArray0[3] = (-1.4E-45F);
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2374.4363F), (-1.4E-45F)}, floatArray0, 0.01F);
      
      long[][] longArray0 = new long[6][9];
      long[] longArray1 = new long[4];
      longArray1[0] = 1425L;
      longArray1[1] = 4368491638549381120L;
      longArray1[2] = (-3512299194304650054L);
      longArray1[3] = 128L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1425L;
      longArray2[1] = 2147483648L;
      longArray2[2] = (-3512299194304650054L);
      longArray2[3] = 3677L;
      longArray2[4] = (-3512299194304650054L);
      longArray2[5] = 4368491638549381120L;
      longArray2[6] = 2167L;
      longArray2[7] = 128L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-3512299194304650054L);
      longArray3[1] = 3677L;
      longArray3[2] = 128L;
      longArray3[3] = 128L;
      longArray3[4] = (-3512299194304650054L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 2147483648L;
      longArray4[1] = 2167L;
      longArray4[2] = 2147483648L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = 2167L;
      longArray5[1] = (-3512299194304650054L);
      longArray5[2] = 128L;
      longArray5[3] = 4368491638549381120L;
      longArray5[4] = (-1174L);
      longArray5[5] = 4368491638549381120L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 597L;
      longArray6[1] = 128L;
      longArray6[2] = (-1L);
      longArray6[3] = (-3512299194304650054L);
      longArray6[4] = 3677L;
      longArray0[5] = longArray6;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 8 while others have length 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 601;
      floatArray0[1] = (float) 601;
      floatArray0[2] = (float) 601;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) 601;
      floatArray0[5] = (float) 601;
      floatArray0[6] = (float) 601;
      floatArray0[7] = (float) 601;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1984.3055F);
      floatArray1[1] = (float) 601;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(8, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {601.0F, 601.0F, 601.0F, (-1.0F), 601.0F, 601.0F, 601.0F, 601.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1984.3055F), 601.0F}, floatArray1, 0.01F);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray1, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-1984.3055F), 601.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-3031.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-3179.7976F);
      floatArray0[3] = 1.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-3031.0F), 0.0F, 0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathArrays.linearCombination(186.86428201, 2191.14, 2213.02992, Double.NaN, 949.323061, (-1.0129027912496858E-9));
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 949.323061;
      doubleArray0[1] = (-1.0129027912496858E-9);
      doubleArray0[2] = 2213.02992;
      doubleArray0[3] = 2191.14;
      doubleArray0[4] = (-1.0129027912496858E-9);
      doubleArray0[5] = 2191.14;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {949.323061, (-1.0129027912496858E-9), 2213.02992, 2191.14, (-1.0129027912496858E-9), 2191.14}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1.0966228259332291);
      doubleArray0[0] = (-1.0966228259332291);
      double double1 = 1.304E19;
      doubleArray0[1] = 1.304E19;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0966228259332291), 1.304E19}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0966228259332291);
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = (-1.0966228259332291);
      doubleArray1[3] = 1.304E19;
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, doubleArray1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer((-967));
      assertEquals((-967), (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-967);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-967);
      doubleArray1[1] = (double) (-967);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-967.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-967.0), (-967.0)}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-967.0), (-967.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-967.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-967.0), (-967.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {935089.0, 935089.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[3];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = null;
      double double0 = (-1471.511093676208);
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, (-1471.511093676208));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = new Integer((-967));
      assertEquals((-967), (int)integer0);
      assertNotNull(integer0);
      
      double double0 = MathArrays.linearCombination((double) (-967), 0.0, 0.0, 1329.8, 2163.0, 0.32849337156565994);
      assertEquals(710.5311626965224, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = 1.0F;
      floatArray0[2] = (-580.4024F);
      floatArray1[3] = (-580.4024F);
      floatArray1[4] = (-1130.4F);
      floatArray1[5] = (-580.4024F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F, 1.0F, (-580.4024F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, (-580.4024F), (-1130.4F), (-580.4024F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-604.178471);
      doubleArray2[1] = (-1256.5104195);
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = null;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[1];
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Object>> field0 = (Field<Pair<Integer, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<Integer, Object>[][] pairArray0 = MathArrays.buildArray(field0, 300, (-2535));
      assertEquals(300, pairArray0.length);
      assertNotNull(pairArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2535);
      doubleArray0[1] = (double) (-2535);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2535);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 267);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(267, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2535.0), (-2535.0), 0.0, (-2535.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1237.0F);
      doubleArray0[1] = (-1237.0);
      doubleArray0[2] = (double) (-1237.0F);
      doubleArray0[3] = (-695.0604);
      doubleArray0[4] = (double) (-1237.0F);
      doubleArray0[5] = (double) (-1237.0F);
      doubleArray0[7] = (double) (-1237.0F);
      doubleArray0[8] = (double) (-1237.0F);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (-695.0604);
      doubleArray1[2] = (-1237.0);
      doubleArray1[3] = (double) (-1237.0F);
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long[] longArray0 = new long[3];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2057.6491;
      doubleArray2[1] = 968839.0;
      doubleArray2[2] = (-1.3371335764810035);
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.4342944622039795;
      doubleArray2[5] = (-132.9443702431);
      doubleArray2[6] = (-1787.0);
      doubleArray2[7] = 1.34217729E8;
      doubleArray2[8] = (-1414.87);
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2057.6491, 968839.0, (-1.3371335764810035), 1.0, 0.4342944622039795, (-132.9443702431), (-1787.0), 1.34217729E8, (-1414.87)}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.scale((-132.9443702431), doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3149.93);
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-3149.93), 0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {3149.93, -0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 0.0, (-1.0), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(1.342177290417318E8, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[9][6];
      long[] longArray1 = new long[9];
      longArray1[0] = (-2378L);
      longArray1[1] = 4503599627370495L;
      longArray1[2] = (-1L);
      longArray1[3] = 1798L;
      longArray1[4] = (-2704L);
      longArray1[5] = 2051L;
      longArray1[6] = (-1L);
      longArray1[7] = (-222L);
      longArray1[8] = (-1064L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = (-2378L);
      longArray2[2] = (-222L);
      longArray2[3] = (-297L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1798L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1798L;
      longArray4[1] = (-297L);
      longArray4[2] = (-2704L);
      longArray4[3] = (-222L);
      longArray4[4] = 2051L;
      longArray4[5] = (-1L);
      longArray4[6] = (-1L);
      longArray4[7] = (-297L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (-2704L);
      longArray5[1] = 1798L;
      longArray5[2] = (-1L);
      longArray5[3] = (-2100L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = (-2378L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = (-297L);
      longArray7[1] = (-1L);
      longArray7[2] = (-2100L);
      longArray7[3] = (-2378L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[5];
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray3));
      
      longArray8[0] = (-1L);
      longArray8[1] = (-2378L);
      longArray8[2] = (-2704L);
      longArray8[3] = (-2704L);
      longArray8[4] = (-222L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[2];
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray8));
      
      longArray9[0] = (-222L);
      longArray9[1] = 2051L;
      longArray0[8] = longArray9;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 4 while others have length 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Integer integer0 = Integer.valueOf(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = 1.304E19;
      float[] floatArray0 = new float[1];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double double1 = (-3.141592653589793);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = 1.304E19;
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.304E19;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 1.304E19, (-2295.12570127904));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2.9928439144678683E22), double1, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      long[] longArray0 = new long[0];
      long[][] longArray1 = new long[6][3];
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(6, longArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.700416E38}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.700416E38}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.700416E38}, doubleArray2, 0.01);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[1] = "2xATv]O25ANhfSK";
      stringArray0[2] = "BiA}";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[4] = "cannot raise an integral value to a negative power ({0}^{1})";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer((-967));
      assertEquals((-967), (int)integer0);
      assertNotNull(integer0);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(2096.1294144, 2096.1294144, (-538.0463743989845), (-538.0463743989845), 2096.1294144, 260.20586, (-538.0463743989845), 2116.40581);
      assertEquals(4089953.107034581, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2637.05434287432;
      doubleArray1[1] = 378.616988827;
      doubleArray1[2] = 2116.40581;
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long[] longArray0 = new long[3];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace(495.7219, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1924.36293221222;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 2428.93518246749;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly decreasing (0 <= 13,040,000,000,000,000,000)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = new Integer((-967));
      assertEquals((-967), (int)integer0);
      assertNotNull(integer0);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.304E19;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(1.304E19, 0.0, (double) 67, 0.0, (double) 67, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 3986);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.linearCombination(1.304E19, 1.304E19, 4.438921624363781E-8, 367.20728716033, 1.304E19, 1.304E19, (-1688.68098792), 3.834E-20);
      assertEquals(3.400832E38, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double3 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double4 = MathArrays.linearCombination(1095.19328, 0.0, (-2141.9), 3.0);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals((-6425.700000000001), double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-783.3837);
      double double0 = 3.834E-20;
      double double1 = (-708.0);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = (-783.3837);
      doubleArray1[3] = 1050381.599715312;
      doubleArray1[4] = (-708.0);
      doubleArray1[5] = (-783.3837);
      doubleArray1[6] = (-783.3837);
      double double2 = (-1.0);
      doubleArray1[7] = (-1.0);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.8441344853345161E19, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2145265172);
      intArray0[1] = (-5293);
      intArray0[2] = (-1284);
      intArray0[3] = (-1448);
      intArray0[4] = 2146953023;
      intArray0[5] = (-291);
      intArray0[6] = (-1383);
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1284);
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      long[][] longArray0 = new long[1][0];
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace(Double.NaN, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(0.0F, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.304E19, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 0.0}, doubleArray1, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(1311);
      assertEquals(1311, (int)integer0);
      assertNotNull(integer0);
      
      Pair<Object, Object> pair0 = new Pair<Object, Object>((Object) null, integer0);
      assertNotNull(pair0);
      
      Pair<Integer, Object> pair1 = new Pair<Integer, Object>((Integer) null, pair0);
      assertNotNull(pair1);
      
      Field<Pair<Integer, Object>> field0 = (Field<Pair<Integer, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      int int0 = 3461;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 3461, 3461);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double double0 = MathArrays.linearCombination(0.0, 3826.95367, 1.44888888888888883E18, 1.44888888888888883E18, 321.75894743577794, 2.2860509143963117E-8);
      assertEquals(2.0992790123456787E36, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 245;
      intArray0[1] = 1073741824;
      intArray0[2] = (-1);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {245, 1073741824, (-1)}, intArray0);
      
      double[] doubleArray0 = new double[0];
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3149.93);
      Integer integer0 = Integer.getInteger("", (-1646));
      assertEquals((-1646), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1646));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1646), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1646));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals((-1646), (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-1646));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals((-1646), (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(11);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(11, (int)integer4);
      assertNotNull(integer4);
      
      Integer integer5 = Integer.getInteger("|`GB7`@[V)", 551);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals(551, (int)integer5);
      assertNotNull(integer5);
      
      Integer integer6 = new Integer(134217729);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals(134217729, (int)integer6);
      assertNotNull(integer6);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1024);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-1024.0F)}, floatArray0, 0.01F);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {(-1024.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 551;
      intArray0[1] = (-1024);
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-895);
      intArray1[1] = 134217729;
      intArray1[2] = 134217729;
      intArray1[3] = (-1646);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(134220199, int0);
      assertArrayEquals(new int[] {551, (-1024)}, intArray0);
      assertArrayEquals(new int[] {(-895), 134217729, 134217729, (-1646)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      double double0 = new Integer(67);
      assertEquals(67, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(1.304E19, 1058.612247305967, (double) 67, 1058.612247305967, (double) 67, 67);
      assertEquals(1.380430370486981E22, double1, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Object>[] fieldElementArray0 = MathArrays.buildArray(field0, 67);
      assertEquals(67, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = 1.304E19;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 20.654705031269454;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.304E19);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {20.654705031269454, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10.327352515634727, 6.52E18, 6.52E18}, doubleArray1, 0.01);
      
//      try { 
        MathArrays.convolve((double[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = new Integer((-2080));
      assertEquals((-2080), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer1 = new Integer((-239));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-239), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      integerArray0[4] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, integerArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[20];
      floatArray0[0] = (float) (-2080);
      floatArray0[2] = 3649.8F;
      floatArray0[3] = (float) 75;
      floatArray0[4] = (float) (int)integerArray0[4];
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
//      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[0][7];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = new Integer((-967));
      assertEquals((-967), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(75);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(75, (int)integer1);
      assertNotNull(integer1);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-783.3837);
      doubleArray0[1] = 2132.2473;
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = Integer.getInteger("$VALUES", (-1646));
      assertEquals((-1646), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("|`GB7`@[V)", integer0);
      assertEquals((-1646), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[0] = integer1;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[1] = integer2;
      Integer integer3 = new Integer((-1024));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-1024), (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = Integer.getInteger("", (-1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals((-1), (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer((-3964));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals((-3964), (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[4] = integer5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, integerArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (int)integerArray0[2];
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-1024.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      long[] longArray0 = new long[0];
      long[][] longArray1 = new long[2][5];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(2, longArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      long[] longArray0 = new long[0];
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(6, longArray1.length);
      
      MathArrays.checkRectangular(longArray1);
      assertEquals(6, longArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = new Integer((-967));
      assertEquals((-967), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-967));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-967), (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      double double0 = 308.9558032569317;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 308.9558032569317;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {308.9558032569317}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = new Integer((-967));
      assertEquals((-967), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 75;
      Integer integer1 = new Integer(75);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(75, (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 3826.95367, 0.0, 1.304E19, 0.0, 0.0, 0.0, 367.20728716033);
      assertEquals(0.0, double0, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 367.20728716033;
      doubleArray0[2] = 1.304E19;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 367.20728716033, 1.304E19, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1846.1120496016;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 3826.95367;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.0;
      doubleArray0[2] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (0 <= 13,040,000,000,000,000,000)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer((-967));
      assertEquals((-967), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(75);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(75, (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.34217729E8, 3826.95367, 23355.6, 1.34217729E8);
      assertEquals(3.648380622008015E12, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 3.648380622008015E12;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 3826.95367;
      doubleArray0[5] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 3.648380622008015E12, 1.34217729E8, 1.34217729E8, 3826.95367, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, 1.3310681163043592E25, 1.801439877791744E16, 1.801439877791744E16, 1.4645574392326469E7, 1.801439877791744E16}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3477;
      int[] intArray1 = MathArrays.copyOf(intArray0, 3477);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(3477, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3477}, intArray0);
      
      int int0 = MathArrays.distance1(intArray1, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(3477, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {3477}, intArray0);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.3310681163039943E25, double1, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 3.648380622008015E12, 1.34217729E8, 1.34217729E8, 3826.95367, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, 1.3310681163043592E25, 1.801439877791744E16, 1.801439877791744E16, 1.4645574392326469E7, 1.801439877791744E16}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 3464);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(3464, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.34217729E8, 3.648380622008015E12, 1.34217729E8, 1.34217729E8, 3826.95367, 1.34217729E8}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 3477;
      floatArray0[2] = (float) 3464;
      floatArray0[3] = (float) 3477;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 3477.0F, 3464.0F, 3477.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("CANNOT_RETRIEVE_AT_NEGATIVE_INDEX");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.CANNOT_RETRIEVE_AT_NEGATIVE_INDEX
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1120659.8901461898;
      doubleArray1[1] = (-17.421968314734187);
      doubleArray1[2] = (-17.421968314734187);
      doubleArray1[3] = (-17.421968314734187);
      doubleArray1[4] = (-17.421968314734187);
      doubleArray1[5] = (-17.421968314734187);
      doubleArray1[6] = (-17.421968314734187);
      doubleArray1[7] = 75.0;
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[1] = 1058.612247305967;
      int[] intArray0 = new int[17];
      intArray0[0] = 1;
      intArray0[1] = 206;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(17, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(17, intArray0.length);
      assertEquals(0, int0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 206;
      doubleArray1[6] = (-3.7999795083850525E-8);
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 20 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.304E19, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 0.0}, doubleArray1, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Object>> field0 = (Field<Pair<Integer, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Pair<Integer, Object>[][] pairArray0 = MathArrays.buildArray(field0, 3461, 3461);
      assertEquals(3461, pairArray0.length);
      assertNotNull(pairArray0);
      
      long[][] longArray0 = new long[7][1];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 3461;
      longArray1[1] = 0L;
      longArray1[2] = (long) 3461;
      longArray1[3] = (long) 3461;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 3461;
      longArray3[1] = 0L;
      longArray3[2] = (long) 3461;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (long) 3461;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (long) 3461;
      longArray5[1] = (long) 3461;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray6[2] = (long) 3461;
      longArray6[3] = (long) 3461;
      longArray6[4] = (long) 3461;
      longArray6[5] = (long) 3461;
      longArray6[6] = (long) 3461;
      longArray6[7] = (long) 3461;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = 0L;
      longArray7[1] = (long) 3461;
      longArray7[2] = (long) 3461;
      longArray7[3] = (long) 3461;
      longArray7[4] = (long) 3461;
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 0 while others have length 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.304E19, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(166.8388709507469, 3826.95367, 0.9, 1.304E19, (-0.2499999997677497), 3339.1);
      assertEquals(1.1736000000000637E19, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 3826.95367, 0.0, 1.304E19, 0.0, 0.0, 0.0, 367.20728716033);
      assertEquals(0.0, double0, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 367.20728716033;
      doubleArray0[2] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1.304E19, 0.0, 367.20728716033}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3826.95367;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 367.20728716033;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 3826.95367;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 367.20728716033;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1.304E19, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19, 0.0, 367.20728716033}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3826.95367, 0.0, 0.0, 367.20728716033, 0.0, 3826.95367, 0.0, 0.0, 367.20728716033}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2501.861F;
      floatArray0[1] = 2907.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2501.861F, 2907.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 13;
      intArray0[1] = 726;
      intArray0[2] = (-3636);
      intArray0[3] = 27;
      intArray0[4] = (-1853);
      intArray0[5] = 192;
      intArray0[6] = 605;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {13, 726, (-3636), 27, (-1853), 192, 605}, intArray0);
      assertArrayEquals(new int[] {13, 726, (-3636), 27, (-1853), 192, 605}, intArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.700416E38, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(1056.4856, (-2643.5906), (-1.0453143411033588E12), 1.700416E38);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.777469230641609E50), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 3478;
      intArray0[1] = 97;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 1865;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {3478, 97, 2, 2, 1865}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-416.901);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 3478;
      doubleArray0[3] = (double) 97;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 32.52423;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 1865;
      doubleArray1[3] = (double) 1865;
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = (double) 97;
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(6, longArray1.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 0.0;
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(6, longArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.700416E38}, doubleArray1, 0.01);
      
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.700416E38}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(2651.0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.700416E38}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4.507802816E41}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.700416E38}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 3.400832E38}, doubleArray3, 0.01);
      
      double[][] doubleArray4 = new double[4][7];
      doubleArray4[0] = doubleArray2;
      doubleArray4[1] = doubleArray0;
      doubleArray4[2] = doubleArray2;
      doubleArray4[3] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      long[][] longArray0 = new long[8][7];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 0;
      longArray4[2] = (long) 0;
      longArray4[3] = (long) 0;
      longArray4[4] = (long) 0;
      longArray4[5] = (long) 0;
      longArray4[6] = (long) 0;
      longArray4[7] = (long) 0;
      longArray4[8] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (long) 0;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray0[6] = longArray7;
      long[] longArray8 = new long[3];
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray7));
      
      longArray8[0] = (long) 0;
      longArray8[1] = (long) 0;
      longArray8[2] = (long) 0;
      longArray0[7] = longArray8;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 2 while others have length 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = 2132.2473;
      double double1 = 0.0;
      double double2 = 1167.78;
      double double3 = (-1064.38);
      double double4 = 628.543162219423;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-164.268099452736);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, (-164.268099452736), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.006124895208261348), 1.0061248952082613, -0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 3484);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3484, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.0, (-164.268099452736), 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray3 = MathArrays.scale((-164.268099452736), doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertEquals(3484, doubleArray2.length);
      assertEquals(3484, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1.0, (-164.268099452736), 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination((double) 3484, 3.141592653589793, 308.9558032569317, 1.0, 1.0, 1.34217729E8, (double) 0, 1.0);
      assertEquals(1.3422898326460835E8, double0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination((double) 0.0F, 1056.4856, 0.0, (double) 0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3149.93);
      Integer integer0 = new Integer(3452);
      assertEquals(3452, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(3452);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3452, (int)integer1);
      assertNotNull(integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[2];
      int int0 = 57;
      Integer integer2 = new Integer(57);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(57, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (int)integerArray0[1];
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) 57;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {3452.0F, 57.0F, 57.0F, 57.0F}, floatArray0, 0.01F);
      
      long[][] longArray0 = new long[6][7];
      long[] longArray1 = new long[7];
      longArray1[0] = (long) 57;
      longArray1[1] = (long) 3452;
      longArray1[2] = (long) 57;
      longArray1[3] = (long) (int)integerArray0[1];
      longArray1[4] = (long) 3452;
      longArray1[5] = (long) (int)integerArray0[1];
      longArray1[6] = 596L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) int0;
      longArray2[1] = 596L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) int0;
      longArray3[1] = (long) 3452;
      longArray3[2] = 596L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (long) int0;
      longArray4[1] = (long) 3452;
      longArray4[2] = 596L;
      longArray4[3] = (long) 57;
      longArray4[4] = (long) 3452;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 596L;
      longArray5[1] = 596L;
      longArray5[2] = (long) int0;
      longArray5[3] = (long) (int)integerArray0[1];
      longArray5[4] = (long) int0;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = (long) int0;
      longArray6[1] = (long) int0;
      longArray6[2] = (long) 3452;
      longArray6[3] = 596L;
      longArray6[4] = 4503599627370496L;
      longArray6[5] = (long) int0;
      longArray6[6] = (long) 3452;
      longArray0[5] = longArray6;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 1.304E19, 0.0, 0.0, 0.0, 367.20728716033);
      assertEquals(0.0, double0, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 367.20728716033;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 367.20728716033, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 367.20728716033, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination(2.0, 0.0, 2.17333333333333325E18, 2.0, 3.834E-20, 1.184154459111628E-8);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(4.3466666666666665E18, double2, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field1 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field1).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field1, (-2379));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 206;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 206;
      intArray1[1] = 206;
      intArray1[2] = 1;
      intArray1[3] = 206;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(205.0, double0, 0.01);
      assertArrayEquals(new int[] {1, 206}, intArray0);
      assertArrayEquals(new int[] {206, 206, 1, 206}, intArray1);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(205, int0);
      assertArrayEquals(new int[] {1, 206}, intArray0);
      assertArrayEquals(new int[] {206, 206, 1, 206}, intArray1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-783.3837);
      doubleArray0[1] = 2132.2473;
      doubleArray0[2] = 20.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-783.3837));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-783.3837), 2132.2473, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {448.3207979419497, (-1220.2587454213917), (-11.445752520557926)}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-783.3837), 2132.2473, 20.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(3.141592653589793, 0.0, 20.0, 1.304E19, 20.0, 2132.2473);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.6080000000000003E20, double1, 0.01);
      
      Integer integer0 = new Integer((-163));
      assertEquals((-163), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-783.3837);
      doubleArray0[1] = 2132.2473;
      doubleArray0[0] = 20.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-783.3837));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {20.0, 2132.2473, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-7.279681103560915), (-776.104018896439), -0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {20.0, 2132.2473, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(3.141592653589793, 0.0, 20.0, 1.304E19, 0.0, 2132.2473);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.608E20, double1, 0.01);
      
      MathArrays.scaleInPlace(1167.78, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {23355.6, 2489995.751994, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {23355.6, 2489995.751994, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {46711.2, 4979991.503988, 0.0}, doubleArray2, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, 3.141592653589793, 2132.2473, (-1064.38), 2489995.751994, 628.543162219423, 1.304E19, 0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.5628002824900649E9, double2, 0.01);
      
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double double4 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0.0, double4, 0.01);
      assertArrayEquals(new double[] {23355.6, 2489995.751994, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {46711.2, 4979991.503988, 0.0}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double5 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(2490771.856012896, double5, 0.01);
      assertArrayEquals(new double[] {23355.6, 2489995.751994, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-7.279681103560915), (-776.104018896439), -0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(3.834E-20, 3.834E-20, 4.983191803254889E-7, 4.983191803254889E-7, (-39.06745028101921), 6700732.955790761);
      assertEquals((-2.6178055159674245E8), double0, 0.01);
      
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2379));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.834E-20, 20.0, 3.141592653589793, 3.834E-20, 3.834E-20, 3.834E-20, 155.2893067988, 0.0);
      assertEquals(8.872486623386326E-19, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2057;
      intArray0[1] = 2057;
      intArray0[2] = 2057;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2057, 2057, 2057}, intArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long[][] longArrayArray0 = null;
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-783.3837);
      doubleArray0[1] = 2132.2473;
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = Integer.getInteger("$VALUES", (-1646));
      assertEquals((-1646), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1024));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1024), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("", (-1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integerArray0[0];
      Integer integer4 = new Integer(48);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(48, (int)integer4);
      assertNotNull(integer4);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, integerArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 48;
      floatArray0[1] = (float) (int)integerArray0[0];
      floatArray0[2] = (float) 48;
      floatArray0[3] = (float) (-1024);
      floatArray0[4] = (-546.2624F);
      floatArray0[5] = (float) (-3964);
      floatArray0[6] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {48.0F, (-1646.0F), 48.0F, (-1024.0F), (-546.2624F), (-3964.0F), 0.0F}, floatArray0, 0.01F);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {48.0F, (-1646.0F), 48.0F, (-1024.0F), (-546.2624F), (-3964.0F), 0.0F}, floatArray0, 0.01F);
      
      MathArrays.scaleInPlace((-1646.0F), doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1289449.5702, (-3509679.0558), -0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-783.3837);
      doubleArray1[1] = (double) (int)integerArray0[3];
      doubleArray1[2] = (-783.3837);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1984.1108947968055, double0, 0.01);
      assertArrayEquals(new double[] {(-783.3837), (-1646.0), (-783.3837)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.getInteger("", (-1024));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1024), (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(1);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(1, (int)integer3);
      assertNotNull(integer3);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) (-1024);
      floatArray0[4] = (float) (-1);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-1);
      floatArray1[1] = (float) int0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(6, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 1.0F, (-1024.0F), (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace(1.633123935319537E16, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[0];
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 2115.27292280929;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 3.834E-20;
      doubleArray2[4] = (-1236.0);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 1.633123935319537E16;
      doubleArray2[7] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2115.27292280929, 0.0, 3.834E-20, (-1236.0), 0.0, 1.633123935319537E16, 0.0, 0.0}, doubleArray2, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Double[] doubleArray3 = new Double[4];
      doubleArray3[0] = (Double) 0.0;
      doubleArray3[1] = (Double) 0.0;
      doubleArray3[2] = (Double) 1.633123935319537E16;
      doubleArray3[3] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, doubleArray3.length);
      assertFalse(boolean1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2342), (-2342));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 1.304E19, 0.0, 0.0, 0.0, 367.20728716033);
      assertEquals(0.0, double0, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 367.20728716033;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 367.20728716033, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 367.20728716033, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination(2.0, 0.0, 2.17333333333333325E18, 2.0, 3.834E-20, 1.184154459111628E-8);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(4.3466666666666665E18, double2, 0.01);
      
      Field<FieldElement<Object>> field1 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field1, (-2379));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-164.268099452736);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, (-164.268099452736), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.006124895208261348), 1.0061248952082613, -0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-164.268099452736);
      double double0 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-164.268099452736)}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0, (-164.268099452736), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.006124895208261348), 1.0061248952082613, -0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[5][6];
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray3[0] = doubleArray4;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-164.268099452736);
      doubleArray0[2] = 3.834E-20;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-164.268099452736));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, (-164.268099452736), 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0061248952082613, (-165.27422434794425), 3.857482848228474E-20}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[3];
      int int0 = 1840;
      intArray0[0] = 1840;
      int int1 = (-1);
      intArray0[1] = (-1);
      int int2 = 0;
      intArray0[2] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {1840, (-1), 0}, intArray0);
      
      double double1 = MathArrays.linearCombination(1.0, (-791.069746449), 1355.17, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-791.069746449), double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, (-164.268099452736), 3.834E-20}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {1.0, (-164.268099452736), 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0061248952082613, (-165.27422434794425), 3.857482848228474E-20}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.0, (-164.268099452736), 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0122497904165226, (-330.5484486958885), 7.714965696456948E-20}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0061248952082613, (-165.27422434794425), 3.857482848228474E-20}, doubleArray1, 0.01);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {1.0, (-164.268099452736), 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0122497904165226, (-330.5484486958885), 7.714965696456948E-20}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0061248952082613, (-165.27422434794425), 3.857482848228474E-20}, doubleArray1, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1.0, (-164.268099452736), 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.006124895208261316), 1.006124895208245, (-2.3482848228474107E-22)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1.0061248952082613, (-165.27422434794425), 3.857482848228474E-20}, doubleArray1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("SIGNIFICANCE_LEVEL");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.SIGNIFICANCE_LEVEL
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long[] longArray0 = new long[3];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-783.3837);
      doubleArray0[1] = 2132.2473;
      doubleArray0[2] = 20.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-783.3837));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-783.3837), 2132.2473, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {448.3207979419497, (-1220.2587454213917), (-11.445752520557926)}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-783.3837), 2132.2473, 20.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(3.141592653589793, 0.0, 20.0, 1.304E19, 20.0, 2132.2473);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.6080000000000003E20, double1, 0.01);
      
      MathArrays.scaleInPlace(1167.78, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-914819.817186), 2489995.751994, 23355.6}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-914819.817186), 2489995.751994, 23355.6}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1829639.634372), 4979991.503988, 46711.2}, doubleArray2, 0.01);
      
      double double2 = MathArrays.linearCombination(23355.6, 3.141592653589793, 2132.2473, (-1064.38), 2489995.751994, 628.543162219423, 1.304E19, 0.0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.562873656271445E9, double2, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 2025);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertEquals(2025, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-914819.817186), 2489995.751994, 23355.6}, doubleArray0, 0.01);
      
      double[] doubleArray4 = MathArrays.scale(1759.153391, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals(3, doubleArray0.length);
      assertEquals(2025, doubleArray3.length);
      assertEquals(2025, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {(-914819.817186), 2489995.751994, 23355.6}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 2025;
      floatArray0[2] = (float) 2025;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 2025.0F, 2025.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals(doubleArray4, doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals(3, doubleArray0.length);
      assertEquals(2025, doubleArray3.length);
      assertEquals(2025, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-914819.817186), 2489995.751994, 23355.6}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.checkOrder(doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (2,489,995.752 >= 23,355.6)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[0] = (-2651L);
      longArray1[1] = 1045L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-2651L);
      longArray2[1] = 517L;
      longArray2[2] = (-2651L);
      longArray2[3] = 1045L;
      longArray2[4] = 1045L;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-2651L);
      doubleArray0[2] = (double) 1045L;
      doubleArray0[3] = (double) 1045L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-2651.0), 1045.0, 1045.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(9211851.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2651.0), 1045.0, 1045.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "gN$PleBy(n";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "t#F.c";
      stringArray0[5] = "";
      stringArray0[6] = ".,Ck`mu#)!4jajnc";
      stringArray0[7] = "z:+AV+F";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, stringArray0.length);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 2639;
      intArray0[2] = 199;
      int[] intArray1 = new int[18];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2146673887;
      intArray1[1] = (-3826);
      intArray1[2] = (-2387);
      intArray1[3] = (-1);
      intArray1[4] = (-3826);
      intArray1[5] = (-3826);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(18, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2.1466738880112927E9, double0, 0.01);
      assertArrayEquals(new int[] {(-1), 2639, 199}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 199;
      doubleArray0[1] = (double) (-3826);
      doubleArray0[2] = (double) (-3826);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {199.0, (-3826.0), (-3826.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray3, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1), 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 8.265965403504643E44;
      doubleArray0[1] = (double) 899;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 899;
      doubleArray0[5] = (double) 899;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) 2639;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {8.265965403504643E44, 899.0, (-1.0), (-1.0), 899.0, 899.0, (-1.0), (-1.0), 2639.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace(1.633123935319537E16, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.checkOrder(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 2115.27292280929;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 3.834E-20;
      doubleArray2[4] = (-1236.0);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 1.633123935319537E16;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 1.633123935319537E16;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2115.27292280929, 0.0, 3.834E-20, (-1236.0), 0.0, 1.633123935319537E16, 0.0, 1.633123935319537E16}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = (-943);
      intArray0[1] = (-943);
      intArray0[2] = (-2730);
      int int2 = 899;
      intArray0[3] = 899;
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.scale((-2730), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(6, longArray1.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2490;
      intArray0[1] = 3106;
      intArray0[2] = 2815;
      intArray0[3] = (-1374);
      intArray0[4] = (-3878);
      intArray0[5] = 57;
      intArray0[6] = (-3178);
      int[] intArray1 = MathArrays.copyOf(intArray0, 9);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2490, 3106, 2815, (-1374), (-3878), 57, (-3178)}, intArray0);
      assertArrayEquals(new int[] {2490, 3106, 2815, (-1374), (-3878), 57, (-3178), 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-783.3837);
      doubleArray0[1] = 2132.2473;
      doubleArray0[2] = 20.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-783.3837));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-783.3837), 2132.2473, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {448.3207979419497, (-1220.2587454213917), (-11.445752520557926)}, doubleArray1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2607.72095787);
      doubleArray0[1] = (-1235.564881);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2607.72095787), (-1235.564881), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.scaleInPlace(4979991.503988, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.2986428214964048E10), (-6.153102610005944E9), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Pair<String, Integer>[] pairArray0 = MathArrays.buildArray(field0, 0);
      assertEquals(0, pairArray0.length);
      assertNotNull(pairArray0);
      
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1.2986428214964048E10), (-6.153102610005944E9), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.4370385851175894E10, double0, 0.01);
      assertArrayEquals(new double[] {(-1.2986428214964048E10), (-6.153102610005944E9), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (-1235.564881);
      doubleArray1[6] = (-728.1422);
      doubleArray1[7] = 0.0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1235.564881), (-728.1422), 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1235.564881), (-728.1422), 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2775.566;
      doubleArray0[4] = (-2588.5774);
      double double0 = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2775.566, (-2588.5774), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2775.566, (-2588.5774), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = (-2181);
      Integer integer0 = new Integer((-2181));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-2181), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(4, integerArray0.length);
      assertEquals((-2181), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int int1 = (-1358);
      Integer integer2 = new Integer((-1358));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1358), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      int int2 = (-793);
      Integer integer3 = new Integer((-793));
      assertTrue(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-793), (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2181);
      doubleArray0[1] = (double) (int)integerArray0[3];
      doubleArray0[2] = (double) (-2181);
      doubleArray0[3] = (double) (-2181);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][8];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {(-2181.0), (-2181.0), (-2181.0), (-793.0)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (int) integerArray0[3], (-1358));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 3826.95367, 0.0, 1.304E19, 0.0, 0.0, 0.0, 367.20728716033);
      assertEquals(0.0, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 367.20728716033;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 367.20728716033, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1.8441344853345161E19, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 367.20728716033, 1.304E19, 1.304E19}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Double double0 = new Double((-790.9625540000982));
      assertEquals((-790.9625540000982), (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.5000000000042687;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-790.9625540000982);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = (-333.4477225272037);
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(2.258594253069816E19, double1, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1.304E19, (-790.9625540000982), 0.0, 0.0, 1.304E19, (-333.4477225272037)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((-1687));
      assertEquals((-1687), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1687));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1687), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 4661.521;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertEquals(2.1729778033440996E7, double0, 0.01);
      assertArrayEquals(new double[] {4661.521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      int int0 = 0;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 67;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0, 67);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(6, longArray1.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      long long0 = (-2651L);
      longArray1[0] = (-2651L);
      longArray1[1] = 1045L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-2651L);
      longArray2[1] = 517L;
      longArray2[2] = (-2651L);
      longArray2[3] = 1045L;
      longArray2[4] = 1045L;
      longArray2[5] = 1180L;
      longArray0[1] = longArray2;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 6 while others have length 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3149.93);
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-3149.93), 0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {3149.93, -0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1318;
      intArray0[1] = (-421);
      intArray0[2] = 1316;
      intArray0[3] = (-149);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {1318, (-421), 1316, (-149)}, intArray0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray2.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-406L);
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (-2204.8);
      doubleArray0[3] = (-2204.8);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      MathArrays.scaleInPlace((-2204.8), doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0, 4861143.040000001, 4861143.040000001, -0.0, -0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(2.363071165534045E13, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0, 1.1487226949360512E20, 1.1487226949360512E20, -0.0, -0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.6245392145843352E20, double0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, 1.1487226949360512E20, 1.1487226949360512E20, -0.0, -0.0}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      double double1 = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace((-1520.50471517227), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(385.36262160138, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = 280.55866942485136;
      doubleArray1[5] = 0.0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.304E19, 280.55866942485136, 0.0}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace(318.23092126065, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.304E19, 280.55866942485136, 0.0}, doubleArray1, 0.01);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-783.3837);
      doubleArray0[1] = 2132.2473;
      double double0 = 20.0;
      doubleArray0[2] = 20.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-783.3837));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-783.3837), 2132.2473, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {448.3207979419497, (-1220.2587454213917), (-11.445752520557926)}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-783.3837), 2132.2473, 20.0}, doubleArray0, 0.01);
      
      double double2 = (-1749.979927425414);
      double double3 = 0.0;
      double double4 = MathArrays.linearCombination(3.141592653589793, (-1749.979927425414), 1.0, 2132.2473, 1.0, 0.0, (-707.920331), 0.0);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals((-3365.47678392928), double4, 0.01);
      
      MathArrays.scaleInPlace((-783.3837), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {613690.0214256899, (-1670367.77918901), (-15667.673999999999)}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray1, (-1899));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3394.92);
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = (-95.75336);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-3.141592653589793);
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-3394.92), (-20.0), (-95.75336), 0.0, Double.NaN, (-3.141592653589793), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, false);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, doubleArray0.length);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-3394.92), (-20.0), (-95.75336), 0.0, Double.NaN, (-3.141592653589793), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 3826.95367, 0.0, 1.304E19, 0.0, 0.0, 0.0, 367.20728716033);
      assertEquals(0.0, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2428.93518246749;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (13,040,000,000,000,000,000 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-783.3837);
      doubleArray0[1] = 2132.2473;
      doubleArray0[2] = 20.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-783.3837));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-783.3837), 2132.2473, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {448.3207979419497, (-1220.2587454213917), (-11.445752520557926)}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-783.3837), 2132.2473, 20.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(3.141592653589793, 0.0, 20.0, 1.304E19, 20.0, 2132.2473);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.6080000000000003E20, double1, 0.01);
      
      MathArrays.scaleInPlace(1167.78, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-914819.817186), 2489995.751994, 23355.6}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-914819.817186), 2489995.751994, 23355.6}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1829639.634372), 4979991.503988, 46711.2}, doubleArray2, 0.01);
      
      double double2 = MathArrays.linearCombination(23355.6, 3.141592653589793, 2132.2473, (-1064.38), 2489995.751994, (-914819.817186), 1.304E19, 0.0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-2.277899654780667E12), double2, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double double4 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0.0, double4, 0.01);
      assertArrayEquals(new double[] {(-914819.817186), 2489995.751994, 23355.6}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1829639.634372), 4979991.503988, 46711.2}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-914819.817186), 2489995.751994, 23355.6}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {448.3207979419497, (-1220.2587454213917), (-11.445752520557926)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      long[] longArray0 = new long[7];
      longArray0[0] = 100L;
      longArray0[1] = 4208363204685324176L;
      longArray0[2] = 0L;
      longArray0[3] = (-9223372036854775808L);
      longArray0[4] = 2540L;
      longArray0[5] = (-1L);
      longArray0[6] = (-1L);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-783.3837);
      doubleArray0[1] = 2132.2473;
      doubleArray0[2] = 20.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-783.3837));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-783.3837), 2132.2473, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {448.3207979419497, (-1220.2587454213917), (-11.445752520557926)}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-783.3837), 2132.2473, 20.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(3.141592653589793, 0.0, 20.0, 1.304E19, 20.0, 2132.2473);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.6080000000000003E20, double1, 0.01);
      
      MathArrays.scaleInPlace(1167.78, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-914819.817186), 2489995.751994, 23355.6}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-914819.817186), 2489995.751994, 23355.6}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1829639.634372), 4979991.503988, 46711.2}, doubleArray2, 0.01);
      
      double double2 = MathArrays.linearCombination(23355.6, 3.141592653589793, 2132.2473, (-1064.38), 2489995.751994, 628.543162219423, 1.304E19, 0.0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.562873656271445E9, double2, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double double4 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0.0, double4, 0.01);
      assertArrayEquals(new double[] {(-914819.817186), 2489995.751994, 23355.6}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1829639.634372), 4979991.503988, 46711.2}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double5 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2491216.010739421, double5, 0.01);
      assertArrayEquals(new double[] {(-914819.817186), 2489995.751994, 23355.6}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {448.3207979419497, (-1220.2587454213917), (-11.445752520557926)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1642.46867;
      doubleArray0[2] = 655.64323354406;
      int[] intArray0 = new int[8];
      intArray0[0] = 917;
      intArray0[1] = 2832;
      intArray0[2] = 2832;
      intArray0[3] = 2832;
      intArray0[4] = 2832;
      intArray0[5] = 2105;
      intArray0[6] = 2832;
      intArray0[7] = 2832;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {917, 2832, 2832, 2832, 2832, 2105, 2832, 2832}, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-4.068233003401932E-9));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1642.46867, 655.64323354406, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, (-2.9075804533465223E-9), (-1.16065255005541E-9), -0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArrayArray0 = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, Double.NaN, 0.0, 0.0, 1054.6708241050985, 0.0, 0.0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1054.6708241050985;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1054.6708241050985;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2046.3728F);
      floatArray0[3] = (-180.0F);
      floatArray0[4] = (-614.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2046.3728F), (-180.0F), (-614.0F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-98);
      intArray0[1] = (-349);
      intArray0[2] = 0;
      intArray0[3] = (-3541);
      intArray0[4] = (-703);
      intArray0[5] = 186;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-1398));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1441.660203156);
      doubleArray0[1] = (-2293.2);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2762.261950214229);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1044.8691054582698;
      doubleArray0[6] = 1.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1441.660203156), (-2293.2), (-1.0), (-2762.261950214229), 0.0, 1044.8691054582698, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2883.320406312), (-4586.4), (-2.0), (-5524.523900428458), 0.0, 2089.7382109165396, 2.0}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[7][2];
      long[] longArray1 = new long[1];
      longArray1[0] = 3861L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 3861L;
      longArray2[1] = 3861L;
      longArray2[2] = 3861L;
      longArray2[3] = 3861L;
      longArray2[4] = 3861L;
      longArray2[5] = 3861L;
      longArray2[6] = 596L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 596L;
      longArray3[1] = 3861L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 3861L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 596L;
      longArray5[1] = 596L;
      longArray5[2] = 596L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[4];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = 2540L;
      longArray6[1] = 3861L;
      longArray6[2] = 3861L;
      longArray6[3] = 3861L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray7[0] = 2540L;
      longArray7[1] = 0L;
      longArray7[2] = 3861L;
      longArray7[3] = 4503599627370496L;
      longArray7[4] = 596L;
      longArray7[5] = 2540L;
      longArray7[6] = 596L;
      longArray0[6] = longArray7;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 686.88514655396;
      doubleArray0[1] = 686.88514655396;
      doubleArray0[2] = 686.88514655396;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 686.88514655396;
      doubleArray0[5] = 686.88514655396;
      doubleArray0[6] = 686.88514655396;
      doubleArray0[7] = 686.88514655396;
      doubleArray0[8] = 686.88514655396;
      MathArrays.scaleInPlace(686.88514655396, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {471811.2045564551, 471811.2045564551, 471811.2045564551, 0.0, 471811.2045564551, 471811.2045564551, 471811.2045564551, 471811.2045564551, 471811.2045564551}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {471811.2045564551, 471811.2045564551, 471811.2045564551, 0.0, 471811.2045564551, 471811.2045564551, 471811.2045564551, 471811.2045564551, 471811.2045564551}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (471,811.205 >= 471,811.205)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-338.1873293249);
      doubleArray2[4] = 0.0;
      doubleArray1[8] = doubleArray2;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Pair<Integer, Object>>) null, 13, 24);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathArrays.linearCombination(0.0, 3826.95367, 0.0, 1.304E19, 0.0, 0.0, 0.0, 367.20728716033);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[1][1];
      long[] longArray1 = new long[1];
      longArray1[0] = 1L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 888.299234819467;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2467.27466995069;
      doubleArray0[5] = 968.6916655854;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-20.0), 888.299234819467, 0.0, 2467.27466995069, 968.6916655854, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, (-20.0), 888.299234819467, 0.0, 2467.27466995069, 968.6916655854, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-20.0), 888.299234819467, 0.0, 2467.27466995069, 968.6916655854, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 57;
      intArray0[2] = 2;
      intArray0[3] = (-4794);
      intArray0[4] = 2;
      intArray0[5] = 3822;
      intArray0[6] = 1190;
      intArray0[7] = 46;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), 57, 2, (-4794), 2, 3822, 1190, 46}, intArray1);
      assertArrayEquals(new int[] {(-1), 57, 2, (-4794), 2, 3822, 1190, 46}, intArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[6][3];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[6] = (-1841L);
      longArray3[7] = 0L;
      longArray3[8] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 1024L;
      longArray4[1] = (-1841L);
      longArray4[2] = 0L;
      longArray4[3] = 2147483647L;
      longArray4[4] = 0L;
      longArray4[5] = 0L;
      longArray4[6] = (-1841L);
      longArray4[7] = 0L;
      longArray4[8] = (-1841L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 0L;
      longArray5[1] = (-1841L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = 1024L;
      longArray6[1] = 1024L;
      longArray0[5] = longArray6;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,841 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 3586;
      intArray0[0] = 3586;
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = 2455;
      intArray0[2] = 2455;
      int int3 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(3, intArray0.length);
      assertEquals(0, int3);
      assertArrayEquals(new int[] {3586, 0, 2455}, intArray0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1642.46867;
      doubleArray0[2] = 655.64323354406;
      doubleArray0[3] = (-3.141592653589793);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 2697703.3319315687, 2153746.939587223, 419548.1146772639, (-4119.5279317557515), 9.869604401089358}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[5];
      intArray0[0] = (-3107);
      intArray0[1] = (-4377);
      intArray0[2] = (-3767);
      intArray0[3] = 2;
      intArray0[4] = (-1);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-2146.1817);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-477.052954481);
      doubleArray0[7] = 3446.20174;
      doubleArray0[8] = (-1659.2214468495145);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, (-1.0), Double.NaN, 0.0, 2702.82438611743, 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2702.82438611743;
      doubleArray0[1] = 2702.82438611743;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {2702.82438611743, 2702.82438611743, Double.NaN, Double.NaN, 1.34217729E8}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-2181));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1358));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-793));
      integerArray0[3] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2181);
      doubleArray0[1] = (double) (int)integerArray0[3];
      doubleArray0[2] = (double) (-2181);
      doubleArray0[3] = (double) (-2181);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][8];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      MathArrays.OrderDirection.values();
      double double0 = MathArrays.linearCombination(0.0, 0.9315965175628662, (-2262.0), (double) (-793), 2916.198714208, 0.0, 31713.493404, 0.0);
      assertEquals(1793766.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection2, doubleArray1);
      assertArrayEquals(new double[] {(-2181.0), (-2181.0), (-2181.0), (-793.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1058.612247305967;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(75);
      integerArray0[1] = (Integer) int0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, false);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 75;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = 3649.8F;
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) 0;
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3149.93);
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      long[] longArray0 = new long[3];
      longArray0[0] = (-2651L);
      longArray0[1] = 0L;
      longArray0[2] = 2981L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,651 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Integer integer0 = new Integer((-2080));
      Integer integer1 = new Integer((-2080));
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer((-239));
      integerArray0[3] = integer2;
      integerArray0[4] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      float[] floatArray0 = new float[20];
      floatArray0[0] = (float) (-2080);
      floatArray0[1] = (float) (int)integerArray0[4];
      floatArray0[2] = 3649.8F;
      floatArray0[3] = (float) 75;
      floatArray0[4] = (float) (int)integerArray0[4];
      floatArray0[5] = 3649.8F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-2181));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      int int0 = (-1358);
      Integer integer2 = new Integer((-1358));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-793));
      integerArray0[3] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2181);
      doubleArray0[1] = (double) (int)integerArray0[3];
      doubleArray0[2] = (double) (-2181);
      doubleArray0[3] = (double) (-2181);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][8];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      MathArrays.OrderDirection.values();
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (int) integerArray0[3], (-1358));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3149.93);
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1318;
      intArray0[1] = (-421);
      intArray0[2] = 1316;
      intArray0[3] = (-149);
      MathArrays.distance(intArray0, intArray0);
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-788.374414476);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1399.760395;
      doubleArray0[3] = (-20.0);
      doubleArray0[4] = (-3599.0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1576.748828952), 2.68435458E8, 2799.52079, (-40.0), (-7198.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 4661.521;
      doubleArray0[0] = 4661.521;
      double double1 = 1058.612247305967;
      double double2 = (-1149.322088798);
      double double3 = -0.0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1058.612247305967;
      doubleArray1[1] = (-1149.322088798);
      doubleArray1[2] = (-1149.322088798);
      doubleArray1[3] = (-1149.322088798);
      doubleArray1[4] = (-1149.322088798);
      doubleArray1[5] = -0.0;
      doubleArray1[6] = (-1149.322088798);
      MathArrays.equals(doubleArray1, doubleArray1);
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (0 <= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2325;
      intArray0[1] = (-637);
      intArray0[2] = 3601;
      intArray0[3] = 2;
      intArray0[4] = 64;
      intArray0[5] = 3298;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(0.8333333333333334, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 3298;
      floatArray0[2] = (float) 3601;
      floatArray0[3] = (float) 64;
      floatArray0[4] = (float) 3601;
      floatArray0[5] = (float) 2325;
      floatArray0[6] = (float) 3601;
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) (-637);
      floatArray1[1] = (float) (-637);
      floatArray1[2] = (float) 64;
      floatArray1[3] = (float) 2;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2775.566;
      doubleArray0[4] = (-2588.5774);
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.304E19;
      MathArrays.copyOf(doubleArray2, 0);
      MathArrays.scale(0.0, doubleArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3085.0585748647;
      doubleArray0[1] = 3.32;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2719.6451402;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 4874.5578164;
      doubleArray0[8] = 2926.039575;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (3,085.059 >= 3.32)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-7.44321345601866E-11);
      doubleArray0[2] = (-963.2);
      doubleArray0[3] = (-1745.2997);
      doubleArray0[4] = 2977.5459671744147;
      doubleArray0[5] = 6724.323780326621;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1745.2997));
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 3.450547080872309E-22, 57782.98292738802, 189717.3448249444, 552184.1792992529, 2816204.8588586105}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.857564825483167E-11, 240.3809121527498, 435.5655459571434, (-743.0909630047004), (-1678.1551951052115)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 1287.714F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1287.714F;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1658207.3181302696}, doubleArray1, 0.01);
      
      float[] floatArray1 = new float[2];
      floatArray1[0] = 1287.714F;
      floatArray1[1] = Float.NaN;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 1906;
      int int1 = 268;
      intArray0[2] = 268;
      int int2 = 1303;
      intArray0[3] = 1303;
      MathArrays.copyOf(intArray0, 0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4661.521;
      doubleArray0[1] = 1058.612247305967;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      int int1 = 75;
      Integer integer1 = new Integer(75);
      Integer integer2 = Integer.getInteger("", integer1);
      integerArray0[1] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, false);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 75;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int1;
      floatArray0[3] = (float) int1;
      floatArray0[4] = (float) 0;
      floatArray0[5] = 3649.8F;
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) 0;
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2567.714);
      doubleArray0[1] = (-654.241365731794);
      doubleArray0[2] = (-1149.322088798);
      doubleArray0[3] = -0.0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1149.322088798);
      doubleArray1[1] = (-1149.322088798);
      doubleArray1[2] = (-2567.714);
      doubleArray1[3] = (-654.241365731794);
      doubleArray1[4] = (-654.241365731794);
      doubleArray1[5] = (-2567.714);
      doubleArray1[6] = (-654.241365731794);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {6593155.185796, 428031.764634603, 1320941.263798998, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[1];
      intArray0[0] = 2639;
      MathArrays.distance1(intArray0, intArray0);
//      try { 
        MathArrays.normalizeArray(doubleArray0, 426.7455509237996);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double double0 = 1.34217729E8;
//      try { 
        MathArrays.normalizeArray(doubleArray1, 1.34217729E8);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = (-1344.0544960333257);
//      try { 
        MathArrays.normalizeArray(doubleArray0, (-1344.0544960333257));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3.32;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      double double0 = MathArrays.distance1(doubleArray1, doubleArray2);
      assertEquals(6.64, double0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3008.9013907;
      doubleArray0[3] = (-1737.39);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-788.374414476);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1399.760395;
      doubleArray0[3] = (-20.0);
      doubleArray0[4] = (-3599.0);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Double>) null, (-829));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<String>) null, (-2941), (-2941));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 216.63422;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 2169.39245276127;
      doubleArray0[5] = 956.7974;
      doubleArray0[6] = (-2266.7840889595336);
      doubleArray0[7] = 2163.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertArrayEquals(new double[] {0.0, 0.0, 216.63422, Double.NaN, 2169.39245276127, 956.7974, (-2266.7840889595336), 2163.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2607.72095787);
      double double0 = (-1235.564881);
      doubleArray0[1] = (-1235.564881);
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double2 = 0.0;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double double0 = (-2204.8);
      MathArrays.scaleInPlace((-2204.8), doubleArray0);
      MathArrays.scaleInPlace(8.265965403504643E44, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2204.8);
      doubleArray1[1] = (-2204.8);
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
//      try { 
        MathArrays.checkPositive(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,204.8 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1708.113956;
      doubleArray0[2] = (-1576.5);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1554.65183634;
      doubleArray0[5] = 3.141592653589793;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 654.8362459034496;
      doubleArray0[4] = (-2643.6);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 358.5057686;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 358.5057686;
      doubleArray1[1] = 3.141592653589793;
      doubleArray1[2] = 1602.968747048843;
      doubleArray1[3] = 0.0;
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int int0 = (-943);
      intArray0[1] = (-943);
      intArray0[2] = (-2730);
      intArray0[3] = 899;
      int[] intArray1 = new int[1];
      intArray1[0] = (-943);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 225.515326709426;
      doubleArray0[1] = 1.0E-5;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1422.29;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0E-5;
      doubleArray1[1] = 1422.29;
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
