/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 15:10:42 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(object0).when(field0).getZero();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.718281828459045;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2.718281828459045}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2771);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long[][] longArray0 = new long[8][4];
      longArray0[0] = null;
      longArray0[1] = null;
      longArray0[2] = null;
      longArray0[3] = null;
      longArray0[4] = null;
      longArray0[5] = null;
      longArray0[6] = null;
      longArray0[7] = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.041666663879186654;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 2297);
      assertEquals(6, doubleArray1.length);
      assertEquals(2297, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.041666663879186654, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      int int0 = 2604;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2604, 2604);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-0.3116033612200628);
      doubleArray0[1] = (-0.3116033612200628);
      MathArrays.scaleInPlace((-0.3116033612200628), doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.09709665472364096, 0.09709665472364096, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-0.3116033612200628);
      doubleArray1[1] = (-0.3116033612200628);
      doubleArray1[2] = (-0.3116033612200628);
      doubleArray1[3] = (-0.3116033612200628);
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = (-0.3116033612200628);
      doubleArray1[6] = (-0.3116033612200628);
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-0.06051128795022082), double0, 0.01);
      assertArrayEquals(new double[] {0.09709665472364096, 0.09709665472364096, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.3116033612200628), (-0.3116033612200628), (-0.3116033612200628), (-0.3116033612200628), 3.834E-20, (-0.3116033612200628), (-0.3116033612200628)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 0.16666666666745392;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 4.983191803254889E-7;
      doubleArray0[5] = 0.19454771280288696;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, Double.POSITIVE_INFINITY, 0.16666666666745392, 1.304E19, 4.983191803254889E-7, 0.19454771280288696}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, Double.POSITIVE_INFINITY, 0.16666666666745392, 1.304E19, 4.983191803254889E-7, 0.19454771280288696}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.8333333333333334;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 4.3466666666666665E18;
      doubleArray0[3] = (-41.1);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.3745366896198556E19, double0, 0.01);
      assertArrayEquals(new double[] {0.8333333333333334, 1.34217729E8, 4.3466666666666665E18, (-41.1), 1.304E19, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.8333333333333334, 1.34217729E8, 4.3466666666666665E18, (-41.1), 1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.8333333333333334, 1.34217729E8, 4.3466666666666665E18, (-41.1), 1.304E19, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 134217729;
      intArray0[2] = 2929;
      intArray0[3] = (-1089);
      intArray0[4] = (-1);
      intArray0[5] = (-2146904185);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1, 134217729, 2929, (-1089), (-1), (-2146904185)}, intArray0);
      
      long[][] longArray0 = new long[8][1];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 2929;
      longArray1[1] = (long) 2929;
      longArray1[2] = (long) (-1089);
      longArray1[3] = (long) 134217729;
      longArray1[4] = (long) (-1);
      longArray1[5] = (long) 1;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 134217729;
      longArray2[1] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) (-1089);
      longArray3[1] = (long) 2929;
      longArray3[2] = (long) (-1);
      longArray3[3] = (long) 2929;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (long) 0;
      longArray4[1] = (long) (-2146904185);
      longArray4[2] = (long) 1;
      longArray4[3] = (long) 2929;
      longArray4[4] = (long) (-1089);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (long) (-1);
      longArray5[1] = (long) (-2146904185);
      longArray5[2] = 3L;
      longArray5[3] = (long) 0;
      longArray5[4] = (long) 1;
      longArray5[5] = (long) 2929;
      longArray5[6] = (long) 2929;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = (long) (-1089);
      longArray6[1] = (long) (-1);
      longArray6[2] = 3L;
      longArray6[3] = (long) 1;
      longArray6[4] = (long) 1;
      longArray6[5] = (long) 134217729;
      longArray6[6] = (long) 1;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = (long) 1;
      longArray7[1] = (long) 134217729;
      longArray7[2] = 3L;
      longArray7[3] = (long) (-1);
      longArray7[4] = (long) 0;
      longArray7[5] = (long) (-1089);
      longArray7[6] = (long) (-1089);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[4];
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray6));
      
      longArray8[0] = (long) 134217729;
      longArray8[1] = 1L;
      longArray8[2] = (long) (-1089);
      longArray8[3] = (long) (-2146904185);
      longArray0[7] = longArray8;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 2 while others have length 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 3611;
      intArray0[1] = 3;
      intArray0[2] = 2146682862;
      intArray0[3] = (-339);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {3611, 3, 2146682862, (-339)}, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3611;
      doubleArray0[1] = (double) 2146682862;
      doubleArray0[2] = (double) 2146682862;
      doubleArray0[3] = (-1294.104353807344);
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3611;
      MathArrays.scaleInPlace((-1454.0), doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-5250394.0), (-3.121276881348E12), (-3.121276881348E12), 1881627.7304358783, (-4362.0), (-5250394.0)}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-339);
      intArray1[1] = 3611;
      intArray1[2] = 0;
      intArray1[3] = 2146682862;
      int int1 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-1593675), int1);
      assertArrayEquals(new int[] {3611, 3, 2146682862, (-339)}, intArray0);
      assertArrayEquals(new int[] {(-339), 3611, 0, 2146682862}, intArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = MathArrays.scale(0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination(0.5463024377822876, 0.0, 0.0, (-8.0E298));
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, 0.0, (-8.0E298), 0.0, 0.0, 3.4439717236742845E-8);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 8;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 8, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 568.64208;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 568.64208, Double.POSITIVE_INFINITY, 0.0, Double.POSITIVE_INFINITY, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 568.64208, Double.POSITIVE_INFINITY, 0.0, Double.POSITIVE_INFINITY, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 568.64208, Double.POSITIVE_INFINITY, 0.0, Double.POSITIVE_INFINITY, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(3503.7915562851, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.16666666666666666;
      doubleArray0[1] = 5.650007086920087E-9;
      doubleArray0[2] = 826.4;
      doubleArray0[3] = (-444.25010863);
      doubleArray0[4] = 3586.199614062;
      doubleArray0[5] = 1.5574076175689697;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.16666666666666666, 5.650007086920087E-9, 826.4, (-444.25010863), 3586.199614062, 1.5574076175689697}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-59.0751F);
      floatArray0[1] = 589.54083F;
      floatArray0[2] = 3485.443F;
      floatArray0[3] = (-524.41F);
      floatArray0[4] = (-758.7F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-59.0751F), 589.54083F, 3485.443F, (-524.41F), (-758.7F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertNotNull(mathArrays_OrderDirectionArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 3.834E-20;
      double[] doubleArray1 = MathArrays.scale(3.834E-20, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39, 1.4699556E-39}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.69074293112E-58, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39, 1.4699556E-39}, doubleArray1, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2.5460377840703933E-39, double1, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39, 1.4699556E-39}, doubleArray1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 686.065804;
      doubleArray0[1] = 5133.82;
      double[][] doubleArray1 = new double[9][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 5133.82;
      doubleArray2[1] = 686.065804;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 2989.33629793639;
      doubleArray1[6] = doubleArray2;
      doubleArray1[7] = null;
      doubleArray1[8] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-918.68994F);
      floatArray0[2] = (-968.1459F);
      floatArray0[3] = (-2703.046F);
      floatArray0[4] = 0.5F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-3806.9824F);
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-968.1459F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-2703.046F);
      floatArray1[3] = (-918.68994F);
      floatArray1[4] = (-968.1459F);
      floatArray1[5] = (-2575.7004F);
      floatArray1[6] = (-2703.046F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-918.68994F), (-968.1459F), (-2703.046F), 0.5F, 0.0F, (-3806.9824F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-968.1459F), 0.0F, (-2703.046F), (-918.68994F), (-968.1459F), (-2575.7004F), (-2703.046F)}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-968.1459F);
      MathArrays.scaleInPlace((-2703.046F), doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2703.0458984375, -0.0, 2616942.7338682413}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1988.4169729436);
      doubleArray0[1] = 3881.98381520196;
      doubleArray0[2] = (-3069.546497);
      doubleArray0[3] = (-1231.615754459);
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1988.4169729436), 3881.98381520196, (-3069.546497), (-1231.615754459)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 5.041914939880371;
      doubleArray0[1] = 500.763;
      doubleArray0[2] = 53.34513;
      doubleArray0[3] = 1614.7449577322348;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {5.041914939880371, 500.763, 53.34513, 1614.7449577322348}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1691.4597200322726, double0, 0.01);
      assertArrayEquals(new double[] {5.041914939880371, 500.763, 53.34513, 1614.7449577322348}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 53.34513);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {5.041914939880371, 500.763, 53.34513, 1614.7449577322348}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.12372336639361951, 12.288204950724161, 1.3090341949445625, 39.624167487937655}, doubleArray2, 0.01);
      
//      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 56.0F;
      floatArray0[1] = 56.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 56.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 56.0F;
      floatArray0[6] = 56.0F;
      floatArray0[7] = 56.0F;
      floatArray0[8] = 56.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 56.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 56.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 56.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {56.0F, 56.0F, 0.0F, 56.0F, 0.0F, 56.0F, 56.0F, 56.0F, 56.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 56.0F, 0.0F, 56.0F, 0.0F, 56.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray2, floatArray2);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F}, floatArray2, 0.01F);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray1, floatArray2);
      assertEquals(1, floatArray2.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, 56.0F, 0.0F, 56.0F, 0.0F, 56.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1838L);
      longArray0[1] = (-539L);
      longArray0[2] = (-247L);
      longArray0[3] = 808L;
      longArray0[4] = (-302932621132653753L);
      longArray0[5] = 67L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,838 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 223.9491878529554;
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {223.9491878529554}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.608E18;
      doubleArray0[1] = 2.608E18;
      doubleArray0[2] = (-2324.212);
      doubleArray0[3] = (-1965.945);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      int int0 = 134217729;
      intArray0[1] = 134217729;
      intArray0[2] = 340;
      int int1 = 363;
      intArray0[3] = 363;
      intArray0[4] = 2326;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 134217729;
      intArray1[1] = (-2328);
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-796.8907F);
      floatArray0[1] = (-195.79617F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 221.33594F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1.4E-45F);
      floatArray0[6] = -0.0F;
      floatArray0[7] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-796.8907F), (-195.79617F), 0.0F, 221.33594F, 0.0F, (-1.4E-45F), -0.0F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[][] longArray1 = new long[7][8];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(7, longArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-0.5);
      doubleArray0[3] = 1927.8517785;
      doubleArray0[4] = 603.3208507834;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, (-0.5), 1927.8517785, 603.3208507834}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, Double.NaN, (-0.5), 1927.8517785, 603.3208507834}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 3716009.15901483, 2326226.350377822, 363996.0489900056}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "{0} values have been added before statistic is configured";
      stringArray0[2] = "IJtoDe)";
      stringArray0[3] = "M.X>Dq)|qdR,O^fKO";
      stringArray0[4] = "=sJK\u0002";
      stringArray0[5] = "";
      stringArray0[6] = "PatOerhN\"O.-Z6XE";
      stringArray0[7] = "sPGdvGNBu[";
      stringArray0[8] = "IJ%yqO6~Y%";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 27;
      intArray0[1] = 29;
      intArray0[2] = 99;
      intArray0[3] = 134217729;
      intArray0[4] = 0;
      intArray0[5] = 39;
      intArray0[6] = 2;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 134217729;
      intArray1[1] = 99;
      intArray1[2] = 27;
      intArray1[3] = 0;
      intArray1[4] = 134217729;
      intArray1[5] = 39;
      intArray1[6] = 0;
      intArray1[7] = 134217729;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(134217729, int0);
      assertArrayEquals(new int[] {27, 29, 99, 134217729, 0, 39, 2}, intArray0);
      assertArrayEquals(new int[] {134217729, 99, 27, 0, 134217729, 39, 0, 134217729}, intArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[][] longArray1 = new long[7][8];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1810.7905F);
      floatArray0[1] = (-3366.2F);
      floatArray0[2] = 2435.7131F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 117.63125F;
      floatArray0[5] = 1152.9216F;
      floatArray0[6] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1810.7905F), (-3366.2F), 2435.7131F, 1.0F, 117.63125F, 1152.9216F, (-1.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (double) 1152.9216F;
      doubleArray0[2] = 4.9E-324;
      doubleArray0[3] = (double) 1152.9216F;
      doubleArray0[4] = (double) 1.0F;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 1152.921630859375, 4.9E-324, 1152.921630859375, 1.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1630.4777133732562, double1, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 1152.921630859375, 4.9E-324, 1152.921630859375, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 746);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "brightness exponent should be positive or null, but got {0}";
      stringArray0[1] = "";
      stringArray0[2] = "OxZ";
      stringArray0[3] = "OVERFLOW_IN_FRACTION";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[6] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3465.260706563645;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3465.260706563645;
      doubleArray1[1] = 3465.260706563645;
      doubleArray1[2] = 3465.260706563645;
      doubleArray1[3] = 3465.260706563645;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3465.260706563645}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3465.260706563645, 3465.260706563645, 3465.260706563645, 3465.260706563645}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.5F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 102.8023F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.5F, (-1.0F), 102.8023F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2401);
      intArray0[1] = (-3);
      intArray0[2] = 1860;
      intArray0[3] = (-74);
      intArray0[4] = 2147483632;
      intArray0[5] = 2145020937;
      intArray0[6] = (-1095);
      intArray0[7] = 220;
      intArray0[8] = 14;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1860;
      intArray1[1] = (-3);
      intArray1[2] = (-74);
      intArray1[3] = 10;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
//      try { 
        MathArrays.normalizeArray((double[]) null, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[2];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-434);
      intArray1[2] = 232;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1390;
      intArray2[1] = 232;
      intArray2[2] = (-434);
      intArray2[3] = (-434);
      intArray2[4] = 232;
      intArray2[5] = 232;
      intArray2[6] = (-434);
      double double2 = MathArrays.distance(intArray1, intArray2);
      assertEquals(3, intArray1.length);
      assertEquals(7, intArray2.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1679.05092239634, double2, 0.01);
      assertArrayEquals(new int[] {0, (-434), 232}, intArray1);
      assertArrayEquals(new int[] {1390, 232, (-434), (-434), 232, 232, (-434)}, intArray2);
      
      Double[] doubleArray2 = new Double[8];
      doubleArray2[0] = (Double) 0.0;
      doubleArray2[1] = (Double) 0.0;
      doubleArray2[2] = (Double) 0.0;
      doubleArray2[3] = (Double) 0.0;
      doubleArray2[4] = (Double) 0.0;
      doubleArray2[5] = (Double) 0.0;
      doubleArray2[6] = (Double) 0.0;
      doubleArray2[7] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertEquals(8, doubleArray2.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, 5.96018054537361E14);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.125, Double.NaN, 5.0614674548127384E-8, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 5.0614674548127384E-8;
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 5.0614674548127384E-8}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-2298.77193);
      doubleArray1[2] = (double) 4503599627370496L;
      doubleArray1[3] = 5.0614674548127384E-8;
      doubleArray1[4] = 5.0614674548127384E-8;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[3][0];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (-151);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, (-151)}, intArray0);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, (-151)}, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-151);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3.834E-20;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-151.0), 0.0, 0.0, 0.0, 3.834E-20}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-151.0), 0.0, 0.0, 0.0, 3.834E-20}, doubleArray0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(151.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-151.0), 0.0, 0.0, 0.0, 3.834E-20}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2147.34011312842);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, 2147.34011312842, -0.0, -0.0, -0.0, (-5.452252975983021E-19)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-151.0), 0.0, 0.0, 0.0, 3.834E-20}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      intArray0[0] = (-294);
      intArray0[1] = 841;
      intArray0[2] = 194;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-294), 841, 194}, intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 194;
      floatArray0[1] = (float) 841;
      floatArray0[2] = (-1582.409F);
      floatArray0[3] = 4192.316F;
      floatArray0[4] = 1331.0718F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {194.0F, 841.0F, (-1582.409F), 4192.316F, 1331.0718F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.4E-45F;
      floatArray0[2] = 91.0F;
      floatArray0[3] = (-3.4028235E38F);
      floatArray0[4] = 498.1757F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1260.36F);
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-1.0F), 1.4E-45F, 91.0F, (-3.4028235E38F), 498.1757F, 0.0F, (-1260.36F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.scale(0.0F, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-4816.97468), 2.0, (-214.5471258749939), 514.1392574719226, 2.0, 514.1392574719226, (-214.5471258749939), 0.09090909090909091);
      assertEquals((-118932.27511933108), double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1742.2773916313;
      doubleArray0[1] = 0.09090909090909091;
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Integer>[][] fieldElementArray0 = MathArrays.buildArray(field0, 2, (-524));
      assertEquals(2, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      double double0 = MathArrays.linearCombination((double) (-524), (double) (-524), (double) (-524), 1042.0);
      assertEquals((-271432.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int[] intArray0 = null;
      int[] intArray1 = new int[7];
      intArray1[0] = (-2145009587);
      intArray1[1] = 2;
      int int0 = 2938;
      intArray1[2] = 2938;
      intArray1[3] = 2;
      intArray1[4] = 20;
      intArray1[5] = (-458);
      intArray1[6] = 106;
      int int1 = MathArrays.distance1(intArray1, intArray1);
      assertEquals(7, intArray1.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {(-2145009587), 2, 2938, 2, 20, (-458), 106}, intArray1);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 2938;
      doubleArray2[1] = (double) 2938;
      doubleArray2[2] = (double) 2;
      doubleArray2[4] = (double) 2938;
      doubleArray2[4] = (double) (-458);
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray0, doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.linearCombination((double) 27, (double) 27, (double) 27, 3.32);
      assertEquals(818.64, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 624.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1.883511811213715E-8;
      doubleArray0[3] = 2.4413481E7;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = (-989.867871);
      doubleArray0[6] = 571.8;
      doubleArray0[7] = 2456.95205028418;
      doubleArray0[8] = (-3331.3338);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {624.0, 1.34217729E8, 1.883511811213715E-8, 2.4413481E7, 1.34217729E8, (-989.867871), 571.8, 2456.95205028418, (-3331.3338)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 4503599627370496L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 4503599627370496L, 0L}, longArray0);
      
      float[] floatArray0 = new float[11];
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 4503599627370496L;
      long[][] longArray1 = new long[8][2];
      longArray1[0] = longArray0;
      double[] doubleArray0 = new double[6];
      double double0 = 20.0;
      doubleArray0[0] = 20.0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 4.5035996E15F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {400.0, 0.0, 0.0, 2.028240960365167E31, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {20.0, 0.0, 0.0, 4.503599627370496E15, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 4.5035996E15F;
      doubleArray2[1] = (double) 4.5035996E15F;
      doubleArray2[2] = (double) 0L;
      doubleArray2[3] = (double) 4503599627370496L;
      doubleArray2[4] = (double) 4503599627370496L;
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2427.33323921;
      doubleArray0[1] = 2.17333333333333325E18;
      doubleArray0[2] = (-2.6033824355191673E-8);
      doubleArray0[3] = (-1663.092063696541);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][2];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-1663.092063696541), (-2.6033824355191673E-8), 2427.33323921, 2.17333333333333325E18}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2427.33323921;
      doubleArray2[1] = (-2.6033824355191673E-8);
      doubleArray2[2] = 2.17333333333333325E18;
      doubleArray2[3] = (-2.6033824355191673E-8);
      doubleArray2[4] = 2.17333333333333325E18;
      doubleArray2[5] = (-1663.092063696541);
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3.0735574755575265E18, double0, 0.01);
      assertArrayEquals(new double[] {2427.33323921, (-2.6033824355191673E-8), 2.17333333333333325E18, (-2.6033824355191673E-8), 2.17333333333333325E18, (-1663.092063696541)}, doubleArray2, 0.01);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,663.092 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.32;
      double double0 = 1634.5749890403;
      double double1 = MathArrays.linearCombination(0.09090909090909091, 3.32, 1054.3, (-2027.56), 0.09090909090909091, 2117.4241022931, 1634.5749890403, 1634.5749890403);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(534371.6817144869, double1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.32}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 27;
      intArray0[1] = 9;
      int int0 = 134217729;
      intArray0[2] = 134217729;
      intArray0[3] = 1008;
      intArray0[4] = 2;
      intArray0[5] = (-1);
      intArray0[6] = (-971);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-971));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(15, doubleArray0.length);
      assertEquals(29, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray2, doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = 19.739208802178716;
      doubleArray4[1] = (-3990.11866638854);
      doubleArray4[2] = (-749.5);
      doubleArray4[3] = (-720.35145958);
      doubleArray4[4] = 1196.258;
      doubleArray4[5] = 584.4881;
      doubleArray4[6] = 587.7148272;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray4, doubleArray3);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertEquals(7, doubleArray4.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {19.739208802178716, (-3990.11866638854), (-749.5), (-720.35145958), 1196.258, 584.4881, 587.7148272}, doubleArray4, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 273;
      intArray0[1] = 523;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 523;
      intArray1[1] = 37;
      intArray1[2] = 523;
      intArray1[3] = 523;
      intArray1[4] = 523;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(546.5308774442666, double0, 0.01);
      assertArrayEquals(new int[] {273, 523}, intArray0);
      assertArrayEquals(new int[] {523, 37, 523, 523, 523}, intArray1);
      
      double[] doubleArray3 = MathArrays.scale(523, doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2906.39908);
      doubleArray0[1] = (-686.7000383);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-686.7000383);
      doubleArray1[1] = (-2906.39908);
      doubleArray1[2] = (-2906.39908);
      doubleArray1[3] = (-686.7000383);
      doubleArray1[4] = 1.3039999999999996E19;
      doubleArray1[5] = (-2906.39908);
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 4941.0;
      doubleArray0[1] = 4941.0;
      double[] doubleArray1 = MathArrays.scale(4941.0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 4941.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.4413481E7}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 4941.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.4413481E7}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 4941.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.4413481E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.20627009621E11}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 4941.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.4413481E7}, doubleArray3, 0.01);
      
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 4941.0;
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 4503599627370496L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 4503599627370496L, 0L}, longArray0);
      
      float[] floatArray0 = new float[11];
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 4503599627370496L;
      long[][] longArray1 = new long[8][2];
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      double double0 = MathArrays.linearCombination(1226.21437683638, (double) 0L, (double) 0L, 1226.21437683638, (double) 0L, 3745.0, (double) 0.0F, 3745.0);
      assertEquals(0.0, double0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 724);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.25;
      doubleArray0[1] = 1804.684;
      doubleArray0[2] = 1813951.0488999998;
      doubleArray0[3] = (-1768.2358265859837);
      doubleArray0[4] = 1302.97821;
      doubleArray0[5] = 56.0;
      doubleArray0[6] = 2589.7715;
      doubleArray0[7] = 1367.8481254905605;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.25, 1804.684, 1813951.0488999998, (-1768.2358265859837), 1302.97821, 56.0, 2589.7715, 1367.8481254905605}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 15, 1884);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4941.0;
      double[] doubleArray1 = MathArrays.scale(6.52E18, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4941.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.221532E22, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {4941.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.221532E22, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "must have n >= 0 for n!, got n = {0}";
      stringArray0[1] = "s:tr.";
      stringArray0[2] = "";
      stringArray0[3] = "NaN";
      stringArray0[4] = "must have n >= 0 for n!, got n = {0}";
      stringArray0[5] = "NaN";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 4503599627370496L;
      longArray0[2] = 0L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4503599627370496L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination((-853.16148), 4195660.044381504, (-1.9841269659586505E-4), (-1.9841269659586505E-4));
      assertEquals((-3.5795755330413895E9), double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double2 = MathArrays.linearCombination((double) 0L, (-1.0), 1.304E19, (-1270.25088247986), (-377.2074748489), 5014335.615122618, 5014335.615122618, (double) 4503599627370496L);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(6.018488500237565E21, double2, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray1, 4503599627370496L);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15, Double.NaN, Double.NaN}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 3.141592653589793;
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 3910;
      intArray0[2] = 3910;
      intArray0[3] = 0;
      intArray0[5] = 0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean0);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {3910, 0, 3910, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-1101);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, intArray1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = (-29);
      int int1 = 3910;
      int int2 = 0;
      int[] intArray0 = new int[7];
      intArray0[0] = 3910;
      intArray0[2] = 0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "FOC8Znkm4";
      stringArray0[2] = "n";
      stringArray0[3] = "n";
      stringArray0[4] = "";
      stringArray0[5] = "n";
      stringArray0[6] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      int[] intArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "not positive definite matrix";
      double double0 = MathArrays.linearCombination(2107.83004982, (-1895.23632141243), (-83.243), (-1215.47306595));
      assertEquals((-3893656.4453545604), double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2107.83004982;
      doubleArray0[1] = (-3893656.4453545604);
      doubleArray0[2] = 1595.0;
      doubleArray0[3] = (-1.9841269659586505E-4);
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {2107.83004982, (-3893656.4453545604), 1595.0, (-1.9841269659586505E-4)}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination(0.4311765432357788, 4076.0, (-1.9841269659586505E-4), 3.141592653589793, 1813951.0488999998, (-926.879443704724), 1.304E19, (-2.957007209750105E-8));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-3.872750523330507E11), double2, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2107.83004982, (-3893656.4453545604), 1595.0, (-1.9841269659586505E-4)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2107.83004982, (-3893656.4453545604), 1595.0, (-1.9841269659586505E-4)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2447.248F);
      floatArray0[3] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-2447.248F), (-1.0F)}, floatArray0, 0.01F);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 44, 44);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.09090909090909091, 6.084722881095501E31, 3.834E-20, (-1877.629494951), 514.1392574719226, 5.041914939880371, 6.084722881095501E31, 514.1392574719226);
      assertEquals(3.128948060634413E34, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 2218.554F;
      floatArray0[2] = (-121.8F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.NaN, 2218.554F, (-121.8F), (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2368.834163821823, 854.465551, 2368.834163821823, 854.465551, 173.45718, 173.45718);
      assertEquals(4078261.771328829, double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3393.1F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-3393.1F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4078261.771328829;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-3393.1F);
      doubleArray1[1] = (double) (-3393.1F);
      doubleArray1[2] = (double) (-3393.1F);
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4081654.8714264855, double1, 0.01);
      assertArrayEquals(new double[] {4078261.771328829}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3393.10009765625), (-3393.10009765625), (-3393.10009765625)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-3393.1F);
      doubleArray2[1] = 2368.834163821823;
      doubleArray2[2] = (double) (-3393.1F);
      doubleArray2[3] = 4078261.771328829;
      doubleArray2[4] = 2368.834163821823;
      doubleArray2[5] = (double) (-3393.1F);
//      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4941.0;
      doubleArray0[1] = 4941.0;
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = 284;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {3, 284}, intArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {4941.0, 4941.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3910;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-3993);
      doubleArray0[3] = (-840.6137573677337);
      double[] doubleArray1 = MathArrays.scale(3910, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3910.0, 0.0, (-3993.0), (-840.6137573677337)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.52881E7, 0.0, (-1.561263E7), (-3286799.7913078386)}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3910.0, 0.0, (-3993.0), (-840.6137573677337)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.52881E7, 0.0, (-1.561263E7), (-3286799.7913078386)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3910.0, 0.0, (-3993.0), (-840.6137573677337)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.52881E7, 0.0, (-1.561263E7), (-3286799.7913078386)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5.9776471E10, 0.0, (-1.220907666E11), (-2.5702774368027298E10), 6.234123159E10, 2.62483831333844E10, 2.762929122286765E9}, doubleArray2, 0.01);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-840.6137573677337);
      doubleArray3[1] = (-840.6137573677337);
      doubleArray3[2] = (-840.6137573677337);
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) (-3993);
      doubleArray3[6] = (-172.042463);
      doubleArray3[7] = (-840.6137573677337);
//      try { 
        MathArrays.ebeMultiply(doubleArray3, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 582.93859116;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.34217729E8;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "n";
      stringArray0[1] = "n";
      stringArray0[2] = "n";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "n";
      stringArray0[7] = "";
      stringArray0[8] = "n";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 3910;
      intArray0[2] = 3910;
      intArray0[3] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3910;
      doubleArray0[1] = (double) (-3993);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3910;
      doubleArray0[4] = (double) (-3993);
      doubleArray0[5] = (double) 0;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3910.0, (-3993.0), 0.0, 3910.0, (-3993.0), 0.0}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 201;
      intArray1[1] = 2;
      int[] intArray2 = MathArrays.copyOf(intArray1, 0);
      assertEquals(0, intArray2.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {201, 2}, intArray1);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -3,993 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 582.93859116;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {582.93859116, 0.0, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(1.34217729E8, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {582.93859116, 0.0, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      double double2 = MathArrays.linearCombination(1.34217729E8, 1.34217729E8, 723.560551811203, 1.0, Double.NaN, 1.304E19, 582.93859116, 1.304E19);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {582.93859116, 0.0, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {582.93859116, 0.0, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1.304E19;
      doubleArray3[1] = Double.NaN;
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = 1.34217729E8;
      double double1 = 0.0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 582.93859116;
      doubleArray0[2] = 582.93859116;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 582.93859116, 582.93859116}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      
      double double2 = MathArrays.linearCombination(582.93859116, 582.93859116, Double.NaN, (-1048.727));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, doubleArray1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4.23719669792332E-8;
      doubleArray0[1] = 4.23719669792332E-8;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3.590767171378457E-15, double0, 0.01);
      assertArrayEquals(new double[] {4.23719669792332E-8, 4.23719669792332E-8}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4.23719669792332E-8, 4.23719669792332E-8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.7953835856892283E-15, 3.590767171378457E-15, 1.7953835856892283E-15}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 134217729;
      intArray0[1] = 2279;
      intArray0[2] = 38;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {134217729, 2279, 38}, intArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.scale((-2600.0), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1625;
      intArray0[2] = 1625;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1625;
      intArray0[6] = 1625;
      intArray0[7] = 1625;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 1148;
      intArray1[2] = 1625;
      intArray1[3] = 1148;
      int int0 = MathArrays.distance1(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1625, int0);
      assertArrayEquals(new int[] {0, 1625, 1625, 0, 0, 1625, 1625, 1625}, intArray0);
      assertArrayEquals(new int[] {0, 1148, 1625, 1148}, intArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.scale(0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1625;
      intArray0[2] = 1625;
      intArray0[3] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1625;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 1625.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 2640625.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination((double) 1625, (double) 0, 1649.28891282, 1522.870812392516, 0.0, (-2168.801950758868), 1522.870812392516, 1522.870812392516);
      assertEquals(4830789.457773204, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 582.93859116;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "n";
      stringArray0[1] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1407L;
      longArray0[1] = 4503599627370496L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1407L, 4503599627370496L, 0L}, longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1407L;
      floatArray0[1] = (float) 4503599627370496L;
      floatArray0[2] = (float) 1407L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 4503599627370496L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 1407L;
      floatArray0[7] = (float) 1407L;
      floatArray0[8] = (float) 1407L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1407.0F, 4.5035996E15F, 1407.0F, 0.0F, 4.5035996E15F, 0.0F, 1407.0F, 1407.0F, 1407.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 177;
      intArray0[2] = 1767;
      intArray0[3] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 177, 1767, 0}, intArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = 4941.0;
      doubleArray0[1] = 4941.0;
      double[] doubleArray1 = MathArrays.scale(4941.0, doubleArray0);
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[1];
      float float0 = 56.0F;
      floatArray0[0] = 56.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {56.0F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = 0.0;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 4941.0;
      doubleArray3[1] = 4941.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) 56.0F;
      doubleArray3[4] = (-2455.179378665051);
//      try { 
        MathArrays.ebeDivide(doubleArray3, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 14
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 4503599627370496L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 4503599627370496L, 0L}, longArray0);
      
      float[] floatArray0 = new float[11];
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 4503599627370496L;
      long[][] longArray1 = new long[8][2];
      longArray1[0] = longArray0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4503599627370496L;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {4.503599627370496E15}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4.503599627370496E15}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {4.503599627370496E15}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination((double) 0.0F, (double) 4503599627370496L, (-655.8303), 5014335.615122618, (-0.2499999997677497), (-655.8303), (-137.079606817), 1.0);
      assertEquals((-3.288553203888583E9), double0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-3206);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-3206));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1625;
      intArray0[2] = 1625;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "not positive definite matrix";
      stringArray0[1] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(1813951.0488999998, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "not positive definite matrix";
      stringArray0[0] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 582.93859116;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "n";
      stringArray0[1] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4.23719669792332E-8;
      doubleArray0[1] = (-2048.331038768271);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {4.23719669792332E-8, (-2048.331038768271)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {4.23719669792332E-8, (-2048.331038768271)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {4.23719669792332E-8, (-2048.331038768271)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.47439339584664E-8, (-4096.662077536542)}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {4.23719669792332E-8, (-2048.331038768271)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.47439339584664E-8, (-4096.662077536542)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.2711590093769958E-7, (-6144.993116304813)}, doubleArray3, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2048.331038768271, double1, 0.01);
      assertArrayEquals(new double[] {4.23719669792332E-8, (-2048.331038768271)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.47439339584664E-8, (-4096.662077536542)}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2.2104554F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 117.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-6985.808F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-686.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2.2104554F, (-1.0F), 117.0F, 0.0F, (-6985.808F), 1.0F, (-686.0F)}, floatArray0, 0.01F);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertEquals(2048.331038768271, double2, 0.01);
      assertArrayEquals(new double[] {4.23719669792332E-8, (-2048.331038768271)}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,048.331 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 582.93859116;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 1.34217729E8, 1.34217729E8, 0.0, 1.304E19, 582.93859116, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination((-3791.63263134641), Double.NaN, 1084.7203561810345, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 1.34217729E8, 1.34217729E8, 0.0, 1.304E19, 582.93859116, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.34217729E8, 1.34217729E8, 1.34217729E8, 0.0, 1.304E19, 582.93859116, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (-1742.2773916313);
      doubleArray0[5] = (-1742.2773916313);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, (-1742.2773916313), (-1742.2773916313), 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, (-1742.2773916313), (-1742.2773916313), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, (-3484.5547832626), (-3484.5547832626), 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace((-440.08), doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, -0.0, -0.0, -0.0, 766741.4345091025, 766741.4345091025, -0.0, -0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, -0.0, -0.0, -0.0, 766741.4345091025, 766741.4345091025, -0.0, -0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, -0.0, -0.0, -0.0, 766741.4345091025, 766741.4345091025, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, (-3484.5547832626), (-3484.5547832626), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, (-3484.5547832626), (-3484.5547832626), 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, -0.0, -0.0, -0.0, 766741.4345091025, 766741.4345091025, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, -0.0, -0.0, -0.0, 766741.4345091025, 766741.4345091025, -0.0, -0.0}, doubleArray3, 0.01);
      
      double double1 = MathArrays.linearCombination((-1742.2773916313), (-377.2074748489), -0.0, 1.304E19, (-1.0), -0.0, (-2689.417508417589), (-3447.2673304));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(9928341.169957293, double1, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2146945969));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 177.3531385479921;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {177.3531385479921, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 4503599627370496L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 4503599627370496L, 0L}, longArray0);
      
      float[] floatArray0 = new float[11];
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 4503599627370496L;
      floatArray0[3] = (float) 4503599627370496L;
      long[][] longArray1 = new long[8][2];
      longArray1[0] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(8, longArray1.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 4503599627370496L;
      doubleArray1[2] = (double) 4.5035996E15F;
      doubleArray1[3] = (double) 4.5035996E15F;
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (double) 0L;
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 4503599627370496L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 4503599627370496L, 0L}, longArray0);
      
      float[] floatArray0 = new float[11];
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 4503599627370496L;
      floatArray0[3] = (float) 4503599627370496L;
      long[][] longArray1 = new long[8][2];
      longArray1[0] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(11, floatArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 4503599627370496L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 4503599627370496L, 0L}, longArray0);
      
      float[] floatArray0 = new float[11];
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 4503599627370496L;
      floatArray0[3] = (float) 4503599627370496L;
      double double0 = MathArrays.linearCombination(873.2752157299, 334.29715, (double) 0.0F, (double) 4.5035996E15F, (-48.1550911), (double) 0L);
      assertEquals(291933.4157841407, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 4.5035996E15F;
      doubleArray0[2] = 291933.4157841407;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (0 <= 4,503,599,627,370,496)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4.23719669792332E-8;
      doubleArray0[1] = (-2048.27);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {4.23719669792332E-8, (-2048.27)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {4.23719669792332E-8, (-2048.27)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {4.23719669792332E-8, (-2048.27)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.47439339584664E-8, (-4096.54)}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {4.23719669792332E-8, (-2048.27)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.47439339584664E-8, (-4096.54)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.2711590093769958E-7, (-6144.8099999999995)}, doubleArray3, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2048.27, double1, 0.01);
      assertArrayEquals(new double[] {4.23719669792332E-8, (-2048.27)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.47439339584664E-8, (-4096.54)}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 117.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-6985.808F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-686.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 117.0F, 0.0F, (-6985.808F), 1.0F, (-686.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2001.2609278003;
      doubleArray0[1] = 2604.16599;
      doubleArray0[2] = (-396.4);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2604.16599);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2001.2609278003, 2604.16599, (-396.4)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1238.1996473467684, 1611.2228873596482, (-245.25654470641655)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2001.2609278003;
      doubleArray2[1] = (-396.4);
      doubleArray2[2] = 2604.16599;
      doubleArray2[3] = 2604.16599;
      doubleArray2[4] = (-14.53138276);
      doubleArray2[5] = (-396.4);
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2001.2609278003, 2604.16599, (-396.4)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1238.1996473467684, 1611.2228873596482, (-245.25654470641655)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2001.2609278003, (-396.4), 2604.16599, 2604.16599, (-14.53138276), (-396.4)}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1656;
      intArray0[1] = 1205;
      intArray0[2] = (-1534);
      intArray0[3] = 8;
      intArray0[4] = 1840;
      intArray0[5] = 138;
      intArray0[6] = 284;
      intArray0[7] = (-1067);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1656, 1205, (-1534), 8, 1840, 138, 284, (-1067)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 0.0, 0.0, 3.141592653589793, 0.0);
      assertEquals(19.739208802178716, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.4413481E7);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.141592653589793, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.4413481E7, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination(1.34217729E8, (-3201.042403804), 0.0, 0.0, 2344481.5689000003, (-3235.0021614136713), 19.739208802178716, 3.141592653589793);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-4.372210447520473E11), double1, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 131;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 131);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-49);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-49), (-49));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = MathArrays.scale(0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination(0.5463024377822876, 0.0, 0.0, (-8.0E298));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, true, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(Double.NaN, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      double double3 = MathArrays.linearCombination(0.0, Double.NaN, (-8.0E298), 0.0, Double.NaN, 3.4439717236742845E-8);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 8;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 8, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[2] = 3910;
      intArray0[3] = (-3993);
      int int1 = 0;
      intArray0[4] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, 3910, (-3993), 0}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[2] = (long) (-3993);
      longArray0[3] = (long) 3910;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[6][4];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      double double1 = MathArrays.linearCombination((double) 3910L, (double) 3910, 1664.850842281808, (double) (-3993L), (-532.528070033), (double) 0L, (double) 0, (double) (-3993));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8640350.58676874, double1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 582.93859116;
      doubleArray0[1] = 582.93859116;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {582.93859116, 582.93859116, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(2100.14023, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {582.93859116, 582.93859116, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      double[][] doubleArray2 = new double[8][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.304E19;
      doubleArray3[1] = 582.93859116;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 2100.14023;
      doubleArray3[4] = 4.983191803254889E-7;
      doubleArray3[5] = 723.560551811203;
      doubleArray3[6] = 723.560551811203;
      doubleArray3[0] = 2100.14023;
      doubleArray2[5] = doubleArray3;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "not positive definite matrix";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1495.6143245296);
      doubleArray0[1] = 2016.621;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2203.9453;
      doubleArray0[4] = 2203.9453;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1.601837323616331E7, double0, 0.01);
      assertArrayEquals(new double[] {(-1495.6143245296), 2016.621, 1.0, 2203.9453, 2203.9453}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 1625;
      intArray0[2] = (-1902);
      intArray0[4] = 1625;
      intArray0[5] = 1625;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {0, 1625, (-1902), 0, 1625, 1625}, intArray0);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 1625, (-1902), 0, 1625, 1625}, intArray0);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1625;
      intArray0[2] = 0;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {0, 1625, 0}, intArray0);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 1625, 0}, intArray0);
      
      long[][] longArray0 = new long[1][1];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (-1409L);
      longArray1[3] = (long) 0;
      longArray1[4] = (-826L);
      longArray1[5] = (long) 0;
      longArray1[6] = 0L;
      longArray1[7] = (long) 0;
      longArray1[8] = (long) 130;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1742.2773916313);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double double0 = MathArrays.linearCombination(2110.37217244, 1786.975504439, 1.3039999999999996E19, 0.0, 0.0, (-838.500646), 3.834E-20, 0.0);
      assertEquals(3771183.3773999973, double0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 3206);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 0.0, 0.0, 3.141592653589793, 0.0);
      assertEquals(19.739208802178716, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 19.739208802178716;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2128.033);
      doubleArray0[3] = 19.739208802178716;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {19.739208802178716, 0.0, (-2128.033), 19.739208802178716, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {19.739208802178716, 0.0, (-2128.033), 19.739208802178716, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 0;
      floatArray1[2] = 56.0F;
      floatArray1[3] = (float) 0;
      floatArray1[4] = 56.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 56.0F, 0.0F, 56.0F}, floatArray1, 0.01F);
      
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) 0;
      floatArray2[1] = 56.0F;
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray2);
      assertEquals(2, floatArray2.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {0.0F, 56.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$VALUES";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "not positive definite matrix";
      stringArray0[1] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 582.93859116;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {582.93859116, 0.0, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      double double1 = 2100.14023;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.scale((-2071.95134), doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertEquals(15, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      
      double double0 = 0.0;
      double double1 = MathArrays.linearCombination(199.7947224, 1870.596318568, (-269.062), 1870.596318568);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-129571.11447578769), double1, 0.01);
      
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-1057.3163);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 1870.596318568;
      doubleArray4[4] = (-2071.95134);
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, doubleArray4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 582.93859116;
      doubleArray0[1] = 582.93859116;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {582.93859116, 582.93859116, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(2100.14023, 0.0, 582.93859116, 582.93859116);
      assertEquals(339817.4010636056, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {582.93859116, 582.93859116, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      double double2 = MathArrays.linearCombination(1.34217729E8, 1.34217729E8, 723.560551811203, 1.0, Double.NaN, 1.304E19, 582.93859116, 1.304E19);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {582.93859116, 582.93859116, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double3 = MathArrays.distanceInf(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(Double.NaN, double3, 0.01);
      assertArrayEquals(new double[] {582.93859116, 582.93859116, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray2, 0.01);
      
      long[][] longArray1 = new long[3][1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = new long[8];
      longArray2[0] = 4503599627370496L;
      longArray2[1] = 176L;
      longArray2[2] = 1407L;
      longArray2[3] = 1L;
      longArray2[4] = (-1152L);
      longArray2[5] = 67L;
      longArray2[6] = 2883L;
      longArray2[7] = 1L;
      longArray1[0] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 4503599627370496L;
      longArray3[1] = 67L;
      longArray1[1] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1L;
      longArray4[1] = 67L;
      longArray4[2] = 4503599627370496L;
      longArray1[2] = longArray4;
//      try { 
        MathArrays.checkNonNegative(longArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,152 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1957.1), (-1957.1), 4630.5661905, (-377.2074748489), 191.150733, (-377.2074748489), (-377.2074748489), (-1957.1));
      assertEquals(2749685.4938771403, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 191.150733;
      doubleArray0[1] = 2749685.4938771403;
      doubleArray0[2] = 191.150733;
      doubleArray0[3] = (-1957.1);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {191.150733, 2749685.4938771403, 191.150733, (-1957.1)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 1019);
      assertEquals(4, doubleArray0.length);
      assertEquals(1019, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {191.150733, 2749685.4938771403, 191.150733, (-1957.1)}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[5][0];
      long[] longArray1 = new long[3];
      longArray1[0] = 1L;
      longArray1[1] = (long) 1019;
      longArray1[2] = (long) 1019;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (long) 1019;
      longArray4[1] = 1L;
      longArray4[2] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 1L;
      longArray5[1] = (long) 1019;
      longArray5[2] = 1L;
      longArray5[3] = 1L;
      longArray5[4] = (long) 1019;
      longArray5[5] = (long) 1019;
      longArray0[4] = longArray5;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      long[] longArray0 = new long[3];
      longArray0[0] = 2883L;
      longArray0[1] = 4577762542105553359L;
      long long0 = 67L;
      longArray0[2] = 67L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2883L, 4577762542105553359L, 67L}, longArray0);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 67L;
      doubleArray1[1] = (double) 2883L;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.9868161777724352E-8;
      doubleArray1[4] = (-0.16624882440418567);
      doubleArray1[5] = (double) 4577762542105553359L;
      doubleArray1[6] = (double) 67L;
      doubleArray1[7] = (double) 67L;
      doubleArray1[8] = (double) 67L;
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = MathArrays.scale(0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 56.0F;
      floatArray0[1] = 56.0F;
      floatArray0[2] = 56.0F;
      floatArray0[3] = 56.0F;
      floatArray0[4] = 56.0F;
      floatArray0[5] = 56.0F;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {56.0F, 56.0F, 56.0F, 56.0F, 56.0F, 56.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {56.0F, 56.0F, 56.0F, 56.0F, 56.0F, 56.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "not positive definite matrix";
      stringArray0[1] = "$VALUES";
      double double0 = MathArrays.linearCombination(1.304E19, 952.5206777526047, 952.5206777526047, 1.304E19, 1.3039999999999996E19, (-1697.1));
      assertEquals(2.711555275787938E21, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.scale(310.582666805397, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.scale((-3791.633), doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray2, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 3491);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 582.93859116;
      doubleArray0[1] = 582.93859116;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {582.93859116, 582.93859116, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(2100.14023, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {582.93859116, 582.93859116, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      double double2 = MathArrays.linearCombination(1.34217729E8, 1.34217729E8, 723.560551811203, 1.0, Double.NaN, 1.304E19, 582.93859116, 1.304E19);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {582.93859116, 582.93859116, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Integer>[][] fieldElementArray0 = MathArrays.buildArray(field0, 1, 1);
      assertEquals(1, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 1;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 0.0, 0.0, 3.141592653589793, 0.0);
      assertEquals(19.739208802178716, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.4413481E7);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.141592653589793, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.4413481E7, 0.0}, doubleArray1, 0.01);
      
      double[][] doubleArray2 = new double[9][8];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray0;
      int[] intArray0 = new int[2];
      intArray0[0] = (-3734);
      intArray0[1] = 134217729;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-3734), 134217729}, intArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-3734));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[8];
//      try { 
        MathArrays.normalizeArray(doubleArray0, (-1905.4882027));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 237.926;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-688.0145203);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 3.834E-20;
      doubleArray0[8] = 3.834E-20;
      double[] doubleArray1 = MathArrays.scale(3.834E-20, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 237.926, 3.834E-20, (-688.0145203), 3.834E-20, 3.834E-20, 3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 9.12208284E-18, 1.4699556E-39, (-2.6378476708301996E-17), 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7.790364287902534E-34, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 237.926, 3.834E-20, (-688.0145203), 3.834E-20, 3.834E-20, 3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 9.12208284E-18, 1.4699556E-39, (-2.6378476708301996E-17), 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(727.9922812912504, double1, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 237.926, 3.834E-20, (-688.0145203), 3.834E-20, 3.834E-20, 3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 9.12208284E-18, 1.4699556E-39, (-2.6378476708301996E-17), 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-2716L);
      longArray0[1] = (-506L);
      longArray0[2] = 2819561105158720014L;
      longArray0[3] = (-1025L);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,716 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1407L;
      longArray0[1] = 4503599627370496L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1407L, 4503599627370496L, 0L}, longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1407L;
      floatArray0[1] = (float) 4503599627370496L;
      floatArray0[2] = (float) 1407L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 4503599627370496L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 1407L;
      floatArray0[7] = (float) 1407L;
      floatArray0[8] = (float) 1407L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 4503599627370496L;
      doubleArray0[2] = (double) 1407.0F;
      doubleArray0[3] = (double) 1407.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 4.503599627370496E15, 1407.0, 1407.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 0.0, 0.0, 3.141592653589793, 0.0);
      assertEquals(19.739208802178716, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(9.869604401089358, double1, 0.01);
      assertArrayEquals(new double[] {3.141592653589793, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2061);
      intArray1[1] = (-2061);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3.141592653589793, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-2146609329));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = 4941.0;
      doubleArray0[1] = 4941.0;
      double[] doubleArray1 = MathArrays.scale(4941.0, doubleArray0);
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 56.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {56.0F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 56.0F;
      doubleArray2[1] = (double) 56.0F;
      doubleArray2[2] = (double) 56.0F;
      doubleArray2[3] = (double) 56.0F;
      doubleArray2[4] = (double) 56.0F;
      doubleArray2[5] = (double) 56.0F;
      doubleArray2[6] = (double) 56.0F;
      doubleArray2[7] = 4941.0;
      doubleArray2[8] = (-2702.2619103);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (56 <= 56)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 0;
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Name is null
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 582.93859116;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {582.93859116, 0.0, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(2100.14023, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {582.93859116, 0.0, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {582.93859116, 0.0, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 1042;
      intArray0[2] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      assertEquals(2, intArray1.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, 1042}, intArray1);
      assertArrayEquals(new int[] {2, 1042, 2}, intArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {582.93859116, 0.0, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1076.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1531.17);
      doubleArray0[3] = 359.4688125763532;
      doubleArray0[4] = 2239.271224109;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1346.83;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 3285.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1076.0), 0.0, (-1531.17), 359.4688125763532, 2239.271224109, 0.0, 1346.83, 0.0, 3285.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1157776.0, 0.0, 2344481.5689000003, 129217.82721505333, 5014335.615122618, 0.0, 1813951.0488999998, 0.0, 1.0791225E7}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.2318208206126226E7, double0, 0.01);
      assertArrayEquals(new double[] {(-1076.0), 0.0, (-1531.17), 359.4688125763532, 2239.271224109, 0.0, 1346.83, 0.0, 3285.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1157776.0, 0.0, 2344481.5689000003, 129217.82721505333, 5014335.615122618, 0.0, 1813951.0488999998, 0.0, 1.0791225E7}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-890.395F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.4E-45F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-890.395F), 0.0F, 1.4E-45F}, floatArray0, 0.01F);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4.433159822621905E10, double1, 0.01);
      assertArrayEquals(new double[] {(-1076.0), 0.0, (-1531.17), 359.4688125763532, 2239.271224109, 0.0, 1346.83, 0.0, 3285.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1157776.0, 0.0, 2344481.5689000003, 129217.82721505333, 5014335.615122618, 0.0, 1813951.0488999998, 0.0, 1.0791225E7}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 176;
      intArray0[1] = (-1805);
      intArray0[2] = 4076;
      intArray0[3] = 0;
      intArray0[4] = 1148;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {176, (-1805), 4076, 0, 1148}, intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 176;
      longArray0[1] = (long) 1148;
      longArray0[2] = (long) (-1805);
      longArray0[3] = 5322L;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 1148;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,805 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = 1.304E19;
      double double2 = MathArrays.linearCombination(3.141592653589793, (-377.2074748489), Double.POSITIVE_INFINITY, (-377.2074748489), 1.304E19, (-2196.7203044793614));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-1116);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1116));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1407L;
      longArray0[1] = 4503599627370496L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1407L, 4503599627370496L, 0L}, longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1407L;
      floatArray0[1] = (float) 4503599627370496L;
      floatArray0[2] = (float) 1407L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 4503599627370496L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 1407L;
      floatArray0[7] = (float) 1407L;
      floatArray0[8] = (float) 1407L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1407.0F, 4.5035996E15F, 1407.0F, 0.0F, 4.5035996E15F, 0.0F, 1407.0F, 1407.0F, 1407.0F}, floatArray0, 0.01F);
      
      long[][] longArray1 = new long[2][0];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 0.0, 0.0, 3.141592653589793, 0.0);
      assertEquals(19.739208802178716, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.4413481E7);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.141592653589793, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.4413481E7, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[9][8];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray0;
      doubleArray2[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.4413481E7, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination(19.739208802178716, 1.5, 3052.8507967859423, (-2918.802990136041));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-8910640.425284801), double1, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {3.141592653589793, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.700416E38, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-547);
      intArray0[1] = 20;
      intArray0[2] = (-405);
      intArray0[3] = 3278;
      intArray0[4] = (-2146609329);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-547), 20, (-405), 3278, (-2146609329)}, intArray0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[1] = 20;
      intArray1[2] = (-1188);
      intArray1[3] = (-405);
      intArray1[4] = (-547);
      intArray1[5] = 130;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray1, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1407L;
      longArray0[1] = 4503599627370496L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1407L, 4503599627370496L, 0L}, longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1407L;
      floatArray0[1] = (float) 4503599627370496L;
      floatArray0[2] = (float) 1407L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 4503599627370496L;
      floatArray0[5] = (float) 0L;
      floatArray0[7] = (float) 1407L;
      floatArray0[8] = (float) 1407L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1407.0F, 4.5035996E15F, 1407.0F, 0.0F, 4.5035996E15F, 0.0F, 0.0F, 1407.0F, 1407.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 177;
      intArray0[2] = 1767;
      intArray0[3] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 177, 1767, 0}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][3];
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0.0F;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 1407L;
      doubleArray3[1] = (double) 0L;
      doubleArray3[2] = (double) 1407.0F;
      doubleArray3[3] = (double) 4503599627370496L;
      doubleArray3[4] = (double) 1407L;
      doubleArray3[5] = 0.0;
      doubleArray1[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (double) 0.0F;
      doubleArray1[3] = doubleArray4;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3794.774224);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.304E19);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, (-3794.774224), 1.0, 0.0, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, 3.4391517501444995E15, -0.0, 1.3050804413872835E19, (-3.4391517501444995E15), -0.0, (-1.0804413872834438E16)}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][3];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {3.141592653589793, 1.0, 0.0, 0.0, 0.0, 0.0, (-1.0), (-3794.774224)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(0.0, (-1.0), (-3.141592653589793), 1.304E19);
      assertEquals((-4.09663682028109E19), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 191.150733;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {191.150733}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      double double0 = 1.0;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 4.983191803254889E-7);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {191.150733}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.983191803254889E-7}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[6][4];
      doubleArray3[0] = doubleArray2;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-3794.774224);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray3[1] = doubleArray4;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray2;
      doubleArray3[5] = doubleArray2;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3794.774224);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.304E19);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.304E19, (-1.0), 0.0, (-3794.774224), 1.0, 0.0, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.3040000000000004E19, (-1.0000000000000002), 0.0, (-3794.774224000001), 1.0000000000000002, 0.0, 3.141592653589794}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][3];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.304E19, 3.141592653589793, 1.0, 0.0, 0.0, 0.0, (-1.0), (-3794.774224)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(0.0, (-1.0), (-3.141592653589793), 1.304E19);
      assertEquals((-4.09663682028109E19), double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.304E19, 3.141592653589793, 1.0, 0.0, 0.0, 0.0, (-1.0), (-3794.774224)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.3040000000000004E19, 3.141592653589794, 1.0000000000000002, 0.0, 0.0, 0.0, (-1.0000000000000002), (-3794.774224000001)}, doubleArray1, 0.01);
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 201.8943745659;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (-3.141592653589793);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 3.141592653589793;
      doubleArray3[6] = (-4193.88878911);
      doubleArray3[7] = (-3.141592653589793);
      doubleArray3[8] = 1.0;
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1287.32105310407;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1017.94;
      doubleArray0[3] = (-455.647838030753);
      doubleArray0[4] = (-2019.51613303334);
      doubleArray0[5] = (-1111.783);
      doubleArray0[6] = (-62.95);
      doubleArray0[7] = 1.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1287.32105310407, 1.34217729E8, 1017.94, (-455.647838030753), (-2019.51613303334), (-1111.783), (-62.95), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1657195.4937649716, 1.801439877791744E16, 1036201.8436000001, 207614.95230209932, 4078445.4115819354, 1236061.4390889998, 3962.7025000000003, 1.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1287.32105310407, 1.34217729E8, 1017.94, (-455.647838030753), (-2019.51613303334), (-1111.783), (-62.95), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1657195.4937649716, 1.801439877791744E16, 1036201.8436000001, 207614.95230209932, 4078445.4115819354, 1236061.4390889998, 3962.7025000000003, 1.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2145671424);
      intArray0[1] = (-2145144340);
      intArray0[2] = (-1);
      intArray0[3] = 1733;
      intArray0[4] = (-44);
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2145144340);
      intArray1[1] = 564;
      intArray1[2] = (-2145671424);
      intArray1[3] = (-2145671424);
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-795);
      intArray0[1] = 0;
      intArray0[2] = (-3715);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1118);
      intArray0[6] = (-2886);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-795), 0, (-3715), 0, 0, (-1118), (-2886)}, intArray0);
      assertArrayEquals(new int[] {(-795), 0, (-3715), 0, 0, (-1118), (-2886)}, intArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2886);
      doubleArray0[1] = (double) (-795);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-3715);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) (-3715);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2886.0), (-795.0), 0.0, 0.0, (-3715.0), 0.0, 0.0, 0.0, (-3715.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3715);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-3715.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = MathArrays.distanceInf(intArray1, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-795), 0, (-3715), 0, 0, (-1118), (-2886)}, intArray0);
      assertArrayEquals(new int[] {(-795), 0, (-3715), 0, 0, (-1118), (-2886)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1230.48064312053;
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-891);
      intArray0[2] = 3910;
      intArray0[3] = (-3993);
      intArray0[4] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, (-891), 3910, (-3993), 0}, intArray0);
      
      long[][] longArray0 = new long[1][5];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) (-3993);
      longArray1[2] = (long) (-3993);
      longArray1[3] = 1L;
      longArray1[4] = (long) (-891);
      longArray0[0] = longArray1;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -3,993 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination((-4089.582874), 1813951.0488999998, 0.0, (-4089.582874), (-1780.0318844202982), 1856.5);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-7.421607773049202E9), double1, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-7.421607773049202E9);
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 582.93859116;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {582.93859116, 0.0, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(2100.14023, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {582.93859116, 0.0, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {582.93859116, 0.0, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double2, 0.01);
      assertArrayEquals(new double[] {582.93859116, 0.0, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      double double3 = MathArrays.linearCombination(1.0, (double) 1042, 582.93859116, Double.NaN, 0.008333333333329196, 0.0);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = 1.304E19;
      double double2 = MathArrays.linearCombination(3.141592653589793, (-377.2074748489), Double.POSITIVE_INFINITY, (-377.2074748489), 1.304E19, (-2196.7203044793614));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-1116);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1116));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-626.0);
      doubleArray0[1] = (-626.0);
      doubleArray0[2] = (-626.0);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (-626.0);
      doubleArray0[5] = (-626.0);
      doubleArray0[6] = (-626.0);
      doubleArray0[7] = (-626.0);
      doubleArray0[8] = (-626.0);
      MathArrays.scaleInPlace((-626.0), doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {391876.0, 391876.0, 391876.0, (-2.4000839999999998E-17), 391876.0, 391876.0, 391876.0, 391876.0, 391876.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 191.150733;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {191.150733}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "not positive definite matrix";
      stringArray0[1] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      double double0 = (-2455.179378665051);
      doubleArray0[1] = (-2455.179378665051);
      double double1 = (-2389.7229134235);
      doubleArray0[2] = (-2389.7229134235);
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, (-2455.179378665051), (-2389.7229134235)}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not increasing (0 > -2,455.179)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1742.2773916313);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, (-1742.2773916313), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = 4941.0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4941.0;
      doubleArray0[1] = 4941.0;
      double[] doubleArray1 = MathArrays.scale(4941.0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4941.0, 4941.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.4413481E7, 2.4413481E7}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (24,413,481 >= 24,413,481)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1492.252610078024;
      doubleArray0[1] = (-1311.0);
      doubleArray0[2] = (-1629.334857828);
      doubleArray0[3] = (-4265.130771765477);
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1492.252610078024, (-1311.0), (-1629.334857828), (-4265.130771765477), 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      double double0 = (-2532.2065);
      doubleArray0[3] = (-2532.2065);
      doubleArray0[4] = 0.0;
      double double1 = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.304E19, Double.POSITIVE_INFINITY, (-2532.2065), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19, Double.POSITIVE_INFINITY, (-2532.2065), 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 1.304E19, Double.POSITIVE_INFINITY, (-2532.2065), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19, Double.POSITIVE_INFINITY, (-2532.2065), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1.304E19, Double.POSITIVE_INFINITY, (-2532.2065), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19, Double.POSITIVE_INFINITY, (-2532.2065), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      double double2 = (-2268.9);
      double double3 = MathArrays.linearCombination((-2268.9), 2269.348323, (-3948.556), 1.304E19, (-1752.8351), (-3948.556), 0.0, (-179.84459));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-5.148917024E22), double3, 0.01);
      
      double double4 = MathArrays.linearCombination((-178.0), (-1752.8351), 1.304E19, (-3948.556));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals((-5.148917024E22), double4, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.19999998807907104;
      doubleArray0[2] = (-3287.12);
      doubleArray0[3] = (-3087.0991762);
      doubleArray0[4] = (-100.5117);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-115.5467367481003);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.19999998807907104, (-3287.12), (-3087.0991762), (-100.5117), (-1.0), (-115.5467367481003)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.03999999523162856, 1.0805157894399999E7, 9530181.323694717, 10102.60183689, 1.0, 13351.048373134792}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 0.19999998807907104, (-3287.12), (-3087.0991762), (-100.5117), (-1.0), (-115.5467367481003)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.0), 0.3999999761581421, (-6574.24), (-6174.1983524), (-201.0234), (-2.0), (-231.0934734962006)}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), 0.19999998807907104, (-3287.12), (-3087.0991762), (-100.5117), (-1.0), (-115.5467367481003)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.0), 0.3999999761581421, (-6574.24), (-6174.1983524), (-201.0234), (-2.0), (-231.0934734962006)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-137.079606817);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-137.079606817);
      doubleArray1[1] = (-137.079606817);
      doubleArray1[2] = (-137.079606817);
      doubleArray1[3] = (-137.079606817);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-137.079606817);
      doubleArray1[6] = (-137.079606817);
      doubleArray1[7] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-137.079606817)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-137.079606817), (-137.079606817), (-137.079606817), (-137.079606817), 0.0, (-137.079606817), (-137.079606817), 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, (-137.079606817)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-137.079606817)}, doubleArray2, 0.01);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= -137.08)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (-2532.2065);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.304E19, Double.POSITIVE_INFINITY, (-2532.2065), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19, Double.POSITIVE_INFINITY, (-2532.2065), 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 1.304E19, Double.POSITIVE_INFINITY, (-2532.2065), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19, Double.POSITIVE_INFINITY, (-2532.2065), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1.304E19, Double.POSITIVE_INFINITY, (-2532.2065), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19, Double.POSITIVE_INFINITY, (-2532.2065), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination((-2268.9), 2269.348323, (-3948.556), 1.304E19, (-1752.8351), (-3948.556), 0.0, (-179.84459));
      assertEquals((-5.148917024E22), double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-178.0), (-1752.8351), 1.304E19, (-3948.556));
      assertEquals(double1, double0, 0.01);
      assertEquals((-5.148917024E22), double1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2071.95134);
      doubleArray0[1] = 1522.870812392516;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 773.60139332671;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3166.8393139420386);
      doubleArray0[7] = 1.7976931348623157E308;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2071.95134), 1522.870812392516, (-1.0), 773.60139332671, (-1.0), 0.0, (-3166.8393139420386), 1.7976931348623157E308}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[2] = 3910;
      intArray0[3] = (-3993);
      intArray0[4] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, 3910, (-3993), 0}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[2] = (long) (-3993);
      longArray0[3] = (long) 3910;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[6][4];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1330.690996725, (-930.2376), 1330.690996725, (-930.2376), (-930.2376), 0.0, (-930.2376), (-930.2376));
      assertEquals((-1610375.6058163838), double0, 0.01);
      
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[2];
      longArray1[0] = (-4024L);
      longArray1[1] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = (-733L);
      longArray2[2] = (-1L);
      longArray2[3] = (-1L);
      longArray2[4] = (-3454L);
      longArray2[5] = (-4024L);
      longArray2[6] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-4024L);
      longArray3[1] = (-3454L);
      longArray3[2] = (-733L);
      longArray3[3] = (-733L);
      longArray3[4] = (-4024L);
      longArray3[5] = (-733L);
      longArray3[6] = (-1L);
      longArray3[7] = (-1L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-4024L);
      longArray4[1] = (-3454L);
      longArray4[2] = (-3454L);
      longArray4[3] = (-3454L);
      longArray0[3] = longArray4;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -4,024 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long[][] longArray0 = new long[5][7];
      long[] longArray1 = new long[6];
      longArray1[0] = (-361L);
      longArray1[1] = 4687L;
      longArray1[2] = (-1L);
      longArray1[3] = 0L;
      longArray1[4] = (-9223372036854775808L);
      longArray1[5] = 2765L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 4687L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 2765L;
      longArray2[4] = 4687L;
      longArray2[5] = 4687L;
      longArray2[6] = (-1L);
      longArray2[7] = (-1L);
      longArray2[8] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1L);
      longArray3[1] = 2765L;
      longArray3[2] = (-9223372036854775808L);
      longArray3[3] = 4687L;
      longArray3[4] = 4687L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (-1L);
      longArray5[1] = 2765L;
      longArray5[2] = (-1L);
      longArray5[3] = (-9223372036854775808L);
      longArray0[4] = longArray5;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -361 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.0E-5, -0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0E-5, -0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 159;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-873);
      intArray0[4] = 733;
      intArray0[5] = 254;
      intArray0[6] = (-648);
      intArray0[7] = 1566;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {159, 0, 0, (-873), 733, 254, (-648), 1566}, intArray0);
      assertArrayEquals(new int[] {159, 0, 0, (-873), 733, 254, (-648), 1566}, intArray1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = (-734.630245);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 2064.96707163;
      doubleArray0[4] = 2740.257995156628;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-734.630245), 0.0, 0.0, 0.0, 0.0, 1.0E-5, 2064.96707163, 2740.257995156628, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[9][4];
      long[] longArray1 = new long[1];
      longArray1[0] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 0L;
      longArray5[1] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = 0L;
      longArray7[1] = 0L;
      longArray7[2] = 0L;
      longArray7[3] = 0L;
      longArray7[4] = 0L;
      longArray7[5] = 0L;
      longArray7[6] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[1];
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray7));
      
      longArray8[0] = 0L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[3];
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray4));
      
      longArray9[0] = (-1173L);
      longArray9[1] = 0L;
      longArray9[2] = 0L;
      longArray0[8] = longArray9;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 5 while others have length 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace((-63.0), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 582.93859116;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {582.93859116, 0.0, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(2100.14023, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {582.93859116, 0.0, 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 293.5614F;
      floatArray0[1] = 1000.08356F;
      floatArray0[2] = 1118.0236F;
      floatArray0[3] = 1068.0789F;
      floatArray0[4] = (-3327.9F);
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = (-567.7F);
      floatArray0[7] = 1598.14F;
      floatArray0[8] = (-877.19F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {293.5614F, 1000.08356F, 1118.0236F, 1068.0789F, (-3327.9F), 3.4028235E38F, (-567.7F), 1598.14F, (-877.19F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 14;
      intArray0[1] = 858;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {14, 858}, intArray0);
      assertArrayEquals(new int[] {14, 858}, intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[8][4];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 14;
      longArray1[1] = (long) 14;
      longArray1[2] = (long) 858;
      longArray1[3] = (long) 14;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 14;
      longArray2[1] = (long) 858;
      longArray2[2] = (long) 858;
      longArray2[3] = (long) 14;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 14;
      longArray3[1] = (long) 14;
      longArray3[2] = (long) 14;
      longArray3[3] = (long) 14;
      longArray3[4] = (long) 14;
      longArray3[5] = (long) 858;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = (long) 858;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = (long) 14;
      longArray6[1] = (long) 14;
      longArray6[2] = (long) 14;
      longArray6[3] = (long) 14;
      longArray6[4] = (long) 858;
      longArray6[5] = (long) 858;
      longArray6[6] = (long) 14;
      longArray6[7] = (long) 14;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      
      longArray7[0] = (long) 14;
      longArray7[1] = (long) 14;
      longArray7[2] = (long) 858;
      longArray7[3] = (long) 14;
      longArray7[4] = (long) 14;
      longArray7[5] = (long) 858;
      longArray7[6] = (long) 858;
      longArray7[7] = (long) 14;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray2));
      
      longArray0[7] = longArray8;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 6 while others have length 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 582.93859116;
      doubleArray0[1] = 582.93859116;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      double double0 = MathArrays.linearCombination(1813951.0488999998, 0.7214844226837158, 1.125, (-1.0), 1813951.0488999998, 0.0, 1813951.0488999998, (-705.82756436004));
      assertEquals((-1.2790279144131346E9), double0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Integer>) null, (-3190));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3124.2234F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-3124.2234F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-3124.2234F);
      doubleArray0[1] = (double) (-3124.2234F);
      doubleArray0[2] = (double) (-3124.2234F);
      doubleArray0[3] = (double) (-3124.2234F);
      doubleArray0[4] = (double) (-3124.2234F);
      doubleArray0[5] = (double) (-3124.2234F);
      doubleArray0[6] = (double) (-3124.2234F);
      doubleArray0[7] = (double) (-3124.2234F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(15, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875), (-3124.223388671875)}, doubleArray0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 4503599627370496L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 4503599627370496L, 0L}, longArray0);
      
      float[] floatArray0 = new float[11];
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 4503599627370496L;
      long[][] longArray1 = new long[8][2];
      longArray1[0] = longArray0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<FieldElement<Integer>>) null, 3485, (-846));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1625;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1625);
      assertEquals(0, doubleArray0.length);
      assertEquals(1625, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 1625;
      longArray0[3] = (long) 1625;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 1625L, 1625L}, longArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Object>) null, 2146172607, 1118);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 3504, 3504);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1693.585999416);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1457.0;
      doubleArray0[3] = 1786.975504439;
      doubleArray0[4] = (-1495.6143245296);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 3 and 4 are not strictly increasing (1,786.976 >= -1,495.614)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 0.0, 0.0, 3.141592653589793, 0.0);
      assertEquals(19.739208802178716, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(9.869604401089358, double1, 0.01);
      assertArrayEquals(new double[] {3.141592653589793, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2061);
      intArray1[1] = 0;
      intArray1[2] = 130;
      intArray1[3] = 0;
      intArray1[4] = (-1188);
      intArray1[5] = (-1118);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-2061), 0, 130, 0, (-1188), (-1118)}, intArray1);
      
      long[][] longArray0 = new long[3][0];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (-826L);
      longArray2[4] = (long) 0;
      longArray2[5] = (long) 0;
      longArray2[6] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 9007199254740990L;
      longArray3[1] = 0L;
      longArray3[2] = (long) 0;
      longArray3[3] = (-826L);
      longArray0[2] = longArray3;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 7 while others have length 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-435.75927396);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
      assertArrayEquals(new double[] {0.0, 1.3421816576069522E8, (-1.000003254120737), (-435.7606919732898)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 959;
      intArray0[1] = 2;
      intArray0[2] = 54;
      intArray0[3] = 0;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 54;
      MathArrays.checkOrder(doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-4345));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2100.345;
      doubleArray0[3] = 584.669952;
      doubleArray0[4] = (-1038.0);
      doubleArray0[5] = (-3.141592653589793);
      MathArrays.convolve(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[8][5];
      long[] longArray1 = new long[9];
      longArray1[0] = (-739L);
      longArray1[1] = (-403L);
      longArray1[2] = 0L;
      longArray1[3] = (-842L);
      longArray1[4] = (-1547L);
      longArray1[5] = (-1L);
      longArray1[6] = (-1L);
      longArray1[7] = 391L;
      longArray1[8] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = 257L;
      longArray2[1] = (-403L);
      longArray2[2] = 391L;
      longArray2[3] = (-1L);
      longArray2[4] = 391L;
      longArray2[5] = 0L;
      longArray2[6] = (-1L);
      longArray2[7] = (-1547L);
      longArray2[8] = (-2297L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (-739L);
      longArray3[1] = (-2297L);
      longArray3[2] = 0L;
      longArray3[3] = (-2297L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = (-1L);
      longArray4[1] = 0L;
      longArray4[2] = 257L;
      longArray4[3] = 257L;
      longArray4[4] = 391L;
      longArray4[5] = 391L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = 257L;
      longArray5[1] = 257L;
      longArray5[2] = (-739L);
      longArray5[3] = (-739L);
      longArray5[4] = 0L;
      longArray5[5] = 0L;
      longArray5[6] = (-1L);
      longArray5[7] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[4];
      longArray6[0] = 1L;
      longArray6[1] = (-679L);
      longArray6[2] = (-1L);
      longArray6[3] = 257L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      longArray7[0] = 0L;
      longArray7[1] = 257L;
      longArray7[2] = (-2297L);
      longArray7[3] = 0L;
      longArray7[4] = 0L;
      longArray7[5] = 0L;
      longArray7[6] = (-2297L);
      longArray7[7] = 391L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      longArray8[0] = 0L;
      longArray8[1] = (-739L);
      longArray8[2] = (-1L);
      longArray8[3] = (-679L);
      longArray8[4] = (-1547L);
      longArray8[5] = (-1L);
      longArray8[6] = 1L;
      longArray8[7] = (-1L);
      longArray0[7] = longArray8;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 4 while others have length 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-62.5F);
      floatArray0[3] = (-1728.23F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 3183.7932F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = 1L;
      longArray0[0] = 1L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 1L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("?c^.!9b}^{m\"-F");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.?c^.!9b}^{m\"-F
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      long[][] longArray0 = new long[8][1];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 723L;
      longArray2[1] = 586L;
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 586L;
      longArray3[1] = 0L;
      longArray3[2] = 723L;
      longArray3[3] = 723L;
      longArray3[4] = 586L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = 723L;
      longArray5[1] = 723L;
      longArray5[2] = 586L;
      longArray5[3] = 0L;
      longArray5[4] = (-271L);
      longArray5[5] = 723L;
      longArray5[6] = 586L;
      longArray5[7] = (-1073741824L);
      longArray5[8] = (-650L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      longArray6[0] = 0L;
      longArray6[1] = 586L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      longArray7[0] = (-650L);
      longArray7[1] = 0L;
      longArray7[2] = (-271L);
      longArray7[3] = 0L;
      longArray7[4] = 0L;
      longArray7[5] = (-650L);
      longArray7[6] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[1];
      longArray8[0] = 586L;
      longArray0[7] = longArray8;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 3 while others have length 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
