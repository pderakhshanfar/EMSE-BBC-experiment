/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 19:00:13 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2913.98766804;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2913.98766804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<String>) null, 635, 635);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1176.2044754799194);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1176.2044754799194));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1176.2044754799194), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1176.2044754799194), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[] floatArray1 = new float[16];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(16, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-399.149), 0.0, (-2483.65311), 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[9][6];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 2.608E18;
      doubleArray0[3] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3298242891449983E19, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2.608E18, 1.304E19, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 4.3466666666666665E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3745366896198556E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 4.3466666666666665E18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3.834E-20, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 68;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 12L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {12L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1391.977941106318;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 3618.58029;
      doubleArray0[3] = 3417.995;
      doubleArray0[4] = (-2838.53049);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,838.53 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long[][] longArray0 = new long[6][1];
      long[] longArray1 = new long[9];
      longArray0[0] = longArray1;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 1 while others have length 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-11.447787043594108);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (-11.448 <= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2913.98766804;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2913.98766804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double double0 = new Double((-1243.368443253));
      assertNotNull(double0);
      assertEquals((-1243.368443253), (double)double0, 0.01);
      
      Double double1 = new Double(Double.NaN);
      assertNotNull(double1);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "oV0r#N*w";
      stringArray0[1] = "pZ1lCGLOPAG";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = (Double) 0.0;
      doubleArray0[1] = (Double) 3775.938602069659;
      doubleArray0[2] = (Double) 3775.938602069659;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "invalid row dimension: {0} (must be positive)";
      stringArray0[1] = "u{P,pj";
      stringArray0[2] = "L";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1678);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1678)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 20.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2009.85005);
      MathArrays.scaleInPlace((-2009.85005), doubleArray0);
      assertArrayEquals(new double[] {4039497.2234850028, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.scale(1.34217729E8, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(1.34217729E8, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[2] = 104.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(11, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(11, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals((-1.15860992E8), double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(11, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathArrays.linearCombination((double) 0, (double) 0, (double) 0, (double) 0, (-1399.1413987450549), (double) 0, (double) 0, (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-3147.4), (-2401.7460886), 1.425771232659977E7, 2113.963755786311, 1288.665636238, 0.0, 1167.19);
      assertEquals((-3.4240680620346664E10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1003.117873, 0.0, 1003.117873, (-1865.66018390724), (-1093.2386948214416), 0.0);
      assertEquals((-1871477.0754218195), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 1.34217729E8, (double) 0, 557.9);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.814697265625E-6, 876.0, 6.986512348098055E37, 6.986512348098055E37);
      assertEquals(4.881135479012659E75, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 10;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(10, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {10}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-484.3649739767);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-484.3649739767)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {234609.4280154493}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(235093.792989426, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-484.3649739767)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {234609.4280154493}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 495;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(495, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {495, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 2142364483;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[3] = 2142364483;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-10238330), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 2142364483, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 2142364483, 0, 0, 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-4225.4063582);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-4225.4063582)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-8450.8127164)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4225.4063582, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-4225.4063582)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-8450.8127164)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-925);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(925.0, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-925), 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3.4028235E38F;
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3.4028234663852886E38, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.4028234663852886E38, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
//      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 88);
      assertNotNull(objectArray0);
      assertEquals(88, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[3][3];
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace((-1125.3740488), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.scale(1.34217729E8, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, 1.0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray1, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray1, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray1, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(20, doubleArray0.length);
      assertEquals(39, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 20
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, (-3056));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 12);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-2437));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[49];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(49, doubleArray0.length);
      assertEquals(97, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (0 <= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1162), (-1162));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146214666);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<String>) null, 1221);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 88);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1728), 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 2.1243656332573216E7;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1823.0);
      assertArrayEquals(new double[] {Double.NaN, 1823.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
//      try { 
        MathArrays.normalizeArray(doubleArray0, 1823.0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.POSITIVE_INFINITY;
//      try { 
        MathArrays.normalizeArray(doubleArray0, (-8315.3184));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
//      try { 
        MathArrays.normalizeArray((double[]) null, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[3];
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[34];
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 320.95667F;
      float[] floatArray1 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = new float[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, Double.NaN, 2913.98766804, Double.NaN, 2913.98766804, 2913.98766804, 1262.9484, 2913.98766804);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2.0, 1.633123935319537E16, 1.34217729E8, 1.633123935319537E16, 3417.995, 1167.19, 1.34217729E8, 1.34217729E8);
      assertEquals(2.191941908418189E24, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-169.210844286), 2549.04964499, (-169.210844286), (-169.210844286), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, (double) 0, (-2624.73071362));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = MathArrays.linearCombination(20.0, (-1.7976931348623157E308), (-1.7976931348623157E308), 304.170339241);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 17 != 33
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][7];
      doubleArray1[0] = null;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[2][4];
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 1.4E-45F;
      doubleArray0[5] = (double) 1.4E-45F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.981735293180747E-45, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[1];
      longArray1[0] = (-607L);
      longArray0[0] = longArray1;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -607 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long[] longArray0 = new long[13];
      longArray0[1] = (-1329L);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,329 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[7];
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 1 while others have length 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long[][] longArray0 = new long[5][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-577.4);
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[1] = 5.669184079525E-24;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(4931.8180491483);
      doubleArray0[0] = double0;
      Double double1 = new Double(3390.3393492444);
      doubleArray0[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(4931.8180491483);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1748.6));
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(2254.35687069498);
      doubleArray0[0] = double0;
      Double double1 = new Double((-1430.9428813062716));
      doubleArray0[1] = double1;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1487315.8301461912);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[18];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
//      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[0];
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
//      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 15 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
//      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 21 != 11
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[49];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][7];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][1];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][9];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 12);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2146925715));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 360);
      assertEquals(360, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[8];
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
