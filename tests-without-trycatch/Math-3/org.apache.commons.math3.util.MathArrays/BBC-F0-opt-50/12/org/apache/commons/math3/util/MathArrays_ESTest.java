/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:04:40 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "w\":*zXzNeM`";
      stringArray0[1] = "";
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0).when(field0).getZero();
      int int0 = 3341;
      FieldElement<String>[] fieldElementArray0 = MathArrays.buildArray(field0, 3341);
      assertEquals(3341, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      int[] intArray0 = new int[0];
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int1);
      assertEquals(0, intArray0.length);
      assertFalse(int1 == int0);
      
      Class<FieldElement> class1 = FieldElement.class;
      Field<String> field1 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(field1).getRuntimeClass();
      int int2 = (-1406);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field1, (-1406));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      int[] intArray0 = new int[4];
      intArray0[0] = 107;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = (-2144848524);
      int[] intArray1 = MathArrays.copyOf(intArray0, 32768);
      assertArrayEquals(new int[] {107, 2, 2, (-2144848524)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(32768, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      MathArrays.distance1(intArray1, intArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, Integer.MAX_VALUE, 8);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 380.974395382833;
      doubleArray0[1] = 1.63E18;
      doubleArray0[2] = (-2130.86064);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-3.356118100840571E-7);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {380.974395382833, 1.63E18, (-2130.86064), 1.304E19, (-3.356118100840571E-7)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {145141.48993731517, 1.2419765289480356E21, 2.6569E36, 2.9892065451842847E21, 4.25104E37, (-5.557284549229409E22), 1.700416E38, (-8.752756006992209E12), 1.126352870678972E-13}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {380.974395382833, 1.63E18, (-2130.86064), 1.304E19, (-3.356118100840571E-7)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {145141.48993731517, 1.2419765289480356E21, 2.6569E36, 2.9892065451842847E21, 4.25104E37, (-5.557284549229409E22), 1.700416E38, (-8.752756006992209E12), 1.126352870678972E-13}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {380.974395382833, 1.63E18, (-2130.86064), 1.304E19, (-3.356118100840571E-7)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {145141.48993731517, 1.2419765289480356E21, 2.6569E36, 2.9892065451842847E21, 4.25104E37, (-5.557284549229409E22), 1.700416E38, (-8.752756006992209E12), 1.126352870678972E-13}, doubleArray1, 0.01);
      assertEquals(1.7529500550879934E38, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      int int0 = 219;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 219);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(219, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 219;
      int int1 = 22;
      intArray0[1] = 22;
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {219, 22}, intArray0);
      assertEquals(0, int2);
      assertEquals(2, intArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = 1.304E19;
      MathArrays.scaleInPlace(1.304E19, doubleArray0);
      assertArrayEquals(new double[] {1.700416E38, 1.700416E38, 1.700416E38, 1.304E19, 1.700416E38, 1.700416E38, 1.304E19, 1.304E19, 1.700416E38}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2649);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-6.032174644509064E-23);
      doubleArray0[1] = (-6.032174644509064E-23);
      doubleArray0[2] = 424.166613;
      doubleArray0[3] = (-18.430862426757812);
      doubleArray0[4] = 2297.60234652834;
      doubleArray0[5] = 3474.24259042501;
      doubleArray0[6] = 0.7316888570785522;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-6.032174644509064E-23), (-6.032174644509064E-23), 424.166613, (-18.430862426757812), 2297.60234652834, 3474.24259042501, 0.7316888570785522}, doubleArray0, 0.01);
      assertEquals(4186.83599721053, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-6.032174644509064E-23), (-6.032174644509064E-23), 424.166613, (-18.430862426757812), 2297.60234652834, 3474.24259042501, 0.7316888570785522}, doubleArray0, 0.01);
      assertEquals(4186.83599721053, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2634;
      intArray0[1] = (-2285);
      intArray0[2] = 34;
      intArray0[3] = 1;
      intArray0[4] = 1073741824;
      intArray0[5] = (-246);
      intArray0[6] = 0;
      intArray0[7] = 1656;
      intArray0[8] = 862;
      int[] intArray1 = MathArrays.copyOf(intArray0, 34);
      assertArrayEquals(new int[] {2634, (-2285), 34, 1, 1073741824, (-246), 0, 1656, 862}, intArray0);
      assertEquals(34, intArray1.length);
      assertEquals(9, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-378);
      intArray0[1] = (-2147246402);
      intArray0[2] = 828;
      int int0 = (-2147246402);
      intArray0[3] = (-2147246402);
      int int1 = (-2146345002);
      intArray0[4] = (-2146345002);
      int int2 = (-596);
      intArray0[5] = (-596);
      intArray0[6] = 2739;
      int int3 = (-740);
      intArray0[2] = (-740);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2146345002);
      intArray1[1] = 2739;
      intArray1[2] = (-2147246402);
      intArray1[3] = 828;
      int int4 = (-2904);
      intArray1[4] = (-2904);
      intArray1[5] = (-2146345002);
      intArray1[6] = (-378);
      int int5 = 2663;
      intArray1[7] = 2663;
      int int6 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {(-378), (-2147246402), (-740), (-2147246402), (-2146345002), (-596), 2739, 0}, intArray0);
      assertArrayEquals(new int[] {(-2146345002), 2739, (-2147246402), 828, (-2904), (-2146345002), (-378), 2663}, intArray1);
      assertEquals((-4122947), int6);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2146345002);
      doubleArray0[1] = (double) 2739;
      doubleArray0[2] = (double) 2739;
      doubleArray0[3] = (double) (-2147246402);
      doubleArray0[4] = (double) (-2904);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,146,345,002 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 11;
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(11);
      assertEquals(11, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Pair<Integer, String> pair0 = new Pair<Integer, String>(integer0, "");
      assertNotNull(pair0);
      assertTrue(integer0.equals((Object)int0));
      
      Pair<Object, String> pair1 = new Pair<Object, String>(pair0);
      assertNotNull(pair1);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(4424);
      assertEquals(4424, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Pair<Double, Object> pair2 = new Pair<Double, Object>((Double) null, "%4u1~Ykb#Y{79n{m");
      assertNotNull(pair2);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 11, 11);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 11, 11);
      assertEquals(11, objectArray0.length);
      assertNotNull(objectArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 11;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {11}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 269.1101899517867;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {269.1101899517867}, doubleArray0, 0.01);
      assertEquals(269.1101899517867, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {269.1101899517867}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {538.2203799035734}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2232.980813535;
      doubleArray0[1] = 1977.233007062999;
      doubleArray0[2] = 2854.06834;
      doubleArray0[3] = 2232.980813535;
      doubleArray0[4] = (-4644.494167914668);
      doubleArray0[5] = (-698.7501);
      doubleArray0[6] = 12.736504169998321;
      doubleArray0[7] = 859.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1753.334006);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1753.334006), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1753.334006), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4.337162228881557E21;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.09090909090909091;
      doubleArray0[3] = 691.60937631812;
      doubleArray0[4] = 1479.0;
      doubleArray0[5] = 3363.89288537;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 256.889607275515;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {4.337162228881557E21, 3.834E-20, 0.09090909090909091, 691.60937631812, 1479.0, 3363.89288537, 1.304E19, 256.889607275515}, doubleArray0, 0.01);
      assertEquals(4.3371818317009534E21, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Double double1 = new Double((-457.28));
      assertEquals((-457.28), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "w\":*zXzNeM`";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0).when(field0).getZero();
      int int0 = 3341;
      FieldElement<String>[] fieldElementArray0 = MathArrays.buildArray(field0, 3341);
      assertEquals(3341, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      int[] intArray0 = new int[0];
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int1);
      assertEquals(0, intArray0.length);
      assertFalse(int1 == int0);
      
      Class<FieldElement> class1 = FieldElement.class;
      Field<String> field1 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(field1).getRuntimeClass();
      int int2 = 1073741824;
      // Undeclared exception!
      MathArrays.buildArray(field1, 1073741824);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3274.26446141;
      doubleArray1[1] = (-1126.1383327444576);
      doubleArray1[2] = 0.125;
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = (-1061.30517006129);
      doubleArray1[6] = 3306.55051476;
      doubleArray1[7] = 2054.3645;
      doubleArray1[8] = 2.028240960365167E31;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {3274.26446141, (-1126.1383327444576), 0.125, 1.304E19, 3.834E-20, (-1061.30517006129), 3306.55051476, 2054.3645, 2.028240960365167E31}, doubleArray1, 0.01);
      assertEquals(2.028240960365167E31, double0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.7316888570785522;
      doubleArray0[0] = 0.7316888570785522;
      doubleArray0[1] = 1744.9;
      double double1 = (-152.2911388608852);
      doubleArray0[2] = (-152.2911388608852);
      double double2 = 3.0;
      doubleArray0[3] = 3.0;
      doubleArray0[4] = 0.5850973129272461;
      doubleArray0[5] = 0.003;
      double double3 = 0.7675435543060303;
      doubleArray0[6] = 0.7675435543060303;
      doubleArray0[7] = 1847.83076559871;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.7316888570785522, 1744.9, (-152.2911388608852), 3.0, 0.5850973129272461, 0.003, 0.7675435543060303, 1847.83076559871}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[14];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(14, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2245.5556731377656);
      doubleArray0[1] = 2593192.8923091204;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1);
      assertArrayEquals(new double[] {(-2245.5556731377656), 2593192.8923091204}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2245.5556731377656)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS";
      stringArray0[1] = "NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS";
      stringArray0[2] = "NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS";
      stringArray0[3] = "U:<qFyu%&>$&`";
      stringArray0[4] = "NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS";
      stringArray0[5] = "NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS";
      stringArray0[6] = "NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4.3466666666666639E18;
      doubleArray1[1] = 2006.534;
      doubleArray1[2] = (-499.747860823109);
      doubleArray1[3] = 8.80711102210868E22;
      doubleArray1[4] = 2266.420067848162;
      doubleArray1[5] = 572.09008362938;
      doubleArray1[6] = (-1197.8118183765118);
//      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-4576.295), 8.124785583970729E34, Double.NaN, 8.124785583970729E34);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 357913924;
      intArray0[1] = (-2044);
      intArray0[2] = 134217729;
      intArray0[3] = 798;
      intArray0[4] = 2;
      intArray0[5] = 2118643189;
      intArray0[6] = 2145510824;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      assertArrayEquals(new int[] {357913924, (-2044), 134217729, 798, 2, 2118643189, 2145510824}, intArray0);
      assertArrayEquals(new int[] {357913924, (-2044)}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1295.7397417);
      doubleArray0[1] = (-1295.7397417);
      doubleArray0[2] = (-1295.7397417);
      doubleArray0[3] = (-1295.7397417);
      doubleArray0[4] = (-1295.7397417);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1295.7397417), (-1295.7397417), (-1295.7397417), (-1295.7397417), (-1295.7397417)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1295.7397417), (-1295.7397417), (-1295.7397417), (-1295.7397417), (-1295.7397417)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals((-6478.6987085), double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 4254.462559689;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 1.0, 4254.462559689}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 1.0, 4254.462559689}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(4255.462559689, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 1.0, 4254.462559689}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3.834E-20;
      doubleArray2[1] = 4254.462559689;
      doubleArray2[2] = (-581.60963655);
      doubleArray2[3] = 4255.462559689;
      doubleArray2[4] = 4254.462559689;
      doubleArray2[5] = 3.834E-20;
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {3.834E-20, 1.0, 4254.462559689}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 4254.462559689, (-581.60963655), 4255.462559689, 4254.462559689, 3.834E-20}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double double0 = MathArrays.linearCombination((-783.69753659342), (double) 0, 5930288.936399999, (-783.69753659342));
      assertEquals((-4.647552830743892E9), double0, 0.01);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"WtcQ&b/tFy$<";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1294.54965548293;
      doubleArray2[1] = 1294.54965548293;
      doubleArray2[2] = 1294.54965548293;
      doubleArray2[3] = 1294.54965548293;
      doubleArray2[4] = 1294.54965548293;
      doubleArray2[5] = 1294.54965548293;
      doubleArray2[6] = 1294.54965548293;
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-512.5536364446112);
      doubleArray1[1] = 13.07;
      doubleArray1[2] = 3008.86234;
      doubleArray1[3] = 1.86285714285714278E18;
      doubleArray1[4] = 0.1256551444530487;
      doubleArray1[5] = 1.375;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3008.86234;
      doubleArray2[1] = 13.07;
      doubleArray2[2] = 1.86285714285714278E18;
      doubleArray2[3] = 3008.86234;
      doubleArray2[4] = 0.1256551444530487;
      doubleArray2[5] = (-512.5536364446112);
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-512.5536364446112);
      doubleArray0[4] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[5] = doubleArray4;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
      doubleArray0[8] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3.4028235E38F);
      floatArray0[2] = (-5296.258F);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-3.4028235E38F), (-5296.258F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-904.88904F);
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (-1212.3463F);
      floatArray0[3] = (-2503.6147F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.4E-45F;
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-904.88904F), Float.NaN, (-1212.3463F), (-2503.6147F), 0.0F, 1.4E-45F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1.4E-45F;
      doubleArray0[1] = (double) (-904.88904F);
      doubleArray0[2] = (double) (-2503.6147F);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-2503.6147F);
      doubleArray0[6] = (double) (-2503.6147F);
      doubleArray0[7] = (double) (-2503.6147F);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, Double.NaN, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.401298464324817E-45, (-904.8890380859375), (-2503.61474609375), 0.0, 0.0, (-2503.61474609375), (-2503.61474609375), (-2503.61474609375)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.401298464324817E-45, (-904.8890380859375), (-2503.61474609375), 0.0, 0.0, (-2503.61474609375), (-2503.61474609375), (-2503.61474609375)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.401298464324817E-45, (-904.8890380859375), (-2503.61474609375), 0.0, 0.0, (-2503.61474609375), (-2503.61474609375), (-2503.61474609375)}, doubleArray0, 0.01);
      assertEquals(5088.336796899393, double1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[2] = (-2663.0F);
      floatArray0[3] = 2289.44F;
      floatArray0[4] = 3453.2F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2663.0F), 2289.44F, 3453.2F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-2663.0F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 2289.44F;
      doubleArray0[4] = (double) 3453.2F;
      doubleArray0[5] = (-1643.4637351);
      doubleArray0[6] = (double) (-2663.0F);
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 2289.44F;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2289.44F;
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-4235.0);
      doubleArray0[1] = (-1831.001792);
      doubleArray0[2] = 1785.3728254072398;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-4235.0), (-1831.001792), 1785.3728254072398}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1313.026792);
      doubleArray1[1] = (-4235.0);
      doubleArray1[2] = 1785.3728254072398;
      doubleArray1[3] = (-1831.001792);
      doubleArray1[4] = 1785.3728254072398;
      doubleArray1[5] = (-1831.001792);
      doubleArray1[6] = (-4235.0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 659);
      assertArrayEquals(new double[] {(-1313.026792), (-4235.0), 1785.3728254072398, (-1831.001792), 1785.3728254072398, (-1831.001792), (-4235.0)}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(659, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "w#p}";
      stringArray0[1] = "Qy";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "/.zs1YEF13t/q.WH";
      stringArray0[5] = "[g?=VWkrs/gKv";
      stringArray0[6] = "xM^q_*C/-?PHe";
      stringArray0[7] = "";
      stringArray0[8] = "9-Aa1Dq";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 4;
      intArray1[2] = 200;
      intArray1[2] = 94;
      intArray1[4] = 162;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 4, 94, 0, 162}, intArray1);
      assertEquals(94, int0);
      assertEquals(3, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 4, 162);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "w\":*zXzNeM`";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-5.207000323380292E-8);
      doubleArray0[1] = 9194334.78228981;
      doubleArray0[2] = (-2293.0966187688873);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-5.207000323380292E-8), 9194334.78228981, (-2293.0966187688873)}, doubleArray0, 0.01);
      assertEquals(8.453579734711631E13, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 8.453579734711631E13;
      doubleArray1[1] = 9194334.78228981;
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1854293.2086194712;
      doubleArray0[1] = 1.44888888888888883E18;
      doubleArray0[2] = 1854293.2086194712;
      doubleArray0[3] = 1854293.2086194712;
      doubleArray0[4] = 1278.951;
      doubleArray0[5] = 3329.560748654631;
      doubleArray0[7] = 1854293.2086194712;
      doubleArray0[8] = 1854293.2086194712;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1854293.2086194712, 1.44888888888888883E18, 1854293.2086194712, 1854293.2086194712, 1278.951, 3329.560748654631, 0.0, 1854293.2086194712, 1854293.2086194712}, doubleArray0, 0.01);
      assertEquals(1.44888888888888883E18, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1854293.2086194712, 1.44888888888888883E18, 1854293.2086194712, 1854293.2086194712, 1278.951, 3329.560748654631, 0.0, 1854293.2086194712, 1854293.2086194712}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {1854293.2086194712, 1.44888888888888883E18, 1854293.2086194712, 1854293.2086194712, 1278.951, 3329.560748654631, 0.0, 1854293.2086194712, 1854293.2086194712}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1854293.2086194712, 1.44888888888888883E18, 1854293.2086194712, 1854293.2086194712, 1278.951, 3329.560748654631, 0.0, 1854293.2086194712, 1854293.2086194712}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(3.4384033035322935E12, doubleArray0);
      assertArrayEquals(new double[] {6.3758078942346854E18, 4.9818643420067895E30, 6.3758078942346854E18, 6.3758078942346854E18, 4.3975493434559305E15, 1.144837267748554E16, 0.0, 6.3758078942346854E18, 6.3758078942346854E18}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Pair<Object, Object> pair0 = new Pair<Object, Object>((Object) null, class0);
      assertNotNull(pair0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 17, (-1934));
      assertEquals(17, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 17;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {17.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (-3522);
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, intArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 2.925681159240093E-8;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0.0F;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 5 and 6 are not increasing (0 > 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[9];
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(2451.6916490847957, (double) 0, (double) 0, (double) 0, (double) 0, (double) 0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 2451.6916490847957;
      double double2 = MathArrays.distance(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2451.6916490847957}, doubleArray1, 0.01);
      assertEquals(2451.6916490847957, double2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.scale(1836.361898665, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, (-122.37226586799093));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.scale(235.380599592957, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray1, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long[][] longArray0 = new long[1][3];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      long[] longArray1 = new long[2];
      longArray1[0] = 706L;
      longArray1[1] = 706L;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.0992790123456787E36;
      doubleArray0[2] = (double) 706L;
      doubleArray0[3] = (-5042.0);
      doubleArray0[4] = (double) 706L;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = (-5042.0);
      doubleArray0[7] = (double) 706L;
      doubleArray0[8] = (double) 706L;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 2.0992790123456787E36, 706.0, (-5042.0), 706.0, 3.834E-20, (-5042.0), 706.0, 706.0}, doubleArray0, 0.01);
      assertEquals(2.0992790123456787E36, double0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[1];
      int int0 = 2145903817;
      intArray0[0] = 2145903817;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[][] longArray0 = new long[1][3];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5042.0);
      doubleArray0[1] = (double) 706L;
      doubleArray0[2] = (double) 706L;
      doubleArray0[3] = (-5042.0);
      doubleArray0[4] = (-1299.68468679);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-5042.0), 706.0, 706.0, (-5042.0), (-1299.68468679)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-5042.0), 706.0, 706.0, (-5042.0), (-1299.68468679)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-5042.0), 706.0, 706.0, (-5042.0), (-1299.68468679)}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-5042.0), 706.0, 706.0, (-5042.0), (-1299.68468679)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.5421764E7, (-7119304.0), (-6620868.0), 5.18404E7, 6485152.381590359, (-8954458.77774748), 2.3586609222252518E7, 1.3106020381590359E7, 1689180.28507642}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1594;
      intArray0[2] = 224;
      intArray0[3] = (-1);
      intArray0[4] = 1057;
      int[] intArray1 = MathArrays.copyOf(intArray0, 249);
      assertArrayEquals(new int[] {1594, 0, 224, (-1), 1057}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(249, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = new Integer(224);
      assertEquals(224, double0, 0.01);
      
      double[][] doubleArray2 = new double[2][0];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1057;
      intArray2[1] = 224;
      intArray2[2] = (-1);
      intArray2[3] = 249;
      intArray2[4] = (-1);
      intArray2[5] = 224;
      intArray2[6] = 1594;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray2, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Object>) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.52E18;
      doubleArray0[1] = (-0.16666666666666666);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {6.52E18, (-0.16666666666666666), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-0.3333333333333333), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {6.52E18, (-0.16666666666666666), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-0.3333333333333333), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.50208E37, (-4.3466666666666665E18), 0.05555555555555555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {6.52E18, (-0.16666666666666666), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-0.3333333333333333), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.50208E37, (-4.3466666666666665E18), 0.05555555555555555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(3.1660099222737955E-7, 0.0, 3.1660099222737955E-7, 0.0, (-1922.3881234853109), 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.52E18;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 6.52E18;
      doubleArray1[1] = 6.52E18;
      doubleArray1[2] = 6.52E18;
      doubleArray1[3] = 6.52E18;
      doubleArray1[4] = 6.52E18;
      doubleArray1[5] = (-0.16666666666666666);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-0.16666666666666666));
      assertArrayEquals(new double[] {6.52E18, 6.52E18, 6.52E18, 6.52E18, 6.52E18, (-0.16666666666666666)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-0.03333333333333333), (-0.03333333333333333), (-0.03333333333333333), (-0.03333333333333333), (-0.03333333333333333), 8.520790729379687E-22}, doubleArray2, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {6.52E18, 6.52E18, 6.52E18, 6.52E18, 6.52E18, (-0.16666666666666666)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-0.03333333333333333), (-0.03333333333333333), (-0.03333333333333333), (-0.03333333333333333), (-0.03333333333333333), 8.520790729379687E-22}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = (-1361.7239353333243);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1361.7239353333243);
      doubleArray0[1] = (-1361.7239353333243);
      doubleArray0[2] = (-1361.7239353333243);
      doubleArray0[3] = (-1361.7239353333243);
      doubleArray0[4] = (-1361.7239353333243);
      doubleArray0[5] = (-1361.7239353333243);
      double[] doubleArray1 = MathArrays.scale((-1361.7239353333243), doubleArray0);
      assertArrayEquals(new double[] {(-1361.7239353333243), (-1361.7239353333243), (-1361.7239353333243), (-1361.7239353333243), (-1361.7239353333243), (-1361.7239353333243)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1854292.0760596758, 1854292.0760596758, 1854292.0760596758, 1854292.0760596758, 1854292.0760596758, 1854292.0760596758}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = 1;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1656.700872919044;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1350.077156825922;
      doubleArray0[3] = 1536.04776888285;
      doubleArray0[4] = 17.1200922921475;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1656.700872919044, 1536.04776888285, 1350.077156825922, 17.1200922921475, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 706;
      intArray0[1] = 134217729;
      intArray0[2] = (-1679);
      intArray0[3] = 1;
      intArray0[4] = 297;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 293;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {706, 134217729, (-1679), 1, 297, 0, 0, 293}, intArray0);
      assertArrayEquals(new int[] {706, 134217729, (-1679), 1, 297, 0, 0, 293}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, (-1934));
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[9];
      int[] intArray0 = new int[0];
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-268.5499F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-268.5499F);
      floatArray0[5] = 460.86096F;
      floatArray0[6] = (-268.5499F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-268.5499F), 0.0F, 0.0F, (-268.5499F), 460.86096F, (-268.5499F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean2);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 460.86096F;
      doubleArray1[3] = (double) (-268.5499F);
      doubleArray1[4] = (double) (-268.5499F);
      doubleArray1[5] = (double) 0.0F;
//      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 256.2920321896;
      doubleArray0[1] = (-1361.7239353333243);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {256.2920321896, (-1361.7239353333243)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-2359.372693201), (-1361.7239353333243), (-375.913), 13.07, (-1361.7239353333243), 687.549);
      assertEquals(2271649.1557791578, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {256.2920321896, (-1361.7239353333243)}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = MathArrays.linearCombination(687.549, (-926.51106), 5.0614674548127384E-8, 1.34217729E8, Double.NaN, 2507.224320408678);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-926.51106);
      doubleArray1[1] = 2451.6916490847957;
      doubleArray1[2] = (-2359.372693201);
      doubleArray1[3] = 0.0;
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 2506.5596315082053;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, Double.POSITIVE_INFINITY, 0.0, 2506.5596315082053, 0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1136.8;
      doubleArray0[1] = (-2464.2434);
      doubleArray0[2] = 3935.7360941591;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1136.8, (-2464.2434), 3935.7360941591}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1136.8, (-2464.2434), 3935.7360941591}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1136.8), 2464.2434, (-3935.7360941591)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {1136.8, (-2464.2434), 3935.7360941591}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1136.8), 2464.2434, (-3935.7360941591)}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.scale(3992.4906261806327, doubleArray2);
      assertArrayEquals(new double[] {1136.8, (-2464.2434), 3935.7360941591}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1136.8), 2464.2434, (-3935.7360941591)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-4538663.343842143), 9838468.675127491, (-1.5713389463050984E7)}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {1136.8, (-2464.2434), 3935.7360941591}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 183;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {183}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {1136.8, (-2464.2434), 3935.7360941591}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L#$S+cWd>;}M/C}";
      stringArray0[1] = "`Q~R9<Z4a9 -SzE4[";
      stringArray0[2] = "";
      stringArray0[3] = "+aU";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean2);
      assertEquals(4, stringArray0.length);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[][] longArray0 = new long[4][7];
      long[] longArray1 = new long[5];
      longArray1[0] = (-1284L);
      longArray1[1] = 4538L;
      longArray1[2] = (-3392L);
      longArray1[3] = (-1453L);
      longArray1[4] = 3667L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 3667L;
      longArray2[1] = (-1284L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-3392L);
      longArray3[1] = (-1284L);
      longArray3[2] = 4538L;
      longArray3[3] = (-1453L);
      longArray3[4] = 110L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-1453L);
      longArray4[1] = 0L;
      longArray0[3] = longArray4;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 2 while others have length 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[8];
      Double double0 = new Double(566.7865);
      assertEquals(566.7865, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[0] = double0;
      Double double1 = new Double(566.7865);
      assertEquals(566.7865, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray2[1] = double1;
      Double double2 = new Double((double) doubleArray2[1]);
      assertEquals(566.7865, (double)double2, 0.01);
      assertEquals(8, doubleArray2.length);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray2[2] = double2;
      Double double3 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray2[3] = double3;
      Double double4 = new Double(566.7865);
      assertEquals(566.7865, (double)double4, 0.01);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray2[4] = double4;
      Double double5 = new Double((double) doubleArray2[0]);
      assertEquals(566.7865, (double)double5, 0.01);
      assertEquals(8, doubleArray2.length);
      assertNotNull(double5);
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      
      doubleArray2[5] = double5;
      Double double6 = new Double(1.34217729E8);
      assertEquals(1.34217729E8, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      
      doubleArray2[6] = double6;
      Double double7 = new Double(566.7865);
      assertEquals(566.7865, (double)double7, 0.01);
      assertNotNull(double7);
      assertEquals((double)double7, (double)double2, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double5, 0.01);
      assertEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals((double)double7, (double)double4, 0.01);
      
      doubleArray2[7] = double7;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, doubleArray2.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = 17;
      intArray0[2] = (-2478);
      intArray0[3] = 301;
      intArray0[4] = 2251;
      intArray0[5] = 1403;
      intArray0[6] = (-3406);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {12, 17, (-2478), 301, 2251, 1403, (-3406)}, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1051;
      floatArray0[1] = (float) 1051;
      floatArray0[2] = (float) 1051;
      floatArray0[3] = (float) 1051;
      floatArray0[4] = (float) 1051;
      floatArray0[5] = (float) 1051;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1051;
      floatArray1[1] = (float) 1051;
      floatArray1[2] = (float) 1051;
      floatArray1[3] = (float) 1051;
      floatArray1[4] = (float) 1051;
      floatArray1[5] = (float) 1051;
      floatArray1[6] = (float) 1051;
      floatArray1[7] = (float) 1051;
      floatArray1[8] = (float) 1051;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1051.0F, 1051.0F, 1051.0F, 1051.0F, 1051.0F, 1051.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1051.0F, 1051.0F, 1051.0F, 1051.0F, 1051.0F, 1051.0F, 1051.0F, 1051.0F, 1051.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[15];
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double double0 = new Integer(0);
      assertEquals(0, double0, 0.01);
      
      int int1 = new Integer(0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      double double1 = MathArrays.linearCombination(2451.6916490847957, (double) 0, (double) 0, (double) 0, (double) 0, (double) 0);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(15, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = null;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1361.7239353333243);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1361.7239353333243)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-2359.372693201), 294.364618001, (-375.913), 13.07, (-1361.7239353333243), 687.549);
      assertEquals((-1635680.9544805947), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 460.86096F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-268.5499F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {460.86096F, 0.0F, (-268.5499F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= -1,361.724)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = 1836.361898665;
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1361.7239353333243);
      doubleArray0[1] = (-1361.7239353333243);
      doubleArray0[2] = (-1361.7239353333243);
      doubleArray0[1] = (-1361.7239353333243);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1361.7239353333243), (-1361.7239353333243), (-1361.7239353333243), 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = 294.364618001;
      double double2 = 13.07;
      double double3 = MathArrays.linearCombination(0.0, (-1361.7239353333243), 13.07, 294.364618001, (-1361.7239353333243), (-1361.7239353333243));
      assertEquals(1858139.4216169487, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-268.5499F);
      doubleArray1[1] = 294.364618001;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {(-268.5498962402344), 294.364618001}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-831.24);
      doubleArray1[2] = (-1716.503259885539);
      doubleArray1[3] = (-1412.89077);
      doubleArray1[4] = (-3169.38393034);
      doubleArray1[5] = 3095.0;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-831.24));
      assertArrayEquals(new double[] {0.0, (-831.24), (-1716.503259885539), (-1412.89077), (-3169.38393034), 3095.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-171.24085801129334), (-353.61085968189894), (-291.0647078232964), (-652.9137476524551), 637.5901731689437}, doubleArray2, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray2, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.linearCombination(1.34217729E8, 13.07, (-375.913), 1.34217729E8, 481.984395548654, (-375.913));
      assertEquals((-4.8700144627747086E10), double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 5207.67F;
      floatArray0[2] = 2351.5627F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 460.86096F;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-268.5499F);
      floatArray1[1] = 460.86096F;
      floatArray1[2] = 2351.5627F;
      floatArray1[3] = (-268.5499F);
      floatArray1[4] = (-268.5499F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 5207.67F, 2351.5627F, 0.0F, 0.0F, 460.86096F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-268.5499F), 460.86096F, 2351.5627F, (-268.5499F), (-268.5499F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 182;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {182}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double1 = MathArrays.linearCombination(0.0, (double) 182, 1.34217729E8, (double) 182, 2451.6916490847957, (double) 0);
      assertEquals(2.4427626678E10, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-673.984928567727);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 7.848361555046424E-8;
//      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 727.2461954;
      doubleArray1[1] = 868.744020932543;
      doubleArray1[2] = 153.3;
      doubleArray1[3] = 1150.0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {727.2461954, 868.744020932543, 153.3, 1150.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = (-919);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-919);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-919.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-919.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "2p~|k9;U-?\"sDKd_ ";
      stringArray0[1] = "";
      double double1 = MathArrays.linearCombination(1.633123935319537E16, 1.633123935319537E16, (-919.0), 2.0217439756338078E-10, 2.0217439756338078E-10, 0.0, (-328.51147812), 0.0);
      assertEquals(2.6670937881135714E32, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, (double) (-919), 0.0, (-1.0));
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-919));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = 2.0217439756338078E-10;
      double double2 = 1.633123935319537E16;
      double double3 = (-455.98);
      double double4 = MathArrays.linearCombination(0.0, 0.0, (-268.000297334), 1.633123935319537E16, 0.0, (-455.98), 0.0, 1.625);
      assertEquals((-4.3767770024890808E18), double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      
      double double5 = (-1.0);
      double double6 = (-1584.50613784);
      double double7 = MathArrays.linearCombination((-455.98), (-1584.50613784), 259.0, 0.0);
      assertEquals(722503.1087322832, double7, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int0 = (-1428);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray2, (-1428));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 103;
      doubleArray0[2] = (double) 103;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 2524.4190633833146;
      doubleArray0[5] = (double) 103;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 103.0, 103.0, Double.POSITIVE_INFINITY, 2524.4190633833146, 103.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 103;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {103.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 103;
      doubleArray0[1] = (double) 103;
      int[] intArray0 = new int[7];
      intArray0[0] = 103;
      intArray0[1] = 103;
      intArray0[2] = 103;
      intArray0[3] = 103;
      intArray0[2] = 103;
      intArray0[5] = 103;
      intArray0[6] = 103;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {103, 103, 103, 103, 0, 103, 103}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 243.2108978773;
      doubleArray1[1] = (double) 103;
      doubleArray1[2] = (double) 103.0F;
      doubleArray1[3] = 4.337162228881557E21;
      doubleArray1[4] = (double) 103;
      doubleArray1[5] = (double) 103;
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale((-565.2933316), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("$VALUES");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.$VALUES
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 256.2920321896;
      doubleArray0[1] = (-1361.7239353333243);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {256.2920321896, (-1361.7239353333243)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-2359.372693201), 294.364618001, (-375.913), 13.07, (-1361.7239353333243), 687.549);
      assertEquals((-1635680.9544805947), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 460.86096F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-268.5499F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {460.86096F, 0.0F, (-268.5499F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {256.2920321896, (-1361.7239353333243)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-919);
      doubleArray0[1] = (double) (-919);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-919.0), (-919.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-919.0), (-919.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "2p~|k9;U-?\"sDKd_ ";
      stringArray0[1] = "";
      double double1 = MathArrays.linearCombination(1.633123935319537E16, 1.633123935319537E16, (-919.0), 2.0217439756338078E-10, 2.0217439756338078E-10, (-919.0), (-328.51147812), (-919.0));
      assertEquals(2.6670937881135714E32, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination((-919.0), (double) (-919), 0.0, (-1.0));
      assertEquals(844561.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-919));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "g*fg-:JhiNl";
      stringArray0[1] = "";
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1500);
      doubleArray0[1] = (double) (-1500);
      doubleArray0[2] = (double) (-1500);
      doubleArray0[3] = (double) 0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1500.0), (-1500.0), (-1500.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2598.076211353316, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertArrayEquals(new double[] {(-1500.0), (-1500.0), (-1500.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1500.0), (-1500.0), (-1500.0), 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-702.2985F);
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[3][7];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0[0], doubleArray0[1]);
      assertTrue(boolean1);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Field<Double> field1 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field1, (-1), 69);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 1.0F;
      floatArray0[1] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      double[][] doubleArray1 = new double[7][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      double double0 = MathArrays.linearCombination(1.494140625, 1.494140625, 0.125, 205.6292006214473, (double) 0, 0.125);
      assertEquals(27.936106284956303, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 27.936106284956303;
      doubleArray0[1] = 27.936106284956303;
      doubleArray0[2] = 205.6292006214473;
      doubleArray0[3] = 205.6292006214473;
      doubleArray0[4] = 205.6292006214473;
      doubleArray0[5] = 2876.1962987543725;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 27.936106284956303;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 27.936106284956303;
      doubleArray1[3] = 2876.1962987543725;
      doubleArray1[4] = 205.6292006214473;
      doubleArray1[5] = 1.494140625;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, Double.POSITIVE_INFINITY, 7.360696531004372, 0.0714934515111161, 1.0, 1924.9836666173055}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {27.936106284956303, 27.936106284956303, 205.6292006214473, 205.6292006214473, 205.6292006214473, 2876.1962987543725}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {27.936106284956303, 0.0, 27.936106284956303, 2876.1962987543725, 205.6292006214473, 1.494140625}, doubleArray1, 0.01);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equals(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1.0, Double.POSITIVE_INFINITY, 7.360696531004372, 0.0714934515111161, 1.0, 1924.9836666173055}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {27.936106284956303, 27.936106284956303, 205.6292006214473, 205.6292006214473, 205.6292006214473, 2876.1962987543725}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {27.936106284956303, 0.0, 27.936106284956303, 2876.1962987543725, 205.6292006214473, 1.494140625}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide(doubleArray3, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.scale(0.0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[9];
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int1);
      assertEquals(0, intArray0.length);
      assertTrue(int1 == int0);
      
      double double2 = MathArrays.linearCombination(2451.6916490847957, (double) 0, (double) 0, (double) 0, (double) 0, (double) 0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 49;
      intArray0[2] = (-3590);
      intArray0[3] = 2094;
      intArray0[4] = (-3133);
      intArray0[5] = 43;
      intArray0[6] = (-415);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 134217729;
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray1[3] = 49;
      intArray1[4] = 233;
      intArray1[5] = 2094;
      intArray1[6] = 0;
      intArray1[7] = 2094;
      intArray1[8] = 2094;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertArrayEquals(new int[] {134217729, 2, 0, 49, 233, 2094, 0, 2094, 2094}, intArray1);
      assertArrayEquals(new int[] {0, 49, (-3590), 2094, (-3133), 43, (-415)}, intArray0);
      assertEquals(1.3421772912211916E8, double1, 0.01);
      assertEquals(9, intArray1.length);
      assertEquals(7, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 1.0F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 0;
      floatArray1[3] = 1.0F;
      floatArray1[4] = (-1580.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 1.0F, (-1580.0F)}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Bk&dE;J";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 153.3;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 153.3;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 153.3;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 153.3, 0.0, 153.3, Double.POSITIVE_INFINITY, 153.3}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray1, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-702.2985F);
      floatArray0[1] = (float) 103;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-702.2985F), 103.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field1 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 103;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 1.0F;
      floatArray0[1] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3390.352055914365;
      doubleArray0[1] = 1.0;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {3390.352055914365, 1.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = (-1500);
      intArray0[1] = (-1500);
      int int2 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1500)}, intArray0);
      assertEquals(0, int2);
      assertEquals(2, intArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1453.0;
      doubleArray0[1] = (-2222.813);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {1453.0, (-2222.813)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1453.0, (-2222.813)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {1453.0, (-2222.813)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1453.0, (-2222.813)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1453.0, (-2222.813)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[3][5];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray2;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray3);
      assertArrayEquals(new double[] {1453.0, (-2222.813)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      
      Double[] doubleArray4 = new Double[6];
      doubleArray4[0] = (Double) (-2222.813);
      doubleArray4[1] = (Double) (-2222.813);
      doubleArray4[2] = (Double) 1453.0;
      doubleArray4[3] = (Double) 1453.0;
      doubleArray4[4] = (Double) 1453.0;
      doubleArray4[5] = (Double) 1453.0;
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray4, mathArrays_OrderDirection2, true);
      assertFalse(boolean0);
      assertEquals(6, doubleArray4.length);
      assertSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection1));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1107.1;
      doubleArray0[1] = 0.0;
      boolean boolean0 = false;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {1107.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1107.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1225670.4099999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1107.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "g*fg-:JhiNl";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2.6033824355191673E-8);
      doubleArray0[1] = (-2.6033824355191673E-8);
      doubleArray0[2] = (-2.6033824355191673E-8);
      doubleArray0[3] = (-2.6033824355191673E-8);
      doubleArray0[4] = (-2.6033824355191673E-8);
      doubleArray0[6] = (-2.6033824355191673E-8);
      doubleArray0[6] = (-2.6033824355191673E-8);
      MathArrays.scaleInPlace((-2.6033824355191673E-8), doubleArray0);
      assertArrayEquals(new double[] {6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, -0.0, 6.777600105569711E-16}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, -0.0, 6.777600105569711E-16}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, -0.0, 6.777600105569711E-16}, doubleArray0, 0.01);
      assertEquals(2.7561517914611134E-30, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, -0.0, 6.777600105569711E-16}, doubleArray0, 0.01);
      assertEquals(2.7561517914611134E-30, double2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, -0.0, 6.777600105569711E-16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double3 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, -0.0, 6.777600105569711E-16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 1607;
      intArray0[2] = 1714;
      intArray0[3] = 134217729;
      intArray0[4] = 987;
      intArray0[5] = (-96);
      intArray0[6] = (-424);
      intArray0[7] = 2;
      intArray0[8] = 3437;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1), 1607, 1714, 134217729, 987, (-96), (-424), 2, 3437}, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray2 = MathArrays.scale((-424), doubleArray1);
      assertArrayEquals(new double[] {6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, -0.0, 6.777600105569711E-16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-424.0), (-424.0), (-424.0), (-424.0), (-424.0), Double.NaN, (-424.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[9];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-506.58311291428623);
      doubleArray0[1] = (-506.58311291428623);
      double[] doubleArray1 = MathArrays.scale((-506.58311291428623), doubleArray0);
      assertArrayEquals(new double[] {(-506.58311291428623), (-506.58311291428623), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {256626.45028992847, 256626.45028992847, -0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-506.58311291428623), (-506.58311291428623), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {256626.45028992847, 256626.45028992847, -0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-506.58311291428623), (-506.58311291428623), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {256626.45028992847, 256626.45028992847, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.585713498840913E10, 6.585713498840913E10, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Double double0 = new Double((-506.58311291428623));
      assertEquals((-506.58311291428623), (double)double0, 0.01);
      assertNotNull(double0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection1, false);
      assertArrayEquals(new double[] {(-506.58311291428623), (-506.58311291428623), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {256626.45028992847, 256626.45028992847, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.585713498840913E10, 6.585713498840913E10, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.scaleInPlace((-757.5), doubleArray0);
      assertArrayEquals(new double[] {383736.7080325718, 383736.7080325718, -0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = (-757.5);
      double double1 = MathArrays.linearCombination((-2856.1), 1.3161292056703791E7, (-972.7009608410726), Double.NEGATIVE_INFINITY, 1.0E-5, (-3057.296488375827), (-2662.35), Double.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      double double2 = MathArrays.linearCombination((-1558.96100553068), (-757.5), (-444.725), (-2856.1), 285.2, (-757.5));
      assertEquals(2235053.03418949, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray4 = new double[1][9];
      doubleArray4[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection2, doubleArray4);
      assertArrayEquals(new double[] {-0.0, 383736.7080325718, 383736.7080325718}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection1));
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection0));
      
      double[] doubleArray5 = MathArrays.convolve(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {-0.0, 383736.7080325718, 383736.7080325718}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 256626.45028992847, 256626.45028992847}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-1.9439453609462082E8)}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-757.5)}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(5, doubleArray5.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray5);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      double[] doubleArray6 = MathArrays.normalizeArray(doubleArray0, 4.337162228881557E21);
      assertArrayEquals(new double[] {-0.0, 383736.7080325718, 383736.7080325718}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 2.1685811144407785E21, 2.1685811144407785E21}, doubleArray6, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray6.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotNull(doubleArray6);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 31;
      intArray0[1] = (-1345);
      intArray0[2] = 184;
      intArray0[3] = (-1748);
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 31;
      intArray1[1] = (-1345);
      intArray1[2] = (-1345);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[1][3];
      doubleArray0[0] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-702.2985F);
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[3][7];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-765.6152833601);
      doubleArray0[0] = (-765.6152833601);
      double double1 = 398.09982004;
      doubleArray0[1] = 398.09982004;
      double double2 = 2564.8318220209;
      doubleArray0[1] = 2564.8318220209;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1449.369963015);
      double double3 = (-182.577312710991);
      doubleArray0[5] = (-182.577312710991);
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {(-765.6152833601), 2564.8318220209, 0.0, (-1.0), (-1449.369963015), (-182.577312710991)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 755;
      intArray0[1] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {755, (-1)}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {755, (-1)}, intArray0);
      assertEquals(0, int1);
      assertEquals(2, intArray0.length);
      assertTrue(int1 == int0);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[7][0];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 755;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 755;
      longArray2[1] = (long) 755;
      longArray2[2] = (long) 755;
      longArray2[3] = (long) 755;
      longArray2[4] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) 755;
      longArray4[1] = (long) (-1);
      longArray4[2] = (long) 0;
      longArray4[3] = (long) (-1);
      longArray4[4] = (long) 0;
      longArray4[5] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (long) (-1);
      longArray5[1] = (long) 0;
      longArray5[2] = (long) 0;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray0[5] = longArray6;
      long[] longArray7 = new long[3];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      
      longArray7[0] = (-783L);
      longArray7[1] = (long) (-1);
      longArray7[2] = (long) (-1);
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{EfHWFnym5T#fFJ!J";
      stringArray0[1] = "d{@1.)+q";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[3] = "`f*<s4)i`!NB";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "g*fg-:JhiNl";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2.6033824355191673E-8);
      doubleArray0[1] = (-2.6033824355191673E-8);
      doubleArray0[2] = (-2.6033824355191673E-8);
      doubleArray0[3] = (-2.6033824355191673E-8);
      doubleArray0[4] = (-2.6033824355191673E-8);
      doubleArray0[5] = (-2.6033824355191673E-8);
      doubleArray0[6] = (-2.6033824355191673E-8);
      MathArrays.scaleInPlace((-2.6033824355191673E-8), doubleArray0);
      assertArrayEquals(new double[] {6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = new Double(6.777600105569711E-16);
      assertEquals(6.777600105569711E-16, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16}, doubleArray0, 0.01);
      assertEquals(3.215510423371299E-30, double2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double3 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2.6457513110645907, double3, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16, 6.777600105569711E-16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "g*fg-:JhiNl";
      stringArray0[1] = "";
      stringArray0[2] = "%4q4J:egE";
      int[] intArray0 = new int[1];
      intArray0[0] = (-1872);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1872)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "w\":*zXzNeM`";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<String>[] fieldElementArray0 = MathArrays.buildArray(field0, 3341);
      assertEquals(3341, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1064.33;
      doubleArray0[1] = 1064.33;
      doubleArray0[2] = 592.372127;
      doubleArray0[3] = 592.372127;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1064.33, 1064.33, 592.372127, 592.372127}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1064.33, 1064.33, 592.372127, 592.372127}, doubleArray0, 0.01);
      assertEquals(1722.6160836045296, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 592.372127;
      doubleArray1[1] = 1064.33;
      doubleArray1[2] = 1028.53636;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1064.33, 1064.33, 592.372127, 592.372127}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {592.372127, 1064.33, 1028.53636}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 1107.1;
      doubleArray0[1] = 0.0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 132.70871F;
      floatArray0[1] = (-2641.2024F);
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 1.4E-45F;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (-2180.0F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-1472.18F);
      floatArray0[8] = 1913.533F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {132.70871F, (-2641.2024F), 3.4028235E38F, 1.4E-45F, Float.NaN, (-2180.0F), 0.0F, (-1472.18F), 1913.533F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1107.1, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination((double) (-1472.18F), (double) (-1472.18F), (-86.938854), 851.27402, 592.372127, 3.834E-20);
      assertEquals(2093305.3228055658, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[][] doubleArray2 = new double[4][9];
      doubleArray2[0] = null;
      doubleArray2[1] = null;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
//      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-375.76185242303);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-375.76185242303)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace((-375.76185242303), doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-375.76185242303);
      doubleArray2[1] = (-375.76185242303);
      doubleArray2[2] = (-375.76185242303);
      doubleArray2[3] = (-375.76185242303);
      doubleArray2[4] = (-375.76185242303);
      doubleArray2[5] = (-375.76185242303);
      doubleArray2[6] = (-375.76185242303);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.0, 449.667927, 1.0, (-853.2));
      assertEquals((-403.532073), double0, 0.01);
      
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 436;
      intArray0[2] = (-2300);
      intArray0[3] = 39;
      intArray0[4] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, 436, (-2300), 39, 0}, intArray0);
      assertArrayEquals(new int[] {0, 436, (-2300), 39, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "w\":*zXzNeM`";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 3341;
      FieldElement<String>[] fieldElementArray0 = MathArrays.buildArray(field0, 3341);
      assertEquals(3341, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      int[] intArray0 = new int[0];
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int1);
      assertEquals(0, intArray0.length);
      assertFalse(int1 == int0);
      
      Field<String> field1 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      int int2 = 1073741824;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field1, 1073741824);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.0, 449.667927, 1.0, (-853.2));
      assertEquals((-403.532073), double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "b|GTe";
      stringArray0[1] = "{_?,";
      stringArray0[2] = "b|GTe";
      stringArray0[3] = "zjN'=G'iZs";
      stringArray0[4] = "{_?,";
      stringArray0[5] = "{_?,";
      stringArray0[6] = "{_?,";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4.3466666666666665E18;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertArrayEquals(new double[] {4.3466666666666665E18, Double.NaN, 3.834E-20}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(3, doubleArray0.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 1.0F;
      floatArray0[1] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, intArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2097;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2097, 2097);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2876.1962987543725;
      doubleArray0[2] = 2876.1962987543725;
      doubleArray0[3] = 2876.1962987543725;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 3667L;
      longArray0[2] = (-1813L);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,813 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.checkOrder(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(2870.291, 153.3, 1916.84466326, 4699.81, 1418.21171685, -0.0, (-3816.0), 0.06666666666666667);
      assertEquals(9448566.927135982, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "w\":*zXzNeM`";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 3341;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 3341);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "LA*6];^Hx$X'";
      stringArray0[1] = "9Vc':k?rzym`7WIC~";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = (double) 0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {20.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 5 while others have length 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 1.0F;
      floatArray0[1] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.5039018405998233;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      int int1 = (-3441);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-3441));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1399.3);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1399.3)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1399.3)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1958040.4899999998}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1399.3);
      doubleArray2[1] = (-1399.3);
      doubleArray2[2] = 0.0;
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {(-1399.3), (-1399.3), 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      int int0 = (-919);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-919));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1500);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1500)}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, (-1500)}, intArray0);
      assertArrayEquals(new int[] {0, (-1500)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1500);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1500);
      doubleArray0[3] = (double) 0;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,500 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1500);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1500)}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, (-1500)}, intArray0);
      assertArrayEquals(new int[] {0, (-1500)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1500);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1500);
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1500);
      doubleArray1[1] = (double) (-1500);
      doubleArray1[2] = (double) (-1500);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 6.585713498840913E10;
      doubleArray1[7] = (double) 0;
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = 2876.1962987543725;
      doubleArray0[2] = 2876.1962987543725;
      doubleArray0[3] = 2876.1962987543725;
      doubleArray0[4] = 2876.1962987543725;
      doubleArray0[5] = 2876.1962987543725;
      doubleArray0[8] = 2876.1962987543725;
      doubleArray0[7] = 2876.1962987543725;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[0] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 153.3;
      doubleArray0[4] = 578.0442264329973;
      doubleArray0[5] = (-802.396241108824);
      doubleArray0[6] = (-2986.2444737);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 153.3, 578.0442264329973, (-802.396241108824), (-2986.2444737)}, doubleArray0, 0.01);
      assertEquals(3149.465320044322, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 539.0186126358929);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 153.3, 578.0442264329973, (-802.396241108824), (-2986.2444737)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, (-27.02765454095032), (-101.91245702166937), 141.46698245040034, 526.4917417481122}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 153.3, 578.0442264329973, (-802.396241108824), (-2986.2444737)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, (-27.02765454095032), (-101.91245702166937), 141.46698245040034, 526.4917417481122}, doubleArray1, 0.01);
      assertEquals(3512.7362154481125, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 1107.1;
      doubleArray0[0] = 1107.1;
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {1107.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1107.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1225670.4099999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1107.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not increasing (1,225,670.41 > 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[][] doubleArray2 = new double[8][3];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
//      try { 
        MathArrays.normalizeArray(doubleArray1, 0.3333333134651184);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      Integer[] integerArray0 = new Integer[3];
      int int0 = 83;
      Integer integer0 = new Integer(83);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 83;
      intArray0[1] = 83;
      intArray0[2] = int0;
      intArray0[3] = 83;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = 83;
      int[] intArray1 = MathArrays.copyOf(intArray0, 83);
      assertEquals(83, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 0;
      longArray2[5] = (long) 0;
      longArray2[6] = (long) 0;
      longArray2[7] = (long) 0;
      longArray2[8] = (long) 0;
      longArray0[1] = longArray2;
      longArray0[2] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1500);
      MathArrays.distanceInf(intArray0, intArray0);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      int[] intArray2 = new int[4];
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      MathArrays.distance1(intArray1, intArray2);
      long[][] longArray0 = new long[3][4];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (long) 1500;
      longArray0[1] = longArray2;
      longArray0[2] = longArray1;
      MathArrays.checkRectangular(longArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1500);
      doubleArray0[2] = 2665.8;
      doubleArray0[3] = (double) (-1500);
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("~%6/7g)P");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.~%6/7g)P
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[0] = (-7);
      intArray0[1] = (-1500);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace((-7), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1706;
      MathArrays.copyOf(intArray0);
      MathArrays.linearCombination((double) 1706, (-1237.4771620940398), (-1237.4771620940398), (double) 1706, 653.64778, (-749.4748609401515));
      int[] intArray1 = new int[4];
      intArray1[0] = 1706;
      intArray1[1] = 1706;
      intArray1[2] = 1706;
      intArray1[3] = 1706;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray1, (-2150));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3390.352055914365;
      doubleArray0[3] = 2352.078;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (0 <= 1)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-506.58311291428623);
      doubleArray0[1] = (-506.58311291428623);
      double[] doubleArray1 = MathArrays.scale((-506.58311291428623), doubleArray0);
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      MathArrays.copyOf(intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      MathArrays.distance1(doubleArray1, doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection1, false);
      MathArrays.scaleInPlace((-757.5), doubleArray0);
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = (-757.5);
      double[][] doubleArray4 = new double[2][1];
      doubleArray4[0] = doubleArray2;
      doubleArray4[1] = doubleArray2;
      MathArrays.sortInPlace(doubleArray3, doubleArray4);
      MathArrays.ebeMultiply(doubleArray1, doubleArray2);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("u4q");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.u4q
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2876.1962987543725;
      doubleArray0[1] = 2876.1962987543725;
      doubleArray0[2] = 2876.1962987543725;
      doubleArray0[3] = 2876.1962987543725;
      doubleArray0[4] = 2876.1962987543725;
      doubleArray0[5] = 2876.1962987543725;
      doubleArray0[6] = 2876.1962987543725;
      doubleArray0[7] = 2876.1962987543725;
      doubleArray0[8] = 2876.1962987543725;
      MathArrays.scaleInPlace(2876.1962987543725, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 134217729;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-3208);
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray1);
      
      MathArrays.linearCombination(0.9921976327896118, (-0.2499999701976776), (double) 0, (-837.2580983), (double) 134217729, (-535.9208894), (-535.9208894), 8272505.148968352);
      long[][] longArray0 = new long[4][0];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 134217729;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = 1657L;
      longArray1[8] = (long) 134217729;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (long) (-3208);
      longArray2[1] = (long) 134217729;
      longArray2[2] = (long) 134217729;
      longArray2[3] = 0L;
      longArray2[4] = (long) 134217729;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = (long) 0;
      longArray3[1] = (long) (-3208);
      longArray3[2] = 0L;
      longArray3[3] = (long) 0;
      longArray3[4] = (long) 0;
      longArray3[5] = (long) 0;
      longArray3[6] = 0L;
      longArray3[7] = 1657L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = (long) 0;
      longArray4[1] = 0L;
      longArray4[2] = (long) 0;
      longArray0[3] = longArray4;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -3,208 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[8][3];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 733.3323, 0.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 733.3323;
      doubleArray1[5] = 0.0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.031;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-0.25);
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MathArrays.linearCombination(1.0, 449.667927, 1.0, (-853.2));
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 436;
      intArray0[2] = (-2300);
      intArray0[3] = 39;
      intArray0[4] = 0;
      MathArrays.copyOf(intArray0);
      double double0 = MathArrays.linearCombination(Double.NaN, (-3725.236466), (-133.51734780357), 1.986821492305628E-8, 3.26E18, 1280.0, 1280.0, 2506.938304);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = (-919);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-919);
      doubleArray0[1] = (double) (-919);
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (-919 >= -919)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2876.1962987543725;
      doubleArray0[2] = 2876.1962987543725;
      doubleArray0[3] = 2876.1962987543725;
      doubleArray0[4] = 2876.1962987543725;
      doubleArray0[5] = 2876.1962987543725;
      doubleArray0[8] = 2876.1962987543725;
      doubleArray0[7] = 2876.1962987543725;
      doubleArray0[8] = 2876.1962987543725;
      MathArrays.scaleInPlace(2876.1962987543725, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 134217729;
      intArray0[1] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-3208);
      int[] intArray1 = MathArrays.copyOf(intArray0, 594);
      assertEquals(594, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3001.0814;
      doubleArray0[1] = 3001.0814;
      doubleArray0[2] = 3001.0814;
      doubleArray0[3] = 3001.0814;
      MathArrays.scaleInPlace(3001.0814, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(9006489.569425961, doubleArray1);
      assertArrayEquals(new double[] {9006489.569425961, 9006489.569425961, 9006489.569425961, 9006489.569425961}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-972.4195F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 862.273F;
      floatArray0[3] = (-2561.4993F);
      floatArray0[4] = 1467.1844F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 762.5304F;
      floatArray0[7] = 1.0F;
      float[] floatArray1 = new float[8];
      floatArray1[0] = 1467.1844F;
      floatArray1[1] = 762.5304F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-2561.4993F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 762.5304F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-702.2985F);
      floatArray0[1] = (float) 103;
      floatArray0[2] = 103.6F;
      floatArray0[3] = (float) (-1453);
      floatArray0[4] = (float) (-1453);
      floatArray0[5] = (float) (-1453);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      Field<Double> field1 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field1, 103, (-251));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.7214844226837158;
      doubleArray0[1] = 0.75;
      doubleArray0[2] = (-1853.89484);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.7214844226837158, 0.75, (-1853.89484)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1871.8907F;
      floatArray0[1] = 992.09F;
      floatArray0[2] = 968.87885F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-684.07837F);
      float[] floatArray1 = new float[7];
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-642.2767F);
      floatArray1[4] = 968.87885F;
      floatArray1[5] = 968.87885F;
      floatArray1[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-919);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-919), (-919));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[0] = (-7);
      intArray0[1] = (-1500);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(21, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = (-1500);
      MathArrays.distanceInf(intArray0, intArray0);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      int[] intArray2 = new int[10];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = (-2);
      intArray2[3] = (-2);
      MathArrays.distance1(intArray1, intArray2);
      long[][] longArray0 = new long[3][4];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray0[0] = longArray1;
      MathArrays.distance1(intArray1, intArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-0.23950879834643685);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-552.7881805773957);
      doubleArray0[3] = (-728.281229);
      doubleArray0[4] = 1.0E-5;
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1500);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.copyOf(intArray0);
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "w]:K]q3H";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = " fG]~_c2uJn7^n";
      stringArray0[1] = ":cbCs0z[372JR7J~vo";
      stringArray0[2] = "";
      stringArray0[3] = "_Uj\"!7W3B`Ox-We{";
      stringArray0[4] = "zjN'=G'iZs";
      stringArray0[5] = "";
      stringArray0[6] = "{_?,";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[6][0];
      doubleArray2[0] = doubleArray1;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray2[1] = doubleArray3;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 0.0;
      doubleArray2[5] = doubleArray4;
//      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = 1295.376;
      double double1 = 0.0;
      MathArrays.linearCombination((-1049.1), 1295.376, 0.0, (-1049.1));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1049.1);
      doubleArray0[2] = (-1358978.9615999998);
      doubleArray0[3] = (-1358978.9615999998);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 388.32121636254;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 151.3698589768529;
      doubleArray0[5] = 317.03;
      doubleArray0[6] = (-354.935996974535);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathArrays.normalizeArray(doubleArray0, 0.0);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("Xm");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.Xm
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1500);
      MathArrays.distanceInf(intArray0, intArray0);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      MathArrays.distance1(intArray1, intArray2);
      long[][] longArray0 = new long[3][4];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (long) 1500;
      longArray2[1] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 0 while others have length 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Double>) null, (-364));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 2723.5;
      doubleArray0[0] = 2723.5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = 2424.72;
      doubleArray0[4] = Double.NaN;
      double double1 = 407.442683802;
      doubleArray0[5] = 407.442683802;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.0;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1955;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 1955);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1558.96100553068);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-2576.80212648);
      doubleArray0[4] = (-1638.383);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not decreasing (-1,558.961 < 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 936;
      intArray0[2] = (-288);
      intArray0[3] = 3522;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-5296.4);
      doubleArray0[1] = (double) 3522;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-288);
      doubleArray0[4] = (double) 936;
      doubleArray0[5] = (double) (-288);
      doubleArray0[6] = (double) 936;
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, (double) (-288), 0.0, (double) 936, (-288.0), 0.0, (-2209.858), (double) 936);
      MathArrays.distance(doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 936;
      doubleArray2[1] = (-5296.4);
      doubleArray2[2] = (double) 3522;
      doubleArray2[3] = (double) (-288);
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 3522;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (-2209.858);
//      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 153.3;
      doubleArray0[4] = 578.0442264329973;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = (-2986.2444737);
      MathArrays.safeNorm(doubleArray0);
//      try { 
        MathArrays.normalizeArray(doubleArray0, 539.0186126358929);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 245.64548, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1594;
      intArray0[1] = 249;
      intArray0[2] = 224;
      intArray0[3] = (-1);
      intArray0[4] = 1057;
      MathArrays.copyOf(intArray0, 249);
      double double0 = MathArrays.linearCombination(2736.8449, (double) 224, 0.0, (double) 1594, 331.1126184, (double) 224);
      assertEquals(687222.4841216, double0, 0.01);
      
      double[][] doubleArray2 = new double[2][0];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-552.7881805773957);
      doubleArray0[3] = (-728.281229);
      doubleArray0[4] = 1.0E-5;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1128.4);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-552.7881805773957), (-728.281229), 1.0E-5, 0.0, 0.0, (-1128.4)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1736.7);
      doubleArray0[1] = -0.0;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("F9oHFFQ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.F9oHFFQ
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "g*fg-:JhiNl";
      stringArray0[1] = "";
      stringArray0[2] = "%4q4J:egE";
      stringArray0[3] = "";
      stringArray0[4] = "{EfHWFnym5T#fFJ!J";
      stringArray0[5] = "ap@";
      stringArray0[6] = "`f*<s4)i`!NB";
      stringArray0[7] = "LA*6];^Hx$X'";
      stringArray0[8] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 78.17798946;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 37.7219043645169;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2406.084547494438;
      double[][] doubleArray1 = new double[6][7];
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 2406.084547494438;
      doubleArray2[1] = 2406.084547494438;
      doubleArray2[2] = 2406.084547494438;
      doubleArray2[3] = 2406.084547494438;
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 2406.084547494438;
      doubleArray3[1] = 1.34217729E8;
      doubleArray3[2] = 2406.084547494438;
      doubleArray3[3] = 2406.084547494438;
      doubleArray3[4] = 2406.084547494438;
      doubleArray3[5] = 2406.084547494438;
      doubleArray3[6] = 2406.084547494438;
      doubleArray1[1] = doubleArray3;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1472;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = (-670);
      intArray0[6] = 1979;
      intArray0[7] = (-1299);
      intArray0[8] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-535.9208894);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3363.89288537;
      doubleArray0[3] = 1418.21171685;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 2 and 3 are not strictly increasing (3,363.893 >= 1,418.212)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 2513.22243884529;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.304E19, 2513.22243884529, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.400832E38, 1.3108968241017033E23, 1.2632574054230936E7, 0.0, 0.0}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 2226;
      intArray0[4] = (-1571);
      intArray0[5] = (-1872);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[8][3];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathArrays.linearCombination(1.0E-5, (-629.9947), 1.0E-5, 1.0E-5, (-629.9947), (-629.9947));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 396893.31572814303;
      doubleArray0[1] = 396893.31572814303;
      doubleArray0[2] = (-629.9947);
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = 1.0E-5;
      doubleArray0[5] = (-629.9947);
      doubleArray0[6] = 396893.31572814303;
      doubleArray0[7] = 396893.31572814303;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray1);
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (157,524,304,069.679 <= 157,524,304,069.679)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Object>) null, (-518), (-518));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-919);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-919), (-919));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3230.011);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      double double0 = 1.0;
      MathArrays.normalizeArray(doubleArray0, 1.0);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$OrderDirection");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$OrderDirection
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[][] longArray0 = new long[5][2];
      long[] longArray1 = new long[1];
      longArray1[0] = (-1456L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = (-1456L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = (-1456L);
      longArray3[1] = (-1456L);
      longArray3[2] = (-1456L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = (-1456L);
      longArray4[1] = (-1L);
      longArray4[2] = (-1456L);
      longArray4[3] = (-1456L);
      longArray4[4] = (-1456L);
      longArray4[5] = (-1456L);
      longArray4[6] = (-1456L);
      longArray4[7] = (-1456L);
      longArray4[8] = (-1456L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      longArray5[0] = (-1456L);
      longArray5[1] = (-1456L);
      longArray5[2] = (-1456L);
      longArray5[3] = (-1456L);
      longArray5[4] = (-1L);
      longArray5[5] = (-208L);
      longArray0[4] = longArray5;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 3 while others have length 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "g*fg-:JhiNl";
      stringArray0[1] = "";
      stringArray0[2] = "%4q4J:egE";
      stringArray0[3] = "";
      stringArray0[5] = "ap@";
      stringArray0[6] = "`f*<s4)i`!NB";
      stringArray0[7] = "LA*6];^Hx$X'";
      stringArray0[8] = "";
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 6.585713498840913E10;
      doubleArray0[1] = 1028.53636;
      doubleArray0[2] = 3363.89288537;
      doubleArray0[3] = 592.372127;
      doubleArray0[4] = 1064.33;
      doubleArray0[5] = 1167.955;
      MathArrays.checkPositive(doubleArray0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6.585713498840924E10, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1107.1;
      doubleArray0[0] = 1107.1;
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 100.0, 100.0, 100.0);
      assertEquals(10000.0, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2617);
      intArray0[3] = 2989;
      intArray0[4] = 0;
      intArray0[5] = 128;
      intArray0[6] = 228;
      intArray0[7] = (-2823);
      intArray0[8] = (-344);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-259.9402869303);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 653.64778;
      doubleArray0[3] = (-1439.676);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1602.339339230094, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 801.83185114;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1094.6216726924704);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 0.0;
      double[][] doubleArray1 = new double[8][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 20.0;
      doubleArray2[1] = (-145.3538243066);
      doubleArray2[2] = 6.283185307179586;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      int[] intArray0 = new int[1];
      intArray0[0] = (-4000);
      MathArrays.copyOf(intArray0);
      double double0 = MathArrays.linearCombination(0.0, 0.0, 1.0E-5, 0.0, 20.0, 20.0);
      assertEquals(400.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MathArrays.OrderDirection.values();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Object>) null, 16, 16);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-1453);
      int int1 = 103;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1453), 103);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = null;
//      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 610.7195;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 3232.2263841;
      doubleArray1[5] = (-375.2178876072421);
      doubleArray1[6] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-506.58311291428623);
      doubleArray0[1] = (-506.58311291428623);
      doubleArray0[2] = (-506.58311291428623);
      MathArrays.scale((-506.58311291428623), doubleArray0);
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      MathArrays.copyOf(intArray0);
      MathArrays.linearCombination((-506.58311291428623), (-1156.9), (-506.58311291428623), (-757.5));
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (-1601L);
      longArray2[1] = 2004L;
      longArray2[2] = 0L;
      longArray2[3] = 1023L;
      longArray2[4] = 890L;
      longArray2[5] = 321L;
      longArray2[6] = (-1L);
      longArray2[7] = 2368L;
      longArray2[8] = (-2016L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = 2004L;
      longArray3[1] = (-1297L);
      longArray3[2] = 890L;
      longArray3[3] = (-2016L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = 0L;
      longArray4[1] = (-1L);
      longArray0[3] = longArray4;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,601 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 1643.2819F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }
}
