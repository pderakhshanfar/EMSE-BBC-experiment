/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 12:42:17 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.9;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3345.4511447369;
      doubleArray0[3] = 4.3466666666666665E18;
      doubleArray0[4] = (-1459.472262699062);
      doubleArray0[5] = 3476.3598863906;
      doubleArray0[6] = (-0.33333333333333287);
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = (-3624.10432155522);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3745366896198556E19, double0, 0.01);
      assertArrayEquals(new double[] {0.9, 0.0, 3345.4511447369, 4.3466666666666665E18, (-1459.472262699062), 3476.3598863906, (-0.33333333333333287), 1.304E19, (-3624.10432155522)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.4E-45F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 5391.0F;
      floatArray0[4] = 828.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.4E-45F, 0.0F, 0.0F, 5391.0F, 828.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 1.4E-45F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = 294.35116999;
      doubleArray0[5] = (double) 1.4E-45F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(294.35116999, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.401298464324817E-45, 0.0, 294.35116999, 1.401298464324817E-45}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 423.56183F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[3] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {423.56183F, 0.0F, Float.POSITIVE_INFINITY, 1.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[1] = (-2054.6);
      doubleArray0[2] = (double) 1.0F;
//      try { 
        MathArrays.normalizeArray(doubleArray0, 1.0F);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(3446113.184494987);
      assertNotNull(double0);
      assertEquals(3446113.184494987, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(3446113.184494987, (double)double1, 0.01);
      assertEquals(2, doubleArray0.length);
      
      doubleArray0[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 3446113.184494987;
      doubleArray1[1] = (double) doubleArray0[1];
      doubleArray1[2] = (double) doubleArray0[1];
      doubleArray1[3] = 3446113.184494987;
      doubleArray1[4] = 3446113.184494987;
      doubleArray1[5] = (double) doubleArray0[1];
//      try { 
        MathArrays.normalizeArray(doubleArray1, Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      FieldElement<Integer>[][] fieldElementArray0 = MathArrays.buildArray(field0, 44, 44);
      assertNotNull(fieldElementArray0);
      assertEquals(44, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3407);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(3407, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2600.61238;
      doubleArray0[1] = (-1675.30810744598);
      doubleArray0[2] = 211.5;
      doubleArray0[3] = 79.7706;
      doubleArray0[4] = (-791.78233);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = (-29.86716529);
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 3.6140973815548203E12;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2600.61238, (-1675.30810744598), 211.5, 79.7706, (-791.78233), 3.834E-20, (-29.86716529), 1.304E19, 3.6140973815548203E12}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.7004160000002612E38, double0, 0.01);
      assertArrayEquals(new double[] {2600.61238, (-1675.30810744598), 211.5, 79.7706, (-791.78233), 3.834E-20, (-29.86716529), 1.304E19, 3.6140973815548203E12}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 4966, (-1));
      assertNotNull(objectArray0);
      assertEquals(4966, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-653.60345F);
      floatArray0[2] = (-1017.0F);
      floatArray0[3] = Float.POSITIVE_INFINITY;
      floatArray0[4] = 2479.84F;
      floatArray0[5] = (-541.4F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-653.60345F), (-1017.0F), Float.POSITIVE_INFINITY, 2479.84F, (-541.4F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 2479.84F;
      doubleArray0[2] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-1017.0F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 2479.840087890625, Double.POSITIVE_INFINITY, 0.0, (-1017.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, (-2544.3909555044), 0.0, 0.0, (-2544.3909555044));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1027.577);
      doubleArray0[1] = (-671.6321);
      doubleArray0[2] = (-2348.884);
      doubleArray0[3] = 1.63E18;
      doubleArray0[4] = (-3106.804369237479);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1027.577), (-671.6321), (-2348.884), 1.63E18, (-3106.804369237479)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1027.577), (-671.6321), (-2348.884), 1.63E18, (-3106.804369237479)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3106.804369237479);
      doubleArray1[1] = 1.63E18;
      doubleArray1[2] = 0.5463024377822876;
      doubleArray1[3] = (-1027.577);
      doubleArray1[4] = 0.0;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2.769710832999997E21), double1, 0.01);
      assertArrayEquals(new double[] {(-1027.577), (-671.6321), (-2348.884), 1.63E18, (-3106.804369237479)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3106.804369237479), 1.63E18, 0.5463024377822876, (-1027.577), 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[2];
      longArray1[0] = 1266L;
      longArray1[1] = 501L;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {4.9E-324, 1.304E19, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 3105.3;
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 854.1;
      doubleArray0[4] = 1.0E-5;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 854.1;
      doubleArray1[1] = 3105.3;
      doubleArray1[2] = 3105.3;
      doubleArray1[3] = 854.1;
      doubleArray1[4] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7062.7000100000005, double0, 0.01);
      assertArrayEquals(new double[] {2.0, 854.1, 0.0, 0.0, 1.0E-5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {854.1, 3105.3, 3105.3, 854.1, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Pair<String, Object> pair0 = new Pair<String, Object>("", class0);
      assertNotNull(pair0);
      
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 58);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 22;
      intArray0[1] = (-2147483647);
      intArray0[2] = (-3094);
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 22;
      intArray1[1] = 22;
      intArray1[2] = (-2147483647);
      intArray1[3] = (-2147483647);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-3116), int0);
      assertArrayEquals(new int[] {22, (-2147483647), (-3094)}, intArray0);
      assertArrayEquals(new int[] {22, 22, (-2147483647), (-2147483647)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-402.8174F);
      floatArray0[2] = -0.0F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 3344.4514F;
      floatArray1[1] = -0.0F;
      floatArray1[2] = (-402.8174F);
      floatArray1[3] = -0.0F;
      floatArray1[4] = 3.4028235E38F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-402.8174F), -0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3344.4514F, -0.0F, (-402.8174F), -0.0F, 3.4028235E38F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 2547);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1455.822648042193;
      doubleArray0[1] = (-497.64994071946643);
      doubleArray0[2] = 377125.8727806613;
      doubleArray0[3] = 3294198.0;
      doubleArray0[4] = (-728.903041237592);
      doubleArray0[5] = 0.6931470632553101;
      doubleArray0[6] = (-3318.363613919193);
      doubleArray0[7] = 237.411402941005;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1455.822648042193, (-497.64994071946643), 377125.8727806613, 3294198.0, (-728.903041237592), 0.6931470632553101, (-3318.363613919193), 237.411402941005, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2119419.5825525825, 247655.46349808844, 1.422239239205755E11, 1.0851740463204E13, 531299.6435254107, 0.4804528512994608, 1.1011537074182848E7, 56364.17424641624, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1455.822648042193, (-497.64994071946643), 377125.8727806613, 3294198.0, (-728.903041237592), 0.6931470632553101, (-3318.363613919193), 237.411402941005, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2119419.5825525825, 247655.46349808844, 1.422239239205755E11, 1.0851740463204E13, 531299.6435254107, 0.4804528512994608, 1.1011537074182848E7, 56364.17424641624, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1.0), (-1.0), (-1.0), Double.NaN, Double.NaN, 0.7675435543060303);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.7675435543060303;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1024.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.7675435543060303;
      doubleArray0[5] = 0.7675435543060303;
      doubleArray0[6] = 0.7675435543060303;
      doubleArray0[7] = (-1.0);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.7675435543060303, Double.NaN, 1024.0, (-1.0), 0.7675435543060303, 0.7675435543060303, 0.7675435543060303, (-1.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 3105.3;
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 854.1;
      doubleArray0[4] = 1.0E-5;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 854.1;
      doubleArray1[1] = 3105.3;
      doubleArray1[2] = 3105.3;
      doubleArray1[3] = 854.1;
      doubleArray1[4] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7062.7000100000005, double0, 0.01);
      assertArrayEquals(new double[] {2.0, 854.1, 0.0, 0.0, 1.0E-5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {854.1, 3105.3, 3105.3, 854.1, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<String, Object>[] pairArray0 = MathArrays.buildArray(field0, 58);
      assertNotNull(pairArray0);
      assertEquals(58, pairArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[3][1];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {854.1, 0.0, 0.0, 1.0E-5, 2.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 772;
      intArray0[2] = 6757;
      intArray0[3] = 13;
      intArray0[4] = 268;
      intArray0[5] = 10;
      intArray0[6] = 0;
      intArray0[7] = (-160);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 772;
      intArray1[1] = 0;
      intArray1[2] = (-160);
      intArray1[3] = 772;
      intArray1[4] = 0;
      intArray1[5] = 772;
      intArray1[6] = 0;
      intArray1[7] = 772;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(11182, int0);
      assertArrayEquals(new int[] {0, 772, 6757, 13, 268, 10, 0, (-160)}, intArray0);
      assertArrayEquals(new int[] {772, 0, (-160), 772, 0, 772, 0, 772}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(11182, int1);
      assertArrayEquals(new int[] {0, 772, 6757, 13, 268, 10, 0, (-160)}, intArray0);
      assertArrayEquals(new int[] {772, 0, (-160), 772, 0, 772, 0, 772}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = 890.0798745760451;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-1597.5282852819);
      int[] intArray0 = new int[8];
      intArray0[0] = 245;
      intArray0[1] = 2147482442;
      intArray0[2] = 1472;
      intArray0[3] = (-456);
      intArray0[4] = 2147482442;
      intArray0[5] = 2509;
      intArray0[6] = 0;
      intArray0[7] = (-513);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {245, 2147482442, 1472, (-456), 2147482442, 2509, 0, (-513)}, intArray0);
      assertEquals(8, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2137228093, 0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1757.4F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-459.093F);
      floatArray0[3] = (-1251.0879F);
      floatArray0[4] = (-2328.6917F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 104.3F;
      floatArray0[7] = Float.POSITIVE_INFINITY;
      floatArray0[8] = 1849.89F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1849.89F;
      floatArray1[1] = (-1251.0879F);
      floatArray1[2] = Float.POSITIVE_INFINITY;
      floatArray1[3] = Float.POSITIVE_INFINITY;
      floatArray1[4] = (-1757.4F);
      floatArray1[5] = (-1757.4F);
      floatArray1[6] = Float.POSITIVE_INFINITY;
      floatArray1[7] = 0.0F;
      floatArray1[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1757.4F), 0.0F, (-459.093F), (-1251.0879F), (-2328.6917F), 0.0F, 104.3F, Float.POSITIVE_INFINITY, 1849.89F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1849.89F, (-1251.0879F), Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, (-1757.4F), (-1757.4F), Float.POSITIVE_INFINITY, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 2159.49;
      doubleArray0[2] = 374.4179;
      doubleArray0[3] = (-840.8405791845);
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 2159.49, 374.4179, (-840.8405791845)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace((-0.1666666567325592), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1699);
      intArray0[1] = 122;
      intArray0[2] = 122;
      intArray0[3] = 122;
      intArray0[4] = 122;
      intArray0[5] = (-2245);
      intArray0[6] = 122;
      intArray0[7] = 122;
      intArray0[8] = 122;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 8;
      intArray1[1] = (-2245);
      intArray1[2] = (-1699);
      intArray1[3] = 122;
      intArray1[4] = (-2245);
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 618;
      intArray0[2] = 1073741824;
      intArray0[3] = 226;
      intArray0[4] = 2;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1, 618, 1073741824, 226, 2}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 226;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {226.0, 1.0, 2.0, 1.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[][] longArray1 = new long[2][6];
      longArray1[0] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(2, longArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-6.663542893624021E-14);
      doubleArray0[1] = 1.86285714285714278E18;
      doubleArray0[2] = (-810.55016);
      doubleArray0[3] = 2255688.0;
      doubleArray0[4] = 1354.6;
      doubleArray0[5] = 624.24262383571;
      doubleArray0[6] = 310.2457733;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2376);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-6.663542893624021E-14), 1.86285714285714278E18, (-810.55016), 2255688.0, 1354.6, 624.24262383571, 310.2457733}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(2376, doubleArray1.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-810.55016);
      doubleArray2[1] = (-810.55016);
      doubleArray2[2] = (-245.52);
      doubleArray2[3] = 3.834E-20;
      doubleArray2[4] = 310.2457733;
      doubleArray2[5] = 6463.920464;
      doubleArray2[6] = (double) 2376;
      doubleArray2[7] = (double) 2376;
      doubleArray2[8] = (-810.55016);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-6.663542893624021E-14), 1.86285714285714278E18, (-810.55016), 2255688.0, 1354.6, 624.24262383571, 310.2457733}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-810.55016), (-810.55016), (-245.52), 3.834E-20, 310.2457733, 6463.920464, 2376.0, 2376.0, (-810.55016)}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(2376, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "n6lFN+^rQ7LN;_NGd6";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1794;
      intArray0[1] = (-331);
      intArray0[2] = (-129);
      intArray0[3] = (-2808);
      intArray0[4] = (-1975);
      intArray0[5] = (-1611);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1975);
      intArray1[1] = (-1611);
      intArray1[2] = 1794;
      intArray1[3] = (-331);
      intArray1[4] = 51;
      intArray1[5] = (-1611);
      intArray1[6] = (-129);
      intArray1[7] = (-331);
      intArray1[8] = 128;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3769, int0);
      assertArrayEquals(new int[] {1794, (-331), (-129), (-2808), (-1975), (-1611)}, intArray0);
      assertArrayEquals(new int[] {(-1975), (-1611), 1794, (-331), 51, (-1611), (-129), (-331), 128}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1781.4404474975263;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 374.4179;
      doubleArray0[4] = 3325.409556459;
      doubleArray0[5] = 1.44888888888888883E18;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (-3598.7130182957294);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.312024691125688E19, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1781.4404474975263, 0.0, 374.4179, 3325.409556459, 1.44888888888888883E18, 1.304E19, (-3598.7130182957294), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1781.4404474975263, 0.0, 374.4179, 3325.409556459, 1.44888888888888883E18, 1.304E19, (-3598.7130182957294), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3562.8808949950526, 0.0, 748.8358, 6650.819112918, 2.8977777777777777E18, 2.608E19, (-7197.426036591459), 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = (-3305L);
      longArray0[3] = 0L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = Double.NaN;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 3477.1243F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.4E-45F;
      floatArray0[3] = 3566.0F;
      floatArray0[4] = 2945.6619F;
      floatArray0[5] = 420.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1992.3992F;
      floatArray0[8] = (-635.3661F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {3477.1243F, 0.0F, 1.4E-45F, 3566.0F, 2945.6619F, 420.0F, 0.0F, 1992.3992F, (-635.3661F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2289.0F;
      floatArray0[1] = 2289.0F;
      floatArray0[2] = 4122.0F;
      floatArray0[3] = (-582.23F);
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2289.0F, 2289.0F, 4122.0F, (-582.23F), 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 927;
      intArray0[1] = (-2456);
      intArray0[2] = 15;
      intArray0[3] = (-1602);
      intArray0[4] = 146;
      intArray0[5] = 1570;
      intArray0[6] = 2;
      intArray0[7] = 1493;
      intArray0[8] = 196;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {927, (-2456), 15, (-1602), 146, 1570, 2, 1493, 196}, intArray0);
      assertArrayEquals(new int[] {927, (-2456), 15, (-1602), 146, 1570, 2, 1493, 196}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[4] = 1985.3329F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1966.0F);
      floatArray0[4] = 1586.94F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-1.0F), (-1966.0F), 1586.94F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 250;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {250}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 410.89868795465;
      doubleArray0[1] = 296.0;
      doubleArray0[2] = 552.193;
      doubleArray0[3] = 323.0;
      doubleArray0[4] = (-4.068233003401932E-9);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4.068233003401932E-9);
      doubleArray1[1] = 323.0;
      doubleArray1[2] = 323.0;
      doubleArray1[3] = 323.0;
      doubleArray1[4] = 3414.234979;
      doubleArray1[5] = 296.0;
      doubleArray1[6] = 296.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {410.89868795465, 296.0, 552.193, 323.0, (-4.068233003401932E-9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.068233003401932E-9), 323.0, 323.0, 323.0, 3414.234979, 296.0, 296.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-4.068233003401932E-9), 323.0, 323.0, 323.0, 3414.234979, 296.0, 296.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {410.89868795465, 296.0, 552.193, 323.0, (-4.068233003401932E-9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.068233003401932E-9), 323.0, 323.0, 323.0, 3414.234979, 296.0, 296.0}, doubleArray1, 0.01);
      assertEquals(11, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 1585);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2145107899;
      doubleArray1[1] = (double) (-2628);
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = 3.7257142857142886E18;
      doubleArray1[4] = 3.7257142857142886E18;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 2145107899;
      doubleArray2[1] = (double) 134217729;
      doubleArray2[2] = (double) (-2628);
      doubleArray2[3] = (double) 2145107899;
      doubleArray2[4] = (double) 2145107899;
      doubleArray2[5] = (double) (-2628);
      doubleArray2[6] = 3.7257142857142886E18;
      doubleArray2[7] = (double) 134217729;
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.145107899E9, (-2628.0), 3.834E-20, 3.7257142857142886E18, 3.7257142857142886E18}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.145107899E9, 1.34217729E8, (-2628.0), 2.145107899E9, 2.145107899E9, (-2628.0), 3.7257142857142886E18, 1.34217729E8}, doubleArray2, 0.01);
      assertEquals(12, doubleArray3.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-918.21), 788.3459227894, 1076.896997755, 1076.896997755, Double.NaN, (-1.0), 1076.896997755, 4.3466666666666665E18);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 788.3459227894;
      doubleArray0[2] = 4.3466666666666665E18;
      doubleArray0[3] = (-1.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[5] = 4.3466666666666665E18;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 4.3466666666666665E18, (-1.0), 0.0, 4.3466666666666665E18, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 4.3466666666666665E18, (-1.0), 0.0, 4.3466666666666665E18, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      MathArrays.checkOrder(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-401);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "W/cf&VNHukJed8&=";
      stringArray0[1] = "1$q9jTRiA";
      stringArray0[2] = "' ?G";
      stringArray0[3] = "";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[6] = "column index {0} out of allowed range [{1}, {2}]";
      stringArray0[7] = "DECREASING";
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathArrays.linearCombination((double) 2435, 507.58334426, (-488.30423843471004), 507.58334426, (-613.143844158), (-613.143844158), 3.7257142857142886E18, 3.834E-20);
      assertEquals(1364055.861384813, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 134217729;
      intArray0[1] = 2145107899;
      intArray0[2] = (-2628);
      intArray0[3] = 2145107899;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {134217729, 2145107899, (-2628), 2145107899}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = 507.58334426;
      doubleArray0[2] = 1364055.861384813;
      doubleArray0[3] = 507.58334426;
      doubleArray0[4] = (double) (-2628);
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = (double) 2435;
      doubleArray0[7] = 1364055.861384813;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2412;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 2412;
      floatArray0[3] = 3485.919F;
      floatArray0[4] = (-90.88828F);
      floatArray0[5] = 3485.919F;
      floatArray0[6] = 3485.919F;
      floatArray0[7] = (-90.88828F);
      floatArray0[8] = (float) 2412;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2412.0F, 0.0F, 2412.0F, 3485.919F, (-90.88828F), 3485.919F, 3485.919F, (-90.88828F), 2412.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[3] = 1.0F;
      floatArray1[4] = 1.0F;
      floatArray1[5] = 1.0F;
      floatArray1[6] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2772.98376609877);
      doubleArray0[1] = 2396.5683494809773;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2772.98376609877), 2396.5683494809773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1.3432978820781294E7, double0, 0.01);
      assertArrayEquals(new double[] {(-2772.98376609877), 2396.5683494809773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2772.98376609877), 2396.5683494809773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5545.96753219754), 4793.136698961955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1798.0;
      doubleArray1[1] = 297.8389587402344;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1798.0, 297.8389587402344}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2146655782;
      intArray0[1] = 474;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-110));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.834E-20, 0.0, 3.834E-20, 3.834E-20, (-2463.8680339656958), 3.834E-20);
      assertEquals((-9.446470042224477E-17), double0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&LoJDhWsQ7L&3";
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 839.0683535352;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-2463.8680339656958);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-9.446470042224477E-17);
      doubleArray0[6] = (-9.446470042224477E-17);
      doubleArray0[7] = Double.NaN;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {839.0683535352, 3.834E-20, (-2463.8680339656958), Double.NaN, (-1.0), (-9.446470042224477E-17), (-9.446470042224477E-17), Double.NaN}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 3056.619F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {3056.619F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      MathArrays.checkOrder(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray1, doubleArray2);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray4, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray4.length);
      
      double double1 = MathArrays.distanceInf(doubleArray3, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray3.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 852.06537F;
      floatArray0[1] = (-859.3522F);
      floatArray0[2] = (-3684.005F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3.4028235E38F);
      floatArray0[6] = (-1206.887F);
      floatArray0[7] = (-296.29F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {852.06537F, (-859.3522F), (-3684.005F), 0.0F, 0.0F, (-3.4028235E38F), (-1206.887F), (-296.29F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2772.98376609877);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 642.0F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {642.0F, Float.NaN, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2772.98376609877), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3.834E-20;
      doubleArray2[1] = 0.6931470632553101;
      doubleArray2[2] = (double) 642.0F;
      doubleArray2[3] = (double) Float.NaN;
      doubleArray2[4] = (double) 642.0F;
      doubleArray2[5] = (double) 642.0F;
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2772.98376609877), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.6931470632553101, 642.0, Double.NaN, 642.0, 642.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(14, doubleArray3.length);
      
      double double0 = MathArrays.linearCombination(642.0, (-39.27547728381389), 0.015816699071921715, 3.834E-20, 1597.5282852819, (double) 642.0F, 4502.378, (double) 642.0F);
      assertEquals(3890924.9787347713, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 839.0683535352;
      doubleArray0[10] = 1.304E19;
      doubleArray0[2] = 839.0683535352;
      doubleArray0[3] = (-720.3667396);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (double) (-401);
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1332.649), (-918.21), (-1332.649), 1076.896997755, 1076.896997755, (-918.21), 1076.896997755, 1076.896997755);
      assertEquals((-40584.51740608904), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1076.896997755;
      doubleArray1[1] = (-1332.649);
      doubleArray1[2] = (-40584.51740608904);
      doubleArray1[3] = (-1332.649);
      doubleArray1[4] = (-918.21);
      boolean boolean1 = MathArrays.equals(doubleArray1, (double[]) null);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {1076.896997755, (-1332.649), (-40584.51740608904), (-1332.649), (-918.21)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2628);
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2145107899;
      intArray0[4] = 2146924616;
      intArray0[5] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-2628), 2, 2, 2145107899, 2146924616, 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[][] longArray0 = new long[0][5];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(385.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 7);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2145131530;
      intArray0[1] = 1409;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {2145131530, 1409}, intArray0);
      assertEquals(2, intArray0.length);
      
      double double1 = 1597.5282852819;
      double double2 = MathArrays.linearCombination((double) 2145131530, 3.834E-20, 0.0, (double) 1409, 728.56, 728.56, 1597.5282852819, 1035551.0941033517);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.6548529633583229E9, double2, 0.01);
      
      double[] doubleArray0 = new double[0];
      double double3 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-3726), (-3726));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[8];
      intArray0[0] = 2435;
      intArray0[1] = 2435;
      intArray0[2] = 2435;
      intArray0[3] = 2435;
      intArray0[4] = 6;
      intArray0[5] = 2435;
      intArray0[6] = 2435;
      intArray0[7] = 2435;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2435;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-902.9187294);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-902.9187294));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-902.9187294), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-902.9187294), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 6.52E18;
      doubleArray2[1] = 1.86285714285714278E18;
      doubleArray2[2] = 1.86285714285714278E18;
      doubleArray2[3] = (-902.9187294);
      doubleArray2[4] = (-902.9187294);
      doubleArray2[5] = (-902.9187294);
      doubleArray2[6] = (-902.9187294);
      doubleArray2[7] = 1.86285714285714278E18;
      doubleArray2[8] = (-902.9187294);
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(7.2746896981301985E18, double0, 0.01);
      assertArrayEquals(new double[] {6.52E18, 1.86285714285714278E18, 1.86285714285714278E18, (-902.9187294), (-902.9187294), (-902.9187294), (-902.9187294), 1.86285714285714278E18, (-902.9187294)}, doubleArray2, 0.01);
      assertEquals(9, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "g$zXA:uZAr-cH3GUza";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$3";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2727.0276);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-1923.547743);
      doubleArray0[3] = (-1093.537253);
      doubleArray0[4] = 0.008333333333333333;
      doubleArray0[5] = 2071.6302272;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3142.8783891643;
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[2];
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, (-1103.904638891), 0.0, 1006.12411, 1.304E19, 1.304E19, 0.0);
      assertEquals(1.31198583944E22, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1643.477, 0.0, 0.0, 1.304E19);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[22];
      doubleArray0[1] = 1643.477;
      doubleArray0[2] = 1.304E19;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(22, doubleArray0.length);
      assertEquals(22, doubleArray1.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.700416E38, double1, 0.01);
      assertEquals(22, doubleArray0.length);
      assertEquals(22, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1.304E19;
      doubleArray3[2] = 1.700416E38;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.700416E38;
      doubleArray3[5] = 1.700416E38;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 0.0;
//      try { 
        MathArrays.convolve(doubleArray2, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2138.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[2];
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1643.477, 0.0, 0.0, 1.304E19);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[22];
      doubleArray0[1] = 1643.477;
      doubleArray0[2] = 1.304E19;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 639.5F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 3.4028235E38F;
      floatArray1[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {639.5F, 0.0F, 3.4028235E38F, 0.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5.2240336371356666E-9;
      doubleArray0[1] = 2452.861795;
      doubleArray0[2] = 0.7675435543060303;
      doubleArray0[3] = 297.58541075479405;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 297.58541075479405, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(2452.861795, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 297.58541075479405, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.2813832524324968E-5, 6016530.985370621, 1882.6782603557692, 729935.8847898163, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2452.861795;
      doubleArray2[1] = 0.7675435543060303;
      doubleArray2[2] = 5.2240336371356666E-9;
      doubleArray2[3] = 2452.861795;
      doubleArray2[4] = 0.7675435543060303;
      doubleArray2[5] = 5.2240336371356666E-9;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 297.58541075479405, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2452.861795, 0.7675435543060303, 5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 5.2240336371356666E-9}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(297.58541075479405, doubleArray0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.554596195703878E-6, 729935.8847898163, 228.4097638803546, 88557.0766940995, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 297.58541075479405, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = new Double(2452.861795);
      assertEquals(2452.861795, double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2783.596F;
      floatArray0[1] = 1181.8455F;
      double double1 = new Double(2783.596F);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2783.595947265625, double1, 0.01);
      
      double[] doubleArray4 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 297.58541075479405, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.2813832524324968E-5, 6016530.985370621, 1882.6782603557692, 729935.8847898163, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray4.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean2 = MathArrays.equals((float[]) null, floatArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {2783.596F, 1181.8455F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
//      try { 
        MathArrays.ebeAdd(doubleArray4, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 13 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1643.477, 0.0, 0.0, 1.304E19);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1643.477;
      doubleArray0[2] = 1.304E19;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 297.8389587402344;
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 1178.4;
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.304E19, 297.8389587402344, 1.304E19, 1178.4}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 88708.04534346703, 1.700416E38, 1388626.5600000003}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1643.477, 1.304E19}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1643.477;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1.304E19;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 3.0;
      doubleArray3[6] = 1178.4;
      doubleArray3[7] = 0.0;
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1643.477, 0.0, 0.0, 1.304E19);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[22];
      doubleArray0[1] = 1643.477;
      doubleArray0[2] = 1.304E19;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(22, doubleArray0.length);
      assertEquals(22, doubleArray1.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.700416E38, double1, 0.01);
      assertEquals(22, doubleArray0.length);
      assertEquals(22, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(22, doubleArray0.length);
      assertEquals(43, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5.2240336371356666E-9;
      doubleArray0[1] = 2452.861795;
      doubleArray0[2] = 0.7675435543060303;
      doubleArray0[3] = 297.58541075479405;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 297.58541075479405, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(2452.861795, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 297.58541075479405, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.2813832524324968E-5, 6016530.985370621, 1882.6782603557692, 729935.8847898163, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2452.861795;
      doubleArray2[1] = 0.7675435543060303;
      doubleArray2[2] = 5.2240336371356666E-9;
      doubleArray2[3] = 2452.861795;
      doubleArray2[4] = 0.7675435543060303;
      doubleArray2[5] = 5.2240336371356666E-9;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 297.58541075479405, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2452.861795, 0.7675435543060303, 5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 5.2240336371356666E-9}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(297.58541075479405, doubleArray0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.554596195703878E-6, 729935.8847898163, 228.4097638803546, 88557.0766940995, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 297.58541075479405, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(727483.0229948163, double0, 0.01);
      assertArrayEquals(new double[] {1.554596195703878E-6, 729935.8847898163, 228.4097638803546, 88557.0766940995, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 297.58541075479405, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2783.596F;
      floatArray0[1] = 1181.8455F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3.4028235E38F;
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {2783.596F, 1181.8455F, 0.0F, 3.4028235E38F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = 890.0798745760451;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-1597.5282852819);
      int[] intArray0 = new int[8];
      intArray0[0] = 245;
      intArray0[1] = 2147482442;
      intArray0[2] = 1472;
      intArray0[3] = (-456);
      intArray0[4] = 2147482442;
      intArray0[5] = 2509;
      intArray0[6] = 0;
      intArray0[7] = (-513);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {245, 2147482442, 1472, (-456), 2147482442, 2509, 0, (-513)}, intArray0);
      assertEquals(8, intArray0.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2137228093, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 1135.65937072;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (-824.7054819468033);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.304E19, 1135.65937072, Double.NaN, (-824.7054819468033)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {1.304E19, 1135.65937072, Double.NaN, (-824.7054819468033)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 5.2240336371356666E-9;
      doubleArray0[1] = 2472.2187989498284;
      doubleArray0[2] = 0.7675435543060303;
      doubleArray0[3] = 297.8389587402344;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2472.2187989498284, 0.7675435543060303, 297.8389587402344}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(2472.2187989498284, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2472.2187989498284, 0.7675435543060303, 297.8389587402344}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.2914954164073042E-5, 6111865.789880932, 1897.5356039681365, 736323.0728572498}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2472.2187989498284;
      doubleArray2[1] = 0.7675435543060303;
      doubleArray2[2] = 5.2240336371356666E-9;
      doubleArray2[3] = 2472.2187989498284;
      doubleArray2[4] = 0.7675435543060303;
      doubleArray2[5] = 5.2240336371356666E-9;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2472.2187989498284, 0.7675435543060303, 297.8389587402344}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2472.2187989498284, 0.7675435543060303, 5.2240336371356666E-9, 2472.2187989498284, 0.7675435543060303, 5.2240336371356666E-9}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(297.8389587402344, doubleArray0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.5559207389084463E-6, 736323.0728572498, 228.6043730022866, 88708.04534346703}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2472.2187989498284, 0.7675435543060303, 297.8389587402344}, doubleArray0, 0.01);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertEquals(733850.8540582999, double0, 0.01);
      assertArrayEquals(new double[] {1.5559207389084463E-6, 736323.0728572498, 228.6043730022866, 88708.04534346703}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2472.2187989498284, 0.7675435543060303, 297.8389587402344}, doubleArray0, 0.01);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2783.596F;
      floatArray0[1] = 1181.8455F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3.4028235E38F;
//      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1270.8685968058862, 2452.861795, 890.0798745760451, 1805.307347322869, 2452.861795, 890.0798745760451, 1763.374071785558, 4018.09449810247);
      assertEquals(1.3992779339630842E7, double0, 0.01);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]";
      stringArray0[1] = "@l2ypZ|TA";
      stringArray0[2] = "@l2ypZ|TA";
      stringArray0[3] = "@l2ypZ|TA";
      stringArray0[4] = "@l2ypZ|TA";
      stringArray0[5] = "@l2ypZ|TA";
      stringArray0[6] = "@l2ypZ|TA";
      stringArray0[7] = "@l2ypZ|TA";
      stringArray0[8] = "@l2ypZ|TA";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int0 = 1072952765;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<String>) null, 1072952765);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 3105.3;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 854.1;
      doubleArray0[4] = 1.0E-5;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 854.1;
      doubleArray1[1] = 3105.3;
      doubleArray1[2] = 3105.3;
      doubleArray1[3] = 854.1;
      doubleArray1[4] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3957.4000100000003, double0, 0.01);
      assertArrayEquals(new double[] {2.0, 3105.3, 0.0, 854.1, 1.0E-5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {854.1, 3105.3, 3105.3, 854.1, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 58);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2189;
      intArray0[1] = 2189;
      intArray0[2] = 2189;
      intArray0[3] = 2189;
      intArray0[4] = 2189;
      intArray0[5] = 2189;
      intArray0[6] = 2189;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2189);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2189, 2189, 2189, 2189, 2189, 2189, 2189}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(2189, intArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2189;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {2189.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.834E-20, 0.0, 3.834E-20, 3.834E-20, (-2463.8680339656958), 3.834E-20);
      assertEquals((-9.446470042224477E-17), double0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&LoJDhWsQ7L&3";
      stringArray0[1] = "'t>6.";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "";
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1376.47F;
      floatArray0[1] = 1395.0F;
      floatArray0[2] = 3117.7222F;
      floatArray0[3] = 3117.7222F;
      floatArray0[4] = 3117.7222F;
      floatArray0[5] = 3117.7222F;
      floatArray0[6] = 3117.7222F;
      floatArray0[7] = 3117.7222F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1376.47F, 1395.0F, 3117.7222F, 3117.7222F, 3117.7222F, 3117.7222F, 3117.7222F, 3117.7222F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = null;
//      try { 
        MathArrays.normalizeArray((double[]) null, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(0.0, 2282.2735692, 1.304E19, 2282.2735692);
      assertEquals(2.9760847342368E22, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = (-902.9187294);
      double double1 = 3.141592653589793;
      double double2 = (-3.141592653589793);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 4299.3558349609375;
      doubleArray0[0] = 4299.3558349609375;
      doubleArray0[1] = (-3.9986783938944604E-8);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 4299.3558349609375;
      doubleArray2[1] = 4299.3558349609375;
      doubleArray1[5] = doubleArray2;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {4299.3558349609375, (-3.9986783938944604E-8)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double1 = (-799.51758);
      double[] doubleArray3 = MathArrays.scale((-799.51758), doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3437410.572726848), (-3437410.572726848)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {4299.3558349609375, 4299.3558349609375}, doubleArray2, 0.01);
      assertEquals(2, doubleArray3.length);
      assertEquals(2, doubleArray2.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {4299.3558349609375, (-3.9986783938944604E-8)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-3.9986783938944604E-8);
      doubleArray4[1] = (-3.9986783938944604E-8);
      doubleArray4[2] = (-3.9986783938944604E-8);
      doubleArray4[3] = (-3.9986783938944604E-8);
      doubleArray4[4] = (-799.51758);
      double double3 = MathArrays.distance1(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(4299.355835000924, double3, 0.01);
      assertArrayEquals(new double[] {4299.3558349609375, (-3.9986783938944604E-8)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3.9986783938944604E-8), (-3.9986783938944604E-8), (-3.9986783938944604E-8), (-3.9986783938944604E-8), (-799.51758)}, doubleArray4, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray4.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray4, doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 5.2240336371356666E-9;
      doubleArray0[1] = 2452.861795;
      doubleArray0[2] = 0.7675435543060303;
      doubleArray0[3] = 297.8389587402344;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 297.8389587402344}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(2452.861795, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 297.8389587402344}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.2813832524324968E-5, 6016530.985370621, 1882.6782603557692, 730557.8029565022}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2452.861795;
      doubleArray2[1] = 0.7675435543060303;
      doubleArray2[2] = 5.2240336371356666E-9;
      doubleArray2[3] = 2452.861795;
      doubleArray2[4] = 0.7675435543060303;
      doubleArray2[5] = 5.2240336371356666E-9;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 297.8389587402344}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2452.861795, 0.7675435543060303, 5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 5.2240336371356666E-9}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(297.8389587402344, doubleArray0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1.5559207389084463E-6, 730557.8029565022, 228.6043730022866, 88708.04534346703}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 297.8389587402344}, doubleArray0, 0.01);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertEquals(728104.9411615022, double0, 0.01);
      assertArrayEquals(new double[] {1.5559207389084463E-6, 730557.8029565022, 228.6043730022866, 88708.04534346703}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {5.2240336371356666E-9, 2452.861795, 0.7675435543060303, 297.8389587402344}, doubleArray0, 0.01);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2783.596F;
      floatArray0[1] = 1181.8455F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3.4028235E38F;
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {2783.596F, 1181.8455F, 0.0F, 3.4028235E38F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(765.87, 765.87, 3138.3293525401127, 765.87);
      assertEquals(2990109.158129896, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 1150.0102735;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 3.141592653589793;
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.141592653589793, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.141592653589793, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 1.0, Double.NaN}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      
//      try { 
        MathArrays.checkOrder(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1193.6F;
      float float1 = 3.4028235E38F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = (-1.0F);
      float float2 = 0.0F;
      floatArray0[4] = 0.0F;
      long long0 = (-1556L);
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[1];
      longArray1[0] = (-1556L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1556L);
      longArray2[1] = (-1556L);
      longArray2[2] = (-1556L);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1332.8581;
      doubleArray2[1] = 1.304E19;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1332.8581;
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(765.87, 765.87, 3138.3293525401127, 765.87);
      assertEquals(2990109.158129896, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2990109.158129896;
      doubleArray0[1] = 765.87;
      doubleArray0[2] = 2990109.158129896;
      doubleArray0[3] = 2990109.158129896;
      doubleArray0[4] = 2990109.158129896;
      doubleArray0[5] = 2990109.158129896;
      doubleArray0[6] = 3625.001246143077;
      doubleArray0[7] = 2990109.158129896;
      doubleArray0[8] = 2990109.158129896;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7911086.092940514, double1, 0.01);
      assertArrayEquals(new double[] {2990109.158129896, 765.87, 2990109.158129896, 2990109.158129896, 2990109.158129896, 2990109.158129896, 3625.001246143077, 2990109.158129896, 2990109.158129896}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(2990109.158129896, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {8.940752777532275E12, 2.2900349009369435E9, 8.940752777532275E12, 8.940752777532275E12, 8.940752777532275E12, 8.940752777532275E12, 1.08391494243247E10, 8.940752777532275E12, 8.940752777532275E12}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2990109.158129896, 765.87, 2990109.158129896, 2990109.158129896, 2990109.158129896, 2990109.158129896, 3625.001246143077, 2990109.158129896, 2990109.158129896}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 385.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 385.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[2];
      longArray1[0] = (-1233L);
      longArray1[1] = (-1233L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1332.649), (-918.21), (-1332.649), 1076.896997755, 1076.896997755, (-918.21), 1076.896997755, 1076.896997755);
      assertEquals((-40584.51740608904), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-40584.51740608904);
      doubleArray0[2] = (-40584.51740608904);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@l2ypZ|TA";
      stringArray0[1] = "@l2ypZ|TA";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1332.649), (-918.21), (-1332.649), 1076.896997755, 1076.896997755, (-918.21), 1076.896997755, 1076.896997755);
      assertEquals((-40584.51740608904), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1236.0, (-918.21), 1.0, Double.NaN);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-40584.51740608904);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, Double.NaN, (-40584.51740608904)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.6471030530851445E9}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0, Double.NaN, (-40584.51740608904)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.6471030530851445E9}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1431655765;
      intArray0[1] = 2147483039;
      intArray0[2] = (-556);
      intArray0[3] = (-1);
      intArray0[4] = 5;
      intArray0[5] = 393;
      intArray0[6] = 134217729;
      intArray0[7] = (-888);
      intArray0[8] = (-2207);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {1431655765, 2147483039, (-556), (-1), 5, 393, 134217729, (-888), (-2207)}, intArray0);
      assertEquals(9, intArray0.length);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {1431655765, 2147483039, (-556), (-1), 5, 393, 134217729, (-888), (-2207)}, intArray0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.scale((-4094.734984445), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 890.0798745760451;
      doubleArray0[3] = 1775953.3572009997;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 3142.8783891643;
      doubleArray0[6] = 765.87;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0, 1.0, 890.0798745760451, 1775953.3572009997, 1.34217729E8, 3142.8783891643, 765.87}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 890.0798745760451, 1775953.3572009997, 1.34217729E8, 3142.8783891643, 765.87}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0, 890.0798745760451, 1775953.3572009997, 1.34217729E8, 3142.8783891643, 765.87}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.986906073187329, 0.986906073187329, 878.425233840915, 1752699.1539190924, 1.3246029187951109E8, 3101.7257695554576, 755.8417542719797}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[][] longArray0 = new long[6][8];
      long[] longArray1 = new long[3];
      longArray1[0] = (-1L);
      longArray1[1] = 1L;
      longArray1[2] = (-3575L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = (-1915L);
      longArray2[2] = (-1L);
      longArray2[3] = (-3575L);
      longArray2[4] = (-302932621132653753L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1L);
      longArray3[1] = (-1915L);
      longArray3[2] = (-302932621132653753L);
      longArray3[3] = (-1L);
      longArray3[4] = 1L;
      longArray3[5] = (-3575L);
      longArray3[6] = (-3575L);
      longArray3[7] = (-363L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-1L);
      longArray4[1] = 655L;
      longArray4[2] = 1L;
      longArray4[3] = (-1L);
      longArray4[4] = 1572L;
      longArray4[5] = 4577762542105553359L;
      longArray4[6] = (-3575L);
      longArray4[7] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (-3575L);
      longArray5[1] = (-302932621132653753L);
      longArray5[2] = 264L;
      longArray5[3] = (-1L);
      longArray5[4] = (-302932621132653753L);
      longArray5[5] = (-3575L);
      longArray5[6] = (-1L);
      longArray5[7] = 655L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = 1L;
      longArray6[1] = 4577762542105553359L;
      longArray6[2] = 1L;
      longArray6[3] = (-363L);
      longArray6[4] = (-1233L);
      longArray6[5] = (-3575L);
      longArray0[5] = longArray6;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 5 while others have length 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-2138);
      intArray0[0] = (-2138);
      intArray0[1] = 4;
      intArray0[2] = (-206);
      intArray0[3] = 3193;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2138), 4, (-206), 3193}, intArray0);
      assertArrayEquals(new int[] {(-2138), 4, (-206), 3193}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1332.649), (-918.21), (-1332.649), 1076.896997755, 1076.896997755, (-918.21), 1076.896997755, 1076.896997755);
      assertEquals((-40584.51740608904), double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1076.896997755;
      doubleArray0[1] = (-40584.51740608904);
      doubleArray0[2] = (-1332.649);
      doubleArray0[3] = (-40584.51740608904);
      doubleArray0[4] = (-918.21);
      doubleArray0[5] = (-1332.649);
      doubleArray0[6] = (-40584.51740608904);
      doubleArray0[7] = (-918.21);
      doubleArray0[8] = (-918.21);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1076.896997755, (-40584.51740608904), (-1332.649), (-40584.51740608904), (-918.21), (-1332.649), (-40584.51740608904), (-918.21), (-918.21)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1159707.1437737325, 1.6471030530851445E9, 1775953.3572009997, 1.6471030530851445E9, 843109.6041000001, 1775953.3572009997, 1.6471030530851445E9, 843109.6041000001, 843109.6041000001}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1076.896997755, (-40584.51740608904), (-1332.649), (-40584.51740608904), (-918.21), (-1332.649), (-40584.51740608904), (-918.21), (-918.21)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1159707.1437737325, 1.6471030530851445E9, 1775953.3572009997, 1.6471030530851445E9, 843109.6041000001, 1775953.3572009997, 1.6471030530851445E9, 843109.6041000001, 843109.6041000001}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1);
      assertArrayEquals(new double[] {1076.896997755, (-40584.51740608904), (-1332.649), (-40584.51740608904), (-918.21), (-1332.649), (-40584.51740608904), (-918.21), (-918.21)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1159707.1437737325, 1.6471030530851445E9, 1775953.3572009997, 1.6471030530851445E9, 843109.6041000001, 1775953.3572009997, 1.6471030530851445E9, 843109.6041000001, 843109.6041000001}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2772.98376609877);
      doubleArray0[1] = 2396.5683494809773;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2772.98376609877));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2772.98376609877), 2396.5683494809773, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-20428.06598130138), 17655.08221520261, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-2772.98376609877);
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 2396.5683494809773;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 2396.5683494809773;
      doubleArray3[4] = (-2772.98376609877);
      doubleArray3[5] = Double.NaN;
      double[] doubleArray4 = MathArrays.convolve(doubleArray2, doubleArray3);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, (-2772.98376609877)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 2396.5683494809773, 0.0, 2396.5683494809773, (-2772.98376609877), Double.NaN}, doubleArray3, 0.01);
      assertEquals(9, doubleArray4.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = Double.NaN;
      doubleArray5[1] = 0.0;
//      try { 
        MathArrays.ebeSubtract(doubleArray5, doubleArray4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1643.477, 0.0, 0.0, 1.304E19);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1643.477;
      doubleArray0[2] = 1.304E19;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1643.477, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2701016.6495290003, 1.700416E38}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1643.477, 1.304E19}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1643.477, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2701016.6495290003, 1.700416E38}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2702660.1265290002, 1.700416E38}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1643.477, (-0.9706396398940107), (-0.9706396398940107), 1.304E19);
      assertEquals((-1.2657140904217901E19), double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.2657140904217901E19);
      doubleArray0[1] = 1643.477;
      doubleArray0[2] = 1.304E19;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.2657140904217901E19), 1643.477, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.6020321586922594E38, 2701016.6495290003, 1.700416E38}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.2657140904217901E19), 1643.477, 1.304E19}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1.2657140904217901E19), 1643.477, 1.304E19}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 789.75004;
      doubleArray0[1] = 1150.9;
      doubleArray0[2] = 1740.2;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 40584.51740608904;
      doubleArray0[5] = (-1555.06649836118);
      doubleArray0[6] = (-1132.19581197941);
      doubleArray0[7] = (-2623.3593585562);
      double[][] doubleArray1 = new double[8][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {789.75004, (-1555.06649836118), (-1132.19581197941), 3.834E-20, 40584.51740608904, 1150.9, 1740.2, (-2623.3593585562)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1740.2;
      double double0 = MathArrays.distanceInf(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(950.44996, double0, 0.01);
      assertArrayEquals(new double[] {789.75004, (-1555.06649836118), (-1132.19581197941), 3.834E-20, 40584.51740608904, 1150.9, 1740.2, (-2623.3593585562)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1740.2}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1332.649), (-918.21), (-1332.649), 1076.896997755, 1076.896997755, (-918.21), 1076.896997755, 1076.896997755);
      assertEquals((-40584.51740608904), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ob5oJ-CFw{2X}3kk(m";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "g3T+<CN&vTU^d$6f:";
      stringArray0[3] = "";
      stringArray0[4] = "yy\"=_JRq0w";
      stringArray0[5] = "c`ry&u!OyGH/k";
      stringArray0[6] = "";
      stringArray0[7] = "GX?_@d!/H?";
      stringArray0[8] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      double double1 = MathArrays.linearCombination(20.0, (-1332.649), 3138.3293525401127, 1.34217729E8);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4.212194118989943E11, double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-687.051317072);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-687.051317072)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[9];
      long[][] longArray1 = new long[9][1];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray1[2] = longArray2;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1581L);
      longArray3[2] = (-1556L);
      longArray3[5] = 1694L;
      longArray3[6] = (-1556L);
      longArray3[7] = (-1556L);
      longArray3[8] = (-1556L);
      longArray1[6] = longArray3;
      longArray1[7] = longArray0;
      longArray1[8] = longArray0;
//      try { 
        MathArrays.checkRectangular(longArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 2 while others have length 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 297.83896F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1017.6203094;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1017.6203094);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {297.8389587402344, 0.0, 1017.6203094}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {230.40392103748556, 0.0, 787.2163883625144}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[][] doubleArray2 = new double[7][6];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {297.8389587402344, 0.0, 1017.6203094}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {230.40392103748556, 0.0, 787.2163883625144}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 297.83896F;
      MathArrays.checkOrder(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {297.8389587402344}, doubleArray3, 0.01);
      assertEquals(1, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1332.649), (-918.21), (-1332.649), 1076.896997755, 1076.896997755, (-918.21), 1076.896997755, 1076.896997755);
      assertEquals((-40584.51740608904), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-40584.51740608904);
      doubleArray0[2] = (-40584.51740608904);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@l2ypZ|TA";
      stringArray0[1] = "@l2ypZ|TA";
      stringArray0[2] = "@l2ypZ|TA";
      stringArray0[3] = "@l2ypZ|TA";
      stringArray0[4] = "@l2ypZ|TA";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1017.6203094;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1017.6203094}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][6];
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 297.83896F;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1017.6203094;
      doubleArray2[5] = 0.0;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[3] = (-918.21);
      doubleArray0[7] = 1076.896997755;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, (-918.21), 0.0, 0.0, 0.0, 1076.896997755}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, (-918.21), 0.0, 0.0, 0.0, 1076.896997755}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 352.6F;
      floatArray0[2] = 0.0F;
      float float0 = 1236.0F;
      floatArray0[3] = 1236.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 352.6F, 0.0F, 1236.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1236.0F;
      doubleArray0[1] = (-892.4);
      doubleArray0[2] = (double) 1236.0F;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -892.4 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = (-250);
      int[] intArray0 = new int[1];
      intArray0[0] = (-250);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-250)}, intArray0);
      assertArrayEquals(new int[] {(-250)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1332.8581;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1332.8581}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 48.31719;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {48.31719, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 4503599627370495L;
      longArray0[1] = 4503599627370495L;
      longArray0[2] = 4503599627370495L;
      longArray0[3] = 4503599627370495L;
      longArray0[4] = 4503599627370495L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {4503599627370495L, 4503599627370495L, 4503599627370495L, 4503599627370495L, 4503599627370495L}, longArray0);
      assertEquals(5, longArray0.length);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 4503599627370495L;
      longArray1[1] = 4503599627370495L;
      longArray1[2] = 4503599627370495L;
      longArray1[3] = 4503599627370495L;
      longArray1[4] = 4503599627370495L;
      longArray1[5] = 4503599627370495L;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1253), (-1253));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1017.6203094;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 297.83896F);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1017.6203094}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 297.8389587402344}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@l2ypZ|TA";
      double double0 = MathArrays.linearCombination(1017.6203094, 242.9929890937, (-0.010714690733195933), 337.6584, 346.895460594, 337.6584, 1.304E19, 1073.723261);
      assertEquals(1.4001351323440002E22, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$3";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3527285.903449;
      doubleArray0[1] = 3527285.903449;
      doubleArray0[2] = (-1842.0);
      doubleArray0[3] = 3527285.903449;
      doubleArray0[4] = 3527285.903449;
      doubleArray0[5] = 3527285.903449;
      MathArrays.scaleInPlace(3527285.903449, doubleArray0);
      assertArrayEquals(new double[] {1.2441745844670027E13, 1.2441745844670027E13, (-6.497260634153058E9), 1.2441745844670027E13, 1.2441745844670027E13, 1.2441745844670027E13}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[][] longArray0 = new long[9][1];
      long[] longArray1 = new long[9];
      longArray1[0] = 2202L;
      longArray1[1] = 578L;
      longArray1[2] = 797L;
      longArray1[3] = 1463L;
      longArray1[4] = 0L;
      longArray1[5] = (-102L);
      longArray1[6] = 2995L;
      longArray1[7] = 4198L;
      longArray1[8] = 100L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1463L;
      longArray2[1] = 0L;
      longArray2[2] = (-102L);
      longArray2[3] = 4198L;
      longArray2[4] = 2202L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 578L;
      longArray3[1] = 1463L;
      longArray3[2] = 100L;
      longArray3[3] = 0L;
      longArray3[4] = 100L;
      longArray3[5] = 0L;
      longArray3[6] = 2995L;
      longArray3[7] = 4198L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 2995L;
      longArray4[1] = 0L;
      longArray4[2] = 2202L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 2202L;
      longArray5[1] = (-884L);
      longArray5[2] = 2202L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[9];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = 578L;
      longArray6[1] = (-102L);
      longArray6[2] = (-884L);
      longArray6[3] = (-884L);
      longArray6[4] = 1463L;
      longArray6[5] = 2202L;
      longArray6[6] = 100L;
      longArray6[7] = 578L;
      longArray6[8] = 797L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      
      longArray7[0] = 1463L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[2];
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray8[0] = (-102L);
      longArray8[1] = 2995L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[8];
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray8));
      
      longArray9[0] = (-884L);
      longArray9[1] = 0L;
      longArray9[2] = 1463L;
      longArray9[3] = 0L;
      longArray9[4] = 578L;
      longArray9[5] = 2995L;
      longArray9[6] = 2995L;
      longArray9[7] = 1463L;
      longArray0[8] = longArray9;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -102 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1119;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      long long0 = 4503599627370495L;
      long[][] longArray1 = new long[7][1];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) (-250);
      longArray2[1] = (long) 1119;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) (-250);
      longArray1[5] = longArray2;
      longArray1[6] = longArray0;
//      try { 
        MathArrays.checkNonNegative(longArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -250 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[7];
      intArray0[0] = 1119;
      intArray0[1] = 1119;
      intArray0[2] = 0;
      intArray0[3] = (-250);
      intArray0[4] = (-250);
      intArray0[5] = 0;
      intArray0[6] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1119, 1119, 0, (-250), (-250), 0, 0}, intArray0);
      assertArrayEquals(new int[] {1119, 1119, 0, (-250), (-250), 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.scaleInPlace((-29.05441517), doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 1119;
      doubleArray2[2] = (double) (-250);
      doubleArray2[3] = (-29.05441517);
      doubleArray2[4] = 279.03788;
      doubleArray2[5] = (double) 1119;
      doubleArray2[6] = (double) 1119;
      doubleArray2[7] = (-29.05441517);
//      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 297.83896F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1017.6203094;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1017.6203094);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {297.8389587402344, 0.0, 1017.6203094}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {230.40392103748556, 0.0, 787.2163883625144}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, stringArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$3";
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 352.6F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {352.6F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 311;
      intArray0[1] = 594;
      intArray0[2] = 33;
      intArray0[3] = (-1429);
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$3";
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1193.6F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[1];
      longArray1[0] = (-1556L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1556L);
      longArray2[1] = (-1556L);
      longArray2[2] = (-1556L);
      longArray2[3] = (-1556L);
      longArray2[4] = (-1556L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3.4028235E38F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3.4028234663852886E38, double0, 0.01);
      assertArrayEquals(new double[] {3.4028234663852886E38, 0.0, 0.0, 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1193.6F, 3.4028235E38F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.4028234663852886E38, 0.0, 0.0, 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly decreasing (0 <= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1332.649), (-918.21), (-1332.649), 1076.896997755, 1076.896997755, (-918.21), 1076.896997755, 1076.896997755);
      assertEquals((-40584.51740608904), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-40584.51740608904);
      doubleArray0[2] = (-40584.51740608904);
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2772.98376609877);
      doubleArray0[1] = 2396.5683494809773;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2772.98376609877));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2772.98376609877), 2396.5683494809773, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-20428.06598130138), 17655.08221520261, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@l2ypZ|TA";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double double0 = 1017.6203094;
      doubleArray0[1] = 1017.6203094;
      double double1 = 3.834E-20;
      double double2 = 1.34217729E8;
      double double3 = (-819.4556783865302);
      double double4 = 1788.077;
      double double5 = 3087.1657991991;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.0, 1.0, 3.32, 3.32, 1.0, 1.0, 1.0, 1135.819);
      assertEquals(1148.8414, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(3.32, 1.0, 337.6584, 502.15, 1.0, 1148.8414, 502.15, (-1697.471176915));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-681677.8245278671), double1, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1148.8414;
      doubleArray0[1] = 502.15;
      doubleArray0[2] = (-1193.61);
      doubleArray0[3] = 337.6584;
      MathArrays.scaleInPlace((-1193.61), doubleArray0);
      assertArrayEquals(new double[] {(-1371268.5834539998), (-599371.2614999999), 1424704.8320999998, (-403032.4428239999)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 380;
      intArray0[1] = 2640;
      intArray0[2] = 2;
      intArray0[3] = (-2103939325);
      intArray0[4] = 2558;
      intArray0[5] = (-1);
      intArray0[6] = 2146551984;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {380, 2640, 2, (-2103939325), 2558, (-1), 2146551984}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1332.649), (-918.21), (-1332.649), 1076.896997755, 1076.896997755, (-918.21), 1076.896997755, 1076.896997755);
      assertEquals((-40584.51740608904), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-40584.51740608904);
      doubleArray0[2] = (-40584.51740608904);
      doubleArray0[3] = (-918.21);
      doubleArray0[4] = (-40584.51740608904);
      doubleArray0[5] = (-1332.649);
      doubleArray0[6] = (-40584.51740608904);
      doubleArray0[7] = 1076.896997755;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-40584.51740608904), (-40584.51740608904), (-918.21), (-40584.51740608904), (-1332.649), (-40584.51740608904), 1076.896997755}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1119;
      intArray0[2] = (-250);
      intArray0[3] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 1119, (-250), 0}, intArray0);
      assertArrayEquals(new int[] {0, 1119, (-250), 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1119;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1332.8581;
      doubleArray0[4] = (double) 1119;
      doubleArray0[5] = (double) (-250);
      doubleArray0[6] = (double) (-250);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1119.0, 0.0, 1332.8581, 1119.0, (-250.0), (-250.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1119.0, 0.0, 1332.8581, 1119.0, (-250.0), (-250.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      MathArrays.scaleInPlace(0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-902.9187294);
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = 3.141592653589793;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-902.9187294), 2.0, 3.141592653589793, (-3.141592653589793), 3.141592653589793, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-902.9187294), 2.0, 3.141592653589793, (-3.141592653589793), 3.141592653589793, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(815295.8407145137, double0, 0.01);
      assertArrayEquals(new double[] {(-902.9187294), 2.0, 3.141592653589793, (-3.141592653589793), 3.141592653589793, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1036;
      intArray0[1] = (-2138);
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2138);
      intArray1[1] = 1036;
      intArray1[2] = 1036;
      intArray1[3] = (-2138);
      intArray1[4] = 1036;
      intArray1[5] = 1036;
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1643.477, 0.0, 0.0, 1.304E19);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1643.477;
      doubleArray0[2] = 1.304E19;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1643.477, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2701016.6495290003, 1.700416E38}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1643.477, 1.304E19}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 1643.477, 1.304E19}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$3";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace(518.0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-902.9187294);
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[5] = 1396.9059324489886;
      doubleArray0[6] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-902.9187294), 2.0, 3.141592653589793, (-3.141592653589793), 3.141592653589793, 1396.9059324489886, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 4503599627370495L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {4503599627370495L}, longArray0);
      assertEquals(1, longArray0.length);
      
      long[][] longArray1 = new long[9][9];
      longArray1[0] = longArray0;
      long[] longArray2 = new long[19];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = 4503599627370495L;
      longArray1[1] = longArray2;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = 4503599627370495L;
      longArray3[1] = 4503599627370495L;
      longArray1[4] = longArray3;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      longArray1[8] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(9, longArray1.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2766642.0248256917, double1, 0.01);
      assertArrayEquals(new double[] {(-902.9187294), 2.0, 3.141592653589793, (-3.141592653589793), 3.141592653589793, 1396.9059324489886, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-48.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, (-48.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 2304.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[1][6];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, (-48.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2304.0, Double.NaN, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, (-48.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, (-48.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2304.0, 0.0, 0.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(11, doubleArray3.length);
      
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, (-48.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2304.0, 0.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, (-48.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2304.0, 0.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = 1556;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Integer>) null, 1556, (-17));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 48.31719;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {48.31719, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 4503599627370495L;
      longArray0[1] = 4503599627370495L;
      longArray0[2] = 4503599627370495L;
      longArray0[3] = 4503599627370495L;
      longArray0[4] = 4503599627370495L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {4503599627370495L, 4503599627370495L, 4503599627370495L, 4503599627370495L, 4503599627370495L}, longArray0);
      assertEquals(5, longArray0.length);
      
      long[][] longArray1 = new long[8][1];
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = 4503599627370495L;
      longArray2[1] = 4503599627370495L;
      longArray2[2] = 4503599627370495L;
      longArray2[3] = 4503599627370495L;
      longArray2[4] = 4503599627370495L;
      longArray2[5] = 4503599627370495L;
      longArray1[0] = longArray2;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(8, longArray1.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1253), (-1253));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-902.9187294);
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = 3.141592653589793;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 2 and 3 are not strictly increasing (3.142 >= -3.142)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = 2189;
      int[] intArray0 = new int[2];
      intArray0[0] = 2189;
      intArray0[1] = 2189;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-2146193558));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1017.6203094;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 297.83896F);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1017.6203094}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 297.8389587402344}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@l2ypZ|TA";
      stringArray0[1] = "~qxGD0Fi<j1U$k@x%";
      stringArray0[2] = "<fSbf.";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$3";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, stringArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 2079.78402;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-789.75004);
      doubleArray0[5] = 765.87;
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = (-849.703223);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-849.703223);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -849.703 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2189);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2189, intArray1.length);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][5];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1430.17271282);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-4819.03356437);
      doubleArray0[6] = 3.834E-20;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, (-1430.17271282), 0.0, (-4819.03356437), 3.834E-20}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[3][9];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 17.804458352;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 920.3224771;
      doubleArray0[3] = 260.56889196452;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 920.3224771);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {17.804458352, 6.283185307179586, 920.3224771, 260.56889196452}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {13.598446977842663, 4.798885793795793, 702.9113809550597, 199.01376337330194}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-657.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 706.72859969048;
      doubleArray0[4] = 1640.5644254868;
      doubleArray0[5] = (-2460.1791875589633);
      doubleArray0[6] = 3290.5139153609;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {3.834E-20, (-657.0), 0.0, 706.72859969048, 1640.5644254868, (-2460.1791875589633), 3290.5139153609}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 337.6584;
      doubleArray0[2] = 1869.574212491747;
      doubleArray0[3] = 20.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 2 and 3 are not strictly increasing (1,869.574 >= 20)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 385.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 385.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1.0), (-1.0), 3.141592653589793, (-20.0), (-20.0));
      assertEquals(396.8584073464102, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2377.141825683);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-20.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2263.9445958885717, 113.19722979442858}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-20.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-20.0), (-1.0)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 29;
      intArray0[2] = 0;
      intArray0[3] = (-2546);
      intArray0[4] = (-352);
      intArray0[5] = (-259);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 29, 0, (-2546), (-352), (-259)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-687.051317072);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-687.051317072)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-687.051317072)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-687.051317072);
      doubleArray1[1] = (-687.051317072);
      doubleArray1[2] = (-687.051317072);
      doubleArray1[3] = (-3.141592653589793);
      doubleArray1[4] = (-687.051317072);
      doubleArray1[5] = (-687.051317072);
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
//      try { 
        MathArrays.normalizeArray(doubleArray0, (-2306.680285287683));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1125.1883384, 1125.1883384, 0.0, 1125.1883384, 3428.1, 0.0);
      assertEquals(1266048.796871353, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[1][7];
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray1[0] = doubleArray2;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4400.12881;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 1307.006297;
      doubleArray0[3] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][7];
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 4400.12881;
      doubleArray2[1] = 100.0;
      doubleArray2[2] = 100.0;
      doubleArray2[3] = 100.0;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = 100.0;
      doubleArray2[6] = 100.0;
      doubleArray1[0] = doubleArray2;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 890.0798745760451;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-1596.0896848900009);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 839.07;
      int int0 = 1556;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Integer>) null, 1556, 1556);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 193;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 193, 193);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 139.064200518;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 237.62088786679;
      MathArrays.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1486);
      intArray0[1] = 134217729;
      intArray0[2] = (-1740);
      intArray0[3] = 135;
      MathArrays.copyOf(intArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1740);
      longArray0[1] = (long) 135;
      longArray0[2] = (long) (-1486);
      longArray0[3] = (long) 134217729;
      longArray0[4] = (long) (-1486);
      longArray0[5] = (long) (-1740);
      longArray0[6] = (long) 134217729;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,740 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-902.9187294);
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[5] = 1396.9059324489886;
      doubleArray0[6] = 0.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = 4503599627370495L;
      MathArrays.checkNonNegative(longArray0);
      long[][] longArray1 = new long[9][9];
      longArray1[0] = longArray0;
      long[] longArray2 = new long[1];
      longArray2[0] = 4503599627370495L;
      longArray1[1] = longArray2;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      long[] longArray3 = new long[2];
      longArray3[0] = 4503599627370495L;
      longArray3[1] = 4503599627370495L;
      longArray1[4] = longArray3;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      longArray1[8] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1036;
      intArray0[1] = (-2138);
      int[] intArray1 = new int[6];
      intArray1[0] = (-2138);
      intArray1[1] = 1036;
      intArray1[2] = 1036;
      intArray1[3] = (-2138);
      intArray1[4] = 1036;
      intArray1[5] = 1036;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(4488.713846972204, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 909.651970887;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 1590.4654634502294;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1047.9727039381);
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 3236.1775;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1488.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 2001.4539F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-1675.33F);
      floatArray0[8] = 2200.3206F;
      float[] floatArray1 = new float[3];
      floatArray1[0] = 1.0F;
      floatArray1[1] = (-1.0F);
      floatArray1[2] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1643.477, 0.0, 0.0, 1.304E19);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1643.477;
      doubleArray0[2] = 1.304E19;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2701016.6495290003, 1.700416E38}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      long[][] longArray0 = new long[9][2];
      long[] longArray1 = new long[2];
      longArray1[0] = 2202L;
      longArray1[1] = (-601L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = 2202L;
      longArray2[1] = (-601L);
      longArray2[2] = (-601L);
      longArray2[3] = (-601L);
      longArray2[4] = 2202L;
      longArray2[5] = 2202L;
      longArray2[6] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = (-601L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = (-601L);
      longArray4[1] = 2202L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      longArray5[0] = (-601L);
      longArray5[1] = (-601L);
      longArray5[2] = 2202L;
      longArray5[3] = 2202L;
      longArray5[4] = (-601L);
      longArray5[5] = (-601L);
      longArray5[6] = 2202L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      longArray6[0] = (-601L);
      longArray6[1] = 2202L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      longArray7[0] = 953L;
      longArray7[1] = (-601L);
      longArray7[2] = 0L;
      longArray7[3] = (-601L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[7];
      longArray8[0] = 953L;
      longArray8[1] = 2202L;
      longArray8[2] = 0L;
      longArray8[3] = (-601L);
      longArray8[4] = 953L;
      longArray8[5] = 0L;
      longArray8[6] = (-601L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[2];
      longArray9[0] = 0L;
      longArray9[1] = (-601L);
      longArray0[8] = longArray9;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 7 while others have length 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      double double0 = 2082.2868;
      doubleArray0[0] = 2082.2868;
      int int0 = 248;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 248);
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 248 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1186;
      intArray0[2] = (-250);
      intArray0[3] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, 1186, (-250), 0}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1186;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1332.8581;
      doubleArray0[4] = (double) 1186;
      doubleArray0[5] = (double) (-250);
      doubleArray0[6] = (double) (-250);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2822;
      intArray0[5] = (-1423);
      int int1 = (-1423);
      intArray0[6] = (-1423);
      intArray0[7] = (-5);
      intArray0[8] = (-238);
      MathArrays.distance(intArray0, intArray0);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) (-1423);
      integerArray0[3] = (Integer) (-238);
//      try { 
        Integer.decode("xC1");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"xC1\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1193.6F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 297.83896F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-2364.59F);
      floatArray0[8] = 3117.7222F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, 1308.0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (-695.0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 281;
      intArray0[1] = 760;
      intArray0[2] = 363;
      intArray0[3] = 0;
      intArray0[4] = 386;
      intArray0[5] = (-274);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      MathArrays.distanceInf(intArray1, intArray0);
      double[] doubleArray1 = new double[0];
      double[][] doubleArray2 = new double[8][4];
      doubleArray2[0] = doubleArray0;
      double[] doubleArray3 = new double[0];
      doubleArray2[1] = doubleArray3;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray1;
      doubleArray2[7] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 72.3;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-280.2920451132584);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1573.0);
      doubleArray0[6] = (-2022.16);
      doubleArray0[7] = 1388.5851;
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 72.3;
      doubleArray1[2] = doubleArray2;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      MathArrays.copyOf(intArray0, 2189);
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[0][5];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "$]z{OD>cMob;:.2";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[4] = "c{n*tS--Zg@#OZMPwE'";
      stringArray0[5] = "minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-2144959285));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 634L;
      longArray0[1] = 0L;
      longArray0[2] = 2991L;
      MathArrays.checkNonNegative(longArray0);
      double double0 = MathArrays.linearCombination((double) 0L, 0.0, (-1456.59), (double) 2991L, 3.32, (double) 2991L);
      assertEquals((-4346730.569999999), double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.32;
      doubleArray0[2] = (-1456.59);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1456.59);
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 2991L;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 3.32, (-1456.59), 0.0, (-1456.59), 0.0, 2991.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      int int0 = (-740);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-740));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = 0L;
      longArray0[0] = 0L;
      longArray0[1] = (-363L);
      longArray0[2] = (-517L);
      long long1 = 2132L;
      longArray0[3] = 2132L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -363 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0, 1234);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1234;
      longArray0[1] = (-4084L);
      longArray0[2] = (long) 1234;
      longArray0[3] = (long) 1234;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -4,084 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.834E-20, 0.0, 3.834E-20, 3.834E-20, (-2463.8680339656958), 3.834E-20);
      assertEquals((-9.446470042224477E-17), double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 122;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = (-1);
      int int1 = 0;
      intArray0[2] = 0;
      intArray0[3] = 1745;
      MathArrays.copyOf(intArray0, 0);
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1878.107;
      MathArrays.safeNorm(doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[7][7];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = 1195L;
      longArray1[2] = (-1073741824L);
      longArray1[3] = 0L;
      longArray1[4] = 2767L;
      longArray1[5] = (-4091L);
      longArray1[6] = (-1224L);
      longArray1[7] = 0L;
      longArray1[8] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = (-1073741824L);
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = (-1224L);
      longArray3[1] = 2767L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = 2767L;
      longArray4[1] = (-1073741824L);
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray4[5] = (-1073741824L);
      longArray4[6] = 0L;
      longArray4[7] = (-1073741824L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = 0L;
      longArray5[1] = 0L;
      longArray5[2] = (-1073741824L);
      longArray5[3] = (-1073741824L);
      longArray5[4] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = 1195L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      longArray7[0] = 0L;
      longArray7[1] = (-1224L);
      longArray7[2] = 0L;
      longArray7[3] = 0L;
      longArray7[4] = 0L;
      longArray7[5] = 0L;
      longArray7[6] = 0L;
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 4 while others have length 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2772.98376609877);
      doubleArray0[1] = 2396.5683494809773;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = (-819.4556783865302);
      doubleArray0[7] = 1788.077;
      doubleArray0[8] = 3087.1657991991;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
//      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 17 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 352.6F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1236.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 311;
      intArray0[1] = 594;
      intArray0[2] = 33;
      intArray0[3] = (-1429);
      intArray0[4] = 275;
      intArray0[5] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 594);
      assertEquals(594, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 48.31719;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1735.4369594;
      doubleArray0[3] = 234.4128565015412;
      doubleArray0[4] = (-771.26776);
      doubleArray0[5] = 3281.864233516982;
      doubleArray0[6] = 975.57393;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (48.317 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1017.6203094;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1135.65937072);
      doubleArray0[3] = 1265.434217176;
      doubleArray0[4] = 1327.3989738;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (0 >= -1,135.659)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
