/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 15:00:06 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-783.948);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-783.948)}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      int int0 = 7;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 7);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-783.948);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-783.948)}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 7);
      assertEquals(7, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-783.948)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {614574.466704}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2634.903);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[8][9];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray2;
      doubleArray3[4] = doubleArray2;
      doubleArray3[5] = doubleArray0;
      doubleArray3[6] = doubleArray2;
      doubleArray3[7] = doubleArray1;
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
      assertEquals(1, doubleArray2.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-2634.903)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.9808930158615112;
      doubleArray0[0] = 0.9808930158615112;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double double1 = 2245.95;
      double double2 = (-1.7976931348623157E308);
      doubleArray0[3] = (-1.7976931348623157E308);
      doubleArray0[4] = 2245.95;
      doubleArray0[5] = 0.1666666505023083;
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1299.74F);
      floatArray0[4] = (-1431.91F);
      floatArray0[4] = (-337.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1299.74F), 0.0F, (-337.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1299.74F);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2605);
      assertEquals(1, doubleArray0.length);
      assertEquals(2605, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1299.739990234375)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2605;
      longArray0[1] = (long) 2605;
      longArray0[2] = (long) 2605;
      longArray0[3] = (long) 2605;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {2605L, 2605L, 2605L, 2605L}, longArray0);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1352.8);
      doubleArray0[1] = (-2454.71044);
      doubleArray0[2] = (-2454.71044);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (-397.0);
      double double0 = (-703.34434557612);
      doubleArray0[5] = (-703.34434557612);
      double double1 = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.normalizeArray(doubleArray0, (-1352.8));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1057.9799F;
      floatArray0[1] = (-754.61664F);
      floatArray0[2] = 1713.8804F;
      floatArray0[3] = 1.4E-45F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1057.9799F, (-754.61664F), 1713.8804F, 1.4E-45F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.4E-45F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 1.4E-45F;
      doubleArray0[5] = (double) 1713.8804F;
      doubleArray0[6] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.802596928649634E-45, 0.0, 0.0, 2.802596928649634E-45, 3427.7607421875, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.401298464324817E-45, 0.0, 0.0, 1.401298464324817E-45, 1713.88037109375, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {1057.9799F, (-754.61664F), 1713.8804F, 1.4E-45F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3427.7607421875, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.802596928649634E-45, 0.0, 0.0, 2.802596928649634E-45, 3427.7607421875, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.401298464324817E-45, 0.0, 0.0, 1.401298464324817E-45, 1713.88037109375, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2108.2483087025175);
      doubleArray0[1] = (-2902.0117288314304);
      doubleArray0[2] = (-3151.7284);
      doubleArray0[3] = (-1576.045081);
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 1269.5873;
      doubleArray0[6] = (-1841.00314202);
      doubleArray0[7] = 1.44888888888888883E18;
      doubleArray0[8] = 4338.66032771539;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.44888888888888883E18, double0, 0.01);
      assertArrayEquals(new double[] {(-2108.2483087025175), (-2902.0117288314304), (-3151.7284), (-1576.045081), 1.34217729E8, 1269.5873, (-1841.00314202), 1.44888888888888883E18, 4338.66032771539}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-5167.3189300613885);
      doubleArray0[2] = (-253.70109155672588);
      doubleArray0[3] = 450.4103;
      doubleArray0[4] = 3.7257142857142856E18;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, (-5167.3189300613885), (-253.70109155672588), 450.4103, 3.7257142857142856E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-5167.3189300613885), (-253.70109155672588), 450.4103, 3.7257142857142856E18}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1.3561804708031138E19, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.304E19, (-5167.3189300613885), (-253.70109155672588), 450.4103, 3.7257142857142856E18}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.86285714285714278E18;
      doubleArray0[1] = (-2118.3148293942);
      doubleArray0[2] = (-175.705592542293);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1023.8615;
      doubleArray0[5] = 3.26E18;
      doubleArray0[6] = (-2503.9491538);
      doubleArray0[7] = (-5372.4);
      doubleArray0[8] = (-4478.573273096402);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(3.7547086084933243E18, double0, 0.01);
      assertArrayEquals(new double[] {1.86285714285714278E18, (-2118.3148293942), (-175.705592542293), (-1.0), 1023.8615, 3.26E18, (-2503.9491538), (-5372.4), (-4478.573273096402)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-9.007199254740992E15);
      doubleArray0[1] = (-9.007199254740992E15);
      doubleArray0[2] = (-9.007199254740992E15);
      doubleArray0[3] = (-9.007199254740992E15);
      doubleArray0[4] = (-9.007199254740992E15);
      doubleArray0[5] = (-9.007199254740992E15);
      doubleArray0[6] = (-9.007199254740992E15);
      doubleArray0[7] = (-9.007199254740992E15);
      double[] doubleArray1 = MathArrays.scale((-9.007199254740992E15), doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-5.8460065493236117E48), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15), (-9.007199254740992E15)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31, 8.112963841460668E31}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "N%Grw7'0[fuyeI";
      stringArray0[1] = "";
      stringArray0[2] = "z7+{{[";
      stringArray0[3] = "/h8^@)->3f";
      stringArray0[4] = "@BAV{YC$/Ys,";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[6] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[1] = 24;
      intArray1[2] = 2217;
      intArray1[3] = (-1775);
      intArray1[4] = (-704);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(24, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 24, 2217, (-1775), (-704)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1833;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 1833, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Pair<Object, String> pair0 = new Pair<Object, String>((Object) null, "org.apache.commons.math3.util.MathArrays$3");
      assertNotNull(pair0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<Object, String>[][] pairArray0 = MathArrays.buildArray(field0, 0, 1833);
      assertEquals(0, pairArray0.length);
      assertNotNull(pairArray0);
      
      double double0 = MathArrays.distance(intArray1, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 1833, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3387.7435614;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 1833;
      doubleArray2[3] = 0.0;
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3387.7435614, 0.0, 1833.0, 0.0}, doubleArray2, 0.01);
      
      double double2 = MathArrays.linearCombination((double) 1833, 0.0, 2774.828366139, (double) 0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 251.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.POSITIVE_INFINITY;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 3399.1228F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 251.0F, 0.0F, Float.POSITIVE_INFINITY, (-1.0F), 3399.1228F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1833;
      intArray0[3] = 0;
      intArray0[4] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 1833, 0, 0, 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Pair<Object, String> pair0 = new Pair<Object, String>((Object) null, "org.apache.commons.math3.util.MathArrays$3");
      assertNotNull(pair0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<Object, String>[][] pairArray0 = MathArrays.buildArray(field0, 0, 1833);
      assertEquals(0, pairArray0.length);
      assertNotNull(pairArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1833;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1L, 1833L}, longArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 0.75;
      doubleArray0[4] = 0.75;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = (-4.503599627370496E15);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(2.2585942979703316E19, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 1.304E19, 0.75, 0.75, 1.304E19, 3.834E-20, 1.304E19, (-4.503599627370496E15)}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "d_Es_R9PH]?8:6j&\"J";
      stringArray0[2] = "7Z%iOv1r6>x4Qp.k";
      stringArray0[3] = "tR%^3kVRO";
      stringArray0[4] = "nk{a3HSCT0c$Kmso~Q<";
      stringArray0[5] = "vdu5~";
      stringArray0[6] = "'bOCSVsV-,M!|$<";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1750.6408948143);
      doubleArray0[2] = 694.27904642;
      doubleArray0[3] = 2.092571258544922;
      doubleArray0[4] = 739.52930697;
      doubleArray0[5] = 1531.140980537;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-1707.45);
      doubleArray0[8] = 1.4699556E-39;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-1750.6408948143), 694.27904642, 2.092571258544922, 739.52930697, 1531.140980537, (-1.0), (-1707.45), 1.4699556E-39}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-1750.6408948143), 694.27904642, 2.092571258544922, 739.52930697, 1531.140980537, (-1.0), (-1707.45), 1.4699556E-39}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-1750.6408948143), 694.27904642, 2.092571258544922, 739.52930697, 1531.140980537, (-1.0), (-1707.45), 1.4699556E-39}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[7][8];
      long[] longArray1 = new long[1];
      longArray1[0] = 4493L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 4493L;
      longArray2[1] = 4493L;
      longArray2[2] = 4493L;
      longArray2[3] = 4493L;
      longArray2[4] = 4493L;
      longArray2[5] = (-1265L);
      longArray2[6] = 4493L;
      longArray2[7] = 4493L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 4493L;
      longArray3[1] = (-1265L);
      longArray3[2] = 4493L;
      longArray3[3] = (-1199L);
      longArray3[4] = 4493L;
      longArray3[5] = (-1265L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 4493L;
      longArray4[1] = (-1199L);
      longArray4[2] = (-302932621132653753L);
      longArray4[3] = (-137L);
      longArray4[4] = (-1199L);
      longArray4[5] = (-1265L);
      longArray4[6] = (-1265L);
      longArray4[7] = (-3729L);
      longArray4[8] = (-1265L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (-302932621132653753L);
      longArray5[1] = (-1265L);
      longArray5[2] = 4493L;
      longArray5[3] = (-1265L);
      longArray5[4] = (-1265L);
      longArray5[5] = (-302932621132653753L);
      longArray5[6] = (-1265L);
      longArray5[7] = 4493L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = (-1265L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[3];
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = 4493L;
      longArray7[1] = (-137L);
      longArray7[2] = 4493L;
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 8 while others have length 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 665.4292F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 665.4292F;
      floatArray1[1] = 665.4292F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 665.4292F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {665.4292F, 665.4292F}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = 4208363204685324176L;
      longArray0[3] = 1L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Double>[][] fieldElementArray0 = MathArrays.buildArray(field0, 1816, (-2927));
      assertEquals(1816, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-783.948);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-783.948)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {614574.466704}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2634.903);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[8][9];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray2;
      doubleArray3[4] = doubleArray2;
      doubleArray3[5] = doubleArray0;
      doubleArray3[6] = doubleArray2;
      doubleArray3[7] = doubleArray1;
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
      assertEquals(1, doubleArray2.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-2634.903)}, doubleArray2, 0.01);
      
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertEquals(1, doubleArray4.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {(-2634.903)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1833;
      intArray0[3] = 0;
      intArray0[4] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 1833, 0, 0, 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Pair<Object, String> pair0 = new Pair<Object, String>((Object) null, "org.apache.commons.math3.util.MathArrays$3");
      assertNotNull(pair0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 1, 1833);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 7;
      intArray0[1] = 170;
      intArray0[2] = 7;
      intArray0[3] = 7;
      int int0 = 887;
      intArray0[4] = 887;
      intArray0[5] = 116;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {7, 170, 7, 7, 887, 116}, intArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 887);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2718;
      intArray0[1] = 1128;
      intArray0[2] = (-4955);
      intArray0[3] = (-3880);
      intArray0[4] = (-3329);
      intArray0[5] = (-776);
      intArray0[6] = 3;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {2718, 1128, (-4955), (-3880), (-3329), (-776), 3}, intArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = MathArrays.linearCombination(123.8479362457608, 2026.143325048, 123.8479362457608, 2026.143325048);
      assertEquals(501867.338690637, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 501867.338690637;
      doubleArray0[1] = 2026.143325048;
      doubleArray0[2] = 2026.143325048;
      doubleArray0[3] = 2026.143325048;
      doubleArray0[4] = 2026.143325048;
      doubleArray0[5] = 501867.338690637;
      doubleArray0[6] = 2026.143325048;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[1];
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(1.0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(1.0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      
      MathArrays.scaleInPlace(501.73349038, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 0.5F;
      floatArray0[2] = (-646.6532F);
      floatArray0[3] = Float.POSITIVE_INFINITY;
      floatArray0[4] = (-3280.27F);
      floatArray0[5] = 3640.872F;
      floatArray0[6] = 613.0F;
      floatArray0[7] = 1240.2645F;
      floatArray0[8] = 1.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {Float.NaN, 0.5F, (-646.6532F), Float.POSITIVE_INFINITY, (-3280.27F), 3640.872F, 613.0F, 1240.2645F, 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 123.8479362457608;
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = 2026.143325048;
      doubleArray0[5] = 2026.143325048;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 15338.311312334034, 1.0000000000000002E-10, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1019);
      intArray0[1] = 1;
      intArray0[2] = 2147482225;
      intArray0[3] = (-220);
      intArray0[4] = (-848);
      intArray0[5] = 244;
      intArray0[6] = 275;
      intArray0[7] = (-533);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1019), 1, 2147482225, (-220), (-848), 244, 275, (-533)}, intArray0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-533);
      intArray1[1] = (-533);
      intArray1[2] = (-220);
      intArray1[3] = 244;
      intArray1[4] = (-1019);
      int int1 = MathArrays.distanceInf(intArray1, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2147482445, int1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-533), (-533), (-220), 244, (-1019)}, intArray1);
      assertArrayEquals(new int[] {(-1019), 1, 2147482225, (-220), (-848), 244, 275, (-533)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.8255754F);
      floatArray0[2] = (-1.8255754F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.8255754F), 0.0F, (-1.8255754F), 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(0.16666666666745392, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 4398046511103L;
      longArray0[1] = (-7278142539171889152L);
      longArray0[2] = 788L;
      longArray0[3] = (-1L);
      longArray0[4] = 1L;
      longArray0[5] = 7910884519577875640L;
      longArray0[6] = (-3937L);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -7,278,142,539,171,889,152 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2050.32495281711, (-2632.379594465), 506043.47327697877, 0.0);
      assertEquals((-5397233.567818174), double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1833;
      intArray0[3] = 0;
      intArray0[4] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 1833, 0, 0, 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Pair<Object, String> pair0 = new Pair<Object, String>((Object) null, "org.apache.commons.math3.util.MathArrays$3");
      assertNotNull(pair0);
      
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 1, 1833);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-399.84850717748634);
      doubleArray0[1] = (-399.84850717748634);
      doubleArray0[2] = (-399.84850717748634);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (-399.84850717748634);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-399.84850717748634), (-399.84850717748634), (-399.84850717748634), 3.834E-20, (-399.84850717748634)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-399.84850717748634);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = (-399.84850717748634);
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(565.471181745037, double1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-399.84850717748634), 0.0, 3.834E-20, 3.834E-20, (-399.84850717748634)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertEquals(11, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0, (-399.84850717748634), 0.0, 3.834E-20, 3.834E-20, (-399.84850717748634)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = 2;
      int int1 = 115;
      Integer integer0 = new Integer(115);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(115, (int)integer0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 2;
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {2.0F, 0.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 1553L;
      longArray0[3] = 0L;
      longArray0[4] = 1553L;
      int[] intArray0 = new int[3];
      intArray0[0] = 1829;
      intArray0[1] = 154;
      intArray0[2] = 1879048192;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1829, 154, 1879048192}, intArray0);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1879048192;
      intArray1[1] = 1829;
      intArray1[2] = 0;
      intArray1[3] = 1879048192;
      intArray1[4] = 1879048192;
      intArray1[5] = 1879048192;
      intArray1[6] = 0;
      int int1 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-536871066), int1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1829, 154, 1879048192}, intArray0);
      assertArrayEquals(new int[] {1879048192, 1829, 0, 1879048192, 1879048192, 1879048192, 0}, intArray1);
      
      int int2 = MathArrays.distance1(intArray1, intArray1);
      assertEquals(7, intArray1.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1879048192, 1829, 0, 1879048192, 1879048192, 1879048192, 0}, intArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1553L;
      doubleArray0[1] = (double) 1879048192;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2049.9213551942;
      doubleArray0[4] = (double) 154;
      doubleArray0[5] = (double) 154;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (1,879,048,192 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 5672.26620484752;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 5672.26620484752}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.linearCombination(0.0, 5672.26620484752, 5672.26620484752, 0.0, 0.0, 5672.26620484752);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.scale(1095.16665514, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      double double0 = 8976483.34394995;
      double double1 = 3970.0000325878;
      double double2 = 1.44888888888888883E18;
      double double3 = (-518.95440639346);
      double double4 = MathArrays.linearCombination(0.0, 0.0, 5.752088936112192E21, (-518.95440639346), 0.0, 0.0);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals((-2.9850718993624913E24), double4, 0.01);
      
      double double5 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double6 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (0 <= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 96;
      intArray0[1] = 96;
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(1796.3, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {96, 96, 0}, intArray0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {96, 96, 0}, intArray0);
      
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertArrayEquals(new int[] {96, 96, 0}, intArray0);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 96;
      double double0 = MathArrays.distance(intArray1, intArray1);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 96}, intArray1);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = 472.08549055;
      doubleArray0[3] = 472.08549055;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][2];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 472.08549055;
      doubleArray3[2] = 472.08549055;
      doubleArray3[3] = 472.08549055;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray3);
      assertEquals(1, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 472.08549055, 472.08549055, 472.08549055}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 134217729;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {134217729}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 802.6662073;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1858);
      intArray0[1] = (-393);
      intArray0[2] = 352;
      intArray0[3] = (-3406);
      intArray0[4] = 18;
      intArray0[5] = 0;
      intArray0[6] = (-1122);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 352;
      intArray1[1] = 18;
      intArray1[2] = 18;
      intArray1[3] = (-3406);
      intArray1[4] = (-1122);
      intArray1[5] = (-1122);
      intArray1[6] = 0;
      intArray1[7] = (-35);
      intArray1[8] = 352;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2996.989322636969, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1858), (-393), 352, (-3406), 18, 0, (-1122)}, intArray0);
      assertArrayEquals(new int[] {352, 18, 18, (-3406), (-1122), (-1122), 0, (-35), 352}, intArray1);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {(-1858), (-393), 352, (-3406), 18, 0, (-1122)}, intArray0);
      assertArrayEquals(new int[] {(-1858), (-393), 352, (-3406), 18, 0, (-1122)}, intArray2);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {802.6662073}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(801.6662073, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {802.6662073}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {802.6662073}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-801.6662073)}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {802.6662073}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {802.6662073}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-286));
      assertNotNull(integer0);
      assertEquals((-286), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1166));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1166), (int)integer1);
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-1166);
      doubleArray3[1] = (double) (-286);
      doubleArray3[2] = (double) (int)integerArray0[0];
      doubleArray3[3] = (double) (-1166);
      doubleArray3[4] = (double) (-1166);
      doubleArray3[5] = (double) (-286);
      doubleArray3[6] = (double) (-1166);
      double double0 = MathArrays.safeNorm(doubleArray3);
      assertEquals(7, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(2384.032717896296, double0, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {(-1166.0), (-286.0), (-286.0), (-1166.0), (-1166.0), (-286.0), (-1166.0)}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.scale(1425.8227805378945, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray3, doubleArray3);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1.34217729E8;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.073767F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.073767F}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.073767F;
      floatArray1[1] = 1.073767F;
      floatArray1[2] = 1.073767F;
      floatArray1[3] = 1.073767F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.073767F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.073767F, 1.073767F, 1.073767F, 1.073767F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 802.6662073;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {802.6662073}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(112.0, (-3057.94538480693), 802.6662073, 8976483.34394995, 3970.0000325878, 1.44888888888888883E18);
      assertEquals(5.752088936112195E21, double0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3057.94538480693);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 5.752088936112195E21;
      doubleArray1[3] = 3970.0000325878;
      doubleArray1[4] = 1.44888888888888883E18;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3860.6115921069304, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {802.6662073}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3057.94538480693), 0.0, 5.752088936112195E21, 3970.0000325878, 1.44888888888888883E18}, doubleArray1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(5.752089118591899E21, double2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3057.94538480693), 0.0, 5.752088936112195E21, 3970.0000325878, 1.44888888888888883E18}, doubleArray1, 0.01);
      
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {802.6662073}, doubleArray0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {802.6662073}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 588.0F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {588.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<FieldElement<Double>>) null, (-2927), 782);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-133));
      assertNotNull(integer0);
      assertEquals((-133), (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 1;
      Integer integer1 = new Integer(1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(1, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(1, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(2, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(96);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(96, (int)integer6);
      
      integerArray0[6] = integer6;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 80;
      intArray0[2] = (-1881);
      intArray0[3] = 1587;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 80, (-1881), 1587}, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 80;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3057.94538480693;
      doubleArray0[5] = (double) (-1881);
      double[][] doubleArray1 = new double[1][1];
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[0] = doubleArray2;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 80;
      floatArray0[1] = (float) 80;
      floatArray0[2] = (float) 80;
      floatArray0[3] = (float) 80;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {80.0F, 80.0F, 80.0F, 80.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.linearCombination(3057.94538480693, (double) 1587, (double) 80.0F, 0.0, (-2760.68063320986), (-1881.0));
      assertEquals(1.0045799596756345E7, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.scale(3057.94538480693, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {80.0, 0.0, 0.0, 0.0, 3057.94538480693, (-1881.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {244635.6307845544, 0.0, 0.0, 0.0, 9351029.976462005, (-5751995.2688218355)}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      Double[] doubleArray3 = new Double[4];
      Double double0 = new Double(1425.8227805378945);
      assertNotNull(double0);
      assertEquals(1425.8227805378945, (double)double0, 0.01);
      
      doubleArray3[0] = double0;
      Double double1 = new Double(1.304E19);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.304E19, (double)double1, 0.01);
      
      doubleArray3[1] = double1;
      Double double2 = new Double((double) doubleArray3[1]);
      assertEquals(4, doubleArray3.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(1.304E19, (double)double2, 0.01);
      
      doubleArray3[2] = double2;
      Double double3 = new Double(3234.0);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(3234.0, (double)double3, 0.01);
      
      doubleArray3[3] = double3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      assertEquals(4, doubleArray3.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 802.6662073;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 802.6662073;
      doubleArray1[1] = 802.6662073;
      doubleArray1[2] = 802.6662073;
      doubleArray1[3] = 802.6662073;
      doubleArray1[4] = 802.6662073;
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1824);
      assertNotNull(integer0);
      assertEquals(1824, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1829);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1829, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1824);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1824, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertEquals(9, integerArray0.length);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(1824, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      assertEquals(9, integerArray0.length);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(1829, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1817);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(1817, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2330);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals(2330, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = Integer.getInteger("0'u~WG-&LJ)rb+lB[", 0);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = Integer.getInteger("0'u~WG-&LJ)rb+lB[");
      assertNull(integer8);
      
      integerArray0[8] = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathArrays.linearCombination(123.8479362457608, 2026.143325048, 123.8479362457608, 2026.143325048);
      assertEquals(501867.338690637, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 501867.338690637;
      doubleArray0[2] = 123.8479362457608;
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = 2026.143325048;
      doubleArray0[5] = 2026.143325048;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 1.0000000000000002E-10, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 1.0000000000000002E-10, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.26405740959979808E17, 1899618.2015275771, 1.0000000000000003E-15, 8.317838609511814E9, 8.317838609511814E9}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 123.8479362457608;
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 96;
      intArray0[2] = 96;
      double double0 = MathArrays.linearCombination(0.0, (-25.9981), (-1915.350985943), 4193.99, (-2172.0), (double) 96, 5923.30870463, 0.0);
      assertEquals((-8241474.881535082), double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4193.99;
      doubleArray0[1] = (double) 96;
      doubleArray0[2] = (double) 96;
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = MathArrays.linearCombination(123.8479362457608, 2026.143325048, 123.8479362457608, 2026.143325048);
      assertEquals(501867.338690637, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 501867.338690637;
      doubleArray0[2] = 123.8479362457608;
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = 2026.143325048;
      doubleArray0[5] = 2026.143325048;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 1.0000000000000002E-10, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 1.0000000000000002E-10, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.26405740959979808E17, 1899618.2015275771, 1.0000000000000003E-15, 8.317838609511814E9, 8.317838609511814E9}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-502);
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 1435;
      intArray0[7] = 1833;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, (-502), 0, 1, 0, 1435, 1833}, intArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Pair<Object, String> pair0 = new Pair<Object, String>(class0, "org.apache.commons.math3.util.MathArrays$3");
      assertNotNull(pair0);
      
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0, pair0, pair0, pair0, pair0).when(field0).getZero();
      Pair<Object, String>[][] pairArray0 = MathArrays.buildArray(field0, 1833, 0);
      assertEquals(1833, pairArray0.length);
      assertNotNull(pairArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 481.0;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {481.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-304L);
      longArray0[1] = 967L;
      longArray0[2] = 0L;
      longArray0[3] = 3708L;
      longArray0[4] = (-4195L);
      longArray0[5] = 0L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -304 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = (-1.4E-45F);
      floatArray0[3] = 1630.84F;
      floatArray0[4] = 1402.6383F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.4E-45F), 1630.84F, 1402.6383F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1630.84F;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2146);
      assertEquals(1, doubleArray0.length);
      assertEquals(2146, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1630.8399658203125}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2146;
      intArray0[1] = 2146;
      intArray0[2] = 2146;
      intArray0[3] = 2146;
      intArray0[4] = 2146;
      intArray0[5] = 2146;
      intArray0[6] = 2146;
      intArray0[7] = 2146;
      intArray0[8] = 2146;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1037);
      assertEquals(1037, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146}, intArray0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray2, (double[]) null);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.scale(1424.0959952634053, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = -0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.5F;
      floatArray0[4] = (-965.004F);
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = -0.0F;
      floatArray1[1] = 0.5F;
      floatArray1[2] = -0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-965.004F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, -0.0F, 0.0F, 0.5F, (-965.004F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {-0.0F, 0.5F, -0.0F, 0.0F, (-965.004F), 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray2, 103);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(103, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 103;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {103L}, longArray0);
      
      long[][] longArray1 = new long[9][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      longArray1[8] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = MathArrays.linearCombination(123.8479362457608, 2026.143325048, 123.8479362457608, 2026.143325048);
      assertEquals(501867.338690637, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 501867.338690637;
      doubleArray0[2] = 123.8479362457608;
      doubleArray0[3] = 2026.143325048;
      doubleArray0[4] = 2026.143325048;
      doubleArray0[5] = 2026.143325048;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 2026.143325048, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 4105256.773636565, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 2026.143325048, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 4105256.773636565, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.26405740959979808E17, 1899618.2015275771, 8.317838609511814E9, 8.317838609511814E9, 8.317838609511814E9}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-502);
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 1435;
      intArray0[7] = 1833;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, (-502), 0, 1, 0, 1435, 1833}, intArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Pair<Object, String> pair0 = new Pair<Object, String>(class0, "org.apache.commons.math3.util.MathArrays$3");
      assertNotNull(pair0);
      
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0, pair0, pair0, pair0, pair0).when(field0).getZero();
      Pair<Object, String>[][] pairArray0 = MathArrays.buildArray(field0, 1833, 0);
      assertEquals(1833, pairArray0.length);
      assertNotNull(pairArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 2026.143325048, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 4105256.773636565, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.518703237770839E11, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 2026.143325048, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 4105256.773636565, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1435;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1;
      floatArray1[1] = (float) 1833;
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) 1;
      floatArray1[4] = (float) 1833;
      floatArray1[5] = (float) 1833;
      floatArray1[6] = (float) 1435;
      floatArray1[7] = (float) (-502);
      floatArray1[8] = (float) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1.0F, 1833.0F, 0.0F, 1.0F, 1833.0F, 1833.0F, 1435.0F, (-502.0F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1435.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-579.38684F);
      floatArray0[2] = 123.954F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-579.38684F), 123.954F, 1.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, (-579.38684F), 123.954F, 1.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1765.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-399.84850717748634);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.63059908732477, Double.NaN, 0.36940091267523}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.63059908732477, Double.NaN, 0.36940091267523}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = (-399.84850717748634);
      int[] intArray0 = new int[1];
      intArray0[0] = 738;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {738}, intArray0);
      assertArrayEquals(new int[] {738}, intArray1);
      
//      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 802.6662073;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {802.6662073}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(112.0, (-3057.94538480693), 802.6662073, 8976483.34394995, 8976483.34394995, 1.44888888888888883E18);
      assertEquals(1.3005926978345266E25, double0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3057.94538480693);
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = MathArrays.copyOf(intArray0, 106);
      assertEquals(5, intArray0.length);
      assertEquals(106, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-497.48666468);
      doubleArray0[1] = (-497.48666468);
      doubleArray0[3] = (double) 106;
      double[] doubleArray1 = MathArrays.scale((-1048), doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-497.48666468), (-497.48666468), 0.0, 106.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {521366.02458464, 521366.02458464, -0.0, (-111088.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-497.48666468);
      doubleArray2[1] = (double) (-1048);
      doubleArray2[2] = (-497.48666468);
      doubleArray2[3] = (double) 106;
      doubleArray2[4] = (double) (-1048);
      double[] doubleArray3 = MathArrays.scale((-497.48666468), doubleArray2);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {(-497.48666468), (-1048.0), (-497.48666468), 106.0, (-1048.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {247492.98153443076, 521366.02458464, 247492.98153443076, (-52733.58645608), 521366.02458464}, doubleArray3, 0.01);
      
//      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      int int0 = 0;
      int int1 = 1;
      int int2 = 1435;
      int int3 = 1833;
      int[] intArray0 = new int[1];
      int[] intArray1 = MathArrays.copyOf(intArray0, 1833);
      assertEquals(1, intArray0.length);
      assertEquals(1833, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Pair<Object, String> pair0 = new Pair<Object, String>("Op2&nh~$\"m@", "org.apache.commons.math3.util.MathArrays$3");
      assertNotNull(pair0);
      
      int int4 = 0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-502), (-502));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1765.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-399.84850717748634);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-399.84850717748634);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-399.84850717748634)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-399.84850717748634)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      
      MathArrays.checkPositive(doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-399.84850717748634)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 96;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 96;
      doubleArray1[1] = (double) 96;
      doubleArray1[2] = (double) 96;
      doubleArray1[3] = (double) 96;
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1407);
      intArray0[1] = 1;
      intArray0[2] = 1799;
      intArray0[3] = (-1077);
      intArray0[4] = (-287);
      intArray0[5] = 1831;
      intArray0[6] = 1400806;
      intArray0[7] = (-1320);
      intArray0[8] = 2;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      intArray1[1] = (-1407);
      intArray1[2] = (-1407);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      int int0 = 0;
      int int1 = 1;
      int int2 = 1435;
      int int3 = 1833;
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 1833);
      assertEquals(0, intArray0.length);
      assertEquals(1833, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Pair<Object, String> pair0 = new Pair<Object, String>("Op2&nh~$\"m@", "org.apache.commons.math3.util.MathArrays$3");
      assertNotNull(pair0);
      
      int int4 = 0;
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-502), (-502));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 802.6662073;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {802.6662073}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(112.0, (-3057.94538480693), 802.6662073, 8976483.34394995, 3970.0000325878, 1.44888888888888883E18);
      assertEquals(5.752088936112195E21, double0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3057.94538480693);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 5.752088936112195E21;
      doubleArray1[3] = 3970.0000325878;
      doubleArray1[4] = 1.44888888888888883E18;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3860.6115921069304, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {802.6662073}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3057.94538480693), 0.0, 5.752088936112195E21, 3970.0000325878, 1.44888888888888883E18}, doubleArray1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(5.752089118591899E21, double2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3057.94538480693), 0.0, 5.752088936112195E21, 3970.0000325878, 1.44888888888888883E18}, doubleArray1, 0.01);
      
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {802.6662073}, doubleArray0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {802.6662073}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 588.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = -0.0F;
      floatArray0[3] = 2407.02F;
      floatArray0[4] = (-1511.6096F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-567.0F);
      floatArray0[7] = (-3.4028235E38F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {588.0F, (-1.0F), -0.0F, 2407.02F, (-1511.6096F), 0.0F, (-567.0F), (-3.4028235E38F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathArrays.linearCombination(123.8479362457608, 2026.143325048, 123.8479362457608, 2026.143325048);
      assertEquals(501867.338690637, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 501867.338690637;
      doubleArray0[2] = 123.8479362457608;
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = 2026.143325048;
      doubleArray0[5] = 2026.143325048;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 1.0000000000000002E-10, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 1.0000000000000002E-10, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.26405740959979808E17, 1899618.2015275771, 1.0000000000000003E-15, 8.317838609511814E9, 8.317838609511814E9}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1698);
      intArray0[1] = 709;
      intArray0[2] = 1829;
      intArray0[3] = (-194);
      intArray0[4] = (-1);
      intArray0[5] = (-1955);
      intArray0[6] = 1946;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1946;
      intArray1[1] = 1946;
      intArray1[2] = 1946;
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Double[] doubleArray0 = new Double[18];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(18, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double double2 = (-463.271317);
      Double double3 = new Double((-463.271317));
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals((-463.271317), (double)double3, 0.01);
      
      doubleArray0[2] = double3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(18, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[1];
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 3247);
      assertEquals(1, doubleArray1.length);
      assertEquals(3247, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2146888520);
      intArray0[1] = (-2146888520);
      intArray0[3] = 481;
      intArray0[4] = 481;
      intArray0[5] = (-2146888520);
      intArray0[6] = 481;
      intArray0[7] = 481;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-2146888520), (-2146888520), 0, 481, 481, (-2146888520), 481, 481}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 481;
      doubleArray0[1] = (double) 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2146888520), (-2146888520), 0, 481, 481, (-2146888520), 481, 481}, intArray0);
      assertArrayEquals(new int[] {(-2146888520), (-2146888520), 0, 481, 481, (-2146888520), 481, 481}, intArray1);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {481.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {481.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1765.0);
      doubleArray0[0] = (-1765.0);
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1765.0), 0.0, 0.0}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1765.0);
      doubleArray0[1] = (-1765.0);
      doubleArray0[2] = (-399.84850717748634);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1765.0), (-1765.0), (-399.84850717748634)}, doubleArray0, 0.01);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.linearCombination(901.9803, (-1765.0), 0.0, (-566.311));
      assertEquals((-1591995.2295000001), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(3190);
      assertNotNull(integer0);
      assertEquals(3190, (int)integer0);
      
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2146888520);
      intArray0[1] = (-2146888520);
      intArray0[2] = 481;
      intArray0[3] = 481;
      intArray0[4] = 481;
      intArray0[5] = (-2146888520);
      intArray0[6] = 481;
      intArray0[7] = 481;
      Integer integer0 = new Integer(295);
      assertNotNull(integer0);
      assertEquals(295, (int)integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-2146888520);
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 295;
      doubleArray0[1] = (double) (-2146888520);
      doubleArray0[2] = 3.834E-20;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {295.0, (-2.14688852E9), 3.834E-20}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2146888520);
      doubleArray1[1] = (double) 481;
      doubleArray1[2] = (double) (-2146888520);
      doubleArray1[3] = 2046.9035608156153;
      doubleArray1[4] = (double) 481;
      doubleArray1[5] = (double) (int)integerArray0[1];
      doubleArray1[6] = (double) 481;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection1, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1765.0);
      doubleArray0[0] = (-1765.0);
      double double1 = (-2387.756167463061);
      doubleArray0[1] = (-2387.756167463061);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1765.0), (-2387.756167463061), 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1765.0), (-2387.756167463061), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      int int0 = (-2094);
      intArray0[0] = (-2094);
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {(-2094)}, intArray0);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2094);
      doubleArray1[1] = (-463.23);
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1765.0);
      doubleArray2[1] = (double) (-2094);
      doubleArray2[2] = (double) (-2094);
      doubleArray2[3] = (-2387.756167463061);
      doubleArray2[4] = (double) (-2094);
      doubleArray2[5] = (-2387.756167463061);
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 96;
      int[] intArray0 = new int[3];
      intArray0[0] = 96;
      intArray0[1] = 96;
      intArray0[2] = 96;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 96;
      integerArray0[1] = (Integer) 96;
      integerArray0[2] = (Integer) 96;
      integerArray0[3] = (Integer) 96;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, integerArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {96.0, 96.0, 96.0, 96.0, 96.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {96.0, 96.0, 96.0, 96.0, 96.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 472.08549055;
      doubleArray0[2] = 472.08549055;
      doubleArray0[3] = 472.08549055;
      doubleArray0[4] = 472.08549055;
      doubleArray0[5] = 472.08549055;
      doubleArray0[6] = 472.08549055;
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1128;
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 1128;
      integerArray0[1] = integerArray0[0];
      integerArray0[2] = (Integer) 1128;
      integerArray0[3] = (Integer) 1;
      integerArray0[4] = (Integer) 1128;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, integerArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 472.08549055, 472.08549055, 472.08549055, 472.08549055, 472.08549055, 472.08549055, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1765.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-399.84850717748634);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.63059908732477, Double.NaN, 0.36940091267523}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.63059908732477, Double.NaN, 0.36940091267523}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, true);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-1765.0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1439.0036945641095), Double.NaN, (-325.9963054358905)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(3190);
      assertNotNull(integer0);
      assertEquals(3190, (int)integer0);
      
      int int0 = 2;
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      int int1 = 0;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[3] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer1;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 750;
      intArray0[1] = 1826;
      intArray0[2] = (-1);
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathArrays.linearCombination(123.8479362457608, 2026.143325048, 123.8479362457608, 2026.143325048);
      assertEquals(501867.338690637, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 501867.338690637;
      doubleArray0[2] = 123.8479362457608;
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = 2026.143325048;
      doubleArray0[5] = 2026.143325048;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 1.0000000000000002E-10, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 1.0000000000000002E-10, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.26405740959979808E17, 1899618.2015275771, 1.0000000000000003E-15, 8.317838609511814E9, 8.317838609511814E9}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-502);
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 1435;
      intArray0[7] = 1833;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, (-502), 0, 1, 0, 1435, 1833}, intArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Pair<Object, String> pair0 = new Pair<Object, String>(class0, "org.apache.commons.math3.util.MathArrays$3");
      assertNotNull(pair0);
      
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0, pair0, pair0, pair0, pair0).when(field0).getZero();
      Pair<Object, String>[][] pairArray0 = MathArrays.buildArray(field0, 1833, 0);
      assertEquals(1833, pairArray0.length);
      assertNotNull(pairArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 1.0000000000000002E-10, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathArrays.linearCombination(123.8479362457608, 2026.143325048, 123.8479362457608, 2026.143325048);
      assertEquals(501867.338690637, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 501867.338690637;
      doubleArray0[2] = 123.8479362457608;
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = 2026.143325048;
      doubleArray0[5] = 2026.143325048;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 1.0000000000000002E-10, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 123.8479362457608;
      doubleArray2[3] = 1132.548965288;
      doubleArray2[4] = 2026.143325048;
      doubleArray2[5] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 123.8479362457608, 1132.548965288, 2026.143325048, 0.0}, doubleArray2, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 1.0000000000000002E-10, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2094);
      intArray0[1] = (-2094);
      intArray0[2] = 1825;
      intArray0[3] = (-2094);
      intArray0[4] = (-2094);
      intArray0[5] = (-2094);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-2094), (-2094), 1825, (-2094), (-2094), (-2094)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1765.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-399.84850717748634);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.63059908732477, Double.NaN, 0.36940091267523}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.63059908732477, Double.NaN, 0.36940091267523}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = (-399.84850717748634);
      doubleArray2[2] = (-1765.0);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-399.84850717748634), (-1765.0), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-399.84850717748634);
      doubleArray3[1] = 0.7675435543060303;
      doubleArray3[2] = 2.0;
      doubleArray3[3] = 146.64844;
      doubleArray3[4] = Double.NaN;
      doubleArray3[5] = Double.NaN;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray3, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 472.08549055;
      doubleArray0[2] = 472.08549055;
      doubleArray0[3] = 472.08549055;
      doubleArray0[4] = 472.08549055;
      doubleArray0[5] = 472.08549055;
      doubleArray0[6] = 472.08549055;
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1128;
      intArray0[2] = (-2448);
      intArray0[3] = (-414);
      int[] intArray1 = MathArrays.copyOf(intArray0, 1179);
      assertEquals(9, intArray0.length);
      assertEquals(1179, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 1128, (-2448), (-414), 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray1 = MathArrays.scale(472.08549055, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 472.08549055, 472.08549055, 472.08549055, 472.08549055, 472.08549055, 472.08549055, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {1, 1128, (-2448), (-414), 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Integer>) null, 1663);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 472.08549055;
      doubleArray0[2] = 472.08549055;
      doubleArray0[3] = 472.08549055;
      doubleArray0[4] = 472.08549055;
      doubleArray0[5] = 472.08549055;
      doubleArray0[6] = 472.08549055;
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1128;
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 1128;
      integerArray0[1] = (Integer) 1;
      integerArray0[2] = (Integer) 1128;
      integerArray0[3] = (Integer) 1;
      integerArray0[4] = (Integer) 1128;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, integerArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 472.08549055, 472.08549055, 472.08549055, 472.08549055, 472.08549055, 472.08549055, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, 5955.9892857);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1765.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-399.84850717748634);
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) (-1765.0);
      doubleArray1[1] = (Double) Double.NaN;
      doubleArray1[2] = (Double) (-1765.0);
      doubleArray1[3] = (Double) (-1765.0);
      doubleArray1[4] = (Double) (-1765.0);
      doubleArray1[5] = (Double) (-399.84850717748634);
      doubleArray1[6] = (Double) (-399.84850717748634);
      doubleArray1[7] = (Double) (-1765.0);
      doubleArray1[8] = (Double) Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(9, doubleArray1.length);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 3247);
      assertEquals(3247, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1400L);
      longArray0[1] = (-1400L);
      longArray0[2] = (long) 3247;
      longArray0[3] = (-1400L);
      longArray0[4] = (-1400L);
      longArray0[5] = (long) 3247;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,400 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[] longArray0 = new long[5];
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 472.08549055;
      doubleArray0[2] = 472.08549055;
      doubleArray0[3] = 472.08549055;
      doubleArray0[4] = 472.08549055;
      doubleArray0[5] = 472.08549055;
      doubleArray0[6] = 472.08549055;
      doubleArray0[7] = 472.08549055;
      doubleArray0[8] = 472.08549055;
      MathArrays.scaleInPlace(472.08549055, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411}, doubleArray0, 0.01);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(599.5583690658673, (-383.51775174228), (-0.05417713522911072), 1637.1389703767093, 0.0, 3828.9008328);
      assertEquals((-230029.9732417965), double0, 0.01);
      
      Double[] doubleArray2 = new Double[7];
      doubleArray2[0] = (Double) 222864.71038783411;
      doubleArray2[1] = (Double) 222864.71038783411;
      doubleArray2[2] = (Double) 222864.71038783411;
      doubleArray2[3] = (Double) 222864.71038783411;
      Double double1 = new Double((double) doubleArray2[2]);
      assertEquals(7, doubleArray2.length);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(222864.71038783411, (double)double1, 0.01);
      
      doubleArray2[4] = double1;
      doubleArray2[5] = (Double) 222864.71038783411;
      doubleArray2[6] = (Double) 222864.71038783411;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertEquals(7, doubleArray2.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      int int0 = 106;
      intArray0[0] = 106;
      intArray0[1] = (-1);
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace(2520.69949908185, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 472.08549055;
      doubleArray0[2] = 472.08549055;
      doubleArray0[3] = 472.08549055;
      doubleArray0[4] = 472.08549055;
      doubleArray0[5] = 472.08549055;
      doubleArray0[6] = 472.08549055;
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1128;
      intArray0[2] = (-2448);
      intArray0[3] = (-414);
      intArray0[4] = 1179;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1179);
      assertEquals(5, intArray0.length);
      assertEquals(1179, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 1128, (-2448), (-414), 1179}, intArray0);
      
      double[] doubleArray1 = MathArrays.scale(472.08549055, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 472.08549055, 472.08549055, 472.08549055, 472.08549055, 472.08549055, 472.08549055, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {1, 1128, (-2448), (-414), 1179}, intArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[5];
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 472.08549055;
      doubleArray0[2] = 472.08549055;
      doubleArray0[3] = 472.08549055;
      doubleArray0[4] = 472.08549055;
      doubleArray0[6] = 472.08549055;
      doubleArray0[7] = 472.08549055;
      doubleArray0[8] = 472.08549055;
      MathArrays.scaleInPlace(472.08549055, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 0.0, 222864.71038783411, 222864.71038783411, 222864.71038783411}, doubleArray0, 0.01);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, 0.0, 222864.71038783411, 222864.71038783411, 222864.71038783411}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(222864.71038783411, 222864.71038783411, 222864.71038783411, 222864.71038783411, (-0.3058015757857271), 472.08549055, 43.20341292, 5.650007086920087E-9);
      assertEquals(9.933735812814186E10, double0, 0.01);
      
      long[][] longArray1 = new long[7][5];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(7, longArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1755.0F;
      floatArray0[1] = 785.7851F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1755.0F, 785.7851F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {1755.0F, 785.7851F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-1856);
      int int1 = 137;
      intArray0[1] = 137;
      int int2 = 481;
      intArray0[2] = 481;
      intArray0[3] = (-2146888520);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 137, 481, (-2146888520)}, intArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 106;
      intArray0[1] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0, 106);
      assertEquals(2, intArray0.length);
      assertEquals(106, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {106, (-1)}, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 0.3936265707015991;
      doubleArray0[2] = (double) 106;
      doubleArray0[3] = (double) 106;
      doubleArray0[4] = (double) 106;
      doubleArray0[5] = (-497.48666468);
      double[] doubleArray1 = MathArrays.scale(106, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.3936265707015991, 106.0, 106.0, 106.0, (-497.48666468)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-106.0), 41.72441649436951, 11236.0, 11236.0, 11236.0, (-52733.58645608)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1765.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-399.84850717748634);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1894L);
      longArray0[1] = 0L;
      longArray0[2] = (-3420L);
      longArray0[3] = (-1133L);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2}, intArray0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {2}, intArray0);
      
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1765.0);
      doubleArray0[0] = (-1765.0);
      doubleArray0[1] = (-2387.756167463061);
      doubleArray0[2] = (-399.84850717748634);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not increasing (-1,765 > -2,387.756)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1765.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-399.84850717748634);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.63059908732477, Double.NaN, 0.36940091267523}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.63059908732477, Double.NaN, 0.36940091267523}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = (-399.84850717748634);
      doubleArray2[2] = (-1765.0);
      doubleArray2[3] = 2.0;
      doubleArray2[4] = (-4294.099003);
      doubleArray2[5] = (-1765.0);
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, (-399.84850717748634), (-1765.0), 2.0, (-4294.099003), (-1765.0)}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection1, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (-399.849 >= -1,765)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[5];
      longArray1[0] = 3234L;
      longArray1[1] = 1553L;
      longArray1[2] = 10000L;
      longArray1[3] = 1386L;
      longArray1[4] = 1553L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      int int1 = (-1715);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<String>) null, (-1715));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 320.5F;
      int int0 = (-830);
      int int1 = 245;
      int int2 = 0;
      int int3 = 4;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int4 = 2164;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2164, 4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1894L);
      longArray0[1] = 0L;
      longArray0[2] = (-3420L);
      longArray0[3] = (-1133L);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2}, intArray0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {2}, intArray0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1894L);
      doubleArray1[1] = (double) (-1133L);
      doubleArray1[2] = (double) (-3420L);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 613.8;
      doubleArray1[5] = (double) 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1894.0), (-1133.0), (-3420.0), 0.0, 613.8, 0.0}, doubleArray1, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2}, intArray1);
      assertArrayEquals(new int[] {2}, intArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1133L);
      doubleArray2[1] = 0.0;
      boolean boolean1 = MathArrays.equals(doubleArray2, doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1133.0), 0.0}, doubleArray2, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray1, doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[10];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1048);
      doubleArray0[1] = (double) 0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1048.0), 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1048.0), 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1048.0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1048.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1048.0), 0.0}, doubleArray1, 0.01);
      
      MathArrays.checkOrder(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1048.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1048.0), 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1098304.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1048.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1048.0), 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {(-1048.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1048.0), 0.0}, doubleArray1, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      
      boolean boolean3 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1048.0), 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1048.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 320.4917F;
      floatArray0[1] = 559.11F;
      floatArray0[2] = 836.6675F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double1 = MathArrays.linearCombination(0.0, (double) 0.0F, 230243.96145115723, (double) 320.4917F);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7.379127844033775E7, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-1856);
      intArray0[0] = (-1856);
      int int1 = 137;
      intArray0[1] = 137;
      int int2 = 481;
      intArray0[2] = 481;
      intArray0[3] = (-2146888520);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1856), 137, 481, (-2146888520)}, intArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3012.6074F);
      floatArray0[1] = 1431.314F;
      floatArray0[2] = (-1566.0428F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3179.0F;
      floatArray0[6] = 2104.34F;
      floatArray0[7] = (-482.89938F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-3012.6074F), 1431.314F, (-1566.0428F), 0.0F, 0.0F, 3179.0F, 2104.34F, (-482.89938F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {2, 0}, intArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray1, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1894L);
      longArray0[1] = 0L;
      longArray0[2] = (-3420L);
      longArray0[3] = (-1133L);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2}, intArray0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {2}, intArray0);
      
      long[][] longArray1 = new long[3][1];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1594.05F);
      floatArray0[1] = 0.0F;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1594.05F);
      doubleArray0[1] = (double) (-1594.05F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1594.050048828125), (-1594.050048828125), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2540995.5581689477, 5081991.116337895, 2540995.5581689477, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(3190);
      assertNotNull(integer0);
      assertEquals(3190, (int)integer0);
      
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      integerArray0[3] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer1;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 33;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {33}, intArray0);
      assertArrayEquals(new int[] {33}, intArray1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1765.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-399.84850717748634);
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double double0 = MathArrays.linearCombination((-399.84850717748634), (double) 96, (-25.9981), 0.0, 0.0, (-1765.0), 1943.2699702664, 5923.30870463);
      assertEquals(1.1472202473636009E7, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1184));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, 3842.4802603);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = (-1048);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1048);
      doubleArray0[1] = (double) (-1048);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1048.0), (-1048.0)}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1048.0), (-1048.0)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {(-1048.0), (-1048.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1048.0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1048.0), (-1048.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-524.0), (-524.0)}, doubleArray1, 0.01);
      
//      try { 
        MathArrays.checkOrder(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (-524 >= -524)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1765.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-399.84850717748634);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 566.1038880007);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {461.5442415524726, Double.NaN, 104.55964644822738}, doubleArray1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 207);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[] floatArray0 = new float[5];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 2820.791;
      doubleArray0[2] = 2820.791;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 710.0587;
      doubleArray0[5] = 710.0587;
      doubleArray0[6] = 2820.791;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 2820.791;
      doubleArray1[2] = 2820.791;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = 2820.791;
      doubleArray1[5] = 710.0587;
      doubleArray1[6] = 2820.791;
      doubleArray1[7] = Double.NEGATIVE_INFINITY;
      doubleArray1[8] = 1057.4053597578;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 2820.791, 2820.791, Double.NEGATIVE_INFINITY, 710.0587, 710.0587, 2820.791}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 2820.791, 2820.791, Double.NEGATIVE_INFINITY, 2820.791, 710.0587, 2820.791, Double.NEGATIVE_INFINITY, 1057.4053597578}, doubleArray1, 0.01);
      
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 836.6675F;
      floatArray1[1] = 559.11F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {836.6675F, 559.11F, 0.0F, 0.0F, 1.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (-0.1428571423679182);
      doubleArray0[2] = (double) 559.11F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 1.0F;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-0.1428571423679182), 559.1099853515625, 0.0, 1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.020408163125527647, 312603.97571982443, 0.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-0.1428571423679182), 559.1099853515625, 0.0, 1.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.020408163125527647, 312603.97571982443, 0.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-0.0029154518650912013), (-44646.30025639803), 1.7478000428555125E8, (-0.12244897924239054), 313163.085705176, 0.0, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, (-0.1428571423679182), 559.1099853515625, 0.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, Double.NaN, Double.NaN, 73.078753393, 352.065, Double.NaN, Double.NaN, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 352.065;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 73.078753393;
      doubleArray0[5] = 73.078753393;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 352.065, Double.NaN, 0.0, 73.078753393, 73.078753393}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 352.065, Double.NaN, 0.0, 73.078753393, 73.078753393}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-224.236493095497);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 595.2125642313;
      doubleArray0[1] = (-3607.44158112698);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly decreasing (-3,607.442 <= -224.236)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
//      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2383.9376225;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2383.9376225, 0.0, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(3097.60076, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2383.9376225, 0.0, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 7384486.991248593, 0.0, 4.15752939355874E11, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {0.0, 2383.9376225, 0.0, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 7384486.991248593, 0.0, 4.15752939355874E11, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 7384486.991248593, 0.0, 4.15752939355874E11, 0.0}, doubleArray3, 0.01);
      
      double[] doubleArray4 = MathArrays.scale(0.0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertArrayEquals(new double[] {0.0, 2383.9376225, 0.0, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray2, doubleArray3);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {0.0, 2383.9376225, 0.0, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 7384486.991248593, 0.0, 4.15752939355874E11, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 7384486.991248593, 0.0, 4.15752939355874E11, 0.0}, doubleArray3, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.linearCombination(0.8333333333333334, 1.34217729E8, 1.304E19, 1407.2);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.8349888000000113E22, double1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("SAME_SIGN_AT_ENDPOINTS");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.SAME_SIGN_AT_ENDPOINTS
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[] longArray0 = new long[0];
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1894L);
      longArray0[1] = 0L;
      longArray0[2] = (-3420L);
      longArray0[3] = 0L;
      longArray0[4] = (-1400L);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 6.283185307179586;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 6.283185307179586;
      doubleArray1[6] = 0.0;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1765.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-399.84850717748634);
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double double0 = MathArrays.linearCombination((-399.84850717748634), (double) 96, (-25.9981), 0.0, 0.0, (-1765.0), 1943.2699702664, 5923.30870463);
      assertEquals(1.1472202473636009E7, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1551939.2523109214;
      doubleArray0[1] = 3313.120574444317;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1110.0;
      doubleArray0[4] = 6.52E18;
      doubleArray0[5] = 645.9736;
      doubleArray0[6] = 2.893485277253286E-8;
      doubleArray0[7] = 3.7257142857142856E18;
      doubleArray0[8] = 1330.11;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1765.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-399.84850717748634);
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double double0 = MathArrays.linearCombination((-399.84850717748634), (double) 96, (-25.9981), 0.0, 0.0, (-1765.0), 1943.2699702664, 5923.30870463);
      assertEquals(1.1472202473636009E7, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1765.0), Double.NaN, (-399.84850717748634)}, doubleArray0, 0.01);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1184));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = -0.0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 1230.17561584;
      doubleArray0[5] = 1543.154;
      doubleArray0[6] = -0.0;
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.3421772901450872E8, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, -0.0, 1.34217729E8, 1230.17561584, 1543.154, -0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2732;
      intArray0[2] = 12;
      intArray0[3] = 4009;
      intArray0[4] = 33;
      intArray0[5] = 636;
      intArray0[6] = (-1498);
      intArray0[7] = 96;
      intArray0[8] = 14;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 2732, 12, 4009, 33, 636, (-1498), 96, 14}, intArray1);
      assertArrayEquals(new int[] {0, 2732, 12, 4009, 33, 636, (-1498), 96, 14}, intArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-224.236493095497);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 595.2125642313;
      doubleArray0[5] = (-3607.44158112698);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (0 <= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 0.0;
      MathArrays.scaleInPlace(100.0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {10000.0, 10000.0, 10000.0, 0.0}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[8][2];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 2147483647L;
      longArray1[3] = 42L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray1[6] = 0L;
      longArray1[7] = (-468L);
      longArray1[8] = 3389L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 0L;
      longArray4[1] = (-468L);
      longArray4[2] = 1L;
      longArray4[3] = (-468L);
      longArray4[4] = 42L;
      longArray4[5] = 0L;
      longArray4[6] = 0L;
      longArray4[7] = 11L;
      longArray4[8] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = 11L;
      longArray5[1] = 1L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 0L;
      longArray6[1] = 1L;
      longArray6[2] = (-468L);
      longArray6[3] = 11L;
      longArray6[4] = 0L;
      longArray6[5] = 11L;
      longArray6[6] = 1L;
      longArray6[7] = 1L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      
      longArray7[0] = (-1073741824L);
      longArray7[1] = (-468L);
      longArray7[2] = 0L;
      longArray7[3] = 3214L;
      longArray7[4] = 11L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray7));
      
      longArray0[7] = longArray8;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 0 while others have length 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double double0 = MathArrays.linearCombination((-1808.9), 0.09090909090909091, (-2606.0), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = MathArrays.linearCombination(123.8479362457608, 2026.143325048, 123.8479362457608, 2026.143325048);
      assertEquals(501867.338690637, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 501867.338690637;
      doubleArray0[2] = 123.8479362457608;
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = 2026.143325048;
      doubleArray0[5] = 2026.143325048;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 1.0000000000000002E-10, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 501867.338690637, 123.8479362457608, 1.0E-5, 2026.143325048, 2026.143325048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5187082564442258E11, 15338.311312334034, 1.0000000000000002E-10, 4105256.773636565, 4105256.773636565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.26405740959979808E17, 1899618.2015275771, 1.0000000000000003E-15, 8.317838609511814E9, 8.317838609511814E9}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-502);
      int int0 = 1820;
      intArray0[3] = 1820;
      intArray0[4] = 1;
      intArray0[5] = 3460;
      intArray0[6] = 1435;
      intArray0[7] = 1833;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, (-502), 1820, 1, 3460, 1435, 1833}, intArray0);
      
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 1833, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3007.8353496117);
      doubleArray0[5] = 805.397653007;
      doubleArray0[6] = (-151.2);
      doubleArray0[7] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 2 and 3 are not increasing (100 > 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 104.41886524551471;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 654.5645217558;
      doubleArray0[3] = (-1017.271009256088);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-210.48741804);
      MathArrays.copyOf(doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2442;
      intArray0[2] = (-2152);
      intArray0[3] = (-244);
      intArray0[4] = (-1);
      MathArrays.copyOf(intArray0);
      long[][] longArray0 = new long[8][9];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) (-244);
      longArray1[1] = (long) (-2152);
      longArray1[2] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = (long) 0;
      longArray2[1] = (long) (-244);
      longArray2[2] = (long) (-1);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = (long) 0;
      longArray3[1] = (-434L);
      longArray3[2] = (long) (-2152);
      longArray3[3] = (long) 2442;
      longArray3[4] = (long) (-1);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = (-434L);
      longArray4[1] = (long) (-244);
      longArray4[2] = (long) (-244);
      longArray4[3] = (-434L);
      longArray4[4] = (-936L);
      longArray4[5] = (long) (-1);
      longArray4[6] = (-650L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = (long) (-244);
      longArray5[1] = (long) (-1);
      longArray5[2] = 0L;
      longArray5[3] = (-650L);
      longArray5[4] = (long) (-2152);
      longArray5[5] = (long) 0;
      longArray5[6] = (long) 2442;
      longArray5[7] = (long) (-244);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      longArray7[0] = (long) (-1);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[7];
      longArray8[0] = 0L;
      longArray8[1] = (-963L);
      longArray8[2] = 1665L;
      longArray8[3] = (long) (-1);
      longArray8[4] = (long) 2442;
      longArray8[5] = 0L;
      longArray8[6] = (long) (-1);
      longArray0[7] = longArray8;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -244 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 751.95397;
      doubleArray0[1] = 3570.23235594;
      doubleArray0[2] = (-703.491);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 134.908941;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = (-1824.289664);
      MathArrays.distance1(doubleArray0, doubleArray0);
      int int0 = (-507);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-507));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathArrays.linearCombination(Double.NaN, (-20.0), 0.0, (-20.0), Double.NaN, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-20.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      MathArrays.linearCombination((-20.0), 1.34217729E8, (-20.0), 6.283185307179586, 0.0, 6.283185307179586);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2374.5874F);
      floatArray0[3] = (-959.956F);
      floatArray0[4] = (-363.28622F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = 309.7F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1765.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-399.84850717748634);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3115225.0, Double.NaN, Double.NaN, Double.NaN, 159878.82869206436}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 219;
      intArray0[2] = 3190;
      intArray0[3] = 3523;
      intArray0[4] = 2669;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 2;
      intArray0[1] = 2;
      int int2 = 0;
      intArray0[2] = 0;
      intArray0[3] = 2869;
      int int3 = 27;
      intArray0[4] = 27;
      int int4 = 0;
      intArray0[5] = 0;
      int int5 = (-2453);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-2453));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-1894L);
      longArray0[1] = 0L;
      longArray0[2] = (-3420L);
      int[] intArray0 = new int[9];
      intArray0[0] = 1435;
      intArray0[1] = 1833;
      intArray0[2] = 1;
      intArray0[3] = 1833;
      intArray0[4] = 1;
      intArray0[5] = 1833;
      intArray0[6] = 1833;
      intArray0[7] = 1833;
      intArray0[8] = (-935);
      MathArrays.copyOf(intArray0, 1435);
      Object object0 = new Object();
      Pair<Object, String> pair0 = new Pair<Object, String>(object0, "org.apache.commons.math3.util.MathArrays$3");
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Pair<Object, String>>) null, 0, (-1361));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = 1553L;
      longArray0[1] = 1553L;
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      int int0 = 1825;
      int int1 = 160;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<FieldElement<Double>>) null, 1825, 160);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1.0));
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double((-463.271317));
      doubleArray0[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 3247);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection1, false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3247;
      longArray0[1] = (long) 3247;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) doubleArray0[2];
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (double) 3247L;
      doubleArray3[3] = (double) doubleArray0[1];
      doubleArray3[4] = (double) 3247L;
      doubleArray3[5] = (double) doubleArray0[1];
      doubleArray3[6] = (-1.0);
      doubleArray3[7] = (double) doubleArray0[0];
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (double) doubleArray0[1];
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (double) doubleArray0[0];
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray3, doubleArray4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3681.59974;
      doubleArray0[3] = (-4428.551687582143);
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1938.1904137701);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][8];
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-1938.1904137701);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 482;
      intArray0[2] = 620;
      intArray0[3] = (-2172);
      intArray0[4] = 58;
      intArray0[5] = 0;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 58;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2172);
      doubleArray0[3] = (double) 58;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-2172);
      doubleArray0[7] = (double) 58;
      doubleArray0[8] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 2 and 3 are not strictly decreasing (-2,172 <= 58)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 320.4917F;
      floatArray0[1] = 559.11F;
      floatArray0[2] = 836.6675F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2383.9376225;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.scale(3097.60076, doubleArray0);
      MathArrays.ebeAdd(doubleArray1, doubleArray2);
      MathArrays.distanceInf(doubleArray2, doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (0 <= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][9];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      int[] intArray0 = new int[9];
      intArray0[0] = 2146781614;
      intArray0[1] = 12;
      intArray0[2] = 1825;
      intArray0[3] = 0;
      intArray0[4] = 251;
      intArray0[5] = 441;
      intArray0[6] = 3295;
      intArray0[7] = (-2144801630);
      intArray0[8] = 3218;
      MathArrays.copyOf(intArray0);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1033.3);
      doubleArray2[1] = (double) 251;
      doubleArray2[2] = (double) 12;
      doubleArray2[3] = (double) 3295;
      doubleArray2[4] = (double) 441;
      MathArrays.ebeDivide(doubleArray2, doubleArray2);
      MathArrays.distance(doubleArray0, doubleArray2);
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-660.8864009877908);
      doubleArray0[0] = (-660.8864009877908);
      double double1 = 3.32;
      doubleArray0[1] = 3.32;
      doubleArray0[2] = 1.7976931348623157E308;
      int int0 = 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-223.0);
      doubleArray0[1] = 6.283185307179586;
      MathArrays.distance1(doubleArray0, doubleArray0);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -223 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1411.22485527775);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2599.7);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-2377.666763887513);
      doubleArray0[7] = 1104.4537574;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1.5623114024484001E7, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1411.22485527775), 0.0, (-2599.7), 1.0, (-2377.666763887513), 1104.4537574}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2.0, 2.0, (-3.141592653589793), (-3.141592653589793), 0.0, 0.0, 576.59944, (-946.8693));
      assertEquals((-545950.4385287908), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-476.0693632);
      doubleArray0[1] = 710.0587;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 2820.791;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[][] doubleArray2 = new double[3][1];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {226642.03857765353, 504183.3574456901, Double.POSITIVE_INFINITY, 7956861.865681001}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1249.14F);
      floatArray0[1] = (-492.5312F);
      floatArray0[2] = 147.05F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      int int0 = (-470);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-470));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 43.20341292;
      doubleArray0[3] = 3721.09377;
      double double0 = 20.0;
      doubleArray0[4] = 20.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      Integer[] integerArray0 = new Integer[5];
      int int0 = (-427);
//      try { 
        Integer.valueOf("", (-427));
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // radix -427 less than Character.MIN_RADIX
//         //
//         verifyException("java.lang.Integer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 730.696636;
      double double0 = (-901.2517131);
      doubleArray0[1] = (-901.2517131);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.304E19;
      MathArrays.normalizeArray(doubleArray0, 1.304E19);
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-628.53574556);
      doubleArray0[1] = (-2014.7359985);
      doubleArray0[2] = (-2626.0016880601);
      doubleArray0[3] = 2401.7451;
      doubleArray0[4] = (-1019.0324001);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-77.4508956);
      double[][] doubleArray1 = new double[8][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-2626.0016880601);
      doubleArray2[1] = (-1019.0324001);
      doubleArray2[2] = (-77.4508956);
      doubleArray2[3] = (-2626.0016880601);
      doubleArray2[4] = (-2626.0016880601);
      doubleArray2[5] = Double.NaN;
      doubleArray2[6] = Double.NaN;
      doubleArray2[7] = 2401.7451;
      doubleArray2[8] = 2401.7451;
      doubleArray1[5] = doubleArray2;
      doubleArray1[6] = doubleArray0;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-1019.0324001);
      doubleArray3[1] = (-1019.0324001);
      doubleArray3[2] = (-2014.7359985);
      doubleArray3[3] = (-628.53574556);
      doubleArray3[4] = Double.NaN;
      doubleArray3[5] = (-77.4508956);
      doubleArray3[6] = (-2626.0016880601);
      doubleArray3[7] = 2401.7451;
      doubleArray1[7] = doubleArray3;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 772.45;
      doubleArray0[2] = 2333.740869554;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1507.9464815);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-1652.63377946792);
      doubleArray0[8] = 20.0;
      double[][] doubleArray1 = new double[5][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2333.740869554, (-1652.63377946792), 20.0, 0.0, 0.0, 772.45, (-1507.9464815), 0.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 4117.93842227314;
      doubleArray0[2] = (-1158.02072484);
      doubleArray0[3] = (-1897.8776202);
      doubleArray0[4] = 0.0;
      double double1 = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-2534.5049304083423);
      double double2 = (-497.48666468);
      doubleArray0[7] = (-497.48666468);
      doubleArray0[8] = (-1640.4);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-3973.9146324764));
//      try { 
        MathArrays.checkOrder(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (4,532.616 >= -1,274.634)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-1894L);
      longArray0[1] = 0L;
      longArray0[2] = (-3420L);
      longArray0[3] = (-1133L);
      longArray0[4] = (-1400L);
      longArray0[5] = 0L;
      longArray0[6] = 1582L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,894 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[][] longArray0 = new long[6][2];
      long[] longArray1 = new long[7];
      longArray1[0] = (-2247L);
      longArray1[1] = 2382L;
      longArray1[2] = (-3560L);
      longArray1[3] = 0L;
      longArray1[4] = (-199L);
      longArray1[5] = 302L;
      longArray1[6] = (-703L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (-2247L);
      longArray2[1] = (-2247L);
      longArray2[2] = (-703L);
      longArray2[3] = (-9223372036854775808L);
      longArray2[4] = (-3560L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = (-9223372036854775808L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = (-1L);
      longArray4[1] = 1576L;
      longArray4[2] = (-199L);
      longArray4[3] = (-2247L);
      longArray4[4] = (-703L);
      longArray4[5] = (-199L);
      longArray4[6] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = 302L;
      longArray5[1] = 302L;
      longArray5[2] = 1576L;
      longArray5[3] = (-703L);
      longArray5[4] = (-3560L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = 0L;
      longArray6[1] = (-1L);
      longArray6[2] = 0L;
      longArray6[3] = 2382L;
      longArray6[4] = (-2247L);
      longArray6[5] = 668L;
      longArray0[5] = longArray6;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 5 while others have length 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = 392.08549055;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 100.0;
      MathArrays.normalizeArray(doubleArray0, 0.0);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2536.771447826407;
      doubleArray0[1] = 3042.2567897385;
      doubleArray0[2] = 3467.7880632097117;
      double[] doubleArray1 = MathArrays.scale(3467.7880632097117, doubleArray0);
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distance(doubleArray1, doubleArray0);
      MathArrays.linearCombination(3042.2567897385, 0.0, 6.283185307179586, 290.1567706027233);
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 3.136339476157649E7;
      double[][] doubleArray3 = new double[5][2];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray2;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray2;
//      try { 
        MathArrays.sortInPlace(doubleArray2, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-1894L);
      longArray0[1] = 0L;
      int int0 = 11;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<String>) null, 11);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-783.948);
      MathArrays.distance(doubleArray0, doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[5];
      longArray1[0] = 3234L;
      longArray1[1] = 1553L;
      longArray1[2] = 10000L;
      longArray1[3] = 1386L;
      longArray1[4] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-1352.8);
      doubleArray0[0] = (-1352.8);
      doubleArray0[1] = (-2454.71044);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (-397.0);
      double double1 = (-703.34434557612);
      doubleArray0[5] = (-703.34434557612);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double double2 = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1048);
      intArray0[1] = (-1);
      MathArrays.distance(intArray0, intArray0);
      long[][] longArray0 = new long[7][6];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) (-1048);
      longArray1[1] = (long) (-1);
      longArray1[2] = (long) (-1);
      longArray1[3] = (long) (-1);
      longArray1[4] = (long) (-1);
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (long) (-1);
      longArray2[1] = (long) (-1048);
      longArray2[2] = (long) (-1);
      longArray2[3] = (long) (-1);
      longArray2[4] = 0L;
      longArray2[5] = (long) (-1048);
      longArray2[6] = (long) (-1048);
      longArray2[7] = (long) (-1048);
      longArray2[8] = (long) (-1048);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (long) (-1);
      longArray3[1] = (long) (-1048);
      longArray3[2] = (long) (-1048);
      longArray3[3] = (long) (-1);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = (long) (-1048);
      longArray4[1] = 0L;
      longArray4[2] = (long) (-1048);
      longArray4[3] = (long) (-1);
      longArray4[4] = (long) (-1048);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = (long) (-1);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      longArray7[0] = (long) (-1048);
      longArray7[1] = 636L;
      longArray7[2] = (long) (-1048);
      longArray7[3] = 0L;
      longArray7[4] = 1768L;
      longArray7[5] = (long) (-1048);
      longArray7[6] = (long) (-1);
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 9 while others have length 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
