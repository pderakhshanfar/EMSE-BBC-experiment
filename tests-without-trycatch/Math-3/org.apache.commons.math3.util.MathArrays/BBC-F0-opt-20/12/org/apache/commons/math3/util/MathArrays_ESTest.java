/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:04:45 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.4E-45F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1187.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1.4E-45F);
      doubleArray0[1] = (double) (-1.4E-45F);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-378);
      intArray0[1] = 1066;
      intArray0[2] = 18;
      intArray0[3] = (-548);
      intArray0[4] = (-1686);
      intArray0[5] = (-337);
      intArray0[6] = 2171;
      MathArrays.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 130.0628069798524;
      doubleArray0[1] = 1890.91697958;
      doubleArray0[2] = 2056.879928158;
      doubleArray0[3] = (-1386.506);
      doubleArray0[4] = 2.6569E36;
      doubleArray0[5] = 3.4028234663852886E38;
      doubleArray0[6] = 0.7214844226837158;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 64.852307851802;
      doubleArray1[1] = 7.848361555046424E-8;
      doubleArray1[2] = 2126.47331;
      doubleArray1[3] = 1738.300272132;
      doubleArray1[4] = (-1888.61292565144);
      doubleArray1[5] = 1338.16;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
//      try { 
        MathArrays.normalizeArray(doubleArray2, 235225.390625);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 1098.22;
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = 190;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 190);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      MathArrays.distance1(doubleArray2, doubleArray2);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 190;
      floatArray0[1] = (float) 190;
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-815.994);
      doubleArray0[1] = (-669.0513357068);
      doubleArray0[2] = 1.7976931348623157E308;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale((-2611.7390692179), doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray1);
      int[] intArray0 = new int[3];
      intArray0[0] = 17;
      intArray0[1] = (-554);
      intArray0[2] = (-494);
      MathArrays.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.63E18;
      doubleArray0[1] = 0.6816387176513672;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1484.111016994);
      doubleArray0[4] = 2587.39055083687;
      doubleArray0[5] = 1549.0770494;
      doubleArray0[6] = (-3.940510424527919E-20);
      doubleArray0[7] = (-787.1424);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 646.8877;
      doubleArray0[1] = 1152.429263078;
      doubleArray0[2] = (-4228.808922);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 1431655765;
      intArray0[2] = (-1699);
      intArray0[3] = (-2147);
      intArray0[4] = 134217729;
      int[] intArray1 = new int[7];
      intArray1[0] = 1431655765;
      intArray1[1] = 134217729;
      intArray1[2] = 3;
      intArray1[3] = 3;
      intArray1[4] = 134217729;
      intArray1[5] = (-2147);
      intArray1[6] = (-2147);
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[3];
      MathArrays.distanceInf(intArray0, intArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.linearCombination(4.0, (double) 0.0F, (double) 0, (double) 0, (double) 0.0F, 1.304E19, 4.0, (double) 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 311.06;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 1.304E19;
      MathArrays.scaleInPlace(311.06, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
//      try { 
        MathArrays.convolve((double[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = -0.0F;
      floatArray0[1] = 1003.56335F;
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) -0.0F;
      doubleArray0[1] = (double) 1003.56335F;
      doubleArray0[2] = (double) -0.0F;
      doubleArray0[3] = (double) 1003.56335F;
      MathArrays.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-518);
      intArray0[1] = 594;
      intArray0[2] = (-1965);
      intArray0[3] = (-518);
      intArray0[4] = (-518);
      int[] intArray1 = new int[7];
      intArray1[0] = 594;
      intArray1[1] = (-1965);
      intArray1[2] = (-1965);
      intArray1[3] = (-1965);
      intArray1[4] = (-1965);
      intArray1[5] = (-518);
      intArray1[6] = (-518);
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2455.7001186870284);
      doubleArray0[1] = 1246.6039042460322;
      doubleArray0[2] = (-1088.30921242989);
      MathArrays.equals((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-4655.177F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1745.7F;
      floatArray0[3] = 0.0F;
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      long[] longArray0 = new long[1];
      longArray0[0] = 4294967295L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4294967295L;
      doubleArray0[1] = (double) 4294967295L;
      doubleArray0[2] = (double) 4294967295L;
      doubleArray0[3] = (double) 4294967295L;
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 4294967295L;
      doubleArray1[1] = (double) 4294967295L;
      doubleArray1[2] = (double) 4294967295L;
      doubleArray1[3] = (double) 4294967295L;
      doubleArray1[4] = (double) 4294967295L;
      MathArrays.convolve(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = 1117.31;
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, 3.834E-20);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 2, (-19));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.633123935319537E16;
      doubleArray0[2] = 101.338835;
      doubleArray0[3] = (-5438.170864241);
      doubleArray0[4] = 4613.1494889214655;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 1561.617008108001;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2383;
      intArray0[3] = (-127);
      intArray0[4] = (-2126221432);
      intArray0[5] = 2510;
      intArray0[6] = 154;
      int[] intArray1 = new int[0];
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      int[] intArray0 = new int[9];
      intArray0[0] = (-85);
      intArray0[1] = 11;
      intArray0[2] = (-5275);
      intArray0[3] = 1928;
      intArray0[4] = 3802;
      intArray0[5] = 1737;
      intArray0[6] = 134217729;
      intArray0[7] = 1765;
      intArray0[8] = (-345);
      MathArrays.distanceInf(intArray0, intArray0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1737;
      floatArray0[1] = (float) (-85);
      floatArray0[2] = (float) (-85);
      floatArray0[3] = (float) 3802;
      floatArray0[4] = (float) 1765;
      MathArrays.equals((float[]) null, floatArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2083);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[2];
      MathArrays.equals((float[]) null, floatArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-1623.236413);
      doubleArray0[3] = Double.NaN;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.linearCombination((-1623.236413), (-1.0), 6.283185307179586, 6.283185307179586, 293.685297101, Double.NaN);
      int[] intArray0 = new int[5];
      intArray0[0] = 2899;
      intArray0[1] = (-2547);
      intArray0[2] = 2600;
      intArray0[3] = (-868);
      intArray0[4] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      MathArrays.copyOf(intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-19), (-19));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 3054.376755038;
      doubleArray0[12] = (-1267.0950237);
      doubleArray0[2] = 3.0095696449279785;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1267.0950237);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 3.0095696449279785;
      doubleArray2[1] = (-1267.0950237);
      doubleArray2[2] = (-1267.0950237);
      doubleArray2[3] = (-1267.0950237);
      doubleArray2[4] = (-2081.868606944131);
      MathArrays.equals(doubleArray1, doubleArray2);
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 3.0095696449279785;
      doubleArray3[1] = (-2081.868606944131);
//      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4.071190857026311E7;
      doubleArray0[1] = (-1711.4656765408554);
      doubleArray0[2] = (-3293.236189211217);
      doubleArray0[3] = 0.041666663879186654;
      doubleArray0[4] = 1912.4;
      doubleArray0[5] = 510863.3495835174;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 1379.36282578;
      doubleArray0[8] = 5363816.123791215;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 2 and 3 are not strictly decreasing (-3,293.236 <= 0.042)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = Float.NaN;
      float[] floatArray1 = new float[1];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) Float.NaN;
      MathArrays.checkPositive(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-221.0);
      doubleArray0[1] = 3.26E18;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      MathArrays.linearCombination(1.06276E37, (-1.7168146928204135), 323.3, 323.3, 1.06276E37, (-2385.6), 438.04974348276, 3.26E18);
      double[] doubleArray3 = MathArrays.scale(323.3, doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray4 = new double[5][3];
      doubleArray4[0] = doubleArray3;
      doubleArray4[1] = doubleArray1;
      doubleArray4[2] = doubleArray3;
      doubleArray4[3] = doubleArray0;
      doubleArray4[4] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 134217729;
      doubleArray2[1] = (double) 134217729;
      doubleArray2[2] = 2522.858681020924;
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[1] = 134217729;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-314.38493352726);
      doubleArray1[1] = 1942.959;
      doubleArray1[2] = (-221.0);
      doubleArray1[3] = (-638.38282);
      MathArrays.equals(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-638.38282);
      doubleArray2[1] = (-314.38493352726);
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1942.959;
      doubleArray3[1] = (-638.38282);
      doubleArray3[2] = 1942.959;
//      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = new Integer((-2074));
      Integer integer1 = new Integer(568);
      Integer integer2 = new Integer(568);
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace((-2074), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      MathArrays.checkPositive(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      MathArrays.equals(doubleArray1, (double[]) null);
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd(doubleArray1, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 1.0;
      doubleArray3[2] = 460.8954007824602;
      doubleArray3[3] = 2516.83447265625;
      MathArrays.equalsIncludingNaN(doubleArray3, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1577.35444401454;
      doubleArray1[1] = 1279.69;
      doubleArray1[2] = 456.0;
      doubleArray1[3] = (-714.9693034627);
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MathArrays.linearCombination((double) Float.NaN, 1.7976931348623157E308, (double) Float.NaN, (-614.03599));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2220.287932029074);
      doubleArray1[1] = 1.86285714285714278E18;
      doubleArray1[2] = (-2522.53043181079);
      doubleArray1[3] = 2281.74878;
      doubleArray1[4] = 2.0217439756338078E-10;
      doubleArray1[5] = 2281.74878;
      doubleArray1[6] = 7804.456921901248;
      doubleArray1[7] = 1.86285714285714278E18;
      doubleArray1[8] = 7804.456921901248;
//      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 3.834E-20;
      doubleArray1[1] = (-2639.1262);
      doubleArray1[2] = 0.19999999999923582;
      doubleArray1[3] = 8.112964086090368E33;
      doubleArray1[4] = (-393.90720755);
      doubleArray1[5] = 1.34217729E8;
      doubleArray1[6] = 1.304E19;
      doubleArray1[7] = (-0.3058015757857271);
      MathArrays.safeNorm(doubleArray1);
      int[] intArray0 = new int[1];
      intArray0[0] = (-692);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-692));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 134217729;
      intArray0[0] = 134217729;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 793.58598289;
      doubleArray1[1] = (double) 134217729;
      doubleArray1[2] = (double) 134217729;
      doubleArray1[3] = (double) 134217729;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 57;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 57;
      doubleArray0[1] = (double) 57;
      doubleArray0[2] = (double) 57;
      doubleArray0[3] = (double) 57;
      doubleArray0[4] = (double) 57;
      doubleArray0[5] = (double) 57;
      doubleArray0[6] = (double) 57;
      doubleArray0[7] = (double) 57;
      doubleArray0[8] = (double) 57;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 17 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = new Integer(946);
      Integer integer1 = new Integer(263);
      Integer integer2 = new Integer((-1749));
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      integerArray0[3] = integer2;
      integerArray0[4] = integer1;
      integerArray0[5] = integer2;
      Integer integer3 = new Integer((-1749));
      integerArray0[6] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 134217729;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination(1.8013521280226996E16, 1.9987994582857286E-8, (double) 134217729, 0.0, (double) 134217729, 1.304E19, Double.NaN, (-0.010714690733195933));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 134217729;
      floatArray0[1] = (float) 134217729;
      floatArray0[2] = (float) 134217729;
      MathArrays.equals(floatArray0, floatArray0);
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      MathArrays.safeNorm(doubleArray2);
      MathArrays.distanceInf(doubleArray1, doubleArray0);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-3071.5712731093336);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-3071.5712731093336);
      doubleArray0[6] = 1.304E19;
      MathArrays.safeNorm(doubleArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 986;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.linearCombination(1.6566158030619603E7, 1636.46120836508, 1.304E19, (-1818.249199), 3.6027920058144436E16, 1.304E19, 343.2796216401, (-3071.5712731093336));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MathArrays.linearCombination(1109.6415537300154, 5.0, 1109.6415537300154, 5.0, (-0.16624882440418567), (-0.16624882440418567), (-0.16624882440418567), 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.032174644509064E-23;
      doubleArray0[1] = 5.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[0][5];
      MathArrays.checkNonNegative(longArray0);
      MathArrays.linearCombination(0.0, 5.0, (-3583.241), 0.0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-726.9809F);
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (-199.1F);
      floatArray0[5] = Float.NaN;
      floatArray0[6] = 622.34064F;
      floatArray0[7] = (-1.0F);
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      Integer integer0 = new Integer(2496);
      MathArrays.copyOf(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = 1.304E19;
      double double1 = (-3071.5712731093336);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-3071.5712731093336);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-3071.5712731093336);
      doubleArray0[6] = 1.304E19;
      MathArrays.safeNorm(doubleArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 986;
      longArray0[1] = (long) 986;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      long[] longArray0 = new long[3];
      longArray0[0] = 681L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.distance(doubleArray0, doubleArray1);
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.linearCombination(0.0, 0.0, 1.0, 7.668E-20);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 1414L;
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3.834E-20;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.copyOf(doubleArray1);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.copyOf(doubleArray0);
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distanceInf(doubleArray3, doubleArray1);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = 0L;
      longArray0[2] = (long) 3173;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 3173;
      longArray0[5] = 2986L;
      longArray0[6] = (long) 3173;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.scaleInPlace((-975.4), doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-314.72797F);
      floatArray0[1] = 0.0F;
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-3866.372F);
      MathArrays.equals(floatArray0, floatArray1);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MathArrays.linearCombination(2982.549499, 0.1428571343421936, 2982.549499, 0.1428571343421936);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 129);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 3779, 12);
      int[] intArray0 = new int[9];
      intArray0[0] = 167;
      intArray0[1] = 3779;
      intArray0[2] = 167;
      intArray0[3] = 167;
      intArray0[4] = 12;
      intArray0[5] = 167;
      intArray0[6] = 521;
      intArray0[7] = 1715;
      intArray0[8] = 3779;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 167;
      doubleArray0[1] = (double) 167;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 167;
      doubleArray0[4] = (double) 167;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      MathArrays.normalizeArray(doubleArray2, 167.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2719.389013880433;
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = 2719.389013880433;
      doubleArray1[5] = (-699.752306493906);
      doubleArray1[6] = 2719.389013880433;
      doubleArray1[7] = Double.NaN;
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray2, doubleArray2);
//      try { 
        MathArrays.normalizeArray(doubleArray3, 0.0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 1.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = (-2164.3853986308955);
      doubleArray0[5] = (double) Float.NaN;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1962.7501609015703);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.distance(doubleArray0, doubleArray1);
      MathArrays.copyOf(doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 18;
      intArray0[1] = 990;
      intArray0[2] = 12;
      MathArrays.copyOf(intArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MathArrays.linearCombination(2982.549499, 0.1428571343421936, 2982.549499, 0.1428571343421936);
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-9);
      int int1 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-9), 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1815.0;
      doubleArray0[1] = 299.9145951022041;
      doubleArray0[2] = (-1305.0);
      doubleArray0[3] = (-2212.1);
      double double0 = (-7.44321345601866E-11);
      doubleArray0[4] = (-7.44321345601866E-11);
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3.834E-20;
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1465);
      intArray0[1] = (-4343);
      intArray0[2] = 2;
      intArray0[3] = 3747;
      intArray0[4] = (-576);
      intArray0[5] = (-997);
      intArray0[6] = 2221;
      MathArrays.distance(intArray0, intArray0);
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 134217729;
      intArray0[1] = 336;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 336;
      doubleArray0[3] = 790.4326761527633;
      doubleArray0[4] = (double) 134217729;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2372.205);
      doubleArray0[1] = (-2064.41238623);
      doubleArray0[2] = (-2372.205);
      doubleArray0[3] = 36.46864087551028;
      doubleArray0[4] = 4.3466666666666665E18;
      doubleArray0[5] = (-2372.205);
      doubleArray0[6] = (-2372.205);
      doubleArray0[7] = 36.46864087551028;
      MathArrays.scaleInPlace(36.46864087551028, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not decreasing (-86,511.092 < -75,286.314)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3.834E-20;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.copyOf(doubleArray1);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      Integer integer0 = new Integer(134217729);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.scale((-2347.9253199), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = (-1107.9517576);
      double double1 = 0.0;
      MathArrays.linearCombination(446.7449915, 446.7449915, 446.7449915, (-1107.9517576), 0.0, 0.0);
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1103.723825437;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3104356.179855868;
      doubleArray0[3] = 3.6028797555837864E16;
      doubleArray0[4] = 0.10240991793021004;
      MathArrays.checkPositive(doubleArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1066.9353F;
      floatArray0[7] = 3706.83F;
      floatArray0[8] = (-1387.8467F);
      MathArrays.equals(floatArray0, (float[]) null);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 336;
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 57;
      intArray0[1] = 160;
      intArray0[2] = 182;
      intArray0[3] = (-1639);
      intArray0[4] = 1815;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 182;
      doubleArray0[1] = (double) 160;
      doubleArray0[2] = (double) 182;
      doubleArray0[3] = (double) 160;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.copyOf(doubleArray0, 286);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1639);
      floatArray0[1] = (float) 1815;
      floatArray0[2] = (float) 182;
      floatArray0[3] = (float) 182;
      floatArray0[4] = (float) 57;
      floatArray0[5] = (float) 160;
      floatArray0[6] = (float) 57;
      floatArray0[7] = (float) 182;
      floatArray0[8] = (float) 57;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1626.9842700109098);
      doubleArray0[1] = (-2064.41238623);
      doubleArray0[2] = (-1068.577);
      doubleArray0[3] = (-1626.9842700109098);
      doubleArray0[4] = (-1626.9842700109098);
      doubleArray0[5] = (-1068.577);
      doubleArray0[6] = (-2372.205);
      MathArrays.scaleInPlace((-1068.577), doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3.4028235E38F);
      floatArray0[1] = (-3.4028235E38F);
      floatArray0[2] = (-3.4028235E38F);
      floatArray0[3] = (-3.4028235E38F);
      floatArray0[4] = (-3.4028235E38F);
      floatArray0[5] = (-3.4028235E38F);
      floatArray0[6] = (-3.4028235E38F);
      float[] floatArray1 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      MathArrays.copyOf(doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-3.4028235E38F);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.distanceInf(doubleArray1, doubleArray2);
      Double[] doubleArray3 = new Double[5];
      doubleArray3[0] = (Double) (-3.4028234663852886E38);
      doubleArray3[1] = (Double) (-3.4028234663852886E38);
      doubleArray3[2] = (Double) (-3.4028234663852886E38);
      Double double0 = new Double((-3.4028235E38F));
      doubleArray3[3] = double0;
      doubleArray3[4] = (Double) (-3.4028234663852886E38);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination(8135124.0137624135, (double) doubleArray3[0], (double) doubleArray3[3], 0.8414709568023682, 3.4028234663852886E38, (double) doubleArray3[3]);
      MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      MathArrays.equals(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MathArrays.linearCombination(446.7449915, 446.7449915, 446.7449915, (-1107.9517576), 0.0, 0.0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      MathArrays.distanceInf(doubleArray2, doubleArray2);
      MathArrays.copyOf(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3.4028235E38F);
      floatArray0[1] = (-3.4028235E38F);
      floatArray0[2] = (-3.4028235E38F);
      floatArray0[3] = (-3.4028235E38F);
      floatArray0[4] = (-3.4028235E38F);
      floatArray0[5] = (-3.4028235E38F);
      floatArray0[6] = (-3.4028235E38F);
      float[] floatArray1 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection.values();
      double double0 = 0.0;
      MathArrays.linearCombination((double) (-3.4028235E38F), 0.0, 3369321.5378352674, (-493.901), (-0.010714690733195933), 9.99900732136849E14, Double.NaN, (double) (-3.4028235E38F));
      MathArrays.distance1(doubleArray0, doubleArray0);
//      try { 
        MathArrays.normalizeArray(doubleArray0, (-1459.3224));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3.4028235E38F);
      floatArray0[1] = (-3.4028235E38F);
      floatArray0[2] = (-3.4028235E38F);
      floatArray0[3] = (-3.4028235E38F);
      floatArray0[4] = (-3.4028235E38F);
      floatArray0[5] = (-3.4028235E38F);
      floatArray0[6] = (-3.4028235E38F);
      float[] floatArray1 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      MathArrays.copyOf(doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-3.4028235E38F);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.distanceInf(doubleArray1, doubleArray2);
      Field<FieldElement<Pair<Integer, Integer>>> field0 = null;
      int int0 = (-1);
      int int1 = 3173;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<FieldElement<Pair<Integer, Integer>>>) null, 3173);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 57;
      MathArrays.distance(intArray0, intArray0);
      int[] intArray1 = new int[5];
      intArray1[0] = 160;
      intArray1[1] = 160;
      intArray1[2] = 57;
      intArray1[3] = 160;
      intArray1[4] = 160;
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 134217729;
      int[] intArray1 = new int[4];
      intArray1[0] = 336;
      intArray1[1] = 182;
      intArray1[2] = 1815;
      intArray1[3] = (-1639);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray1, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1103.723825437;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3104356.179855868;
      doubleArray0[3] = 3.6028797555837864E16;
      doubleArray0[4] = 3.834E-20;
      MathArrays.checkPositive(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 656.19222;
      doubleArray0[1] = 59.0;
      doubleArray0[2] = (-514.18);
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      MathArrays.distanceInf(doubleArray2, doubleArray1);
      MathArrays.copyOf(doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 190);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination((-493.901), 1853.3043642611, 0.0, (-0.010714690733195933), (-152.6277867295812), (double) 190, 0.9974949359893799, 0.0);
      MathArrays.distance1(doubleArray2, doubleArray2);
//      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3168.57073;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-2074));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(568);
      integerArray0[2] = integer2;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 190);
      MathArrays.safeNorm(doubleArray0);
      long[] longArray0 = new long[22];
      longArray0[0] = 0L;
      longArray0[1] = (long) 190;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkNonNegative(longArray0);
      MathArrays.distance(doubleArray1, doubleArray1);
      MathArrays.checkNonNegative(longArray0);
      MathArrays.distance(doubleArray1, doubleArray1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "g|/DPsQ`X^}ZT<X";
      stringArray0[1] = "VY?R2VTiv[7A;0br(";
      stringArray0[2] = "x(/7@i~2/<CEQnNlZ";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 986;
      intArray0[1] = 1561;
      intArray0[2] = 681;
      intArray0[3] = 0;
      MathArrays.distance1(intArray0, intArray0);
      long[][] longArray0 = new long[6][3];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 681;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 986;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 681;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (long) 1561;
      MathArrays.linearCombination(1653.98536, (double) 0L, 1311.3136406, (double) 681);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3168.57073;
      int[] intArray0 = new int[3];
      intArray0[0] = 1076;
      intArray0[1] = (-1);
      intArray0[2] = 1076;
      int[] intArray1 = new int[4];
      intArray1[0] = 1076;
      intArray1[1] = 1076;
      intArray1[2] = 1076;
      intArray1[3] = (-1);
      MathArrays.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.copyOf(doubleArray1);
      MathArrays.ebeDivide(doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) (-1017.244F);
      doubleArray2[1] = (double) (-1017.244F);
      doubleArray2[2] = (double) (-1017.244F);
      MathArrays.safeNorm(doubleArray2);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 182;
      floatArray0[2] = (float) 182;
      floatArray0[3] = (float) 182;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) 182;
      floatArray0[6] = (float) 182;
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (float) 182;
      floatArray1[3] = 1.0F;
      floatArray1[4] = (-162.174F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 182;
      floatArray1[7] = 0.0F;
      MathArrays.equals(floatArray0, floatArray1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2047.929265283655;
      doubleArray0[1] = (double) 182.0F;
      doubleArray0[2] = (double) 0.0F;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 182.0F;
      doubleArray1[1] = (double) 1.0F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = 2047.929265283655;
      doubleArray1[6] = (double) (-162.174F);
      doubleArray1[7] = (double) 0.0F;
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathArrays.linearCombination((-2222.20138911), (-2222.20138911), (-2222.20138911), 0.0, 0.0, Double.NaN);
      float[] floatArray0 = new float[1];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection.values();
      long[] longArray0 = new long[8];
      Double[] doubleArray1 = new Double[8];
      Double double0 = new Double((-1L));
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) 0.0;
      MathArrays.linearCombination((double) 0L, (double) 0L, (double) doubleArray1[6], 2373.6029067668, (double) doubleArray1[0], 2320520.3047516677);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 986;
      intArray0[1] = 1561;
      intArray0[2] = 681;
      intArray0[3] = 0;
      MathArrays.distance1(intArray0, intArray0);
      long[][] longArray0 = new long[6][3];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 681;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 986;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 681;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (long) 1561;
      longArray2[1] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = 0L;
      longArray4[1] = (long) 986;
      longArray4[2] = (long) 1561;
      longArray4[3] = (long) 1561;
      longArray4[4] = (long) 986;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = (long) 0;
      longArray5[1] = (long) 681;
      longArray5[2] = (long) 681;
      longArray5[3] = (long) 681;
      longArray5[4] = (long) 681;
      longArray5[5] = (long) 681;
      longArray5[6] = (long) 0;
      longArray5[7] = (long) 986;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = (long) 986;
      longArray0[5] = longArray6;
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3.4028235E38F);
      floatArray0[1] = (-3.4028235E38F);
      floatArray0[2] = (-3.4028235E38F);
      floatArray0[3] = (-3.4028235E38F);
      floatArray0[4] = (-3.4028235E38F);
      floatArray0[5] = (-3.4028235E38F);
      floatArray0[6] = (-3.4028235E38F);
      float[] floatArray1 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      Double double0 = new Double((-3.4028235E38F));
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      doubleArray1[3] = double0;
      doubleArray1[4] = double0;
      doubleArray1[5] = double0;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      MathArrays.linearCombination((double) doubleArray1[1], (double) (-3.4028235E38F), 2373.6029067668, 1205.120023, 673.1, (-3966.539703304627));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathArrays.linearCombination((-2222.20138911), (-2222.20138911), (-2222.20138911), 0.0, 0.0, Double.NaN);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1017.244F);
      floatArray0[2] = (-1017.244F);
      floatArray0[3] = (-945.91425F);
      floatArray0[4] = 0.0F;
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-1017.244F);
      floatArray1[1] = 0.0F;
      MathArrays.equals(floatArray0, floatArray1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1017.244F);
      doubleArray0[1] = (double) (-1017.244F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 65;
      doubleArray0[5] = (double) (-945.91425F);
      doubleArray0[6] = (double) 0.0F;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2373.6029067668);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      double[] doubleArray2 = new double[2];
      doubleArray2[1] = 5633990.759011802;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double double0 = new Double(0.49999999999999994);
      Double[] doubleArray3 = new Double[3];
      doubleArray3[0] = (Double) (-2373.6029067668);
      Double double1 = new Double(2182.1417);
      doubleArray3[1] = double1;
      doubleArray3[2] = (Double) (-2373.6029067668);
      MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination((-2373.6029067668), 1773.29029379964, 1.304E19, (-1568.99814129999), 0.15, (-1568.99814129999));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.linearCombination((-0.49999999999999994), 0.0, 0.0, 0.0, 1242.87536, 0.0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = (-3183605296591799669L);
      longArray0[1] = 0L;
      longArray0[0] = 0L;
      longArray0[3] = 0L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray2 = new double[3];
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 0L;
      MathArrays.distance(doubleArray0, doubleArray2);
      MathArrays.ebeAdd(doubleArray0, doubleArray1);
      MathArrays.checkNonNegative(longArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-3183605296591799669L);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
//      try { 
        MathArrays.normalizeArray(doubleArray2, (-1823.162527));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(172);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(pair0);
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      int int0 = 38;
      int int1 = 1414;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 38, 1414);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Double>) null, 182, (-727));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = (-727);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Double>) null, 182, (-727));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1385.287F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1385.287F;
      doubleArray0[1] = (double) 1385.287F;
      doubleArray0[2] = (double) 1385.287F;
      doubleArray0[3] = (double) 1385.287F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection.values();
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      long[] longArray1 = new long[4];
      longArray1[0] = (-3134L);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-3134L);
      doubleArray1[1] = (double) (-3134L);
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 134217729;
      intArray0[1] = 336;
      MathArrays.distance(intArray0, intArray0);
      double[][] doubleArray0 = new double[8][7];
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[7];
      longArray1[0] = (long) 134217729;
      longArray1[1] = (long) 134217729;
      longArray1[2] = (long) 336;
      longArray1[3] = (long) 336;
      longArray1[4] = (long) 336;
      longArray1[5] = (long) 336;
      longArray1[6] = (long) 134217729;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (long) (-446);
      longArray2[1] = (long) 336;
      longArray2[2] = (long) 336;
      longArray2[3] = (long) 134217729;
      longArray2[4] = (long) 336;
      longArray2[5] = (long) 336;
      longArray2[6] = (long) 336;
      longArray2[7] = (long) (-446);
      longArray2[8] = (long) 336;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 4398046511103L;
      longArray3[1] = (long) 134217729;
      longArray3[2] = (long) 134217729;
      longArray3[3] = (long) 134217729;
      longArray3[4] = (long) 134217729;
      longArray0[2] = longArray3;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 9 while others have length 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 134217729;
      intArray0[1] = 336;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 336;
      doubleArray0[3] = (double) 134217729;
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[1] = doubleArray0;
      doubleArray1[0] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 134217729;
      longArray0[1] = (long) 336;
      longArray0[2] = (long) 336;
      longArray0[3] = (long) 336;
      longArray0[4] = (long) 336;
      longArray0[5] = (long) 336;
      longArray0[6] = (long) 134217729;
      longArray0[7] = (long) 336;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkNonNegative(longArray0);
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MathArrays.linearCombination((-2222.20138911), (-2222.20138911), (-2222.20138911), 0.0, 0.0, Double.NaN);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3.4028235E38F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3.4028235E38F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.copyOf(doubleArray0, 179);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 134217729;
      intArray0[1] = 336;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 336;
      doubleArray0[3] = (double) 134217729;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2064.41238623);
      doubleArray0[6] = (double) 336;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination(1299.9277748674076, 303.7117814, (-152.6277867295812), 3.834E-20, 1.4699556E-39, 1299.9277748674076, 1860.8602, (double) 134217729);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.4699556E-39;
      doubleArray1[1] = 2.49760824833866E11;
      doubleArray1[2] = (double) 134217729;
      doubleArray1[3] = 2.49760824833866E11;
      doubleArray1[4] = (double) 336;
      doubleArray1[5] = (double) 336;
      doubleArray1[6] = (-2064.41238623);
      doubleArray1[7] = (double) 134217729;
      doubleArray1[8] = 1299.9277748674076;
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.normalizeArray(doubleArray0, 3.834E-20);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 190);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 190;
      doubleArray2[1] = (double) 190;
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.safeNorm(doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1.34217729E8;
      doubleArray4[2] = 268.70057685088807;
      doubleArray4[3] = 1024.0;
      MathArrays.distance1(doubleArray4, doubleArray3);
//      try { 
        MathArrays.checkPositive(doubleArray4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 134217729;
      intArray0[0] = 134217729;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 134217729;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      Double double0 = new Double(134217729);
      Double[] doubleArray2 = new Double[7];
      doubleArray2[0] = (Double) 0.0;
      doubleArray2[1] = (Double) 0.0;
      doubleArray2[2] = (Double) 0.0;
      doubleArray2[3] = (Double) 0.0;
      doubleArray2[4] = (Double) 1.34217729E8;
      doubleArray2[5] = (Double) 0.0;
      doubleArray2[6] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 336;
      intArray0[1] = 336;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 336;
      doubleArray0[5] = (-2064.41238623);
      doubleArray0[6] = (double) 336;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 336;
      doubleArray1[1] = 644.185383;
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MathArrays.linearCombination((-2222.20138911), (-2222.20138911), (-2222.20138911), 0.0, 0.0, Double.NaN);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3.4028235E38F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3.4028235E38F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection.values();
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = (-742L);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[8];
      Double double0 = new Double((-1L));
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) (-3.4028234663852886E38);
      doubleArray1[2] = (Double) (-3.4028234663852886E38);
      doubleArray1[3] = (Double) (-3.4028234663852886E38);
      doubleArray1[4] = (Double) (-3.4028234663852886E38);
      doubleArray1[5] = (Double) (-3.4028234663852886E38);
      doubleArray1[6] = (Double) (-3.4028234663852886E38);
      doubleArray1[7] = (Double) (-3.4028234663852886E38);
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      MathArrays.linearCombination((double) (-742L), (double) (-742L), (double) doubleArray1[6], 2373.6029067668, (double) doubleArray1[0], 2320520.3047516677);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 134217729;
      intArray0[1] = 336;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 336;
      doubleArray0[3] = (double) 134217729;
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[1] = doubleArray0;
      doubleArray1[0] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 336;
      longArray0[2] = (long) 336;
      longArray0[3] = (long) 336;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 134217729;
      doubleArray2[1] = (double) 134217729;
      doubleArray2[2] = (double) 134217729;
      doubleArray2[3] = (double) 134217729;
      MathArrays.distance(doubleArray2, doubleArray0);
      MathArrays.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 134217730;
      intArray0[0] = 134217730;
      int int1 = 336;
      intArray0[1] = 336;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 134217730;
      doubleArray0[1] = (double) 336;
      doubleArray0[2] = (double) 336;
      doubleArray0[3] = (double) 134217730;
      doubleArray0[4] = (double) 134217730;
      doubleArray0[5] = (-2064.41238623);
      doubleArray0[7] = (double) 134217730;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.distance1(doubleArray0, doubleArray0);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,064.412 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MathArrays.linearCombination((-2222.20138911), (-2222.20138911), (-2222.20138911), 0.0, 0.0, Double.NaN);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3.4028235E38F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3.4028235E38F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection.values();
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = (-742L);
      longArray0[2] = 1023L;
      longArray0[3] = (-1L);
      longArray0[4] = 10000L;
      longArray0[5] = (-3183605296591799669L);
      int[] intArray0 = new int[2];
      intArray0[0] = 465;
      intArray0[1] = 16;
      MathArrays.copyOf(intArray0, 2);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -340,282,346,638,528,860,000,000,000,000,000,000,000 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3168.57073;
      doubleArray0[1] = 38.0;
      doubleArray0[2] = 656.19222;
      doubleArray0[3] = (-514.18);
      doubleArray0[4] = (-1411.8);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1411.8);
      doubleArray1[1] = 656.19222;
      doubleArray1[2] = (-1411.8);
      doubleArray1[3] = 656.19222;
      doubleArray1[4] = 38.0;
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      MathArrays.copyOf(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3.834E-20;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.copyOf(doubleArray1);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.distanceInf(doubleArray2, doubleArray2);
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<FieldElement<Pair<Integer, Integer>>>) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 160.25333825;
      doubleArray0[1] = (-2594.0027597);
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-348.2957301273);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(134217729);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 134217729;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 134217729;
      doubleArray0[2] = (double) 0;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      Double double0 = new Double(134217729);
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 1.34217729E8;
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 134217729;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 134217729;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.003;
      doubleArray0[6] = (double) 2493;
      doubleArray0[7] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 134217729;
      doubleArray1[1] = 0.003;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1414.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) 2493;
      doubleArray1[8] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray1);
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1523.32541);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 453;
      intArray0[1] = (-3814);
      intArray0[2] = (-3604);
      intArray0[3] = 134217729;
      intArray0[4] = 1524;
      intArray0[5] = 1068;
      intArray0[6] = 144;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.linearCombination(1770.279848796, 2398.5151537879, (double) 144, (-1523.32541));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 190);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 190;
      doubleArray2[1] = (double) 190;
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.safeNorm(doubleArray2);
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      double double0 = (-152.6277867295812);
      MathArrays.linearCombination(1949.3014, 0.0, (double) 190, (-152.6277867295812), (-152.6277867295812), 303.7117814, 268.70057685088807, 190.0);
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray3, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 190
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long[][] longArray0 = new long[4][2];
      long[] longArray1 = new long[8];
      longArray1[0] = 736L;
      longArray1[1] = 1023L;
      longArray1[2] = (-3647L);
      longArray1[3] = 1754L;
      longArray1[4] = 2147483665L;
      longArray1[5] = 1957L;
      longArray1[6] = 0L;
      longArray1[7] = 732L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 1754L;
      longArray2[1] = 1754L;
      longArray2[2] = 1023L;
      double double0 = 0.0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1957L;
      doubleArray0[1] = (double) 1754L;
      doubleArray0[2] = (double) 1754L;
      doubleArray0[3] = (double) 2147483665L;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 682;
      floatArray0[1] = (float) 682;
      floatArray0[2] = (float) 682;
      floatArray0[3] = (float) 682;
      floatArray0[4] = (float) 682;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection.values();
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 682;
      longArray0[1] = (long) 682;
      longArray0[2] = (long) 682;
      longArray0[3] = (long) 682;
      longArray0[4] = (long) 682;
      longArray0[5] = (long) 682;
      longArray0[6] = (long) 682;
      longArray0[7] = (long) 682;
      longArray0[8] = (long) 682;
      long[][] longArray1 = new long[0][8];
      MathArrays.checkRectangular(longArray1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MathArrays.linearCombination((-2222.20138911), (-2222.20138911), (-2222.20138911), 0.0, 0.0, Double.NaN);
      long[] longArray0 = new long[7];
      longArray0[0] = (-1788L);
      longArray0[1] = (-1L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1788L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (-2222.20138911);
      doubleArray0[3] = 0.0;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[5];
      int int0 = 72;
      Integer integer0 = new Integer(72);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(2144339455);
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(2144339455);
      integerArray0[4] = integer3;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 134217729;
      intArray0[1] = 336;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 336;
      doubleArray0[3] = (double) 134217729;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 3 and 4 are not increasing (134,217,729 > 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MathArrays.linearCombination((-2222.20138911), (-2222.20138911), (-2222.20138911), 0.0, 0.0, Double.NaN);
      long[] longArray0 = new long[7];
      longArray0[0] = (-1788L);
      longArray0[1] = (-1L);
      longArray0[2] = 251L;
      longArray0[3] = (-903L);
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2222.20138911);
      doubleArray0[1] = (double) (-903L);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1919020.0371956974;
      doubleArray0[4] = 2826.2585455121143;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 251L;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2373.6029067668);
      doubleArray0[1] = (-889.0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = 682;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 682;
      floatArray0[1] = (float) 682;
      floatArray0[2] = (float) 682;
      floatArray0[3] = (float) 682;
      floatArray0[4] = (float) 682;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection.values();
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 682;
      floatArray0[1] = (float) 682;
      floatArray0[2] = (float) 682;
      floatArray0[3] = (float) 682;
      floatArray0[4] = (float) 682;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection.values();
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 682;
      longArray0[1] = (long) 682;
      longArray0[2] = (long) 682;
      longArray0[3] = (long) 682;
      longArray0[4] = (long) 682;
      longArray0[5] = (long) 682;
      longArray0[6] = (long) 682;
      longArray0[7] = (long) 682;
      longArray0[8] = (long) 682;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkNonNegative(longArray0);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 134217729;
      intArray0[1] = 336;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 682;
      floatArray0[1] = (float) 682;
      floatArray0[2] = (float) 682;
      floatArray0[3] = (float) 682;
      floatArray0[4] = (float) 682;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection.values();
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 682;
      longArray0[1] = (long) 682;
      longArray0[2] = (long) 682;
      longArray0[3] = (long) 682;
      longArray0[4] = (long) 682;
      longArray0[5] = (long) 682;
      longArray0[6] = (long) 682;
      longArray0[7] = (long) 682;
      longArray0[8] = (long) 682;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 2354;
      intArray0[1] = 682;
      intArray0[2] = 682;
      MathArrays.copyOf(intArray0);
      MathArrays.linearCombination((double) 682.0F, 3.834E-20, 2.0217439756338078E-10, (-650.6293109436));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 682;
      floatArray0[1] = (float) 682;
      floatArray0[2] = (float) 682;
      floatArray0[3] = (float) 682;
      floatArray0[4] = (float) 682;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection.values();
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 682;
      longArray0[1] = (long) 682;
      longArray0[2] = (long) 682;
      longArray0[3] = (long) 682;
      longArray0[4] = (long) 682;
      longArray0[5] = (long) 682;
      long[][] longArray1 = new long[8][0];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      MathArrays.checkRectangular(longArray1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-889.0);
      doubleArray0[2] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2373.6029067668);
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.scale((-2373.6029067668), doubleArray1);
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray2, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1385.287F;
      MathArrays.linearCombination(1566.0023, 1566.0023, (double) 1385.287F, 1566.0023, 0.0, 1566.0023);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.2599210498948732;
      doubleArray0[1] = 1566.0023;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      int int0 = 38;
      int int1 = 1414;
      MathArrays.buildArray(field0, 38, 1414);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1414;
      doubleArray0[1] = (double) 38;
      doubleArray0[2] = (double) 1414;
      doubleArray0[3] = (double) 1414;
      doubleArray0[4] = (double) 1414;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (1,414 >= 38)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 134217729;
      intArray0[1] = 336;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 336;
      doubleArray0[3] = (double) 134217729;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2064.41238623);
      doubleArray0[6] = (double) 336;
      doubleArray0[7] = (double) 134217729;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      MathArrays.distance1(doubleArray0, doubleArray0);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[1];
      intArray0[0] = 2493;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray1, doubleArray1);
      MathArrays.copyOf(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 682);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false);
      double[] doubleArray3 = new double[9];
      doubleArray3[2] = 0.0;
      doubleArray3[1] = (double) 682;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (double) 682;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (double) 682;
      doubleArray3[7] = (double) 682;
      doubleArray3[8] = 0.0;
      MathArrays.safeNorm(doubleArray3);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection1, false);
      MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection1, false);
      MathArrays.linearCombination(303.7117814, 682.0, 1.0E-5, 682.0, 0.0, 0.0, 303.7117814, 1.0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 682;
      floatArray0[1] = (float) 682;
      floatArray0[2] = (float) 682;
      floatArray0[3] = (float) 682;
      floatArray0[4] = (float) 682;
      doubleArray3[3] = (double) 682;
      floatArray0[6] = (float) 682;
      floatArray0[7] = (float) 682;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
//      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 682
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-889.0);
      doubleArray0[2] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 218.0F;
      floatArray0[4] = 219.4F;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 1.0);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("+0jdp");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.+0jdp
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-524.5525);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = -0.0;
      doubleArray0[3] = 2353.7;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-277.46846007);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[0][7];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      MathArrays.copyOf(doubleArray1, 0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 134217729;
      intArray0[1] = 336;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 336;
      doubleArray0[3] = (double) 134217729;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-446));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1385.287F;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1385.287F;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2503);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.safeNorm(doubleArray2);
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination(0.0, 1.0, (-2354.3967294011168), 303.7117814, 1385.2869873046875, 1.0E-5, (-152.6277867295812), 5633990.759011802);
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 1385.287F;
      doubleArray3[1] = (double) 1385.287F;
      doubleArray3[2] = 1919020.0371956974;
      MathArrays.distance1(doubleArray0, doubleArray3);
      double[] doubleArray4 = new double[0];
//      try { 
        MathArrays.normalizeArray(doubleArray4, (-1357.499611));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 266;
      intArray0[1] = 0;
      intArray0[2] = 0;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 266;
      doubleArray0[1] = (double) 266;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 266;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][1];
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 266;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 230;
      intArray0[1] = 210;
      intArray0[2] = (-2451);
      intArray0[3] = 0;
      intArray0[4] = (-2456);
      intArray0[5] = 1672;
      intArray0[6] = 3301;
      intArray0[7] = 1937;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3301;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1937;
      doubleArray0[4] = (double) 3301;
      doubleArray0[5] = (double) 210;
      doubleArray0[6] = (double) (-2456);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) (-2456);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int1 == int0);
      
      double double0 = MathArrays.linearCombination((-2456.0), 210.0, (double) 3301, (double) 0);
      assertEquals((-515760.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 230;
      intArray0[1] = 210;
      intArray0[2] = (-2451);
      intArray0[3] = 0;
      intArray0[4] = (-2456);
      intArray0[5] = 1672;
      intArray0[6] = 3301;
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = 1414;
      MathArrays.buildArray(field0, 0, 1414);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1414;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1414;
      doubleArray0[3] = (double) 1414;
      doubleArray0[4] = (double) 1414;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (1,414 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 978.12344448782;
      doubleArray0[2] = 451.8;
      doubleArray0[3] = 1938.0;
      doubleArray0[4] = (-3460.0);
      doubleArray0[5] = (-737.29379);
      double[] doubleArray1 = new double[0];
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = 446.7449915;
      double double1 = (-1107.9517576);
      double double2 = 0.0;
      MathArrays.linearCombination(446.7449915, 446.7449915, 446.7449915, (-1107.9517576), 0.0, 0.0);
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 913;
      intArray0[1] = (-1770);
      intArray0[2] = 1;
      int[] intArray1 = new int[9];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = (-1770);
      intArray1[3] = 741;
      intArray1[4] = 1;
      intArray1[5] = 913;
      intArray1[6] = (-1770);
      intArray1[7] = 1;
      intArray1[8] = (-1770);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(2665.450430977849, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-4855);
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 761;
      int int1 = 0;
      intArray0[5] = 0;
      intArray0[6] = 1709;
      int int2 = 90;
      intArray0[7] = 90;
      intArray0[8] = (-1);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long[][] longArray0 = new long[4][2];
      long[] longArray1 = new long[8];
      longArray1[0] = 736L;
      longArray1[1] = 1023L;
      longArray1[2] = (-3647L);
      longArray1[3] = 1754L;
      longArray1[4] = 2147483647L;
      longArray1[5] = 1957L;
      longArray1[6] = 0L;
      longArray1[7] = 732L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 1754L;
      longArray2[1] = 1754L;
      longArray2[2] = 1023L;
      longArray2[3] = 1957L;
      longArray2[4] = 2147483647L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = 0L;
      longArray3[1] = 1023L;
      longArray3[2] = 1754L;
      longArray3[3] = (-3647L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = 0L;
      longArray0[3] = longArray4;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -3,647 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MathArrays.linearCombination((-2222.20138911), (-2222.20138911), (-2222.20138911), 0.0, 0.0, Double.NaN);
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[7];
      longArray1[0] = (-1788L);
      longArray1[1] = (-1L);
      longArray1[2] = 251L;
      longArray1[3] = (-903L);
      longArray1[4] = 1L;
      longArray1[5] = 1L;
      longArray1[6] = (-2068L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = 251L;
      longArray2[1] = 2147483647L;
      longArray2[2] = (-2068L);
      longArray2[3] = (-903L);
      longArray2[4] = 1L;
      longArray2[5] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = (-1788L);
      longArray3[1] = (-903L);
      longArray0[2] = longArray3;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 6 while others have length 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (double) 134217729;
      doubleArray0[2] = (double) 134217729;
      doubleArray0[3] = (double) 134217729;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1385.287F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1385.287F;
      doubleArray0[1] = (double) 1385.287F;
      doubleArray0[2] = (double) 1385.287F;
      doubleArray0[3] = (double) 1385.287F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection.values();
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      long[] longArray1 = new long[4];
      longArray1[0] = (-3134L);
      longArray1[1] = 1015L;
      longArray1[2] = 1533L;
      longArray1[3] = 2065L;
//      try { 
        MathArrays.checkNonNegative(longArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -3,134 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1929.5234);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.copyOf(doubleArray0);
      double[][] doubleArray1 = new double[0][2];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("A>m8oLmClHrRb");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.A>m8oLmClHrRb
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2614.155710001);
      doubleArray0[1] = (-2614.155710001);
      MathArrays.scaleInPlace((-2614.155710001), doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2614.155710001);
      doubleArray1[1] = 3125.301751731;
      doubleArray1[2] = (-2614.155710001);
      doubleArray1[3] = (-2614.155710001);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      MathArrays.ebeAdd(doubleArray1, doubleArray1);
//      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int1 = 2430;
      intArray0[2] = 2430;
      MathArrays.copyOf(intArray0);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 160.25333825;
      doubleArray0[1] = (-2594.0027597);
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-348.2957301273);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = new Double[5];
      doubleArray2[0] = (Double) 0.0;
      Double double0 = new Double(1298.631443);
      doubleArray2[1] = double0;
      doubleArray2[2] = (Double) (-2594.0027597);
      doubleArray2[3] = (Double) 3.141592653589793;
      doubleArray2[4] = (Double) 160.25333825;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 71;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = (-3228);
      intArray0[4] = 155;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 301;
      intArray0[8] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 155);
      assertEquals(155, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      int int0 = 2149;
      intArray0[1] = 2149;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 205;
      int int1 = (-3857);
      intArray0[4] = (-3857);
      intArray0[5] = (-2667);
      intArray0[6] = 0;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-3857));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 118.6939;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Pair<Integer, Integer>>) null, 1414, 1414);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = 1414;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0, 1414);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 682);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false);
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 682;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (double) 682;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (double) 682;
      doubleArray3[7] = (double) 682;
      doubleArray3[8] = 0.0;
      MathArrays.safeNorm(doubleArray3);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection1, false);
      MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection1, false);
      MathArrays.linearCombination(303.7117814, 682.0, 1.0E-5, 682.0, 0.0, 0.0, 303.7117814, 1.0);
      MathArrays.distance1(doubleArray3, doubleArray3);
//      try { 
        MathArrays.normalizeArray(doubleArray1, 1.0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-478.8704615);
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      MathArrays.checkOrder(doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-1550));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-524.5525);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = -0.0;
      doubleArray0[3] = 2353.7;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-277.46846007);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 487.27675002;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1528.1;
      doubleArray2[3] = 487.27675002;
      doubleArray2[4] = 487.27675002;
      doubleArray2[5] = 487.27675002;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 3.32;
      doubleArray1[1] = doubleArray2;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1908;
      intArray0[1] = 2460;
      intArray0[2] = 2836;
      intArray0[3] = (-632);
      intArray0[4] = (-1100);
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1100);
      doubleArray0[1] = (double) (-632);
      doubleArray0[2] = 1059.5865076519005;
      doubleArray0[3] = (double) (-632);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (-1,100 <= -632)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 38;
      intArray0[1] = 3098;
      intArray0[2] = (-2241);
      intArray0[3] = 36;
      intArray0[4] = 1;
      intArray0[5] = 134217729;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {38, 3098, (-2241), 36, 1, 134217729}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-95.343935403);
      doubleArray0[2] = (-1258.80854);
      doubleArray0[3] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 371.3726F;
      floatArray0[1] = 3273.328F;
      floatArray0[2] = (-2172.1846F);
      floatArray0[3] = 592.0312F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3281.7964F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-3281.7964F);
      doubleArray0[1] = (double) (-3281.7964F);
      doubleArray0[2] = (double) (-3281.7964F);
      doubleArray0[3] = (double) (-3281.7964F);
      doubleArray0[4] = 596.078;
      doubleArray0[5] = (double) (-3281.7964F);
      doubleArray0[6] = (double) (-3281.7964F);
      doubleArray0[7] = (double) (-3281.7964F);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-2284));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = MathArrays.scale(20.0, doubleArray0);
      double[][] doubleArray2 = new double[0][2];
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2373.6029067668);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(5633990.759011802, double0, 0.01);
      assertArrayEquals(new double[] {5633990.759011802}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-238.5817);
      doubleArray0[4] = 1300.403231481;
      doubleArray0[5] = (-111.11558388932);
      doubleArray0[6] = 2542.2;
      doubleArray0[7] = (-1867.421);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 0.0, (-238.5817), 1300.403231481, (-111.11558388932), 2542.2, (-1867.421)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = null;
//      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 118.6939;
      doubleArray0[1] = (-578.9741551989597);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 923.3280980771;
      doubleArray0[4] = (-1351.6);
      doubleArray0[5] = 20.0;
      doubleArray0[6] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-1305.757176);
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 230;
      intArray0[1] = 210;
      intArray0[2] = (-2451);
      intArray0[3] = 0;
      intArray0[4] = (-2456);
      intArray0[5] = 1672;
      intArray0[6] = 3301;
      intArray0[7] = 1937;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3301;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1937;
      doubleArray0[4] = (double) 3301;
      doubleArray0[5] = (double) 210;
      doubleArray0[6] = (double) 1937;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) (-2456);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int1 == int0);
      
      double[] doubleArray2 = MathArrays.scale(3301.0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 3.5969679901E10, 0.0, 1.2385249669E10, 3.5969679901E10, 1.455741E8, 1.2385249669E10, 0.0, 1.9911420736E10}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray1, (-2456.0));
      assertArrayEquals(new double[] {-0.0, (-756.5634495471936), -0.0, (-260.5034917984181), (-756.5634495471936), (-3.0619133549105118), (-260.5034917984181), -0.0, (-418.8042039538661)}, doubleArray3, 0.01);
      
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray0, 3301);
      assertArrayEquals(new double[] {0.0, 1324.0098420413124, 0.0, 776.9182260024302, 1324.0098420413124, 84.22964763061968, 776.9182260024302, 0.0, (-985.0857837181045)}, doubleArray4, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 266;
      intArray0[1] = 0;
      intArray0[2] = 0;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 266;
      doubleArray0[1] = (double) 266;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 266;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][1];
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 266;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (-3940.4620602);
      doubleArray0[2] = 978.94;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-3940.4620602);
      doubleArray1[1] = (-3940.4620602);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-597);
      intArray0[1] = (-2632);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 1076;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = (-1);
      intArray0[1] = (-1);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MathArrays.OrderDirection.valueOf("DECREASING");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1558.3787);
      doubleArray0[1] = (-1558.3787);
      doubleArray0[2] = (-1558.3787);
      doubleArray0[3] = (-1558.3787);
      doubleArray0[4] = (-1558.3787);
      doubleArray0[5] = (-1558.3787);
      doubleArray0[6] = (-1558.3787);
      doubleArray0[7] = (-1558.3787);
      MathArrays.scaleInPlace((-1558.3787), doubleArray0);
      assertArrayEquals(new double[] {2428544.17261369, 2428544.17261369, 2428544.17261369, 2428544.17261369, 2428544.17261369, 2428544.17261369, 2428544.17261369, 2428544.17261369}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-889.0);
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 218.0F;
      floatArray0[4] = 219.4F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 790321.0, 0.0}, doubleArray1, 0.01);
  }
}
