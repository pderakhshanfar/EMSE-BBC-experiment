/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 15:20:39 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-462.41341665987);
      doubleArray0[1] = 4117.8578797;
      doubleArray0[2] = (-229.913109553);
      doubleArray0[3] = 0.07073719799518585;
      doubleArray0[4] = 0.07073719799518585;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 1045.818;
      doubleArray0[7] = (-4.9E-324);
      doubleArray0[8] = 1.33261739860778E15;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-462.41341665987), 4117.8578797, (-229.913109553), 0.07073719799518585, 0.07073719799518585, 3.834E-20, 1045.818, (-4.9E-324), 1.33261739860778E15}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.3303841307491407E-32), 1.1847261732595433E-31, (-6.614703236984271E-33), 2.0351408993756866E-36, 2.0351408993756866E-36, 1.1030589886720438E-54, 3.0088652723396437E-32, -0.0, 3.833999999987135E-20}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-462.41341665987), 4117.8578797, (-229.913109553), 0.07073719799518585, 0.07073719799518585, 3.834E-20, 1045.818, (-4.9E-324), 1.33261739860778E15}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.3303841307491407E-32), 1.1847261732595433E-31, (-6.614703236984271E-33), 2.0351408993756866E-36, 2.0351408993756866E-36, 1.1030589886720438E-54, 3.0088652723396437E-32, -0.0, 3.833999999987135E-20}, doubleArray1, 0.01);
      assertEquals(3.833999999987135E-20, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3918.36F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-3918.36F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 3684.562538573, 0.0, 3684.562538573, 0.0, 578.600377197166, 436.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      long[][] longArray0 = new long[9][9];
      long[] longArray1 = new long[9];
      longArray1[0] = 1L;
      longArray1[1] = 2008L;
      longArray1[2] = (-3370L);
      longArray1[3] = (-2301L);
      longArray1[4] = 192L;
      longArray1[5] = 0L;
      longArray1[6] = 1L;
      longArray1[7] = (-1L);
      longArray1[8] = (-830L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-2301L);
      longArray2[1] = 1L;
      longArray2[2] = 2008L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 2008L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 2008L;
      longArray4[1] = 1L;
      longArray4[2] = 2305L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = 192L;
      longArray5[1] = (-3370L);
      longArray5[2] = (-830L);
      longArray5[3] = 1L;
      longArray5[4] = 1L;
      longArray5[5] = (-3370L);
      longArray5[6] = (-830L);
      longArray5[7] = 1L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[4];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = (-3370L);
      longArray6[1] = 1L;
      longArray6[2] = 0L;
      longArray6[3] = (-3370L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[3];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = (-1377L);
      longArray7[1] = (-2301L);
      longArray7[2] = (-830L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[2];
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray7));
      
      longArray8[0] = 2305L;
      longArray8[1] = (-1L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[6];
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray6));
      
      longArray9[0] = (-1377L);
      longArray9[1] = (-2301L);
      longArray9[2] = 1L;
      longArray9[3] = 1275L;
      longArray9[4] = 192L;
      longArray9[5] = (-830L);
      longArray0[8] = longArray9;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 3 while others have length 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-3597.79F);
      floatArray0[3] = (-9.065F);
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-3597.79F), (-9.065F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1678;
      intArray0[1] = 1939;
      intArray0[2] = 810;
      intArray0[3] = 134217729;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1678, 1939, 810, 134217729}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-3597.79F);
      doubleArray0[1] = (double) (-3597.79F);
      doubleArray0[2] = (double) 1678;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 1678;
      doubleArray0[6] = (double) 0.5F;
      doubleArray0[7] = 1.801439877791744E16;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-3597.7900390625), (-3597.7900390625), 1678.0, 0.0, 0.0, 1678.0, 0.5, 1.801439877791744E16}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {1678, 1939, 810, 134217729}, intArray1);
      assertArrayEquals(new int[] {1678, 1939, 810, 134217729}, intArray0);
      assertNotNull(intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][6];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1854);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1854)}, intArray0);
      assertArrayEquals(new int[] {(-1854)}, intArray1);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1854);
      doubleArray0[1] = (double) (-1854);
      double double0 = 1035.44191349;
      doubleArray0[2] = 1035.44191349;
      doubleArray0[3] = (double) (-1854);
      doubleArray0[4] = (double) (-1854);
      doubleArray0[5] = (double) (-1854);
      doubleArray0[6] = (double) (-1854);
      doubleArray0[7] = (double) (-1854);
      doubleArray0[8] = (double) (-1854);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1854.0), (-1854.0), 1035.44191349, (-1854.0), (-1854.0), (-1854.0), (-1854.0), (-1854.0), (-1854.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      int int0 = 2051;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 2051);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2051, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1854.0), (-1854.0), 1035.44191349, (-1854.0), (-1854.0), (-1854.0), (-1854.0), (-1854.0), (-1854.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, (-3540));
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-562.288528263);
      doubleArray0[1] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-562.288528263), 1.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-562.288528263), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {316168.3890161705, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-562.288528263), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {316168.3890161705, 1.0}, doubleArray1, 0.01);
      assertEquals((-1.7777785714318618E8), double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[][] doubleArray2 = new double[8][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray1;
      doubleArray2[7] = doubleArray1;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1512.98;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 17.97852;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.44888888888888883E18;
      doubleArray0[5] = (-388.3456);
      doubleArray0[6] = 918.54;
      doubleArray0[7] = (-0.16624879837036133);
      doubleArray0[8] = 465.54125697;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1512.98, Double.NaN, 17.97852, 1.304E19, 1.44888888888888883E18, (-388.3456), 918.54, (-0.16624879837036133), 465.54125697}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1512.98, Double.NaN, 17.97852, 1.304E19, 1.44888888888888883E18, (-388.3456), 918.54, (-0.16624879837036133), 465.54125697}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-388.3456);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 1.44888888888888883E18;
      doubleArray1[3] = 918.54;
      doubleArray1[4] = 1.44888888888888883E18;
      doubleArray1[5] = Double.NaN;
      doubleArray0[7] = 2.7190832441164304E7;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1512.98, Double.NaN, 17.97852, 1.304E19, 1.44888888888888883E18, (-388.3456), 918.54, 2.7190832441164304E7, 465.54125697}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-388.3456), Double.NaN, 1.44888888888888883E18, 918.54, 1.44888888888888883E18, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean1);
      
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1005.76115);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1457840.1444453783;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 3.9264181159553455E15;
      doubleArray0[5] = (-1851.215676174);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1005.76115), 1.304E19, 1457840.1444453783, 3.834E-20, 3.9264181159553455E15, (-1851.215676174)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1005.76115), 1.304E19, 1457840.1444453783, 3.834E-20, 3.9264181159553455E15, (-1851.215676174)}, doubleArray0, 0.01);
      assertEquals(1.7004163083351632E38, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 607);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(132);
      assertNotNull(integer0);
      assertEquals(132, (int)integer0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 20, 20);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 20, 20);
      assertEquals(20, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-2844.3711533678);
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 743.13;
      doubleArray0[5] = (-1692.254672091);
      doubleArray0[6] = 743.13;
      doubleArray0[7] = (-2283.8408);
      double[][] doubleArray1 = new double[4][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 610.695;
      doubleArray0[1] = 0.1666666505023083;
      doubleArray0[2] = (-237.92);
      doubleArray0[3] = 3090.70594558643;
      doubleArray0[4] = (-847.0301228716997);
      doubleArray0[5] = 752.55;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (-4.9E-324);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {610.695, 0.1666666505023083, (-237.92), 3090.70594558643, (-847.0301228716997), 752.55, Double.NaN, (-4.9E-324)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1076.921705971;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1076.921705971, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1076.921705971, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1076.921705971, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1076.921705971;
//      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NEGATIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1225.18);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 3.26E18;
      doubleArray0[3] = 3.26E18;
      doubleArray0[4] = 1076.921705971;
      doubleArray0[5] = 3.26E18;
      doubleArray0[6] = 1076.921705971;
      doubleArray0[7] = 3.26E18;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1225.18), Double.NEGATIVE_INFINITY, 3.26E18, 3.26E18, 1076.921705971, 3.26E18, 1076.921705971, 3.26E18, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1225.18), Double.NEGATIVE_INFINITY, 3.26E18, 3.26E18, 1076.921705971, 3.26E18, 1076.921705971, 3.26E18, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2146899138);
      intArray0[1] = (-1721);
      intArray0[2] = (-1073741824);
      intArray0[3] = (-1755);
      intArray0[4] = 2183;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1755);
      intArray1[1] = (-1721);
      intArray1[2] = (-1755);
      intArray1[3] = (-1755);
      intArray1[4] = (-1073741824);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1755), (-1721), (-1755), (-1755), (-1073741824)}, intArray1);
      assertArrayEquals(new int[] {(-2146899138), (-1721), (-1073741824), (-1755), 2183}, intArray0);
      assertEquals((-585837), int0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1225.18), Double.NEGATIVE_INFINITY, 3.26E18, 3.26E18, 1076.921705971, 3.26E18, 1076.921705971, 3.26E18, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = new double[0][3];
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1225.18), Double.NEGATIVE_INFINITY, 3.26E18, 3.26E18, 1076.921705971, 3.26E18, 1076.921705971, 3.26E18, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.4794255495071411;
      doubleArray0[0] = 0.4794255495071411;
      double double1 = 3483.0;
      doubleArray0[1] = 3483.0;
      doubleArray0[2] = 1.304E19;
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1955.2357333411;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-26.2);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 1076.921705971;
      doubleArray0[6] = 3.26E18;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1955.2357333411, 0.0, 3.834E-20, (-26.2), Double.NEGATIVE_INFINITY, 1076.921705971, 3.26E18}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1955.2357333411, 0.0, 3.834E-20, (-26.2), Double.NEGATIVE_INFINITY, 1076.921705971, 3.26E18}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1431655765;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1955.2357333411, 0.0, 3.834E-20, (-26.2), Double.NEGATIVE_INFINITY, 1076.921705971, 3.26E18}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1431655765, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double2, 0.01);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, -\u221E at index 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1955.2357333411;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-26.2);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 1076.921705971;
      doubleArray0[6] = 3.26E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1955.2357333411, 0.0, 3.834E-20, (-26.2), Double.NEGATIVE_INFINITY, 1076.921705971, 3.26E18}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1955.2357333411, 0.0, 3.834E-20, (-26.2), Double.NEGATIVE_INFINITY, 1076.921705971, 3.26E18}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1955.2357333411, 0.0, 3.834E-20, (-26.2), Double.NEGATIVE_INFINITY, 1076.921705971, 3.26E18}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1431655765;
      intArray0[1] = 2032;
      intArray0[2] = 33;
      intArray0[3] = (-454);
      intArray0[4] = (-1166);
      intArray0[5] = 2643;
      intArray0[6] = 2;
      intArray0[7] = 2730;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1431655765, 2032, 33, (-454), (-1166), 2643, 2, 2730}, intArray0);
      assertEquals(0.0, double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][9];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3.834E-20;
      doubleArray2[1] = (double) 2032;
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 2730;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3.834E-20;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) (-454);
      doubleArray3[3] = (double) (-1166);
      doubleArray3[4] = (-26.2);
      doubleArray3[5] = (double) 1431655765;
      doubleArray3[6] = 3.834E-20;
      doubleArray1[5] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 33;
      doubleArray1[6] = doubleArray4;
      doubleArray1[7] = doubleArray0;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 20.0}, doubleArray0, 0.01);
      assertEquals(20.0, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 20.0;
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 20.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 40.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 20.0;
      doubleArray3[1] = 20.0;
      doubleArray3[2] = 20.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(7, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {20.0, 20.0, 20.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2087831324, 2087831324);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[17];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(17, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      double double1 = new Double(0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(17, intArray0.length);
      assertEquals(0, int0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(17, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 2532.0;
      doubleArray0[2] = 1330.62518;
      doubleArray0[3] = (-96.8);
      doubleArray0[4] = (-162.8112757425);
      doubleArray0[5] = 5067515.8246505745;
      doubleArray0[6] = 1399.4343581311473;
      doubleArray0[7] = 4676292.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, 2532.0, 1330.62518, (-96.8), (-162.8112757425), 5067515.8246505745, 1399.4343581311473, 4676292.0}, doubleArray0, 0.01);
      assertEquals(1.304E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1738.08194508354);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.25;
      doubleArray0[3] = (-4701.219287094756);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1738.08194508354), Double.NaN, 1.25, (-4701.219287094756)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2015.2407148476));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1738.08194508354), Double.NaN, 1.25, (-4701.219287094756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-544.0549282936892), Double.NaN, 0.3912753724246439, (-1471.5770619263355)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{ZoFqWu:ROq";
      stringArray0[1] = "%HQF";
      stringArray0[2] = "";
      stringArray0[3] = " EcvP{'W:#?#hcF";
      stringArray0[4] = "7O?aV&@e`I9f{u";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.scale((-626.5171798216), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1738.08194508354), Double.NaN, 1.25, (-4701.219287094756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1088938.1985325806, Double.NaN, (-783.1464747770001), 2945394.6494735195}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-627.0);
      doubleArray0[1] = 1469.2491089808777;
      doubleArray0[2] = 848.50109;
      doubleArray0[3] = 1805.8890380859375;
      doubleArray0[4] = (-1260.4686490486);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-627.0), 1469.2491089808777, 848.50109, 1805.8890380859375, (-1260.4686490486)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {393129.0, (-1842438.3826620206), 1094672.5773811033, 228734.0871438412, 7607183.505890329, (-639287.244556033), 1122217.1726218238, (-4552533.032335714), 1588781.2152344026}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3084.94396039;
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = (-1504);
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-306.2);
      doubleArray1[1] = (-2040.16);
      doubleArray1[2] = 0.3333333134651184;
      doubleArray1[3] = 1261.53727539972;
      doubleArray1[4] = 1861.876897315;
      doubleArray1[5] = (-475.558510861);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-306.2), (-2040.16), 0.3333333134651184, 1261.53727539972, 1861.876897315, (-475.558510861)}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long[][] longArray0 = new long[5][2];
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.625;
      doubleArray0[3] = (double) 0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.625, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-3007.0903), 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2317.062222472525;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1504);
      floatArray0[1] = (float) (-1504);
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1504.0F), (-1504.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1504);
      intArray0[1] = (-1504);
      intArray0[2] = (-1504);
      intArray0[3] = (-1504);
      intArray0[4] = (-1504);
      intArray0[5] = (-1504);
      intArray0[6] = (-1504);
      intArray0[7] = (-1504);
      intArray0[8] = (-1504);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1504), (-1504), (-1504), (-1504), (-1504), (-1504), (-1504), (-1504), (-1504)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1504);
      longArray0[1] = (long) (-1504);
      longArray0[2] = (long) (-1504);
      longArray0[3] = (long) (-1504);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,504 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1402.9057);
      doubleArray2[1] = 0.0;
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1402.9057), 0.0}, doubleArray2, 0.01);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1318.736075595835;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      MathArrays.scaleInPlace(0.11111095942313305, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 146.52603058535055, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 146.52603058535055, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Field<Double> field1 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field1, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 871;
      intArray0[2] = 871;
      intArray0[3] = 0;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 2147483646;
      intArray1[4] = 0;
      intArray1[5] = 871;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 871, 871, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 2147483646, 0, 871}, intArray1);
      assertEquals(2147483646, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 134217704;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {134217704, 0, 0}, intArray0);
      assertEquals(0, int0);
      
      double[][] doubleArray0 = new double[1][4];
      doubleArray0[0] = null;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray0[0], (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-128));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-485L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1429L;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.linearCombination((-38.759), 114.0, (-761.62245), 0.0, (double) 0L, (double) 0.0F);
      assertEquals((-4418.526), double0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1019.8;
      doubleArray0[3] = 3960.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2108.0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 3.834E-20, 1019.8, 3960.0, 0.0, (-2108.0)}, doubleArray0, 0.01);
      assertEquals(4600.571381904643, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(2566.501, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 3.834E-20, 1019.8, 3960.0, 0.0, (-2108.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2566.501), 9.839964834E-17, 2617317.7198, 1.016334396E7, 0.0, (-5410184.108)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3.834E-20, 1019.8, 3960.0, 0.0, (-2108.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.scale(0.0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3.834E-20, 1019.8, 3960.0, 0.0, (-2108.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2566.501), 9.839964834E-17, 2617317.7198, 1.016334396E7, 0.0, (-5410184.108)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0, 0.0, -0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 157.70567F;
      floatArray0[2] = (-2803.2212F);
      floatArray0[3] = (-559.9F);
      floatArray0[4] = (-2408.5F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 2562.46F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 157.70567F, (-2803.2212F), (-559.9F), (-2408.5F), 0.0F, 0.0F, 2562.46F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.scaleInPlace((-756.98503947), doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[8];
      int int0 = 134217729;
      int int1 = (-694);
      intArray0[2] = (-694);
      int int2 = (-4673);
      intArray0[3] = (-4673);
      intArray0[4] = 129;
      int int3 = 94;
      intArray0[5] = 94;
      int int4 = (-1568);
      intArray0[6] = (-1568);
      int int5 = 1570;
      intArray0[7] = 1570;
      int int6 = MathArrays.distance1(intArray0, intArray0);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-694), (-4673), 129, 94, (-1568), 1570}, intArray0);
      assertEquals(0, int6);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-694);
      intArray1[1] = 134217729;
      intArray1[2] = (-1568);
      intArray1[3] = (-4673);
      intArray1[4] = (-4673);
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = (-485L);
      longArray0[0] = (-485L);
      long long1 = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.scale((-485L), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = (-1814.6623799880092);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1814.6623799880092);
      doubleArray0[1] = (-1814.6623799880092);
      doubleArray0[2] = (-1814.6623799880092);
      doubleArray0[3] = (-1814.6623799880092);
      doubleArray0[4] = (-1814.6623799880092);
      MathArrays.scaleInPlace((-1814.6623799880092), doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {3292999.553343746, 3292999.553343746, 3292999.553343746, 3292999.553343746, 3292999.553343746}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3292999.553343746, 3292999.553343746, 3292999.553343746, 3292999.553343746, 3292999.553343746}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.084384605832211E13, 2.168769211664422E13, 3.253153817496633E13, 4.337538423328844E13, 5.421923029161055E13, 4.337538423328844E13, 3.253153817496633E13, 2.168769211664422E13, 1.084384605832211E13}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = (-1504);
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-1.0F);
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.checkOrder(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-3726);
      intArray0[1] = (-3726);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-3726), (-3726)}, intArray0);
      assertEquals(0, int0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-3726);
      intArray1[3] = (-3726);
      intArray1[4] = 0;
      intArray1[5] = (-3726);
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 1090;
      intArray2[2] = (-3726);
      intArray2[3] = 0;
      intArray2[4] = (-3726);
      intArray2[5] = (-3726);
      intArray2[6] = 0;
      int int1 = MathArrays.distance1(intArray1, intArray2);
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(6, intArray1.length);
      assertEquals(7, intArray2.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, (-3726), (-3726), 0, (-3726)}, intArray1);
      assertArrayEquals(new int[] {0, 1090, (-3726), 0, (-3726), (-3726), 0}, intArray2);
      assertEquals(8542, int1);
      
      int int2 = MathArrays.distanceInf(intArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {(-3726), (-3726)}, intArray0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-313.6784F);
      floatArray0[3] = 705.3425F;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 705.3425F;
      floatArray1[1] = (-313.6784F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-1.0F);
      floatArray1[4] = 705.3425F;
      floatArray1[5] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY, (-1.0F), (-313.6784F), 705.3425F, Float.NaN, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {705.3425F, (-313.6784F), 0.0F, (-1.0F), 705.3425F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.checkOrder(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[3] = 0;
      intArray0[1] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.checkOrder(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double double1 = 2469.4045816;
//      try { 
        MathArrays.normalizeArray(doubleArray1, 2469.4045816);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-907.31025638331);
      doubleArray0[1] = (-1883.376317279882);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-907.31025638331), (-1883.376317279882)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-58.8F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {Float.NaN, (-58.8F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][6];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-1883.376317279882), (-907.31025638331)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 1;
      intArray0[2] = 10;
      intArray0[3] = 1148;
      intArray0[4] = 260;
      intArray0[5] = 5172;
      intArray0[6] = 1073;
      intArray0[7] = (-123);
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-128));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2090;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 2090, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2090;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2090L}, longArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 2090, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 2090, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.008333333333333333;
      doubleArray1[1] = 1.34217729E8;
      doubleArray1[2] = (-2238.1);
      doubleArray1[3] = (-1230.23403603004);
      doubleArray1[4] = (-1371.827883057012);
//      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.convolve(doubleArray1, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.convolve(doubleArray1, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[3] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1294;
      intArray0[3] = 1294;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (double) 1294;
      doubleArray0[2] = (double) 1294;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1294;
      doubleArray0[6] = (double) 1294;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 1294.0, 1294.0, 3.834E-20, 0.0, 1294.0, 1294.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-139.36507933);
      doubleArray2[1] = 3.834E-20;
      doubleArray2[2] = 3.834E-20;
      doubleArray2[3] = 0.031;
      doubleArray2[4] = (double) 1294;
      doubleArray2[5] = 3.834E-20;
      double double0 = MathArrays.distance(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(6, doubleArray2.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-139.36507933), 3.834E-20, 3.834E-20, 0.031, 1294.0, 3.834E-20}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 1294.0, 1294.0, 3.834E-20, 0.0, 1294.0, 1294.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1301.4832408823622, double0, 0.01);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 1294;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 1294;
      boolean boolean1 = MathArrays.equals(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 1294.0, 1294.0, 3.834E-20, 0.0, 1294.0, 1294.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1294.0, 0.0, 0.0, 1294.0}, doubleArray3, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double double1 = (-1659.70511);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1659.70511);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.34217729E8;
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[6];
      intArray0[0] = 17;
      intArray0[1] = (-316);
      intArray0[2] = 2711;
      intArray0[3] = 1068;
      intArray0[4] = 1633;
      intArray0[5] = 42;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1068;
      intArray1[1] = 17;
      intArray1[2] = 17;
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "##(=lGH'VoA.";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray1, doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 183.06096818552385;
      doubleArray0[1] = 183.06096818552385;
      doubleArray0[2] = 183.06096818552385;
      doubleArray0[3] = 183.06096818552385;
      doubleArray0[4] = 183.06096818552385;
      doubleArray0[5] = 183.06096818552385;
      MathArrays.scaleInPlace(183.06096818552385, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {33511.31807302137, 33511.31807302137, 33511.31807302137, 33511.31807302137, 33511.31807302137, 33511.31807302137}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(33511.31807302137, (-761.2501458773362), 33511.31807302137, 33511.31807302137, 33511.31807302137, (-1477.7598457633023), (-748.9471), 33511.31807302137);
      assertEquals(1.0228780585046995E9, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(3898.0, 1.304E19, 0.0, 33511.31807302137, 0.07073719799518585, (-333.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5.082992E22, double1, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {33511.31807302137, 33511.31807302137, 33511.31807302137, 33511.31807302137, 33511.31807302137, 33511.31807302137}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {33511.31807302137, 33511.31807302137, 33511.31807302137, 33511.31807302137, 33511.31807302137, 33511.31807302137}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("", (Integer) null);
      assertNull(integer2);
      
      integerArray0[2] = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean1);
      
      double[][] doubleArray1 = new double[8][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.07073719799518585;
      doubleArray2[1] = (-761.2501458773362);
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 183.06096818552385;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) int0;
      doubleArray3[3] = 3898.0;
      doubleArray3[4] = 183.06096818552385;
      doubleArray3[5] = 4675922.25680941;
      doubleArray3[6] = (-761.2501458773362);
      doubleArray1[6] = doubleArray3;
      doubleArray1[7] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[3] = 0;
      intArray0[1] = 0;
      intArray0[3] = 1294;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1294;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 1294;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) 1294;
      floatArray0[5] = (float) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1294.0F, 0.0F, 1294.0F, 1.0F, 1294.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 1}, intArray0);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 1}, intArray1);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (-1836.87F);
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, 1.0F, 0.0F, 1.0F, (-1836.87F)}, floatArray0, 0.01F);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2.7936358F;
      floatArray0[1] = 2.7936358F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2.7936358F, 2.7936358F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 1722;
      intArray0[2] = (-1442);
      intArray0[3] = 18;
      intArray0[4] = (-1334);
      intArray0[5] = 2;
      intArray0[6] = (-2103);
      intArray0[7] = 2986;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {134217729, 1722, (-1442), 18, (-1334), 2, (-2103), 2986}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1009;
      intArray0[1] = 134217729;
      intArray0[2] = 1592;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3513.7);
      MathArrays.scaleInPlace((-3513.7), doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.234608769E7}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3513.7);
      doubleArray1[1] = (-3513.7);
      doubleArray1[2] = (-3513.7);
      doubleArray1[3] = (-3513.7);
      doubleArray1[4] = (-3513.7);
      double double0 = MathArrays.linearCombination((-3513.7), (-3513.7), (-3513.7), 1.234608769E7, 1.56816E7, (-3513.7), 8787296.778541643, 8787296.778541643);
      assertEquals(7.711811613401967E13, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-2534.64), 2808.852, 255.4290888, (-3513.7), (-109.964), 1.304E19);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.433930560000008E21), double1, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.234608769E7}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.234608769E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3513.7), (-3513.7), (-3513.7), (-3513.7), (-3513.7), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.234608769E7}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
//      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[3] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1294;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 1294}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.checkOrder(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 957;
      intArray0[1] = (-3018);
      intArray0[2] = 3;
      intArray0[3] = 4345;
      intArray0[4] = 2;
      intArray0[5] = 1321;
      intArray0[6] = 3481;
      intArray0[7] = 88;
      intArray0[8] = 215;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {957, (-3018), 3, 4345, 2, 1321, 3481, 88, 215}, intArray0);
      assertEquals(0.0, double1, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 957;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {957L}, longArray0);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[3] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1294;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 1294}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, (double[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-485L);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2846);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2846)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[9];
      double double0 = 4.3466666666666665E18;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[4][6];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 607);
      assertEquals(607, objectArray0.length);
      assertNotNull(objectArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1523), (-1523));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = (-3513.7);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3513.7);
      MathArrays.scaleInPlace((-3513.7), doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.234608769E7}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3513.7);
      doubleArray1[1] = (-3513.7);
      doubleArray1[2] = (-3513.7);
      doubleArray1[3] = (-3513.7);
      doubleArray1[4] = (-3513.7);
      double double1 = 8787296.778541643;
      double double2 = MathArrays.linearCombination((-3513.7), (-3513.7), (-3513.7), 1.234608769E7, (-3513.7), (-3513.7), 8787296.778541643, 8787296.778541643);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(7.717322891802736E13, double2, 0.01);
      
      double double3 = 0.0;
      double[] doubleArray2 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, doubleArray1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[3] = 0;
      intArray0[1] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 607);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1659.70511);
      doubleArray0[1] = 4590.3382438879;
      double double0 = 1.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1659.70511), 4590.3382438879, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1659.70511), 4590.3382438879, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.scale(1713.5253371712, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1659.70511), 4590.3382438879, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2843946.7582175136), 7865660.887087868, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1713.5253371712;
      doubleArray3[1] = 1713.5253371712;
//      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = (-2108.0);
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 5237.0;
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 5237.0;
      doubleArray1[1] = (-2108.0);
      doubleArray1[2] = 400.0;
      doubleArray1[3] = 1.0E-5;
      doubleArray1[4] = 5237.0;
      doubleArray1[5] = (-2108.0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0E-5, (-2108.0), 0.0, 0.0, 5237.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5237.0, (-2108.0), 400.0, 1.0E-5, 5237.0, (-2108.0)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertNotNull(mathArrays_OrderDirectionArray1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-1659.70511);
      doubleArray0[0] = (-1659.70511);
      doubleArray0[1] = 4590.3382438879;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1659.70511), 4590.3382438879, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1659.70511), 4590.3382438879, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 4590.3382438879;
      doubleArray2[1] = 4590.3382438879;
      double[] doubleArray3 = MathArrays.scale(4590.3382438879, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {4590.3382438879, 4590.3382438879}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.107120519329985E7, 2.107120519329985E7}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray3, doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertEquals(2, doubleArray4.length);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertArrayEquals(new double[] {4590.3382438879, 4590.3382438879}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.107120519329985E7, 2.107120519329985E7}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      
      double double1 = MathArrays.linearCombination(4590.3382438879, 0.0, (-1659.70511), 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      int int0 = (-459);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray4, (-459));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[9];
      longArray1[0] = (-485L);
      longArray1[1] = 0L;
      longArray1[2] = (-1763L);
      longArray1[3] = 1429L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray1[6] = (-1836L);
      longArray1[7] = 0L;
      longArray1[8] = (-1775L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1429L;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1429.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1429.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.linearCombination((double) (-485L), (-109.37116831), (-4356.7221035932), 441.0);
      assertEquals((-1868269.431054251), double0, 0.01);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, 441.0);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {441.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1429.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray3);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1239);
      intArray0[1] = 176;
      intArray0[2] = (-1311);
      intArray0[3] = 1313;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 176;
      intArray1[1] = 1216;
      intArray1[2] = 176;
      intArray1[3] = (-1311);
      intArray1[4] = (-1311);
      intArray1[5] = (-1311);
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1239), 176, (-1311), 1313}, intArray0);
      assertArrayEquals(new int[] {176, 1216, 176, (-1311), (-1311), (-1311)}, intArray1);
      assertEquals(3490.0386817340577, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "kU`?,=jL16oUbR";
      stringArray0[1] = "kU`?,=jL16oUbR";
      stringArray0[2] = "kU`?,=jL16oUbR";
      stringArray0[3] = "kU`?,=jL16oUbR";
      stringArray0[4] = "kU`?,=jL16oUbR";
      stringArray0[5] = "*NG^pn>s|PTVo;dR|&}";
      stringArray0[6] = "kU`?,=jL16oUbR";
      stringArray0[7] = "kU`?,=jL16oUbR";
      stringArray0[8] = "kU`?,=jL16oUbR";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertNotNull(mathArrays_OrderDirectionArray1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "u^nNa";
      stringArray0[1] = "u^nNa";
      stringArray0[3] = "##(=lGH'VoA.";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "kU`?,=jL16oUbR";
      stringArray0[2] = "D]drfdI1ZM>vrE`";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-966.94503872);
      doubleArray0[1] = (-966.94503872);
      doubleArray0[2] = (-966.94503872);
      doubleArray0[3] = (-966.94503872);
      doubleArray0[4] = (-966.94503872);
      double[] doubleArray1 = MathArrays.scale((-966.94503872), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-966.94503872), (-966.94503872), (-966.94503872), (-966.94503872), (-966.94503872)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {934982.7079052222, 934982.7079052222, 934982.7079052222, 934982.7079052222, 934982.7079052222}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-966.94503872), (-966.94503872), (-966.94503872), (-966.94503872), (-966.94503872)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {934982.7079052222, 934982.7079052222, 934982.7079052222, 934982.7079052222, 934982.7079052222}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-966.94503872), (-966.94503872), (-966.94503872), (-966.94503872), (-966.94503872)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.linearCombination((-966.94503872), (-751.44864), (-966.94503872), (-966.94503872));
      assertEquals(1661592.2422061134, double0, 0.01);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1661592.2422061134;
      doubleArray3[1] = 1661592.2422061134;
      doubleArray3[2] = (-751.44864);
      doubleArray3[3] = (-966.94503872);
      doubleArray3[4] = (-966.94503872);
      doubleArray3[5] = (-334.5279305679087);
      double double1 = MathArrays.safeNorm(doubleArray3);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(6, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {1661592.2422061134, 1661592.2422061134, (-751.44864), (-966.94503872), (-966.94503872), (-334.5279305679087)}, doubleArray3, 0.01);
      assertEquals(2349846.8259162107, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "D]drfdI1ZM>vrE`";
      boolean boolean0 = MathArrays.isMonotonic(stringArray1, mathArrays_OrderDirection0, true);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.064981778777644E14;
      doubleArray0[1] = 2346.7563;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.9987994582857286E-8;
      doubleArray0[4] = (-457.4725588);
      doubleArray0[5] = 1225.0;
      doubleArray0[6] = (-453.7370496118956);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 1412.781204336489;
      doubleArray1[2] = 3.064981778777644E14;
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[9];
      longArray1[0] = (-485L);
      longArray1[1] = 0L;
      longArray1[2] = (-1763L);
      longArray1[3] = 1429L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray1[6] = (-1836L);
      longArray1[7] = 0L;
      longArray1[8] = (-1775L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1429L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (-485L);
      doubleArray0[6] = (double) 1429L;
      doubleArray0[7] = (double) 0L;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1429.0, 0.0, 0.0, 0.0, 0.0, (-485.0), 1429.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1429.0, 0.0, 0.0, 0.0, 0.0, (-485.0), 1429.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1429.0, 0.0, 0.0, 0.0, 0.0, (-485.0), 1429.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "lh";
      stringArray0[1] = "";
      stringArray0[2] = "q";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 441.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 2345.39269;
      doubleArray0[4] = 1.3421772899999997E8;
      doubleArray0[5] = (-1.0);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 441.0;
      doubleArray1[4] = 2345.39269;
      doubleArray1[5] = 1.3421772899999997E8;
      doubleArray1[6] = 1.0;
      doubleArray1[7] = 1.0;
      doubleArray1[8] = 1.3421772899999997E8;
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 134217729;
      intArray0[1] = (-225);
      intArray0[2] = (-3735);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {134217729, (-225), (-3735)}, intArray0);
      assertEquals(0, int0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {134217729, (-225), (-3735)}, intArray0);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[9];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((double) (-3735), 220.0, (double) 134217729, (double) 0);
      assertEquals((-821700.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-485L);
      longArray0[1] = 0L;
      longArray0[2] = (-1763L);
      int[] intArray0 = new int[2];
      intArray0[0] = (-3735);
      intArray0[1] = (-3735);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-3735), (-3735)}, intArray0);
      assertEquals(0, int0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3735);
      intArray1[1] = (-3735);
      intArray1[2] = (-3735);
      intArray1[3] = (-3735);
      intArray1[4] = 0;
      intArray1[5] = (-3735);
      intArray1[6] = 0;
      intArray1[7] = (-3735);
      int int1 = MathArrays.distance1(intArray1, intArray1);
      assertTrue(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3735), (-3735), (-3735), (-3735), 0, (-3735), 0, (-3735)}, intArray1);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[][] longArray0 = new long[0][2];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1329.7754689536632);
      doubleArray0[1] = 57.2957763671875;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 1432.0090042;
      doubleArray0[4] = 406.032;
      doubleArray0[5] = 988.415266538443;
      doubleArray0[6] = (-1372.270781355605);
      doubleArray0[7] = (-18.430862426757812);
      doubleArray0[8] = 140.8979;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1329.7754689536632), 57.2957763671875, 1.34217729E8, 1432.0090042, 406.032, 988.415266538443, (-1372.270781355605), (-18.430862426757812), 140.8979}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1768302.7978309349, 3282.8059895187616, 1.801439877791744E16, 2050649.7881098755, 164861.985024, 976964.7391262613, 1883127.097362323, 339.6966897940729, 19852.218224409997}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1659.70511);
      doubleArray0[1] = 4590.3382438879;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1659.70511), 4590.3382438879, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1659.70511), 4590.3382438879, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 4590.3382438879;
      doubleArray2[1] = 4590.3382438879;
      double[] doubleArray3 = MathArrays.scale(4590.3382438879, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {4590.3382438879, 4590.3382438879}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.107120519329985E7, 2.107120519329985E7}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray3, doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertEquals(2, doubleArray4.length);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertArrayEquals(new double[] {4590.3382438879, 4590.3382438879}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.107120519329985E7, 2.107120519329985E7}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      
      double double0 = MathArrays.linearCombination(4590.3382438879, 0.0, (-1659.70511), 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1488);
      doubleArray0[1] = (double) (-1488);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1488);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1488)}, intArray0);
      assertEquals(0, int0);
      
      doubleArray0[2] = (-497.62863343);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1488.0), (-1488.0), (-497.62863343)}, doubleArray0, 0.01);
      assertEquals(2162.388091164352, double0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-5;
      int[] intArray0 = new int[9];
      intArray0[0] = (-346);
      intArray0[1] = 1774;
      intArray0[2] = (-1);
      intArray0[3] = 1;
      intArray0[4] = 163;
      intArray0[5] = (-1986);
      intArray0[6] = 2145265047;
      intArray0[7] = (-1);
      intArray0[8] = 2141083335;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-346), 1774, (-1), 1, 163, (-1986), 2145265047, (-1), 2141083335}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, 1.0E-5);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1488);
      floatArray0[1] = (float) (-1488);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-1488);
      floatArray1[1] = (float) (-1488);
      floatArray1[2] = (float) (-1488);
      floatArray1[3] = (float) (-1488);
      floatArray1[4] = (float) (-1488);
      floatArray1[5] = (float) (-1488);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1488.0F), (-1488.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1488.0F), (-1488.0F), (-1488.0F), (-1488.0F), (-1488.0F), (-1488.0F)}, floatArray1, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "J$wOk'1[Bnn#?";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "E}e4AArBsKslhcAK_c";
      stringArray0[4] = "p1!ScnBA:op";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[6] = "n!RYqlt4]:`m>@Z-Uw";
      stringArray0[7] = "";
      stringArray0[8] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "q";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1125.7226462604588;
      doubleArray0[2] = (-1481.0);
      doubleArray0[3] = (-520.3645053);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (-695.53622563);
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (-1538.6218614141721);
      doubleArray0[8] = 1788.81193295451;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (-1 <= 1,125.723)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1659.70511);
      doubleArray0[1] = 4590.3382438879;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 6.52E18;
      doubleArray0[4] = 1892.7262;
      doubleArray0[5] = (-3508.201236814911);
      doubleArray0[6] = 904.82214;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1659.70511), 4590.3382438879, 1.0, 6.52E18, 1892.7262, (-3508.201236814911), 904.82214}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1659.70511);
      doubleArray1[1] = 4590.3382438879;
      doubleArray1[2] = (-9.007199254740992E15);
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1659.70511), 4590.3382438879, (-9.007199254740992E15)}, doubleArray1, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 861.98175F;
      floatArray0[1] = 609.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2380.0F;
      floatArray0[4] = (-36.59664F);
      floatArray0[5] = 1153.851F;
      floatArray0[6] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {861.98175F, 609.0F, 0.0F, 2380.0F, (-36.59664F), 1153.851F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2174);
      floatArray0[5] = (float) (-680);
      intArray0[2] = (-327);
      intArray0[3] = (-680);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-2174), 0, (-327), (-680)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-680);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-680.0F);
      doubleArray0[1] = (double) 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-680.0), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {861.98175F, 609.0F, 0.0F, 2380.0F, (-36.59664F), (-680.0F), 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 20.0;
      doubleArray2[1] = 0.0;
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {0.0, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {20.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {20.0, 20.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 134217729;
      intArray0[1] = (-225);
      intArray0[2] = (-3735);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {134217729, (-225), (-3735)}, intArray0);
      assertEquals(0, int0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {134217729, (-225), (-3735)}, intArray0);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[9];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[8];
      longArray1[3] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      MathArrays.checkRectangular(longArray0);
      assertEquals(4, longArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 0L, (double) 0L, 1.0, 1.0, 1215.24025, (double) 0L);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      stringArray0[0] = "G0W2c";
      stringArray0[1] = "INVALID_BINARY_DIGIT";
      stringArray0[2] = "j;E^yyh=NHzl";
      stringArray0[3] = "6";
      stringArray0[4] = "kU`?,=jL16oUbR";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.4439717236742845E-8;
      double[][] doubleArray1 = new double[7][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "q";
      stringArray0[2] = "HTdhoxH";
      stringArray0[3] = "q";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3.4439717236742845E-8;
      doubleArray3[1] = 3.4439717236742845E-8;
      doubleArray3[2] = 3.4439717236742845E-8;
      doubleArray3[3] = 3.4439717236742845E-8;
      doubleArray3[4] = 3.4439717236742845E-8;
//      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "kU`?,=jL16oUbR";
      stringArray0[2] = "D]drfdI1ZM>vrE`";
      stringArray0[4] = "6";
      stringArray0[5] = "6";
      stringArray0[6] = "kU`?,=jL16oUbR";
      stringArray0[7] = "6";
      stringArray0[8] = "kU`?,=jL16oUbR";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 240.0312596786803, 1.0, 240.0312596786803, 1.0, 0.0);
      assertEquals(240.0312596786803, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 240.0312596786803;
      double[] doubleArray1 = MathArrays.scale(240.0312596786803, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {240.0312596786803, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {57615.005622934055, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 240.0312596786803;
      doubleArray2[3] = 400.0;
      doubleArray2[4] = 1.0;
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {0.0, 1.0, 240.0312596786803, 400.0, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      double double1 = MathArrays.linearCombination(0.0, 0.9985313415527344, 239.0, 400.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(95600.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}";
      stringArray0[2] = "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = (-2108.0);
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 5237.0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "##(=lGH'VoA.";
      stringArray0[1] = "u^nNa";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = (-2108.0);
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 5237.0;
      doubleArray0[5] = (-1733.41720077191);
      doubleArray0[6] = (-1301.617270494169);
      doubleArray0[7] = 2976.47653;
      long[] longArray0 = new long[5];
      longArray0[0] = 1534L;
      longArray0[1] = 1534L;
      longArray0[2] = 1534L;
      longArray0[3] = 1534L;
      longArray0[4] = 1534L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1534L, 1534L, 1534L, 1534L, 1534L}, longArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 5237.0, 1.0E-5, 2976.47653, (-1301.617270494169), (-2108.0), (-1733.41720077191)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3764.9224F);
      floatArray0[1] = (-254.66F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 689.448F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 2633.938F;
      floatArray0[0] = (-2581.622F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-2581.622F), (-254.66F), 0.0F, 689.448F, (-1.0F), 2633.938F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 689.448F;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {689.447998046875}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {475338.54201084375}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {689.447998046875}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {475338.54201084375}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {475338.54201084375}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-254.66F);
      double double0 = MathArrays.distance(doubleArray1, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {689.447998046875}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {475338.54201084375}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-254.66000366210938)}, doubleArray3, 0.01);
      assertEquals(475593.20201450586, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray4 = new double[10][6];
//      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 236.81967187041;
      doubleArray0[1] = 236.81967187041;
      doubleArray0[2] = 236.81967187041;
      doubleArray0[5] = 236.81967187041;
      doubleArray0[4] = 236.81967187041;
      doubleArray0[5] = 236.81967187041;
      doubleArray0[6] = 236.81967187041;
      double[] doubleArray1 = MathArrays.scale(236.81967187041, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {236.81967187041, 236.81967187041, 236.81967187041, 0.0, 236.81967187041, 236.81967187041, 236.81967187041}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {56083.55698480866, 56083.55698480866, 56083.55698480866, 0.0, 56083.55698480866, 56083.55698480866, 56083.55698480866}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {236.81967187041, 236.81967187041, 236.81967187041, 0.0, 236.81967187041, 236.81967187041, 236.81967187041}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {56083.55698480866, 56083.55698480866, 56083.55698480866, 0.0, 56083.55698480866, 56083.55698480866, 56083.55698480866}, doubleArray1, 0.01);
      assertEquals(7.969013737480696E7, double0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {56083.55698480866, 56083.55698480866, 56083.55698480866, 0.0, 56083.55698480866, 56083.55698480866, 56083.55698480866}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {56083.55698480866, 56083.55698480866, 56083.55698480866, 0.0, 56083.55698480866, 56083.55698480866, 56083.55698480866}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {56083.55698480866, 56083.55698480866, 56083.55698480866, 0.0, 56083.55698480866, 56083.55698480866, 56083.55698480866}, doubleArray1, 0.01);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "}-[E+_Y.(";
      stringArray0[2] = "z\u0001HH2`CMun9y1P";
      stringArray0[3] = "";
      stringArray0[4] = "DECREASING";
      stringArray0[5] = "";
      stringArray0[6] = "$VALUES";
      stringArray0[7] = "}z:QLXT_#nJ";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 242;
      floatArray0[1] = (float) 242;
      floatArray0[2] = (float) 242;
      floatArray0[4] = (float) 242;
      floatArray0[5] = (float) 242;
      floatArray0[6] = (float) 242;
      floatArray0[7] = (float) 242;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(0, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {242.0F, 242.0F, 242.0F, 0.0F, 242.0F, 242.0F, 242.0F, 242.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 134217729;
      intArray0[1] = 145;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (-618.9);
      doubleArray0[2] = (-2380.5378800057);
      doubleArray0[3] = (-618.9);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 145;
      floatArray1[1] = (float) 145;
      floatArray1[2] = (float) 145;
      floatArray1[3] = (float) (-1165);
      floatArray1[4] = (float) 134217729;
      floatArray1[5] = (float) 134217729;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {145.0F, 145.0F, 145.0F, (-1165.0F), 1.34217728E8F, 1.34217728E8F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      
      long[][] longArray0 = new long[0][8];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 145, 145);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.scaleInPlace(1256.0844682, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.checkOrder(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2106.158F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2668.9695F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-2106.158F), 0.0F, (-2668.9695F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1488), 134217729);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[24];
      doubleArray0[0] = 1215.24025;
      doubleArray0[1] = 1215.24025;
      doubleArray0[2] = 1215.24025;
      doubleArray0[3] = 1215.24025;
      doubleArray0[4] = 1215.24025;
      doubleArray0[5] = 1215.24025;
      doubleArray0[6] = 1215.24025;
      double[] doubleArray1 = MathArrays.scale(1215.24025, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(24, doubleArray0.length);
      assertEquals(24, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(24, doubleArray0.length);
      assertEquals(24, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.2562743022005718E10, double0, 0.01);
      
      MathArrays.scaleInPlace(1476808.8652200627, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(24, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(24, doubleArray0.length);
      assertEquals(24, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(24, doubleArray0.length);
      assertEquals(24, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(24, doubleArray0.length);
      assertEquals(24, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(24, doubleArray0.length);
      assertEquals(24, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(boolean1);
      
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      float[] floatArray0 = new float[0];
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean2);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1781.8198081537298;
      doubleArray0[1] = 1305.815;
      doubleArray0[3] = (-1329.7754689536632);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1781.8198081537298, 1305.815, 0.0, (-1329.7754689536632), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3563.6396163074596, 2611.63, 0.0, (-2659.5509379073264), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 20.0}, doubleArray0, 0.01);
      assertEquals(20.0, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 20.0;
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 20.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 40.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 20.0;
      doubleArray3[1] = 20.0;
      doubleArray3[2] = 20.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(7, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {20.0, 20.0, 20.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2087831324, 2087831324);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 240.0312596786803, 1.0, 240.0312596786803, 1.0, 0.0);
      assertEquals(240.0312596786803, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 240.0312596786803;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-618.9);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 240.0312596786803;
      doubleArray0[7] = 240.0312596786803;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 134217729;
      intArray0[1] = (-225);
      intArray0[2] = (-3735);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 134217729;
      floatArray0[1] = (float) (-225);
      floatArray0[2] = 1153.851F;
      floatArray0[3] = (float) (-3735);
      floatArray0[4] = (float) (-225);
      floatArray0[5] = (float) (-3735);
      floatArray0[6] = 1153.851F;
      floatArray0[7] = 1.0F;
      floatArray0[8] = 2380.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1.34217728E8F, (-225.0F), 1153.851F, (-3735.0F), (-225.0F), (-3735.0F), 1153.851F, 1.0F, 2380.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {134217729, (-225), (-3735)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 134217729;
      longArray0[1] = (-2409L);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,409 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 2;
      int int1 = 899;
      int[] intArray0 = new int[5];
      intArray0[0] = (-293);
      intArray0[1] = 0;
      intArray0[2] = 4;
      intArray0[3] = 82;
      intArray0[4] = 441;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-293), 0, 4, 82, 441}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 899;
      doubleArray0[1] = (double) (-1165);
      doubleArray0[2] = (double) 145;
      doubleArray0[3] = (-1335.376477171);
      doubleArray0[4] = (double) (-293);
      doubleArray0[5] = 0.5039018405998233;
      doubleArray0[6] = (double) 441;
      doubleArray0[7] = (double) 82;
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 861.98175F;
      floatArray0[1] = 609.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2380.0F;
      floatArray0[4] = (-36.59664F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 609.0F;
      doubleArray0[1] = (double) 861.98175F;
      doubleArray0[2] = (double) 2380.0F;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {609.0, 861.9817504882812, 2380.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1218.0, 1723.9635009765625, 4760.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}";
      stringArray0[1] = "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}";
      stringArray0[1] = "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 20.0}, doubleArray0, 0.01);
      assertEquals(20.0, double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1153.851F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1153.851F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int int0 = (-2174);
      int int1 = (-680);
      int int2 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(1021.2598977993, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2798.108;
      doubleArray0[1] = 2798.108;
      doubleArray0[2] = 2798.108;
      doubleArray0[3] = 2798.108;
      doubleArray0[4] = 2798.108;
      MathArrays.scaleInPlace(2798.108, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001}, doubleArray0, 0.01);
      assertEquals(1.750708936053519E7, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(7829408.379664001, (-1.0), 7829408.379664001, (-1661.0), (-88.33398302), 0.0, 7829408.379664001, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.301247672700157E10), double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[1];
      longArray1[0] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray0[2] = longArray3;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 4 while others have length 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[9];
      longArray1[0] = (-485L);
      longArray1[1] = 0L;
      longArray1[2] = (-1763L);
      longArray1[3] = 1429L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray1[6] = (-1836L);
      longArray1[7] = 0L;
      longArray1[8] = (-1775L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1429L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (-485L);
      doubleArray0[6] = (double) 1429L;
      double double0 = MathArrays.linearCombination(2087.414885, 1788.81193295451, (-2774.36419), (-2869.673658246448), 1310.938, (double) (-485L));
      assertEquals(1.105970755974011E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 20.0}, doubleArray0, 0.01);
      assertEquals(20.0, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 20.0;
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 20.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 40.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 20.0;
      doubleArray3[1] = 20.0;
      doubleArray3[2] = 20.0;
      doubleArray3[3] = 20.0;
      doubleArray3[4] = 0.0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1538.0F);
      floatArray0[2] = (-1773.0F);
      floatArray0[3] = 682.044F;
      floatArray0[4] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1538.0F), (-1773.0F), 682.044F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination((double) (-1.0F), 0.9921976327896118, 20.0, (double) 682.044F, 5.865827662008209E-8, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(13639.887929320335, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = MathArrays.linearCombination(466.51504035489, 0.0, 466.51504035489, 0.0, 2243.9530159, 0.0, 466.51504035489, 466.51504035489);
      assertEquals(217636.28287732464, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1237.564F;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 469.82248F;
      doubleArray0[1] = 2243.9530159;
      doubleArray0[2] = 2243.9530159;
      doubleArray0[3] = 2243.9530159;
      doubleArray0[4] = (double) 1237.564F;
      doubleArray0[5] = (double) 1237.564F;
      doubleArray0[6] = 466.51504035489;
      doubleArray0[7] = (double) 1.0F;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {469.8224792480469, 2243.9530159, 2243.9530159, 2243.9530159, 1237.56396484375, 1237.56396484375, 466.51504035489, 1.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3513.7);
      MathArrays.scaleInPlace((-3513.7), doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.234608769E7}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3513.7);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1237.564F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1237.564F;
      floatArray0[3] = 469.82248F;
      floatArray0[4] = 1237.564F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1237.564F;
      floatArray0[7] = 1.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 469.82248F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1237.564F;
      floatArray1[4] = 1237.564F;
      floatArray1[5] = 1.0F;
      floatArray1[6] = (-652.067F);
      floatArray1[7] = 469.82248F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1237.564F, 1.0F, 1237.564F, 469.82248F, 1237.564F, 1.0F, 1237.564F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {469.82248F, 1.0F, 1.0F, 1237.564F, 1237.564F, 1.0F, (-652.067F), 469.82248F}, floatArray1, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.scale(0.0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      
      double double2 = (-958.842190178959);
      double double3 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-958.842190178959));
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = Double.NaN;
      doubleArray5[2] = (-958.842190178959);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = Double.NaN;
      doubleArray5[5] = 0.0;
//      try { 
        MathArrays.ebeSubtract(doubleArray5, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.scale(0.0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-958.842190178959));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = Double.NaN;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}";
      stringArray0[1] = "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}";
      stringArray0[2] = "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}";
      stringArray0[3] = "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (-1881L);
      longArray0[2] = 0L;
      longArray0[3] = 10000L;
      longArray0[4] = (-144L);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 20.0}, doubleArray0, 0.01);
      assertEquals(20.0, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 20.0;
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 20.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 40.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 20.0;
      doubleArray3[1] = 20.0;
      doubleArray3[2] = 20.0;
      doubleArray3[3] = 20.0;
      doubleArray3[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-2126.945400975943);
      doubleArray0[2] = 236.81967187041;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2126.945400975943);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, (-2126.945400975943), 236.81967187041}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2126.945400975943)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {3.834E-20, (-2126.945400975943), 236.81967187041}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      boolean boolean2 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, false);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {(-2126.945400975943)}, doubleArray1, 0.01);
      assertTrue(boolean2);
      
      double double0 = MathArrays.linearCombination((-2126.945400975943), 260.6157445737, (-2126.945400975943), 5185.0, 3.834E-20, (-3663.455699), 90.982341499, 236.81967187041);
      assertEquals((-1.1560980955143422E7), double0, 0.01);
      
      boolean boolean3 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection0.equals((Object)mathArrays_OrderDirection1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection0, mathArrays_OrderDirection1);
      assertArrayEquals(new double[] {(-2126.945400975943)}, doubleArray1, 0.01);
      assertTrue(boolean3);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double1, 0.01);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "INVALID_REGRESSION_ARRAY";
      stringArray0[2] = "9|hYf~D,tjsu*";
      stringArray0[3] = "Zy(cU,N,%";
      stringArray0[4] = "T/e`$";
      stringArray0[5] = "iIqdvw~H=f8{d";
      double double2 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, (-2126.945400975943), 236.81967187041}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2126.945400975943)}, doubleArray1, 0.01);
      assertEquals(2126.945400975943, double2, 0.01);
      
      double double3 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, (-2126.945400975943), 236.81967187041}, doubleArray0, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3513.7);
      MathArrays.scaleInPlace((-3513.7), doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.234608769E7}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3513.7);
      doubleArray1[1] = (-3513.7);
      doubleArray1[2] = (-3513.7);
      doubleArray1[3] = (-3513.7);
      doubleArray1[4] = (-3513.7);
      double double0 = MathArrays.linearCombination((-3513.7), (-3513.7), (-3513.7), 1.234608769E7, 1.56816E7, (-88.33398302), 8787296.778541643, 8787296.778541643);
      assertEquals(7.717183135375155E13, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2798.108;
      doubleArray0[1] = 2798.108;
      doubleArray0[2] = 2798.108;
      doubleArray0[3] = 2798.108;
      doubleArray0[4] = 2798.108;
      MathArrays.scaleInPlace(2798.108, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001, 7829408.379664001}, doubleArray0, 0.01);
      assertEquals(1.750708936053519E7, double0, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2798.108;
      doubleArray2[1] = 1.0;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 134217729;
      intArray0[1] = 145;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (-618.9);
      doubleArray0[2] = (-2380.5378800057);
      doubleArray0[3] = (-618.9);
      doubleArray0[4] = (double) (-1165);
      doubleArray0[5] = (-966.69928);
      doubleArray0[6] = (double) 145;
      doubleArray0[7] = 8787296.778541643;
      doubleArray0[8] = (double) 134217729;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.34217729E8, (-618.9), (-2380.5378800057), (-618.9), (-1165.0), (-966.69928), 145.0, 8787296.778541643, 1.34217729E8}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 280, 273);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 134217729;
      intArray0[1] = 145;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (-618.9);
      doubleArray0[2] = (-2380.5378800057);
      doubleArray0[3] = (-618.9);
      doubleArray0[4] = (double) (-1165);
      doubleArray0[5] = (double) 134217729;
      doubleArray0[6] = (double) 145;
      doubleArray0[7] = 8787296.778541643;
      doubleArray0[8] = (double) 134217729;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.34217729E8, (-618.9), (-2380.5378800057), (-618.9), (-1165.0), 1.34217729E8, 145.0, 8787296.778541643, 1.34217729E8}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[] longArray0 = new long[8];
      intArray0[1] = 145;
      longArray0[1] = (long) (-1165);
      longArray0[2] = (-2169L);
      longArray0[3] = (long) 134217729;
      longArray0[4] = (long) 134217729;
      longArray0[5] = (long) 145;
      longArray0[6] = (long) 134217729;
      longArray0[7] = (long) 145;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,165 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = (-2108.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.scaleInPlace(317.227489, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.00317227489, (-668715.546812), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.00317227489, (-668715.546812), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-149.773658984039);
      doubleArray0[1] = 2077.930506480258;
      MathArrays.checkOrder(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-149.773658984039), 2077.930506480258}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      int int0 = 1650;
      intArray0[0] = 1650;
      intArray0[1] = 11;
      intArray0[2] = (-1180);
      intArray0[3] = 1524;
      intArray0[4] = 616;
      intArray0[5] = (-978);
      int int1 = (-1533);
      intArray0[6] = (-1533);
      int[] intArray1 = MathArrays.copyOf(intArray0, 616);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(616, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1650, 11, (-1180), 1524, 616, (-978), (-1533)}, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-149.773658984039), 2077.930506480258}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1533), 1123);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long[][] longArray0 = new long[7][0];
      long[] longArray1 = new long[3];
      longArray1[0] = (-2410L);
      longArray1[1] = (-557L);
      longArray1[2] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-557L);
      longArray2[1] = (-557L);
      longArray2[2] = 2840L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = (-2410L);
      longArray3[3] = (-2410L);
      longArray3[4] = 0L;
      longArray3[5] = 2840L;
      longArray3[6] = (-2410L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-557L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 0L;
      longArray5[1] = 0L;
      longArray5[2] = 2840L;
      longArray5[3] = 858L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = (-2410L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      
      longArray7[0] = (-2410L);
      longArray7[1] = 858L;
      longArray7[2] = (-2410L);
      longArray7[3] = (-557L);
      longArray7[4] = (-2410L);
      longArray7[5] = (-2394L);
      longArray7[6] = 2840L;
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,410 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 134217729;
      intArray0[1] = 145;
      intArray0[2] = (-1165);
      intArray0[3] = 0;
      intArray0[4] = 441;
      intArray0[5] = 1669;
      intArray0[6] = (-293);
      intArray0[7] = 2;
      intArray0[8] = 899;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {134217729, 145, (-1165), 0, 441, 1669, (-293), 2, 899}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 441;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 441.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.checkOrder(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 441.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1669;
      doubleArray2[1] = (double) (-293);
      doubleArray2[2] = (double) 441;
      doubleArray2[3] = (double) 2;
//      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3135.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2529.47);
      doubleArray0[6] = (-2223.79885);
      doubleArray0[7] = (-2102.7);
      doubleArray0[8] = 0.0;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1788.81193295451;
      doubleArray0[1] = 1305.815;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1329.7754689536632);
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = (-3442.5);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,329.775 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      double double0 = (-2126.945400975943);
      doubleArray0[1] = (-2126.945400975943);
      double double1 = 236.81967187041;
      doubleArray0[2] = 236.81967187041;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2126.945400975943);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, (-2126.945400975943), 236.81967187041}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2126.945400975943)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not increasing (0 > -2,126.945)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = (-1563.3716);
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace((-1563.3716), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1531.806;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2218);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(2218, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, Double.NaN, 1531.806}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 134217729, (-1488));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double double0 = MathArrays.linearCombination(466.51504035489, 0.0, 466.51504035489, 0.0, 2243.9530159, 0.0, 466.51504035489, 466.51504035489);
      assertEquals(217636.28287732464, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1237.564F;
      floatArray0[2] = 469.82248F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1237.564F, 469.82248F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[][] longArray0 = new long[7][4];
      long[] longArray1 = new long[5];
      longArray1[0] = 1L;
      longArray1[1] = (-1881L);
      longArray1[2] = 0L;
      longArray1[3] = 10000L;
      longArray1[4] = (-144L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1881L);
      longArray2[1] = 1L;
      longArray2[2] = (-1881L);
      longArray2[3] = (-144L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1L;
      longArray3[1] = 1L;
      longArray3[2] = (-1881L);
      longArray3[3] = 1L;
      longArray3[4] = (-1881L);
      longArray3[5] = (-1881L);
      longArray3[6] = 1L;
      longArray3[7] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 10000L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = 10000L;
      longArray5[1] = 10000L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = 0L;
      longArray6[1] = (-1881L);
      longArray6[2] = (-144L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = (-1881L);
      longArray7[1] = (-1881L);
      longArray7[2] = (-144L);
      longArray7[3] = 1L;
      longArray7[4] = 10000L;
      longArray7[5] = (-144L);
      longArray7[6] = (-144L);
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 4 while others have length 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[7];
      longArray1[0] = 1L;
      longArray1[1] = 100L;
      longArray1[2] = (-1L);
      longArray1[3] = (-2023L);
      longArray1[4] = 1991L;
      longArray1[5] = 0L;
      longArray1[6] = (-2179L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2179L);
      doubleArray0[1] = 1405.73743;
      doubleArray0[2] = (-381.8141460322);
      doubleArray0[3] = (double) (-2023L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = (double) 1991L;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-2179.0), 1405.73743, (-381.8141460322), (-2023.0), (-1.0), (-1.0), (-1.0), 1991.0}, doubleArray0, 0.01);
      assertEquals(1.4926533764213303E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 134217729;
      intArray0[1] = 1294;
      intArray0[2] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {134217729, 1294, 0}, intArray0);
      assertEquals(0, int0);
      
      String string0 = "";
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 1494L;
      longArray1[3] = 10000L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 10000L;
      longArray2[2] = 649L;
      longArray2[3] = 10000L;
      longArray2[4] = 0L;
      longArray2[5] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 110L;
      longArray3[1] = 0L;
      longArray3[2] = 649L;
      longArray3[3] = 0L;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 134217729;
      intArray0[1] = (-225);
      intArray0[2] = (-3735);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3735);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-3735);
      doubleArray0[3] = (double) 134217729;
      doubleArray0[4] = (double) (-3735);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-225);
      doubleArray0[7] = (double) 134217729;
      doubleArray0[8] = 1254.27179367694;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[][] doubleArray2 = new double[4][8];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) (-3735);
      doubleArray3[1] = (double) (-225);
      doubleArray3[2] = (double) (-3735);
      doubleArray3[3] = (double) (-3735);
      doubleArray3[4] = (double) 134217729;
      doubleArray3[5] = (double) (-3735);
      doubleArray2[3] = doubleArray3;
//      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MathArrays.linearCombination((-995.1739), (-995.1739), (-995.1739), (-995.1739), (-995.1739), (-995.1739), 0.0, 3.32);
      int[] intArray0 = new int[1];
      int int0 = (-1877);
      intArray0[0] = (-1877);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-1877));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 862.0F;
      floatArray0[1] = 609.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2380.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1153.851F;
      floatArray0[6] = 1.0F;
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2174);
      intArray0[1] = (-680);
      intArray0[2] = (-327);
      intArray0[3] = 0;
      MathArrays.distance(intArray0, intArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-680);
      longArray0[1] = (-3477L);
      longArray0[2] = (long) (-2174);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (-2174);
      longArray0[6] = (long) (-327);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -680 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3513.7);
      MathArrays.scaleInPlace((-3513.7), doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-3513.7);
      doubleArray1[1] = (-3513.7);
      doubleArray1[2] = (-3513.7);
      doubleArray1[3] = (-3513.7);
      doubleArray1[4] = (-3513.7);
      doubleArray1[5] = (-3513.7);
      doubleArray1[6] = (-3513.7);
      doubleArray1[7] = (-3513.7);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(1.2349601389999999E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 2735;
      intArray0[2] = 134217729;
      intArray0[3] = (-1777);
      intArray0[4] = 0;
      intArray0[5] = 22;
      intArray0[6] = 276;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 2735, 134217729, (-1777), 0, 22, 276}, intArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 276;
      doubleArray0[1] = (double) 22;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2735;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {552.0, 44.0, 2.0, 0.0, 5470.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3764.9224F);
      floatArray0[1] = (-254.66F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 689.448F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 2633.938F;
      floatArray0[6] = (-2581.622F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 689.448F;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) (-254.66F);
      MathArrays.distance(doubleArray1, doubleArray3);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray4 = new double[0][6];
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray4);
      double[] doubleArray5 = MathArrays.normalizeArray(doubleArray3, 0.0F);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-1659.70511);
      doubleArray0[0] = (-1659.70511);
      double double1 = 4590.3382438879;
      doubleArray0[1] = 4590.3382438879;
      double double2 = 1.0;
      MathArrays.copyOf(doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 4590.3382438879;
      doubleArray1[1] = 4590.3382438879;
//      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(20.0, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 20.0;
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 20.0;
      doubleArray3[1] = 20.0;
      doubleArray3[2] = 20.0;
      doubleArray3[3] = 20.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 20.0;
      doubleArray3[6] = 0.0;
      double double1 = MathArrays.distance1(doubleArray2, doubleArray3);
      assertEquals(40.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.scale(3.32, doubleArray0);
      MathArrays.ebeDivide(doubleArray1, doubleArray1);
      double double0 = MathArrays.linearCombination(3.32, 1.7976931348623157E308, (-3044.162468036424), (-3044.162468036424));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      MathArrays.distance(doubleArray2, doubleArray1);
      double[] doubleArray3 = MathArrays.scale(0.0, doubleArray1);
      MathArrays.ebeDivide(doubleArray0, doubleArray2);
      double double1 = (-958.842190178959);
      MathArrays.linearCombination(0.0, 0.0, Double.NEGATIVE_INFINITY, (-958.842190178959));
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = (-958.842190178959);
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray4[4] = Double.NEGATIVE_INFINITY;
      doubleArray4[5] = Double.NaN;
//      try { 
        MathArrays.ebeSubtract(doubleArray4, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1846.88;
      doubleArray0[2] = 255.78458626;
      doubleArray0[3] = (-2321.0002326);
      doubleArray0[4] = (-0.64090673);
      doubleArray0[5] = 1.0E-5;
      doubleArray0[6] = 1362.92544;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3960.0;
      double double0 = 3.32;
      doubleArray0[1] = 3.32;
      doubleArray0[2] = 1.0E-5;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
//      try { 
        MathArrays.checkOrder(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (15,681,600 >= 26,294.4)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
//      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (-858);
      intArray0[2] = 206;
      intArray0[3] = 134217729;
      intArray0[4] = (-276);
      intArray0[5] = (-2234);
      intArray0[6] = (-437);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 206;
      double[][] doubleArray1 = new double[8][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (-858);
      doubleArray2[1] = (double) (-2234);
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2798.108;
      doubleArray0[1] = 2798.108;
      doubleArray0[2] = 2798.108;
      doubleArray0[3] = 2798.108;
      doubleArray0[4] = 2798.108;
      MathArrays.scaleInPlace(2798.108, doubleArray0);
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.safeNorm(doubleArray0);
      double double0 = MathArrays.linearCombination(7829408.379664001, (-1.0), 7829408.379664001, (-1661.0), (-88.33398302), 0.0, 7829408.379664001, 0.0);
      assertEquals((-1.301247672700157E10), double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double double1 = MathArrays.linearCombination(0.0, (-88.33398302), 7829408.379664001, 255.4290888, 2798.108, 0.0);
      assertEquals(1.9998586482606602E9, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1215.24025;
      doubleArray0[1] = 1215.24025;
      doubleArray0[2] = 1215.24025;
      doubleArray0[3] = 1215.24025;
      doubleArray0[4] = 1215.24025;
      doubleArray0[5] = 1215.24025;
      doubleArray0[6] = 1215.24025;
      double[] doubleArray1 = MathArrays.scale(1215.24025, doubleArray0);
      MathArrays.linearCombination(doubleArray1, doubleArray0);
      MathArrays.scaleInPlace(1476808.8652200627, doubleArray0);
      MathArrays.copyOf(doubleArray1, 0);
      MathArrays.distance(doubleArray1, doubleArray1);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 0;
      longArray4[2] = (long) 0;
      longArray0[3] = longArray4;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MathArrays.linearCombination(0.0, 240.0312596786803, 1.0, 240.0312596786803, 1.0, 0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 240.0312596786803;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-618.9);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 240.0312596786803;
      doubleArray0[7] = 240.0312596786803;
      doubleArray0[8] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection.values();
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 306, 306);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      MathArrays.linearCombination((-0.12502530217170715), (-1323.697697863463), 1.304E19, (-0.12502530217170715), (-1.7976931348623157E308), 8787296.778541643, 1442.526997, 8787296.778541643);
      MathArrays.linearCombination((-1.0), (-2534.64), 8787296.778541643, (-2534.64), Double.NEGATIVE_INFINITY, (-1.7976931348623157E308));
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, (-1578.4), 0.0, (-674.89459952127), (-674.89459952127), (-2639.322750278341));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1578.4);
      doubleArray0[1] = (-674.89459952127);
      doubleArray0[2] = (-2639.322750278341);
      doubleArray0[3] = (-1578.4);
      doubleArray0[4] = 1781264.670556478;
      doubleArray0[5] = (-674.89459952127);
      doubleArray0[6] = 1781264.670556478;
      MathArrays.normalizeArray(doubleArray0, 1781264.670556478);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly decreasing (2,130,507.272 <= 8,787,296.779)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = (-2108.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 5237.0;
      doubleArray0[5] = (-1733.41720077191);
      doubleArray0[6] = (-1301.617270494169);
      doubleArray0[7] = 2976.47653;
      doubleArray0[8] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not increasing (0 > -2,108)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double double0 = MathArrays.linearCombination(391.6760859889, 391.6760859889, 391.6760859889, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(153410.1563355842, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 391.6760859889;
      doubleArray0[1] = 263.642329;
      doubleArray0[2] = (-2548.5238660992);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2869.673658246448);
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2869.673658246448);
      doubleArray1[1] = (-2869.673658246448);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = 1L;
      longArray1[2] = (-1563L);
      longArray1[3] = 9007199254740990L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      MathArrays.scaleInPlace(566.0007813403041, doubleArray2);
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1624237.5327591784), (-1624237.5327591784)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {566.0007813403041, 566.0007813403041}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MathArrays.OrderDirection.values();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = 4064;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0, 4064);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.checkOrder(doubleArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Integer>) null, 746, 985);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[] longArray0 = new long[6];
      longArray0[0] = (-2363L);
      longArray0[1] = 0L;
      longArray0[2] = 1446L;
      longArray0[3] = 0L;
      longArray0[4] = (-940L);
      longArray0[5] = 0L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,363 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<FieldElement<Integer>>) null, 122);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = new String[9];
      int[] intArray0 = new int[4];
      intArray0[0] = 107;
      intArray0[1] = 107;
      intArray0[2] = 107;
      intArray0[3] = 107;
      MathArrays.copyOf(intArray0);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Pair<Object, Object>>) null, 107, (-2906));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }
}
