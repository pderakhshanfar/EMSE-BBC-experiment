/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 12:47:48 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 3493.7854F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-2561.58F);
      floatArray0[5] = (-5694.744F);
      floatArray0[6] = (-1.4E-45F);
      floatArray0[7] = 1.0F;
      floatArray0[8] = 3.4028235E38F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {3493.7854F, 0.0F, 0.0F, 1.0F, (-2561.58F), (-5694.744F), (-1.4E-45F), 1.0F, 3.4028235E38F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1.4E-45F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1.4E-45F);
      doubleArray0[3] = (double) (-5694.744F);
      doubleArray0[4] = (double) (-2561.58F);
      doubleArray0[5] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1.401298464324817E-45), 0.0, (-1.401298464324817E-45), (-5694.744140625), (-2561.580078125), 0.0}, doubleArray0, 0.01);
      assertEquals(6244.341704601827, double0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-388.0478100938268);
      doubleArray0[3] = (-2105.5);
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = (-1003.5637);
      doubleArray0[6] = (-1999.39289536862);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = null;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[1] = (-388.0478100938268);
      doubleArray2[2] = 1.34217729E8;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1949.1302854);
      doubleArray0[1] = 442.9025490470514;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1242.96007377;
      doubleArray0[4] = (-3151.962315);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1949.1302854), 442.9025490470514, 1.0, 1242.96007377, (-3151.962315)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3799108.8694634857, 196162.66795237578, 1.0, 1544949.7449863239, 9934866.435180161}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1242.96007377;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-1949.1302854);
      doubleArray2[3] = (-3151.962315);
      doubleArray2[4] = 1.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-1949.1302854), 442.9025490470514, 1.0, 1242.96007377, (-3151.962315)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1242.96007377, 1.0, (-1949.1302854), (-3151.962315), 1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals((-6345112.624952138), double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1718.2436165196334;
      doubleArray0[1] = 1.0E-5;
      doubleArray0[2] = 0.8414709568023682;
      doubleArray0[3] = (-1766.20081288564);
      doubleArray0[4] = 2727.0764623230034;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1718.2436165196334, 1.0E-5, 0.8414709568023682, (-1766.20081288564), 2727.0764623230034}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2952361.125710469, 1.0000000000000002E-10, 0.708073371141893, 3119465.3114378955, 7436946.0313561475}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      int int0 = 1281;
      intArray0[0] = 1281;
      intArray0[1] = 32768;
      intArray0[2] = 4;
      int int1 = (-1883);
      intArray0[3] = (-1883);
      int int2 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1281, 32768, 4, (-1883)}, intArray0);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1718.2436165196334, 1.0E-5, 0.8414709568023682, (-1766.20081288564), 2727.0764623230034}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2952361.125710469, 1.0000000000000002E-10, 0.708073371141893, 3119465.3114378955, 7436946.0313561475}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1718.2436165196334, 1.0E-5, 0.8414709568023682, (-1766.20081288564), 2727.0764623230034}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2952361.125710469, 1.0000000000000002E-10, 0.708073371141893, 3119465.3114378955, 7436946.0313561475}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertArrayEquals(new double[] {1718.2436165196334, 1.0E-5, 0.8414709568023682, (-1766.20081288564), 2727.0764623230034}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2952361.125710469, 1.0000000000000002E-10, 0.708073371141893, 3119465.3114378955, 7436946.0313561475}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(8588111.918179408, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1, 32768);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1718.2436165196334, 1.0E-5, 0.8414709568023682, (-1766.20081288564), 2727.0764623230034}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2952361.125710469, 1.0000000000000002E-10, 0.708073371141893, 3119465.3114378955, 7436946.0313561475}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(32768, doubleArray3.length);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.safeNorm(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2611);
      intArray0[1] = 2;
      intArray0[2] = 204;
      intArray0[3] = 1005;
      intArray0[4] = 2;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 204;
      intArray1[1] = 2;
      intArray1[2] = 204;
      intArray1[3] = 204;
      intArray1[4] = 1005;
      intArray1[5] = 1005;
      intArray1[6] = 2;
      intArray1[7] = 2;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertArrayEquals(new int[] {(-2611), 2, 204, 1005, 2}, intArray0);
      assertArrayEquals(new int[] {204, 2, 204, 204, 1005, 1005, 2, 2}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2815, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(8, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1005;
      doubleArray0[1] = (double) 2815;
      doubleArray0[2] = (double) 2815;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 204;
      doubleArray0[5] = (double) 1005;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) (-2611);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1005.0, 2815.0, 2815.0, 2.0, 204.0, 1005.0, 2.0, (-2611.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1795.7379072;
      doubleArray0[1] = (-961.1);
      doubleArray0[2] = 5.041914939880371;
      doubleArray0[3] = (-2378.88);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 986.429644862;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3292.6148956613;
      doubleArray0[1] = 2284.77181012798;
      doubleArray0[2] = 1.806955940717426E16;
      doubleArray0[3] = (-6.663542893624021E-14);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3292.6148956613, 2284.77181012798, 1.806955940717426E16, (-6.663542893624021E-14)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 888);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3292.6148956613, 2284.77181012798, 1.806955940717426E16, (-6.663542893624021E-14)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(888, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3292.6148956613, 2284.77181012798, 1.806955940717426E16, (-6.663542893624021E-14)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(888, doubleArray1.length);
      assertEquals(888, doubleArray2.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(8388607);
      assertNotNull(integer0);
      assertEquals(8388607, (int)integer0);
      
      Pair<Object, Integer> pair0 = new Pair<Object, Integer>(object0, integer0);
      assertNotNull(pair0);
      
      Pair<Double, FieldElement<String>> pair1 = (Pair<Double, FieldElement<String>>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair1).getKey();
      doReturn((Object) null).when(pair1).getValue();
      Pair<Double, Object> pair2 = new Pair<Double, Object>(pair1);
      assertNotNull(pair2);
      
      Double double0 = new Double(8388607);
      assertNotNull(double0);
      assertEquals(8388607.0, (double)double0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 292);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2678.723537503359;
      doubleArray0[1] = 1.63E18;
      doubleArray0[2] = 1.9868161777724352E-8;
      doubleArray0[3] = (-2048.0);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1352.424014077;
      doubleArray0[6] = 1.0708593250394448E-7;
      doubleArray0[7] = 2586.829158407329;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2678.723537503359, 1.63E18, 1.9868161777724352E-8, (-2048.0), 1.304E19, 1352.424014077, 1.0708593250394448E-7, 2586.829158407329}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {2678.723537503359, 1.63E18, 1.9868161777724352E-8, (-2048.0), 1.304E19, 1352.424014077, 1.0708593250394448E-7, 2586.829158407329}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1.3141480129726636E19, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(8, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-4708.6F);
      floatArray0[2] = (-8.48F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-8.48F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.608E18;
      doubleArray0[1] = (-2303.1463);
      doubleArray0[2] = 0.4342944622039795;
      doubleArray0[3] = (-518.8898);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-833.1202546142);
      doubleArray0[6] = 2.608E18;
      doubleArray0[7] = (-0.2499999997677497);
      doubleArray0[8] = 2396.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.608E18, (-2303.1463), 0.4342944622039795, (-518.8898), 1.0, (-833.1202546142), 2.608E18, (-0.2499999997677497), 2396.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {2.608E18, (-2303.1463), 0.4342944622039795, (-518.8898), 1.0, (-833.1202546142), 2.608E18, (-0.2499999997677497), 2396.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.66606062018576E37, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
//      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1664.8865;
      doubleArray0[3] = 1548.706659798824;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 3.834E-20, 1664.8865, 1548.706659798824}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, 1.4699556E-39, 2771847.0578822503, 2398492.31810523}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 3.834E-20, 1664.8865, 1548.706659798824}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, 1.4699556E-39, 2771847.0578822503, 2398492.31810523}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(1.801439877791744E16, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 659.806F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 659.806F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      double double1 = MathArrays.linearCombination((double) 0.0F, (double) 659.806F, (double) 659.806F, (double) 0.0F, 2.092571258544922, (double) 0.0F);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3979);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3979, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 937.3;
      doubleArray0[2] = 1488321.097162184;
      doubleArray0[3] = 1268.7280666667;
      doubleArray0[4] = 953.454831055;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 3.834E-20;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {100.0, 937.3, 1488321.097162184, 1268.7280666667, 953.454831055, 1.34217729E8, 3.834E-20}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 2 and 3 are not strictly increasing (1,488,321.097 >= 1,268.728)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 284;
      intArray0[1] = 2146125143;
      intArray0[2] = (-823);
      intArray0[3] = (-1365);
      intArray0[4] = 895;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-823);
      intArray1[1] = 895;
      intArray1[2] = (-823);
      intArray1[3] = 2146125143;
      intArray1[4] = (-1365);
      intArray1[5] = 196;
      intArray1[6] = (-823);
      intArray1[7] = 895;
      intArray1[8] = 2146125143;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {284, 2146125143, (-823), (-1365), 895}, intArray0);
      assertArrayEquals(new int[] {(-823), 895, (-823), 2146125143, (-1365), 196, (-823), 895, 2146125143}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-2713173), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(9, intArray1.length);
      
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertArrayEquals(new int[] {284, 2146125143, (-823), (-1365), 895}, intArray0);
      assertArrayEquals(new int[] {(-823), 895, (-823), 2146125143, (-1365), 196, (-823), 895, 2146125143}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3.035079616122149E9, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1687.31361715492;
      int[] intArray0 = new int[5];
      intArray0[0] = 290;
      intArray0[1] = 290;
      intArray0[0] = 290;
      intArray0[3] = 290;
      intArray0[4] = 290;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 0, 290, 290}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 0, 290, 290}, intArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2, 7);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.scale(2053.9471721558016, doubleArray2);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray4.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 0, 290, 290}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, intArray0.length);
      
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 0, 290, 290}, intArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(5, intArray0.length);
      
      int int3 = new Integer(7);
      assertEquals(7, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      double[] doubleArray5 = MathArrays.normalizeArray(doubleArray0, 290);
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {0.0, 1687.31361715492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 290.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray5, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray5.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray5);
      assertArrayEquals(new double[] {0.0, 1687.31361715492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 290.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray5, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray0);
      assertEquals(1397.31361715492, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray5.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {290, 290, 0, 290, 290}, intArray0);
      assertArrayEquals(new int[] {290, 290, 0, 290, 290}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Double double1 = new Double(592.70267309225);
      assertNotNull(double1);
      assertEquals(592.70267309225, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
//      try { 
        MathArrays.normalizeArray(doubleArray2, 592.70267309225);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[1];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.4794255495071411;
      doubleArray0[1] = 577.0;
      doubleArray0[2] = 2778.46113;
      doubleArray0[0] = 1.97424169426517;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 0.008333333333333333;
      doubleArray0[6] = 1.34217729E8;
      doubleArray0[7] = 4.01414180274966E7;
      doubleArray0[8] = Double.NaN;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.97424169426517, 577.0, 2778.46113, 0.0, 1.304E19, 0.008333333333333333, 1.34217729E8, 4.01414180274966E7, Double.NaN}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {1.97424169426517, 577.0, 2778.46113, 0.0, 1.304E19, 0.008333333333333333, 1.34217729E8, 4.01414180274966E7, Double.NaN}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long[][] longArray0 = new long[3][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1026L;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1026L;
      doubleArray0[1] = (double) 1026L;
      doubleArray0[2] = (double) 1026L;
      doubleArray0[3] = (double) 1026L;
      doubleArray0[4] = (double) 1026L;
      doubleArray0[5] = (double) 1026L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1026.0, 1026.0, 1026.0, 1026.0, 1026.0, 1026.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ir EfC)dbN#!b$P#ED";
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((-1.0), (-1658.998291522788), (-476.58416119326), (-1658.998291522788), (-1.0), 1686.9);
      assertEquals(790624.4074779621, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1686.9;
      doubleArray0[1] = (-1658.998291522788);
      doubleArray0[2] = (-476.58416119326);
      doubleArray0[3] = (-476.58416119326);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1658.998291522788);
      doubleArray0[6] = 1686.9;
      doubleArray0[7] = 790624.4074779621;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2122.51017835);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-895.75309);
      doubleArray1[4] = 4556.2120138896;
      doubleArray1[5] = 0.4794255495071411;
      doubleArray1[6] = 671.7473548557077;
      doubleArray1[7] = 2.207516563549229E7;
      doubleArray1[8] = 534.915907168;
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 420;
      intArray0[1] = (-2098);
      intArray0[2] = 0;
      intArray0[3] = (-2442);
      intArray0[4] = 7;
      intArray0[5] = (-1);
      intArray0[6] = (-2147483647);
      intArray0[7] = (-622);
      intArray0[8] = 1456;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-622);
      intArray1[2] = (-622);
      intArray1[3] = 7;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(1418.8032196982729, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1418.8032196982729;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {1418.8032196982729}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertTrue(boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray2.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      double double0 = new Integer(0);
      assertEquals(0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 0, 1548.16270441006, 0, (-374.724662), 0, 1.1778287670845445E7, 0.0, 402.602873541);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, (double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[][] doubleArray2 = new double[2][0];
      doubleArray2[0] = null;
      doubleArray2[1] = doubleArray1;
//      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int int0 = 1056;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 1056);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-376);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-376)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 925.9637F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (float) (-376);
      floatArray1[3] = (float) (-376);
      floatArray1[4] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {925.9637F, 0.0F, (-376.0F), (-376.0F), 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = (-1808.94F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1153.5584727705;
      doubleArray0[1] = (double) (-1808.94F);
      MathArrays.scaleInPlace((-1808.94F), doubleArray0);
      assertArrayEquals(new double[] {(-2086717.9961421515), 3272263.711614847}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2086717.9961421515), 3272263.711614847}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(2178.6270961096, (-2994.4936), (double) (-1808.94F), 0.0, 422.1, 1251.085);
      assertEquals((-5995801.917586782), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Double, String>> field0 = (Field<Pair<Double, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 2147134138;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147134138, 2147134138);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double1 = new Double(0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1642.6631388051885);
      doubleArray1[1] = 0.0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3.834E-20;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      double double2 = MathArrays.distance1(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-1642.6631388051885), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1642.6631388051885, double2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3.834E-20;
      doubleArray3[1] = (-1642.6631388051885);
      doubleArray3[2] = (-1642.6631388051885);
      doubleArray3[3] = (-1642.6631388051885);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (-1642.6631388051885);
      doubleArray3[7] = 0.0;
//      try { 
        MathArrays.checkOrder(doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= -1,642.663)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
//      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 3969.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3969.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 3969.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.5752961E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3969.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3969.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1808.158F);
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1808.158F);
      doubleArray2[1] = (double) 0.0F;
      int[] intArray0 = new int[6];
      intArray0[0] = 291;
      intArray0[1] = 3201;
      intArray0[2] = 284;
      intArray0[3] = (-1096);
      intArray0[4] = 293;
      intArray0[5] = 12;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {291, 3201, 284, (-1096), 293, 12}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 12);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {12.0, -0.0, -0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1808.157958984375), 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(3, doubleArray3.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[13];
      floatArray0[0] = 0.0F;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = (double) 0.0F;
      doubleArray1[6] = (double) 0.0F;
      doubleArray1[7] = (double) 0.0F;
      doubleArray1[8] = (double) 0.0F;
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3266;
      intArray1[1] = 2;
      intArray1[2] = 3266;
      int int0 = MathArrays.distance1(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {3266, 2, 3266}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6534, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 0.0F;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SP}7:-[=qKL@uy";
      stringArray0[1] = "SP}7:-[=qKL@uy";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1808.158F);
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = (double) (-1808.158F);
      doubleArray2[2] = (double) 0.0F;
      doubleArray2[3] = (double) 0.0F;
      doubleArray2[4] = (double) 0.0F;
      doubleArray2[5] = (double) (-1808.158F);
      doubleArray2[6] = (double) 0.0F;
      doubleArray2[7] = (double) (-1808.158F);
      doubleArray2[8] = (double) 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {0.0, (-1808.157958984375), 0.0, 0.0, 0.0, (-1808.157958984375), 0.0, (-1808.157958984375), 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(9, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1808.158F);
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1808.158F);
      doubleArray2[1] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      
//      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 0.0;
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 401;
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 401;
      intArray1[1] = 401;
      intArray1[2] = 1;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1;
      intArray2[1] = 2124638077;
      intArray2[2] = 401;
      intArray2[3] = 401;
      double double0 = MathArrays.distance(intArray1, intArray2);
      assertArrayEquals(new int[] {401, 401, 1}, intArray1);
      assertArrayEquals(new int[] {1, 2124638077, 401, 401}, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(2.1246376760000753E9, double0, 0.01);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(3, intArray1.length);
      assertEquals(4, intArray2.length);
      
      double double1 = MathArrays.distance(intArray0, intArray2);
      assertArrayEquals(new int[] {401, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1, 2124638077, 401, 401}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(2.1246380770001132E9, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray2.length);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1;
      floatArray1[1] = (float) 401;
      floatArray1[2] = (float) 1;
      floatArray1[3] = (float) 1;
      floatArray1[4] = (float) 401;
      floatArray1[5] = (float) 2124638077;
      floatArray1[6] = (float) 401;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1.0F, 401.0F, 1.0F, 1.0F, 401.0F, 2.12463808E9F, 401.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(7, floatArray1.length);
      assertEquals(0, floatArray0.length);
      
      double double2 = MathArrays.linearCombination((double) 1.0F, (double) 1.0F, (double) 401, 2.1246380770001132E9, 290.5, 134692.0, 290.5, (double) 401);
      assertEquals(8.520191133945454E11, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(3856.162072888282, (-1.7976931348623157E308), 3856.162072888282, 1.1730463525082348E-7);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1046.3077545);
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 3856.162072888282;
      doubleArray2[3] = (-1.7976931348623157E308);
      doubleArray2[4] = (-1.7976931348623157E308);
      doubleArray2[5] = 3856.162072888282;
      doubleArray2[6] = 3856.162072888282;
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
//      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = 290;
      int[] intArray0 = new int[7];
      intArray0[0] = 290;
      intArray0[1] = 290;
      intArray0[2] = 290;
      intArray0[4] = 290;
      intArray0[5] = 290;
      intArray0[6] = 2143740300;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 0, 290, 290, 2143740300}, intArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 0, 290, 290, 2143740300}, intArray0);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 290);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(290, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(290, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1687.31361715492;
      int[] intArray0 = new int[5];
      intArray0[0] = 290;
      intArray0[1] = 290;
      intArray0[2] = 290;
      intArray0[3] = 290;
      intArray0[4] = 290;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, 290}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, 290}, intArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2, 7);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.scale(2053.9471721558016, doubleArray2);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray4.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, 290}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, intArray0.length);
      
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, 290}, intArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(5, intArray0.length);
      
      int int3 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, 290}, intArray0);
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray5 = MathArrays.normalizeArray(doubleArray0, 290);
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {0.0, 1687.31361715492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 290.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray5, 0.01);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray5.length);
      
      double[] doubleArray6 = MathArrays.convolve(doubleArray2, doubleArray5);
      assertNotNull(doubleArray6);
      assertArrayEquals(new double[] {0.0, 1687.31361715492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 290.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray6, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray6);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray6);
      assertNotSame(doubleArray2, doubleArray5);
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray5.length);
      assertEquals(9, doubleArray6.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
//      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray6);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1360;
      intArray0[1] = 544;
      intArray0[2] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1360, 544, (-1)}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 544;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {544.0, (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1088.0, (-2.0), (-2.0), (-2.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {1360, 544, (-1)}, intArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 7);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {544.0, (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1088.0, (-2.0), (-2.0), (-2.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1088.0, (-2.0), (-2.0), (-2.0), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(1686.231402523, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {544.0, (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1088.0, (-2.0), (-2.0), (-2.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1088.0, (-2.0), (-2.0), (-2.0), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1834619.765945024, (-3372.462805046), (-3372.462805046), (-3372.462805046), 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 7;
      intArray1[2] = 0;
      intArray1[3] = (-1);
      intArray1[4] = 1360;
      intArray1[5] = 1360;
      intArray1[6] = 14;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertArrayEquals(new int[] {1360, 544, (-1)}, intArray0);
      assertArrayEquals(new int[] {0, 7, 0, (-1), 1360, 1360, 14}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1462.1798794949957, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(7, intArray1.length);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      int int2 = MathArrays.distance1(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {0, 7, 0, (-1), 1360, 1360, 14}, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertEquals(0, int2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertEquals(0, intArray2.length);
      assertEquals(7, intArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SP}7:-[=qKL@uy";
      stringArray0[1] = "SP}7:-[=qKL@uy";
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1687.31361715492;
      doubleArray0[1] = 1687.31361715492;
      int int0 = 290;
      int[] intArray0 = new int[5];
      intArray0[0] = 290;
      intArray0[1] = 290;
      intArray0[2] = 290;
      intArray0[3] = 290;
      intArray0[4] = 290;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, 290}, intArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1687.31361715492;
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1687.31361715492}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3374.62723430984}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, 290}, intArray0);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2, 7);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1687.31361715492}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3374.62723430984}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3374.62723430984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      
      double double1 = 2053.9471721558016;
      double[] doubleArray4 = MathArrays.scale(2053.9471721558016, doubleArray2);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {6931306.064990649}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {1687.31361715492}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3374.62723430984}, doubleArray2, 0.01);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertEquals(1, doubleArray4.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, 290}, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(5, intArray0.length);
      
      int int3 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, 290}, intArray0);
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(5, intArray0.length);
      
      int int4 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, 290}, intArray0);
      assertEquals(0, int4);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray5 = MathArrays.normalizeArray(doubleArray0, 290);
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {0.0, 1687.31361715492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 290.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray5, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray5.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 1470, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 290;
      intArray0[1] = 290;
      intArray0[2] = 290;
      intArray0[3] = 290;
      intArray0[4] = (-2063);
      intArray0[5] = 290;
      intArray0[6] = 290;
      intArray0[2] = 290;
      intArray0[8] = 290;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, (-2063), 290, 290, 0, 290}, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 290;
      doubleArray0[1] = (double) (-2063);
      doubleArray0[2] = (double) 290;
      doubleArray0[3] = (double) 290;
      doubleArray0[4] = (double) 290;
      doubleArray0[5] = 2265894.8239453137;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {580.0, (-4126.0), 580.0, 580.0, 580.0, 4531789.647890627}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {290.0, (-2063.0), 290.0, 290.0, 290.0, 2265894.8239453137}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, (-2063), 290, 290, 0, 290}, intArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 2);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {290.0, (-2063.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {290.0, (-2063.0), 290.0, 290.0, 290.0, 2265894.8239453137}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray3 = MathArrays.scale(0, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {580.0, (-4126.0), 580.0, 580.0, 580.0, 4531789.647890627}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {290.0, (-2063.0), 290.0, 290.0, 290.0, 2265894.8239453137}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray0.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, (-2063), 290, 290, 0, 290}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, intArray0.length);
      
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, (-2063), 290, 290, 0, 290}, intArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(9, intArray0.length);
      
      int int3 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, (-2063), 290, 290, 0, 290}, intArray0);
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(9, intArray0.length);
      
//      try { 
        MathArrays.normalizeArray(doubleArray2, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 893.4);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {893.4}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<Object, Object>[][] pairArray0 = MathArrays.buildArray(field0, 2, (-607));
      assertNotNull(pairArray0);
      assertEquals(2, pairArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.normalizeArray(doubleArray0, 1324.5143476856204);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      double double2 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3862.044906314;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-3508.712023242002);
      doubleArray0[3] = 20.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3862.044906314, Double.POSITIVE_INFINITY, (-3508.712023242002), 20.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3862.044906314, Double.POSITIVE_INFINITY, (-3508.712023242002), 20.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-715.9812361931763);
      doubleArray0[1] = (-214.2369);
      doubleArray0[2] = (-1093.531745);
      doubleArray0[3] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-715.9812361931763), (-214.2369), (-1093.531745), 3.834E-20}, doubleArray0, 0.01);
      assertEquals(1324.5143476856204, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1324.5143476856204;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = (-715.9812361931763);
      doubleArray1[3] = (-1093.531745);
      doubleArray1[4] = (-214.2369);
      doubleArray1[5] = (-321.0);
      doubleArray1[6] = 1314818.078887729;
      doubleArray1[7] = (-1093.531745);
      doubleArray1[8] = (-214.2369);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {1324.5143476856204, 3.834E-20, (-715.9812361931763), (-1093.531745), (-214.2369), (-321.0), 1314818.078887729, (-1093.531745), (-214.2369)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[3][9];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-2668.0637036);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, (-2668.0637036));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.4E-45F);
      floatArray0[1] = -0.0F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-572.68F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.4E-45F), -0.0F, Float.NaN, 0.0F, (-1.0F), (-572.68F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-572.68F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-1.0F);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-572.6799926757812), 0.0, (-1.0), (-1.0), Double.NaN, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(13, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-572.6799926757812), 0.0, (-1.0), (-1.0), Double.NaN, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 93;
      intArray0[1] = 93;
      intArray0[2] = 290;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 93, 290}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 93;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {93.0, 93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {186.0, 186.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\"RJ%t";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[5] = "";
      stringArray0[6] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1687.31361715492;
      int[] intArray0 = new int[5];
      intArray0[0] = 290;
      intArray0[1] = 290;
      intArray0[2] = 290;
      intArray0[3] = 290;
      intArray0[4] = 290;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, 290}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1687.31361715492;
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1687.31361715492}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3374.62723430984}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, 290}, intArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2, 7);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1687.31361715492}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3374.62723430984}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3374.62723430984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.scale(2053.9471721558016, doubleArray2);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {1687.31361715492}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3374.62723430984}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {6931306.064990649}, doubleArray4, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray4.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, 290}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, intArray0.length);
      
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, 290}, intArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(5, intArray0.length);
      
      int int3 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {290, 290, 290, 290, 290}, intArray0);
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray5 = MathArrays.normalizeArray(doubleArray0, 290);
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {0.0, 1687.31361715492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 290.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray5, 0.01);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray5.length);
      
      double[] doubleArray6 = MathArrays.convolve(doubleArray2, doubleArray5);
      assertNotNull(doubleArray6);
      assertArrayEquals(new double[] {0.0, 1687.31361715492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 290.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {0.0, 978641.8979498536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray6, 0.01);
      assertArrayEquals(new double[] {1687.31361715492}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3374.62723430984}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray5, doubleArray6);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray2, doubleArray6);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray5.length);
      assertEquals(9, doubleArray6.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      float float1 = 0.0F;
      floatArray0[1] = 0.0F;
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 0.0F;
      doubleArray3[1] = (double) 0.0F;
      doubleArray3[2] = (double) 0.0F;
      doubleArray3[3] = (double) 0.0F;
      double double0 = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (double) 0.0F;
      doubleArray3[6] = (double) 0.0F;
//      try { 
        MathArrays.checkOrder(doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1091.0936976103);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, (-1091.0936976103)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(430);
      assertNotNull(integer0);
      assertEquals(430, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1411));
      assertNotNull(integer1);
      assertEquals((-1411), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-4537));
      assertNotNull(integer2);
      assertEquals((-4537), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 93;
      intArray0[1] = 151;
      intArray0[2] = 290;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 151, 290}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 151, 290}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, intArray0.length);
      
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 1L;
      longArray1[1] = 0L;
      longArray0[1] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1860.4;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = 0.041666666666621166;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = 983.05;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1860.4, 0.0, 0.0, 0.0, 0.0, 1.0, 0.041666666666621166, 0.0, 983.05}, doubleArray0, 0.01);
      assertEquals(4427476.464236111, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 3 while others have length 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 401;
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.scale((-3395.688780833), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[4] = 1.7976931348623157E308;
      doubleArray1[5] = 1.7976931348623157E308;
      double double0 = 1.7976931348623157E308;
      doubleArray1[6] = 1.7976931348623157E308;
      doubleArray1[7] = 1.7976931348623157E308;
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 93;
      intArray0[1] = 151;
      intArray0[2] = 290;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 151, 290}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 93;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale((-536.149), doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-49861.857), -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-49861.857), -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(49954.857, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1808.158F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1808.158F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1808.158F);
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = (double) (-1808.158F);
//      try { 
        MathArrays.convolve(doubleArray2, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-888.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2972.29149488443;
      doubleArray0[4] = 1354.28;
      doubleArray0[5] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[7] = 792.15041;
      doubleArray0[8] = 0.0;
      double double0 = MathArrays.linearCombination(0.0, 1.304E19, 588.09188214, 2972.29149488443);
      assertEquals(1747980.4994952988, double0, 0.01);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 7.848361555046424E-8;
      doubleArray0[1] = 715.54;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {7.848361555046424E-8, 715.54}, doubleArray0, 0.01);
      assertEquals(715.54, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {7.848361555046424E-8, 715.54}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {7.848361555046424E-8, 715.54}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {7.848361555046424E-8, 715.54}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 133;
      intArray0[1] = 60;
      intArray0[2] = (-2147483647);
      intArray0[3] = 140;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {133, 60, (-2147483647), 140}, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {133, 60, (-2147483647), 140}, intArray0);
      assertArrayEquals(new int[] {133}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double double3 = MathArrays.distance(intArray1, intArray1);
      assertArrayEquals(new int[] {133, 60, (-2147483647), 140}, intArray0);
      assertArrayEquals(new int[] {133}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0.0, double3, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      
      long[][] longArray0 = new long[3][0];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 133;
      longArray1[1] = (long) 60;
      longArray1[2] = (long) 60;
      longArray1[3] = (long) 140;
      longArray1[4] = (long) 133;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 133;
      longArray2[1] = (long) 133;
      longArray2[2] = (long) 140;
      longArray2[3] = (long) 140;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) (-2147483647);
      longArray3[1] = (long) 60;
      longArray3[2] = (-3143L);
      longArray3[3] = (long) 133;
      longArray3[4] = (long) (-2147483647);
      longArray3[5] = (-1962L);
      longArray3[6] = (long) 140;
      longArray3[7] = (long) (-2147483647);
      longArray3[8] = (long) 1;
      longArray0[2] = longArray3;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 4 while others have length 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.3421774865586E8;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.3421774865586E8}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.3421774865586E8;
      doubleArray1[1] = 1.3421774865586E8;
      doubleArray1[2] = 1.3421774865586E8;
      doubleArray1[3] = 1.3421774865586E8;
      doubleArray1[4] = 1.3421774865586E8;
      doubleArray1[5] = 1.3421774865586E8;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.3421774865586E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.3421774865586E8, 1.3421774865586E8, 1.3421774865586E8, 1.3421774865586E8, 1.3421774865586E8, 1.3421774865586E8}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1808.158F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1808.158F);
      floatArray0[3] = (-1808.158F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1808.158F);
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1808.158F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-1808.158F);
      floatArray1[5] = (-1808.158F);
      floatArray1[6] = 0.0F;
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1808.158F), 0.0F, 0.0F, (-1808.158F), (-1808.158F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1808.158F), 0.0F, (-1808.158F), (-1808.158F), 0.0F, (-1808.158F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(7, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 1790);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(1.34217729E8, 1.34217729E8, 1.34217729E8, 0.0);
      assertEquals(1.801439877791744E16, double0, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.801439877791744E16;
      doubleArray2[1] = 1.34217729E8;
      doubleArray2[2] = 1.801439877791744E16;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1.34217729E8;
      doubleArray2[5] = 1.801439877791744E16;
      doubleArray2[6] = 1.801439877791744E16;
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, 1.34217729E8, 1.801439877791744E16, 0.0, 1.34217729E8, 1.801439877791744E16, 1.801439877791744E16}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      MathArrays.scaleInPlace(1.625, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.3421774865586E8;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.3421774865586E8}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.3421774865586E8}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = new Double(1755.0999755859375);
      assertNotNull(double0);
      assertEquals(1755.0999755859375, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 304;
      doubleArray0[1] = 1.304E19;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-4163.23687));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {304.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-9.705705586503066E-14), (-4163.23687)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {304.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-9.705705586503066E-14), (-4163.23687)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[9][2];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray2;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray1;
      doubleArray3[5] = doubleArray0;
      doubleArray3[6] = doubleArray2;
      doubleArray3[7] = doubleArray0;
      doubleArray3[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
      assertArrayEquals(new double[] {304.0, 1.304E19}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {304.0, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {(-9.705705586503066E-14), (-4163.23687)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray4.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.3421774865586E8;
      doubleArray0[1] = 1.3421774865586E8;
      doubleArray0[2] = 1.3421774865586E8;
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {1.3421774865586E8, 1.3421774865586E8, 1.3421774865586E8}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = null;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.3421774865586E8, 1.3421774865586E8, 1.3421774865586E8}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 401;
      float[] floatArray0 = null;
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 304, 292);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.3421774865586E8;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.3421774865586E8}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.3421774865586E8}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {1.3421774865586E8}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean2 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.3421774865586E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.6843549731172E8}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = (-1808.94F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1153.5584727705;
      doubleArray0[1] = (double) (-1808.94F);
      MathArrays.scaleInPlace((-1808.94F), doubleArray0);
      assertArrayEquals(new double[] {(-2086717.9961421515), 3272263.711614847}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2086717.9961421515), 3272263.711614847}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(2178.6270961096, (-2994.4936), (double) (-1808.94F), 0.0, 422.1, 1251.085);
      assertEquals((-5995801.917586782), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Field<Pair<Double, String>> field0 = (Field<Pair<Double, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2147134138;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2147134138, 2147134138);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 5667.34107293;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = (-2178.6270961096);
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {5667.34107293, 0.0, 0.0, (-2178.6270961096), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {11334.68214586, 0.0, 0.0, (-4357.2541922192), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {5667.34107293, 0.0, 0.0, (-2178.6270961096), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {11334.68214586, 0.0, 0.0, (-4357.2541922192), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale((-2178.6270961096), doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {5667.34107293, 0.0, 0.0, (-2178.6270961096), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {11334.68214586, 0.0, 0.0, (-4357.2541922192), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {5667.34107293, 0.0, 0.0, (-2178.6270961096), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {11334.68214586, 0.0, 0.0, (-4357.2541922192), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      int int3 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-1130.623F);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (-1826.4509F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1130.623F), 0.0F, (-1826.4509F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, floatArray0.length);
      
//      try { 
        MathArrays.normalizeArray(doubleArray3, 912.476390908685);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 93;
      intArray0[1] = 163;
      intArray0[2] = 290;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 290;
      doubleArray0[2] = (double) 290;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {93.0, 290.0, 290.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8649.0, 53940.0, 138040.0, 168200.0, 84100.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray2 = new double[2][2];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = (-3100.6611);
      double double1 = (-3627.305967763892);
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace((-3627.305967763892), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1169.590873916139;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 3.834E-20;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1169.590873916139, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 3.834E-20, Double.POSITIVE_INFINITY, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1367942.8123479176, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.4699556E-39, Double.POSITIVE_INFINITY, 1.4699556E-39}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1169.590873916139, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 3.834E-20, Double.POSITIVE_INFINITY, 3.834E-20}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {1169.590873916139, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 3.834E-20, Double.POSITIVE_INFINITY, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1367942.8123479176, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.4699556E-39, Double.POSITIVE_INFINITY, 1.4699556E-39}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[][] doubleArray2 = new double[9][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1169.590873916139;
      doubleArray3[1] = 1169.590873916139;
      doubleArray3[2] = 3.834E-20;
      doubleArray2[6] = doubleArray3;
      doubleArray2[7] = doubleArray1;
      doubleArray2[8] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "SP}7:-[=qKL@uy";
      stringArray0[1] = "SP}7:-[=qKL@uy";
      stringArray0[2] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      stringArray0[0] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      stringArray0[4] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.9305076599121094;
      doubleArray0[1] = (-761.32);
      doubleArray0[2] = 0.036;
      doubleArray0[3] = (-1.0);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.9305076599121094, (-761.32), 0.036, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.scaleInPlace(2.449489742783178, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination(0.0, 2.449489742783178, 2.449489742783178, (-943.3938247207709), 2992.74, (-1970.0));
      assertEquals((-5898008.633497058), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Field<Pair<Double, String>> field0 = (Field<Pair<Double, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-3819), (-3819));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 304, 292);
      assertNotNull(objectArray0);
      assertEquals(304, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      stringArray0[1] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      stringArray0[2] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      stringArray0[3] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      stringArray0[4] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.34217729E8;
      doubleArray2[1] = 3.834E-20;
      doubleArray2[2] = 1.34217729E8;
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "SP}7:-[=qKL@uy";
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = 3.834E-20;
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.scaleInPlace((-275.5959231520606), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(0.9974949359893799, 0.0, 0.9974949359893799, (-475.968209), 934.34807, 0.0);
      assertEquals((-474.7758781694348), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1687.31361715492;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 1687.31361715492;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1153.5584727705;
      float[] floatArray0 = new float[8];
      floatArray0[1] = (-1808.94F);
      floatArray0[2] = (-1808.94F);
      floatArray0[3] = (-1808.94F);
      floatArray0[4] = (-1808.94F);
      floatArray0[5] = (-1808.94F);
      floatArray0[6] = (-1808.94F);
      floatArray0[7] = (-1808.94F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1808.94F), (-1808.94F), (-1808.94F), (-1808.94F), (-1808.94F), (-1808.94F), (-1808.94F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1687.31361715492, Double.POSITIVE_INFINITY, 1687.31361715492, 0.0, 1153.5584727705, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 1L;
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 1L;
      longArray0[1] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = false;
      int[] intArray0 = new int[9];
      intArray0[0] = 2392;
      intArray0[1] = 2392;
      intArray0[2] = 2392;
      intArray0[3] = 2392;
      intArray0[4] = 265;
      intArray0[5] = 2392;
      intArray0[6] = 2392;
      intArray0[7] = 2392;
      intArray0[8] = 2392;
      int[] intArray1 = MathArrays.copyOf(intArray0, 265);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2392, 2392, 2392, 2392, 265, 2392, 2392, 2392, 2392}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(9, intArray0.length);
      assertEquals(265, intArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (0 <= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      int int0 = 2392;
      int int1 = (-858);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, (-858));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-704.37F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1808.94F);
      floatArray0[4] = 1034.1755F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-704.37F), 0.0F, 0.0F, (-1808.94F), 1034.1755F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.scaleInPlace((-3100.6611), doubleArray0);
      assertArrayEquals(new double[] {(-4.1616369124064185E11)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-4.1616369124064185E11)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.scaleInPlace((-3100.6611), doubleArray0);
      assertArrayEquals(new double[] {1.2903825686622688E15}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = 1.34217729E8;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1617.0614420742131;
      doubleArray0[3] = 1.34217729E8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {1.34217729E8, 1.34217729E8, 1617.0614420742131, 1.34217729E8, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "SP}7:-[=qKL@uy";
      stringArray0[1] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      stringArray0[2] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      stringArray0[3] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      stringArray0[4] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1687.31361715492;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 1687.31361715492;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1153.5584727705;
      float[] floatArray0 = new float[8];
      floatArray0[1] = (-1808.94F);
      floatArray0[2] = (-1808.94F);
      floatArray0[3] = (-1808.94F);
      floatArray0[4] = (-1808.94F);
      floatArray0[5] = (-1808.94F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1808.94F), (-1808.94F), (-1808.94F), (-1808.94F), (-1808.94F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, 1765.79984515);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1483.284666905;
      doubleArray0[1] = 3093.0;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.3421774865586E8;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-3802.5654625615953);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3093.0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1483.284666905, 3093.0, 1.34217729E8, 0.0, 1.3421774865586E8, Double.NaN, (-3802.5654625615953)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.017090834234333732, 0.035638439111687986, 1546.49542925171, 0.0, 1546.4956557322046, Double.NaN, (-0.043814257260171054)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 893.4);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {893.4}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2, (-607));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 93;
      intArray0[1] = 163;
      intArray0[2] = 290;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 163, 290}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 93;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {93.0, 93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {186.0, 186.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 163, 290}, intArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {93.0, 93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(442.713365, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {93.0, 93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {186.0, 186.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {82344.68589000001, 82344.68589000001}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 163, 290}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, intArray0.length);
      
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 163, 290}, intArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(3, intArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {93.0, 93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {186.0, 186.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {82344.68589000001, 82344.68589000001}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      
      int int3 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 163, 290}, intArray0);
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1826.4509F);
      floatArray0[1] = (float) 290;
      floatArray0[2] = (float) 93;
      floatArray0[3] = (float) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1826.4509F), 290.0F, 93.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray3, 1765.79984515);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {93.0, 93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {882.899922575, 882.899922575}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {186.0, 186.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {82344.68589000001, 82344.68589000001}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray4.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.34217729E8;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 1.34217729E8;
      doubleArray1[3] = 1.34217729E8;
      doubleArray1[4] = (-438.1984134233579);
      doubleArray1[5] = 1.34217729E8;
      doubleArray1[6] = 1.34217729E8;
      doubleArray1[7] = 1.34217729E8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly decreasing (-1 <= 134,217,729)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 93;
      intArray0[1] = 163;
      int int0 = 290;
      intArray0[2] = 290;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 163;
      doubleArray0[1] = (double) 93;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {163.0, 93.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.scaleInPlace(163, doubleArray0);
      assertArrayEquals(new double[] {26569.0, 15159.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {26569.0, 15159.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = 6.52E18;
      double double2 = MathArrays.linearCombination(26569.0, 6.52E18, Double.NaN, (double) 290, (double) 290, (double) 93);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      Field<Pair<Double, String>> field0 = (Field<Pair<Double, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 17, 290);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1687.31361715492;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1153.5584727705;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 100.0;
      doubleArray0[8] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1687.31361715492, Double.POSITIVE_INFINITY, 0.0, 0.0, 1153.5584727705, 0.0, 100.0, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 1687.31361715492, Double.POSITIVE_INFINITY, 0.0, 0.0, 1153.5584727705, 0.0, 100.0, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertArrayEquals(new double[] {0.0, 1687.31361715492, Double.POSITIVE_INFINITY, 0.0, 0.0, 1153.5584727705, 0.0, 100.0, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 5667.34107293;
      doubleArray0[1] = 0.0;
      double double0 = (-2178.6270961096);
      doubleArray0[3] = (-2178.6270961096);
      doubleArray0[3] = 1624.750427;
      doubleArray0[4] = (-1830.69647107341);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {5667.34107293, 0.0, 0.0, 1624.750427, (-1830.69647107341)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.2118754836919367E7, 0.0, 0.0, 1.8416029656395312E7, (-2.075036260516469E7), 0.0, 2639813.950036682, (-5948849.746167832), 3351449.569200637}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      long[][] longArray0 = new long[7][0];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 3901L;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {5667.34107293, 0.0, 0.0, 1624.750427, (-1830.69647107341)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[2] = (float) 3901L;
      floatArray0[1] = (float) 3901L;
      floatArray0[2] = (float) 3901L;
      floatArray0[3] = (float) 3901L;
      floatArray0[4] = (float) 3901L;
      floatArray0[5] = (float) 3901L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 3901.0F, 3901.0F, 3901.0F, 3901.0F, 3901.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-2872));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1617.0614420742131;
      doubleArray0[1] = (-2662.931136);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1617.0614420742131, (-2662.931136), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination((-2662.931136), 1.0, 0.0, 0.0, 0.0, 1617.0614420742131, (-1373.9), 368.74041213687);
      assertEquals((-509275.38337084575), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1617.0614420742131;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (-343.6625312848148);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 1.34217729E8;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 1.34217729E8, 1617.0614420742131, 1.34217729E8, (-343.6625312848148), 1.34217729E8, 1.34217729E8}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (134,217,729 <= 134,217,729)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(1.801439877915618E16, 0.6299605249474366, 3272264.711614847, 3272264.711614847, 699.5088, 0.0);
      assertEquals(1.1359067827872568E16, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = MathArrays.linearCombination((-2.6437112632041807E-8), (-2.6437112632041807E-8), (-2.6437112632041807E-8), (-3922.876156957723), (-3922.876156957723), (-1.9841269659586505E-4));
      assertEquals(0.7784521462324095, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2053.1082F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-2053.1082F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 296;
      intArray0[2] = (-318);
      intArray0[3] = (-958);
      intArray0[4] = 270;
      intArray0[5] = (-4913);
      intArray0[6] = 8;
      int[] intArray1 = MathArrays.copyOf(intArray0, 49);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 296, (-318), (-958), 270, (-4913), 8}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(49, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 584.807;
      doubleArray0[2] = 502.9;
      doubleArray0[3] = 283.6763;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {3.834E-20, 584.807, 502.9, 283.6763}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {3.834E-20, 584.807, 502.9, 283.6763}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 160;
      intArray0[1] = 1;
      intArray0[2] = 270;
      intArray0[3] = 272;
      intArray0[4] = 5987;
      intArray0[5] = 1793;
      int[] intArray1 = MathArrays.copyOf(intArray0, 3267);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {160, 1, 270, 272, 5987, 1793}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(3267, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 801;
      intArray0[1] = (-2048);
      intArray0[2] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {801, (-2048), 2}, intArray0);
      assertArrayEquals(new int[] {801, (-2048)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[7];
      longArray1[0] = (long) (-2048);
      longArray1[1] = (long) (-2048);
      longArray1[2] = 908L;
      longArray1[3] = (long) 801;
      longArray1[4] = (long) (-2048);
      longArray1[5] = 943L;
      longArray1[6] = (long) (-2048);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[23];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) (-2048);
      longArray3[1] = (long) (-2048);
      longArray3[2] = (long) 801;
      longArray3[3] = (long) (-2048);
      longArray3[4] = (long) 2;
      longArray3[5] = 2864L;
      longArray3[6] = (long) 801;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 801L;
      longArray0[3] = longArray4;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 0 while others have length 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.scaleInPlace((-3100.6611), doubleArray0);
      assertArrayEquals(new double[] {(-4.1616369124064185E11)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-4.1616369124064185E11)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-1970.0), Double.NaN, Double.NaN, (-3509.03), 0.0, (-4.1616369124064185E11));
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 93;
      intArray0[1] = 163;
      intArray0[2] = 290;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 163, 290}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 93;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {93.0, 93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {186.0, 186.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 163, 290}, intArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {93.0, 93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(442.713365, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {93.0, 93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {186.0, 186.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {82344.68589000001, 82344.68589000001}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 163, 290}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, intArray0.length);
      
      double double1 = 5198.01;
      double double2 = MathArrays.linearCombination((-1366.8272498363744), 2098.8529656481633, 4377.961849739, 0.0, (-1.0), (double) 0, (double) 93, 5198.01);
      assertEquals((-2385354.4968477977), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      long[][] longArrayArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1193.574F);
      floatArray0[1] = (-1056.2905F);
      floatArray0[2] = 3058.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-3145.02F);
      floatArray0[5] = (-477.53906F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1.0F;
      floatArray0[8] = (-1808.94F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1193.574F), (-1056.2905F), 3058.0F, 0.0F, (-3145.02F), (-477.53906F), 0.0F, 1.0F, (-1808.94F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1808.94F);
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1808.93994140625), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1808.9402178112043, double0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 684.62843159;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      stringArray0[1] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      stringArray0[2] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      
      MathArrays.scaleInPlace(82344.68589000001, doubleArray0);
      assertArrayEquals(new double[] {5.637551315064191E7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      stringArray0[0] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      stringArray0[1] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-3511.4F);
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 767.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-3511.4F), Float.NaN, 767.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1617.0614420742131;
      doubleArray0[1] = (-2662.931136);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1617.0614420742131, (-2662.931136), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "dl.|={^?";
      stringArray0[1] = "NUMBER_OF_INTERPOLATION_POINTS";
      stringArray0[2] = "-6,eTW/Zc>/}dxvn";
      stringArray0[3] = "mv>w";
      stringArray0[4] = "N83&eV\"[E|3EVFe)v^";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      double double1 = MathArrays.linearCombination((-2662.931136), (-2662.931136), 1875.0, 2.0, 1226.919178587, 1875.0, 1.0, 3102.46);
      assertEquals(9398528.154928876, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,662.931 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 5667.34107293;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {5667.34107293, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "lZNh2\"8wciBeR\"";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 779.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-797.7F);
      floatArray0[3] = (-797.7F);
      floatArray0[4] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {779.0F, 0.0F, (-797.7F), (-797.7F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, floatArray0.length);
      
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {5667.34107293, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.5F;
      floatArray0[1] = (-3.4028235E38F);
      float float0 = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-3443.564F);
      float float1 = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 88.0F;
      float float2 = 1743.15F;
      floatArray0[6] = 1743.15F;
      floatArray0[7] = (-0.36690062F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.5F, (-3.4028235E38F), 0.0F, (-3443.564F), 1.0F, 88.0F, 1743.15F, (-0.36690062F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 43);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-270.53104653);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-270.53104653), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 585;
      intArray0[1] = (-1497);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {585, (-1497)}, intArray0);
      assertArrayEquals(new int[] {585, (-1497)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      double double0 = 0.0;
      double double1 = MathArrays.linearCombination(2098.8529656481633, (double) 585, 128.62519, (-851.1925254371), 0.0, 1330.42, (-851.1925254371), 0.0);
      assertEquals(1118344.1845932486, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      long[][] longArrayArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-1638);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1638), (-2718));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 93;
      intArray0[1] = 163;
      intArray0[2] = 290;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 163, 290}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 93;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {93.0, 93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {186.0, 186.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 163, 290}, intArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {93.0, 93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(442.713365, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {93.0, 93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {186.0, 186.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {82344.68589000001, 82344.68589000001}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 163, 290}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, intArray0.length);
      
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {93, 163, 290}, intArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(3, intArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {93.0, 93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {186.0, 186.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {93.0, 93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {186.0, 186.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {82344.68589000001, 82344.68589000001}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection1, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.4E-45F);
      float float0 = 0.5F;
      floatArray0[1] = 0.5F;
      floatArray0[2] = (-244.205F);
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-1.4E-45F), 0.5F, (-244.205F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.5F;
      doubleArray0[1] = (double) (-244.205F);
      doubleArray0[2] = (double) (-1.4E-45F);
      doubleArray0[3] = (double) (-1.4E-45F);
      doubleArray0[4] = (double) 0.5F;
      double double0 = Double.NaN;
      doubleArray0[5] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not decreasing (-244.205 < -0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 4851.4F;
      floatArray0[1] = (-2839.04F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-983.0F);
      floatArray0[4] = (-2171.0F);
      floatArray0[5] = (-198.26776F);
      floatArray0[6] = 811.76F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {4851.4F, (-2839.04F), 0.0F, (-983.0F), (-2171.0F), (-198.26776F), 811.76F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1283;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1283}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-983.0F);
      doubleArray0[4] = (double) 1283;
      doubleArray0[5] = (double) (-2839.04F);
      doubleArray0[6] = (double) 811.76F;
      doubleArray0[7] = (double) (-2839.04F);
      doubleArray0[8] = (double) (-198.26776F);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1966.0), 2566.0, (-5678.080078125), 1623.52001953125, (-5678.080078125), (-396.5355224609375)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-983.0), 1283.0, (-2839.0400390625), 811.760009765625, (-2839.0400390625), (-198.26776123046875)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double double2 = 588.09188214;
      double double3 = (-2656.52507803);
      double double4 = MathArrays.linearCombination((-2656.52507803), 0.0, Double.NaN, 588.09188214);
      assertEquals(Double.NaN, double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 401;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2352;
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.normalizeArray(doubleArray0, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1617.0614420742131;
      doubleArray0[1] = (-2662.931136);
      doubleArray0[2] = 0.0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-1808.94F);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1.0F;
      floatArray1[4] = 1094.2911F;
      floatArray1[5] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1.0F, (-1808.94F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 1.0F, 1094.2911F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1193.574F);
      floatArray0[1] = (-1056.2905F);
      floatArray0[2] = 3058.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-3145.02F);
      floatArray0[5] = (-477.53906F);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3058.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1193.574F);
      doubleArray0[3] = (double) (-477.53906F);
      doubleArray0[4] = (double) (-1193.574F);
      doubleArray0[5] = (double) 3058.0F;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3058.0, 0.0, (-1193.573974609375), (-477.5390625), (-1193.573974609375), 3058.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-1193.574F), (-1056.2905F), 3058.0F, 0.0F, (-3145.02F), (-477.53906F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3862.044906314;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-3508.712023242002);
      doubleArray0[3] = 20.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 342.66082;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3862.044906314, Double.POSITIVE_INFINITY, (-3508.712023242002), 20.0, 2.0, 342.66082}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[][] longArray0 = new long[1][5];
      long[] longArray1 = new long[6];
      longArray1[0] = 9218868437227405312L;
      longArray1[1] = 2L;
      longArray1[2] = 0L;
      longArray1[3] = 3184L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3862.044906314, Double.POSITIVE_INFINITY, (-3508.712023242002), 20.0, 2.0, 342.66082}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3862.044906314, Double.POSITIVE_INFINITY, (-3508.712023242002), 20.0, 2.0, 342.66082}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3184L;
      floatArray0[1] = (float) 2L;
      floatArray0[2] = 2199.6301F;
      floatArray0[3] = (float) 0L;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0L;
      floatArray1[1] = (float) 0L;
      floatArray1[2] = (float) 0L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {3184.0F, 2.0F, 2199.6301F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 684.62843159;
      doubleArray0[1] = (-2921.2306197442535);
      doubleArray0[2] = 1188.0;
      doubleArray0[3] = (-659.11166250248);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 1L;
      longArray1[1] = 0L;
      longArray0[1] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = 2678.0;
      doubleArray0[5] = 4163.856871182;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 401;
      double double0 = MathArrays.linearCombination(76.981979859, 0.0, 1687.31361715492, 258.0, 1808.93994140625, Double.NaN, 0.0, (double) 304);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 401;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2352;
      intArray0[4] = (-2150);
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination(0.0, (double) 0, (-3109.625843), 3.834E-20, (-3109.625843), 1101.42424260559, (double) 0, 0.0);
      assertEquals((-3425017.288913044), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MathArrays.OrderDirection.values();
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = MathArrays.linearCombination((double) 304, (double) 304, (double) 304, 0.003, 0.003, (double) 304, (double) 304, (double) 304);
      assertEquals(184833.824, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = 0L;
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (-533.8941849041);
      doubleArray1[6] = (double) 0L;
//      try { 
        MathArrays.checkPositive(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-270.53104653);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eLs]";
      stringArray0[1] = "OUT_OF_ORDER_ABSCISSA_ARRAY";
      stringArray0[2] = "0R>}u";
      stringArray0[3] = "must have n >= 0 for binomial coefficient (n, k), got n = {0}";
      stringArray0[4] = "0dZU0ko";
      stringArray0[5] = "lZNh2\"8wciBeR\"";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1051.76F;
      floatArray0[3] = 779.0F;
      floatArray0[4] = (-797.7F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      double double0 = (-1416.6782678269);
      doubleArray0[1] = (-1416.6782678269);
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 143;
      intArray0[0] = 143;
      int int1 = (-321);
      intArray0[1] = (-321);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-321);
      MathArrays.copyOf(doubleArray0);
      MathArrays.checkOrder(doubleArray0);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -321 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 684.62843159;
      doubleArray0[1] = (-2921.2306197442535);
      doubleArray0[2] = 1188.0;
      doubleArray0[3] = (-659.11166250248);
      doubleArray0[4] = 368.355999304;
      doubleArray0[5] = (-278.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3.32;
      doubleArray0[8] = (-1248.8726019);
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("list of chromosomes bigger than maxPopulationSize");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.list of chromosomes bigger than maxPopulationSize
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3.141592653589793);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3.141592653589793)}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1401);
      intArray0[1] = (-1203);
      intArray0[2] = (-204);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 26;
      intArray0[6] = 0;
      intArray0[7] = (-2168);
      intArray0[8] = (-2662);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.852412850078;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-921.00164);
      doubleArray0[3] = 314.71726256;
      doubleArray0[4] = 408.11;
      doubleArray0[5] = 6.283185307179586;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2658.79;
      doubleArray0[8] = 0.0;
      int int0 = 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 575.390547;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 205;
      intArray0[1] = 210;
      intArray0[2] = 3230;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 147;
      intArray0[6] = 0;
      intArray0[7] = 253;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = (-1108.18844621);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 3.834E-20;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 1228081.632313334, 0.0, 0.0, Double.POSITIVE_INFINITY, 1.4699556E-39}, doubleArray1, 0.01);
      
      MathArrays.linearCombination(Double.NaN, (-1660.6320715977477), 100.0, 1.7976931348623157E308);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-560.9022F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 4629.7163F;
      floatArray0[3] = 1.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 958;
      intArray0[1] = (-1281);
      intArray0[2] = 1350;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 37;
      intArray0[6] = 0;
      intArray0[7] = 134217729;
      intArray0[8] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 5667.34107293;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2178.6270961096);
      doubleArray0[3] = 1624.750427;
      doubleArray0[4] = (-1830.69647107341);
      MathArrays.convolve(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[7][0];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = 3901L;
      longArray2[1] = (-2718L);
      longArray2[2] = 0L;
      longArray2[3] = 2650L;
      longArray2[4] = 0L;
      longArray2[5] = (-351L);
      longArray2[6] = 830L;
      longArray2[7] = 0L;
      longArray2[8] = (-2046L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = 0L;
      longArray3[1] = 2650L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 830L;
      longArray3[5] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = (-351L);
      longArray4[1] = 0L;
      longArray4[2] = (-2718L);
      longArray4[3] = 0L;
      longArray4[4] = 908L;
      longArray4[5] = (-2718L);
      longArray4[6] = (-2718L);
      longArray4[7] = 2864L;
      longArray4[8] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = 0L;
      longArray5[1] = 3901L;
      longArray5[2] = (-351L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 9 while others have length 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2530.18F;
      floatArray0[1] = 984.6267F;
      floatArray0[2] = (-404.8566F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1276.0F);
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-404.8566F);
      floatArray1[1] = 2530.18F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 943L;
      longArray0[1] = 1L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      long long0 = 0L;
      longArray0[4] = 0L;
      long long1 = 2951L;
      longArray0[5] = 2951L;
      long long2 = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1637.7);
      doubleArray0[2] = (-3419.729);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 379.691097523;
      doubleArray0[5] = 1.0E-5;
      doubleArray0[6] = 773.0;
      doubleArray0[7] = (-2797.37983410943);
      doubleArray0[8] = 137.6;
      MathArrays.distance(doubleArray0, doubleArray0);
      long[] longArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 1L;
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 1L;
      longArray0[1] = longArray2;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 3 while others have length 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[5];
      longArray1[0] = (-9223372036854775808L);
      longArray1[1] = 235L;
      longArray1[2] = 0L;
      longArray1[3] = (-5604L);
      longArray1[4] = (-1265L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      MathArrays.checkRectangular(longArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1055);
      intArray0[1] = (-2714);
      intArray0[2] = (-1);
      intArray0[3] = (-2784);
      intArray0[4] = 258;
      intArray0[5] = (-2248);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.scale(3.834E-20, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray4 = new double[9][8];
      doubleArray4[0] = doubleArray1;
      doubleArray4[1] = doubleArray2;
      doubleArray4[2] = doubleArray0;
      doubleArray4[3] = doubleArray1;
      doubleArray4[4] = doubleArray1;
      doubleArray4[5] = doubleArray2;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 3.834E-20;
      doubleArray4[6] = doubleArray5;
      doubleArray4[7] = doubleArray2;
      doubleArray4[8] = doubleArray3;
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray4);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1146.65517);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray1);
      MathArrays.equals(doubleArray0, doubleArray1);
      double[][] doubleArray2 = new double[5][3];
      doubleArray2[0] = doubleArray1;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-1146.65517);
      doubleArray3[1] = (-1146.65517);
      doubleArray2[1] = doubleArray3;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1108.18844621);
      doubleArray0[2] = (-5.94437619271576);
      doubleArray0[3] = 0.0;
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-1108.18844621);
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = (-5.94437619271576);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1108.18844621);
      doubleArray2[6] = (-1108.18844621);
      doubleArray2[7] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3681.26143321;
      doubleArray0[3] = 670.5239903116927;
      doubleArray0[4] = (-3827.269165884277);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 2768.18167987;
      doubleArray0[8] = 1542.97;
      double[][] doubleArray1 = new double[3][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2.0, 0.0, 3681.26143321, 670.5239903116927, (-3827.269165884277), 1.0, (-1.0), 2768.18167987, 1542.97}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 1.34217729E8;
      doubleArray0[0] = 1.34217729E8;
      MathArrays.equals(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.checkPositive(doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 584.807;
      doubleArray0[1] = 1.0E-5;
      doubleArray0[2] = (-709.61290147);
      doubleArray0[3] = (-931.16632897463);
      doubleArray0[4] = (-1662.1699);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -709.613 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2628.2571489;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-998.211);
      doubleArray0[6] = (-783.5672153);
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 0.0;
      double[][] doubleArray1 = new double[0][5];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-998.211), (-783.5672153), 0.0, 0.0, 0.0, 1.0, 2628.2571489, 1.304E19, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2769.5345462);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1105.1;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1655.5139;
      doubleArray0[5] = 953.454831055;
      doubleArray0[6] = 219.4039111792;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2769.5345462), 0.0, 1105.1, Double.NaN, 1655.5139, 953.454831055, 219.4039111792}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 311;
      intArray0[1] = 2021;
      intArray0[2] = (-1940);
      intArray0[3] = (-1659);
      intArray0[4] = 0;
      intArray0[5] = 47;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-4710.00413);
      doubleArray0[1] = (-444.35626263);
      doubleArray0[2] = (-2671.97092877629);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[9][6];
      long[] longArray1 = new long[9];
      longArray1[0] = (-4320L);
      longArray1[1] = 2041L;
      longArray1[2] = 0L;
      longArray1[3] = 1120L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray1[6] = (-2694L);
      longArray1[7] = 0L;
      longArray1[8] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 2041L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 2041L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = (-4320L);
      longArray3[1] = 1120L;
      longArray3[2] = 0L;
      longArray3[3] = 1L;
      longArray3[4] = 0L;
      longArray3[5] = 1L;
      longArray3[6] = 1L;
      longArray3[7] = (-2694L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = 0L;
      longArray4[1] = 1120L;
      longArray4[2] = 1L;
      longArray4[3] = 2041L;
      longArray4[4] = 0L;
      longArray4[5] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = (-2694L);
      longArray6[1] = 0L;
      longArray6[2] = 526L;
      longArray6[3] = (-4320L);
      longArray6[4] = 1L;
      longArray6[5] = 2041L;
      longArray6[6] = 2041L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[9];
      longArray7[0] = 0L;
      longArray7[1] = (-2694L);
      longArray7[2] = 0L;
      longArray7[3] = 0L;
      longArray7[4] = 2041L;
      longArray7[5] = 0L;
      longArray7[6] = 1L;
      longArray7[7] = 0L;
      longArray7[8] = (-4320L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      longArray8[0] = 0L;
      longArray8[1] = 1120L;
      longArray8[2] = 1L;
      longArray8[3] = (-2694L);
      longArray8[4] = 0L;
      longArray8[5] = 526L;
      longArray8[6] = 0L;
      longArray8[7] = 1120L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[5];
      longArray9[0] = 0L;
      longArray9[1] = (-2694L);
      longArray9[2] = (-2331L);
      longArray9[3] = 0L;
      longArray9[4] = 0L;
      longArray0[8] = longArray9;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -4,320 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 801;
      intArray0[1] = (-2048);
      intArray0[2] = 2;
      MathArrays.copyOf(intArray0, 2);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2048);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-2048);
      doubleArray0[3] = (double) 801;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (2 >= -2,048)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-1638);
      int int1 = (-2718);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1638), (-2718));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-888.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2972.29149488443;
      doubleArray0[4] = 1354.28;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 792.1504090838;
      doubleArray0[8] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 93;
      intArray0[1] = 151;
      intArray0[2] = 290;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 93;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 93;
      floatArray0[1] = (float) 290;
      floatArray0[2] = (float) 290;
      floatArray0[3] = (float) 151;
      floatArray0[4] = (float) 93;
      floatArray0[5] = (float) 290;
      floatArray0[6] = (float) 0;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Pair<Double, String>>) null, (-1), 134217729);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MathArrays.OrderDirection.values();
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 304;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 304, 304);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 923.9989031372565;
      doubleArray0[2] = (-1705.9417);
      doubleArray0[3] = (-1970.0);
      doubleArray0[4] = 1401.027;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 174.2775966;
      doubleArray0[7] = (-4005.328172324073);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<FieldElement<Object>>) null, 303);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3862.044906314;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-3508.712023242002);
      doubleArray0[3] = 20.0;
      MathArrays.linearCombination(2237.7219227051105, (-357.4114641953), 20.0, (-805.620650968), (-1355.57), (-3508.712023242002));
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Pair<Double, String>>) null, (-1), (-2105));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 3115;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 3115);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }
}
