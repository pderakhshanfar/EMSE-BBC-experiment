/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 12:46:30 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3087.261281171306;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3087.261281171306}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][7];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.092571258544922;
      doubleArray0[1] = 714.50849;
      doubleArray0[2] = 0.0036;
      doubleArray0[3] = 527.412;
      doubleArray0[4] = (-750.19046026835);
      doubleArray0[5] = 256.4207238052119;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = null;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 714.50849;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = null;
      doubleArray1[6] = null;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer((-1762));
      assertEquals((-1762), (int)integer0);
      assertNotNull(integer0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(integer0).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 998, 3400);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // java.lang.Integer
//         //
//         verifyException("java.util.Arrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2017277.8389811125;
      doubleArray0[1] = 614.2;
      doubleArray0[2] = (-930.0);
      doubleArray0[3] = 0.11111095942313305;
      doubleArray0[4] = (-333.3746);
      doubleArray0[5] = (-1.0);
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[1];
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 776.8403;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2237.62);
      doubleArray0[3] = 3.0;
      doubleArray0[4] = 30.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1228.628526968);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {776.8403, 1.0, (-2237.62), 3.0, 30.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-668.9527146190677), (-0.8611199941855073), 1926.859321389375, (-2.583359982556522), (-25.83359982556522), -0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals((-4832032.001432493), double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {776.8403, 1.0, (-2237.62), 3.0, 30.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-668.9527146190677), (-0.8611199941855073), 1926.859321389375, (-2.583359982556522), (-25.83359982556522), -0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {776.8403, 1.0, (-2237.62), 3.0, 30.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {776.8403, 1.0, (-2237.62), 3.0, 30.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {776.8403, 1.0, (-2237.62), 3.0, 30.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-668.9527146190677), (-0.8611199941855073), 1926.859321389375, (-2.583359982556522), (-25.83359982556522), -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {107.88758538093225, 0.13888000581449267, (-310.76067861062484), 0.4166400174434779, 4.166400174434781, 0.0}, doubleArray3, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 1156.766F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-858.293F);
      floatArray0[6] = Float.NEGATIVE_INFINITY;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {3.4028235E38F, 0.0F, Float.NaN, 1156.766F, 0.0F, (-858.293F), Float.NEGATIVE_INFINITY, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2.356194490192345);
      doubleArray1[1] = (-2357.9472333245);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1813.3364;
      doubleArray1[4] = (-6.032174644509064E-23);
      doubleArray1[5] = 340.5685967480181;
      doubleArray1[6] = (-487.83649550047693);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.356194490192345), (-2357.9472333245), 1.0, 1813.3364, (-6.032174644509064E-23), 340.5685967480181, (-487.83649550047693)}, doubleArray1, 0.01);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-6.032174644509064E-23);
      doubleArray3[1] = (-487.83649550047693);
      doubleArray3[2] = 1606.7231;
      doubleArray3[3] = 1813.3364;
      doubleArray3[4] = (-6.032174644509064E-23);
      doubleArray3[5] = (-2.356194490192345);
      doubleArray3[6] = (-487.83649550047693);
      double double0 = MathArrays.safeNorm(doubleArray3);
      assertEquals(2519.071746492231, double0, 0.01);
      assertEquals(7, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-6.032174644509064E-23), (-487.83649550047693), 1606.7231, 1813.3364, (-6.032174644509064E-23), (-2.356194490192345), (-487.83649550047693)}, doubleArray3, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("GF?@}D<NrO%zR@");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.GF?@}D<NrO%zR@
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 2835.2567192900633;
      doubleArray0[2] = 3.0095696449279785;
      doubleArray0[3] = 1.5707963267948966;
      doubleArray0[4] = (-0.1666666567325592);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 1805.97;
      doubleArray0[7] = 794.0;
      doubleArray0[8] = 1.184154459111628E-8;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2835.2567192900633);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 2835.2567192900633, 3.0095696449279785, 1.5707963267948966, (-0.1666666567325592), 1.34217729E8, 1805.97, 794.0, 1.184154459111628E-8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.05989041046866455, 6.35725012632726E-5, 3.318064150394574E-5, (-3.5205751970327293E-6), 2835.1418153043837, 0.03814832140532834, 0.01677202123835429, 2.5013430400141263E-13}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.8014398509481984E16;
      doubleArray0[1] = 1.8014398509481984E16;
      doubleArray0[1] = 4.3466666666666665E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4.3467039960946002E18, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.8014398509481984E16, 4.3466666666666665E18, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.8014398509481984E16, 4.3466666666666665E18, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.0E-9;
      doubleArray1[1] = 3938.43;
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.7214844226837158, 1026.66, (-502.4936), 1.304E19, 0.7214844226837158, (-112.251531162));
      assertEquals((-6.552516544E21), double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1026.66;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.7214844226837158;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-112.251531162);
      doubleArray0[5] = (-6.552516544E21);
      doubleArray0[6] = (-112.251531162);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1026.66, 1.304E19, 0.7214844226837158, 1.304E19, (-112.251531162), (-6.552516544E21), (-112.251531162)}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(4.2936152545646203E43, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1026.66, 1.304E19, 0.7214844226837158, 1.304E19, (-112.251531162), (-6.552516544E21), (-112.251531162)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = Float.NaN;
      floatArray1[2] = 3593.44F;
      floatArray1[3] = (-3538.7925F);
      floatArray1[4] = 1.0F;
      floatArray1[5] = (-1732.5168F);
      floatArray1[6] = 1.0F;
      floatArray1[7] = 0.5F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, Float.NaN, 3593.44F, (-3538.7925F), 1.0F, (-1732.5168F), 1.0F, 0.5F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-13);
      intArray0[1] = (-1149);
      intArray0[2] = 3538;
      intArray0[3] = (-2004);
      int[] intArray1 = MathArrays.copyOf(intArray0, 201);
      assertEquals(4, intArray0.length);
      assertEquals(201, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-13), (-1149), 3538, (-2004)}, intArray0);
      
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = 3593.44F;
      floatArray2[1] = (float) 201;
      floatArray2[2] = (float) (-13);
      floatArray2[3] = (-1732.5168F);
      boolean boolean1 = MathArrays.equals(floatArray2, floatArray0);
      assertFalse(boolean1);
      assertEquals(4, floatArray2.length);
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {3593.44F, 201.0F, (-13.0F), (-1732.5168F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 13);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(209.9545, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 209.9545);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = Integer.MAX_VALUE;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, Integer.MAX_VALUE}, intArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-6.032174644509064E-23);
      doubleArray0[1] = 1.34217729E8;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.34217729E8, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-6.032174644509064E-23), 1.34217729E8}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-6.032174644509064E-23), 1.34217729E8}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-647.627358882);
      doubleArray1[1] = 2916.7231;
      doubleArray1[0] = 538.071;
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 134217729;
      intArray0[1] = 1672;
      intArray0[2] = 232;
      intArray0[3] = 130;
      int int0 = 1587;
      intArray0[4] = 1587;
      int int1 = 780;
      intArray0[5] = 780;
      intArray0[6] = 1;
      intArray0[7] = 2;
      intArray0[8] = (-1456);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 232;
      intArray1[1] = 565;
      intArray1[2] = 780;
      intArray1[3] = 232;
      intArray1[4] = 2;
      intArray1[5] = 130;
      intArray1[6] = 134217729;
      intArray1[7] = 134217729;
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 2146919411;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146919411, 2146919411);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1315);
      intArray0[1] = (-2100);
      intArray0[2] = (-1315);
      intArray0[3] = 1538;
      intArray0[4] = 134217729;
      intArray0[5] = 1446;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1315);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-5454.71571924954);
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 1727;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 1727);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1699.689609678351, (-1.0), (-2493.99), 1.7976931348623157E308, (-1.0), (-1.0));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 1699.689609678351;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 1699.689609678351, 1.7976931348623157E308, 1.7976931348623157E308, (-1.0), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not decreasing (-\u221E < 1,699.69)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-5454.71571924954);
      doubleArray0[1] = (-5454.71571924954);
      doubleArray0[2] = (-5454.71571924954);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-5454.71571924954), (-5454.71571924954), (-5454.71571924954)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination((-2548.32), (-5454.71571924954), (-5454.71571924954), 2813.297073440914, (-5454.71571924954), 1600.64, (-5454.71571924954), 0.04168701738764507);
      assertEquals((-1.017663816742751E7), double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-3124);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-3124));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2142140994;
      intArray0[1] = 185;
      intArray0[2] = 1486;
      intArray0[3] = (-2146719145);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2142140994, 185, 1486, (-2146719145)}, intArray0);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 185;
      intArray1[1] = 185;
      intArray1[0] = (-2146719145);
      int int1 = MathArrays.distanceInf(intArray1, intArray0);
      assertEquals(6107157, int1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {2142140994, 185, 1486, (-2146719145)}, intArray0);
      assertArrayEquals(new int[] {(-2146719145), 185, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1894);
      int int0 = 6;
      intArray0[1] = (-1894);
      int int1 = 134217729;
      intArray0[2] = 134217729;
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int2);
      assertEquals(3, intArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new int[] {(-1894), (-1894), 134217729}, intArray0);
      
      int int3 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int3);
      assertEquals(3, intArray0.length);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertArrayEquals(new int[] {(-1894), (-1894), 134217729}, intArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3805;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 3805;
      floatArray0[1] = (float) 3805;
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean1);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {3805.0F, 3805.0F}, floatArray0, 0.01F);
      
      boolean boolean2 = MathArrays.equals(doubleArray1, doubleArray0);
      assertTrue(boolean2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertTrue(boolean3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 639;
      intArray0[1] = (-1073741823);
      intArray0[2] = (-1);
      intArray0[3] = (-3802);
      intArray0[4] = 18;
      intArray0[5] = (-1320);
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1073741823);
      intArray1[1] = (-1073741823);
      intArray1[2] = (-1);
      intArray1[3] = 18;
      intArray1[4] = (-1073741823);
      intArray1[5] = (-1320);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-2147479173), int0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {639, (-1073741823), (-1), (-3802), 18, (-1320)}, intArray0);
      assertArrayEquals(new int[] {(-1073741823), (-1073741823), (-1), 18, (-1073741823), (-1320)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.1666666505023083;
      doubleArray1[1] = 1127.97;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2.17333333333333325E18;
      doubleArray1[4] = 5085.4192555;
      doubleArray1[5] = 740.0;
      doubleArray1[6] = (-796.67094208);
      doubleArray1[7] = (-2229.10690505);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.1666666505023083, 1127.97, 0.0, 2.17333333333333325E18, 5085.4192555, 740.0, (-796.67094208), (-2229.10690505)}, doubleArray1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-5124.133F);
      floatArray0[1] = 0.5F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1577.6731F);
      floatArray0[4] = 0.0F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-5124.133F);
      floatArray1[2] = (-5124.133F);
      floatArray1[3] = 3422.9F;
      floatArray1[4] = 0.5F;
      floatArray1[5] = (-83.14F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-5124.133F), 0.5F, 0.0F, (-1577.6731F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-5124.133F), (-5124.133F), 3422.9F, 0.5F, (-83.14F)}, floatArray1, 0.01F);
      
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[7];
      longArray1[0] = 412L;
      longArray1[1] = 369L;
      longArray1[2] = (-281L);
      longArray1[3] = (-604L);
      longArray1[4] = 2683L;
      longArray1[5] = (-628L);
      longArray1[6] = (-1793L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-3967.76F);
      floatArray0[1] = (-1332.46F);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1332.46F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-1332.46F);
      floatArray1[4] = (-1332.46F);
      floatArray1[5] = (-1332.46F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-3967.76F), (-1332.46F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1332.46F), 0.0F, (-1332.46F), (-1332.46F), (-1332.46F)}, floatArray1, 0.01F);
      
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[7];
      longArray1[0] = 486L;
      longArray1[1] = 4593L;
      longArray1[2] = (-589L);
      longArray1[3] = 3677L;
      longArray1[4] = 2846L;
      longArray1[5] = 955L;
      longArray1[6] = (-1322L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1322L);
      longArray2[1] = 486L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 3677L;
      longArray0[3] = longArray4;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 2 while others have length 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1078.9584769519781;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2896.681197290183;
      doubleArray0[3] = 969.09988408;
      doubleArray0[4] = (-2833.307346);
      doubleArray0[5] = (-1704.87957324);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 969.09988408);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1078.9584769519781, 0.0, 2896.681197290183, 969.09988408, (-2833.307346), (-1704.87957324)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2571.9142724098347, 0.0, 6904.821522861451, 2310.044247761168, (-6753.757217688885), (-4063.922941263569)}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1078.9584769519781, 0.0, 2896.681197290183, 969.09988408, (-2833.307346), (-1704.87957324)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly decreasing (0 <= 6,904.822)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.7288F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 937.8F;
      floatArray0[3] = 994.69525F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1373.84F;
      floatArray0[6] = 118.0F;
      floatArray0[7] = (-4111.9233F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.7288F, Float.NaN, 937.8F, 994.69525F, 0.0F, 1373.84F, 118.0F, (-4111.9233F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 994.69525F;
      floatArray1[1] = Float.NaN;
      floatArray1[2] = 1373.84F;
      floatArray1[3] = Float.NaN;
      floatArray1[4] = 994.69525F;
      floatArray1[5] = 994.69525F;
      floatArray1[6] = 937.8F;
      floatArray1[7] = (-4111.9233F);
      boolean boolean1 = MathArrays.equals(floatArray1, floatArray1);
      assertFalse(boolean1);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {994.69525F, Float.NaN, 1373.84F, Float.NaN, 994.69525F, 994.69525F, 937.8F, (-4111.9233F)}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 937.8F;
      doubleArray0[1] = (double) 937.8F;
      doubleArray0[2] = (double) 937.8F;
      doubleArray0[3] = (double) 118.0F;
      doubleArray0[4] = (double) 994.69525F;
      doubleArray0[5] = (double) (-4111.9233F);
      doubleArray0[6] = (double) 118.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {118.0, 994.6952514648438, 937.7999877929688, 937.7999877929688, 937.7999877929688, (-4111.92333984375), 118.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(86);
      assertEquals(86, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(86);
      assertEquals(86, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
      
      MathArrays.scaleInPlace(767243.6622365465, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (float) 86;
      floatArray1[2] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 86.0F, 0.0F}, floatArray1, 0.01F);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, 2750.9, 1.1898466331396499E24, 1.1898466331396499E24, (-2174.42262645), 6743890.045434322);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 6743890.045434322;
      doubleArray0[2] = (-2174.42262645);
      doubleArray0[3] = 6743890.045434322;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 2750.9;
      doubleArray0[6] = 2750.9;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      doubleArray0[8] = (-1.0);
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.7976931348623157E308, 6743890.045434322, (-2174.42262645), 6743890.045434322, Double.POSITIVE_INFINITY, 2750.9, 2750.9, Double.POSITIVE_INFINITY, (-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-4493.394407);
      doubleArray1[2] = 6743890.045434322;
      doubleArray1[3] = 1258.7231181399927;
      doubleArray1[4] = (-2174.42262645);
      doubleArray1[5] = 1.1898466331396499E24;
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = Double.POSITIVE_INFINITY;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not decreasing (-4,493.394 < 6,743,890.045)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2596.900083837328;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2596.900083837328}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6743890.045434322}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = 253;
      intArray0[2] = (-1897);
      intArray0[3] = 0;
      intArray0[4] = (-1659);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = (-3263.04);
      double[] doubleArray1 = MathArrays.scale((-3263.04), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[0][8];
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1803.1065220298387;
      doubleArray0[1] = 2596.900083837328;
      doubleArray0[2] = 2596.900083837328;
      doubleArray0[3] = 2596.900083837328;
      doubleArray0[4] = 2596.900083837328;
      double[] doubleArray1 = MathArrays.scale(2596.900083837328, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4682487.4782269215, 6743890.045434322, 6743890.045434322, 6743890.045434322, 6743890.045434322}, doubleArray1, 0.01);
      
      double[][] doubleArray2 = new double[7][7];
      doubleArray2[3] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-183));
      assertEquals((-183), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(396);
      assertEquals(396, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      MathArrays.scaleInPlace((-183), doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-8.568952085155267E8), (-1.234131878314481E9), (-1.234131878314481E9), (-1.234131878314481E9), (-1.234131878314481E9)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 437.322, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(735.4648159085472, (-1495.421106019571), 0.0, 0.0);
      assertEquals((-1099829.6084444397), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-654.23602649706);
      doubleArray0[1] = 1231.947193154433;
      doubleArray0[2] = (-3087.261281171306);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2548.538F);
      floatArray0[1] = 256.0F;
      floatArray0[2] = 933.3F;
      floatArray0[3] = 0.0F;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-2548.538F), 256.0F, 933.3F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-625.7811987381);
      doubleArray2[1] = 91.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 3.834E-20;
      doubleArray2[4] = (-457.50429977572134);
      doubleArray2[5] = (-1525.562119715619);
//      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(14, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertTrue(boolean0);
      assertEquals(14, doubleArray0.length);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 91L;
      doubleArray0[1] = (double) 91L;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 91L;
      doubleArray1[1] = (-14.27959);
      doubleArray1[3] = (double) 91L;
      doubleArray1[4] = (double) 91L;
      doubleArray1[5] = (double) 91L;
      doubleArray1[7] = (double) 91L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {91.0, 91.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {91.0, (-14.27959), 0.0, 91.0, 91.0, 91.0, 0.0, 91.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 499);
      assertEquals(8, doubleArray1.length);
      assertEquals(499, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {91.0, (-14.27959), 0.0, 91.0, 91.0, 91.0, 0.0, 91.0}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[9][9];
      long[] longArray1 = new long[6];
      longArray1[0] = 91L;
      longArray1[1] = 91L;
      longArray1[2] = 1292L;
      longArray1[3] = 91L;
      longArray1[4] = 705L;
      longArray1[5] = (long) 499;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 705L;
      longArray2[1] = 91L;
      longArray2[2] = (-304L);
      longArray2[3] = 91L;
      longArray2[4] = 1292L;
      longArray2[5] = 1292L;
      longArray2[6] = (long) 499;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 499;
      longArray3[1] = 91L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 705L;
      longArray4[1] = (-304L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 1292L;
      longArray5[1] = (-304L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = 705L;
      longArray6[1] = 1292L;
      longArray6[2] = (long) 499;
      longArray6[3] = 91L;
      longArray6[4] = 91L;
      longArray6[5] = 91L;
      longArray6[6] = (long) 499;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = (-304L);
      longArray7[1] = 1292L;
      longArray7[2] = (long) 499;
      longArray7[3] = (-304L);
      longArray7[4] = 91L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[3];
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray2));
      
      longArray8[0] = 91L;
      longArray8[1] = 705L;
      longArray8[2] = (-304L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[0];
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray7));
      
      longArray0[8] = longArray9;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -304 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 124;
      intArray0[2] = 134217729;
      intArray0[3] = 115;
      intArray0[4] = 1038;
      intArray0[5] = (-362);
      intArray0[6] = (-1912);
      intArray0[7] = (-1552);
      intArray0[8] = (-124);
      int[] intArray1 = MathArrays.copyOf(intArray0, 124);
      assertEquals(9, intArray0.length);
      assertEquals(124, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 124, 134217729, 115, 1038, (-362), (-1912), (-1552), (-124)}, intArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean1);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, (double[]) null);
      assertFalse(boolean0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd(doubleArray1, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.34217729E8, 2688.1, 1.34217729E8, 1.7976931348623157E308, 1.34217729E8, 2750.9);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 2688.1;
      doubleArray0[2] = 2750.9;
      doubleArray0[4] = 2688.1;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 1.34217729E8;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 2688.1, 2750.9, 0.0, 2688.1, Double.POSITIVE_INFINITY, 1.34217729E8}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 2688.1, 2750.9, 0.0, 2688.1, Double.POSITIVE_INFINITY, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, 7225881.609999999, 7567450.8100000005, 0.0, 7225881.609999999, Double.POSITIVE_INFINITY, 1.801439877791744E16}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.34217729E8, 2688.1, 2750.9, 0.0, 2688.1, Double.POSITIVE_INFINITY, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, 7225881.609999999, 7567450.8100000005, 0.0, 7225881.609999999, Double.POSITIVE_INFINITY, 1.801439877791744E16}, doubleArray1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray2, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1803.1065220298387;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = 2596.900083837328;
      doubleArray0[3] = 2596.900083837328;
      doubleArray0[4] = 2596.900083837328;
      doubleArray0[5] = 20.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3508.501);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1803.1065220298387, 20.0, 2596.900083837328, 2596.900083837328, 2596.900083837328, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {656.6667968702068, 7.283727154743661, 945.7555829401019, 945.7555829401019, 945.7555829401019, 7.283727154743661}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(1651.1445008972262, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1803.1065220298387, 20.0, 2596.900083837328, 2596.900083837328, 2596.900083837328, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {656.6667968702068, 7.283727154743661, 945.7555829401019, 945.7555829401019, 945.7555829401019, 7.283727154743661}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1803.1065220298387, 20.0, 2596.900083837328, 2596.900083837328, 2596.900083837328, 20.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1803.1065220298387, 20.0, 2596.900083837328, 2596.900083837328, 2596.900083837328, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {656.6667968702068, 7.283727154743661, 945.7555829401019, 945.7555829401019, 945.7555829401019, 7.283727154743661}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1184040.1842371132, 145.67454309487323, 2456032.752626772, 2456032.752626772, 2456032.752626772, 145.67454309487323}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1803.1065220298387, 20.0, 2596.900083837328, 2596.900083837328, 2596.900083837328, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {656.6667968702068, 7.283727154743661, 945.7555829401019, 945.7555829401019, 945.7555829401019, 7.283727154743661}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2459.7733189000455, 27.283727154743662, 3542.6556667774303, 3542.6556667774303, 3542.6556667774303, 27.283727154743662}, doubleArray3, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 1195;
      intArray0[3] = 2;
      intArray0[4] = 1195;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, intArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {2, 2, 1195, 2, 1195}, intArray0);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 1195, 2, 1195}, intArray0);
      
      double[] doubleArray1 = null;
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      Double double0 = new Double(0.0F);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 9593.806773541824;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      double double1 = new Double(0.0F);
      assertEquals(0.0, double1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, 338.2163453007602);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1.0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0}, doubleArray2, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1008);
      intArray0[1] = (-1654);
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-1008);
      doubleArray3[1] = (-379.645);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = (double) (-1654);
      doubleArray3[4] = (double) (-1654);
      doubleArray3[5] = 1.0;
      doubleArray3[6] = (double) (-1654);
      doubleArray3[7] = (double) (-1654);
      doubleArray3[8] = 1.0;
//      try { 
        MathArrays.ebeSubtract(doubleArray3, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 299);
      assertEquals(1, doubleArray0.length);
      assertEquals(299, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1199;
      doubleArray2[1] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray2);
      assertTrue(boolean0);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1199.0, 0.0}, doubleArray2, 0.01);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[0];
      double double0 = (-4.068233003401932E-9);
      // Undeclared exception!
//      try { 
        MathArrays.scale((-4.068233003401932E-9), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3257.0844972;
      doubleArray0[1] = (-3279.21);
      doubleArray0[2] = (-3279.21);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3257.0844972, (-3279.21), (-3279.21), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0608599421900576E7, 1.0753218224100001E7, 1.0753218224100001E7, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3257.0844972;
      doubleArray2[1] = (-3279.21);
      doubleArray2[2] = (-3279.21);
      doubleArray2[3] = 3257.0844972;
      doubleArray2[4] = 3257.0844972;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3257.0844972, (-3279.21), (-3279.21), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0608599421900576E7, 1.0753218224100001E7, 1.0753218224100001E7, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3257.0844972, (-3279.21), (-3279.21), 3257.0844972, 3257.0844972}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2531.1873F);
      floatArray0[1] = Float.NEGATIVE_INFINITY;
      floatArray0[2] = 0.5F;
      floatArray0[3] = (-4034.3904F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-2531.1873F), Float.NEGATIVE_INFINITY, 0.5F, (-4034.3904F)}, floatArray0, 0.01F);
      
//      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = new Double(1197.982692);
      assertEquals(1197.982692, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-762.4005791);
      doubleArray0[1] = 1197.982692;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 9593.806773541824;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-762.4005791), 1197.982692, 1.7976931348623157E308, 1.7976931348623157E308, 9593.806773541824}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.7675435543060303);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-762.4005791), 1197.982692, 1.7976931348623157E308, 1.7976931348623157E308, 9593.806773541824}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {(-762.4005791), 1197.982692, 1.7976931348623157E308, 1.7976931348623157E308, 9593.806773541824}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double2 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(4521);
      assertEquals(4521, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(4521, (int)integer1);
      assertEquals(3, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3366);
      assertEquals(3366, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = (double) 4521;
      doubleArray0[2] = (double) (int)integerArray0[2];
      doubleArray0[3] = (double) 3366;
      doubleArray0[4] = (double) (int)integerArray0[0];
      doubleArray0[5] = (double) (int)integerArray0[0];
      doubleArray0[6] = (double) 3366;
      doubleArray0[7] = (double) (int)integerArray0[2];
      doubleArray0[8] = (double) (int)integerArray0[2];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {4521.0, 4521.0, 3366.0, 3366.0, 4521.0, 4521.0, 3366.0, 3366.0, 3366.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(2144441886);
      assertEquals(2144441886, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-505));
      assertEquals((-505), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      Integer integer2 = new Integer(991);
      assertEquals(991, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = 1803.1065220298387;
      doubleArray0[1] = 2596.900083837328;
      doubleArray0[2] = 2596.900083837328;
      doubleArray0[3] = 1803.1065220298387;
      doubleArray0[4] = 2596.900083837328;
      double[] doubleArray1 = MathArrays.scale(2596.900083837328, doubleArray0);
      assertEquals(21, doubleArray0.length);
      assertEquals(21, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(boolean0);
      assertEquals(21, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1803.1065220298387;
      doubleArray0[1] = 2596.900083837328;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 20.0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.195926431680785, 11.804073568319213, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.195926431680785, 11.804073568319213, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (1,803.107 <= 2,596.9)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2039.247618191696);
      doubleArray0[1] = 2596.900083837328;
      doubleArray0[2] = (-2039.247618191696);
      double[] doubleArray1 = MathArrays.scale(2596.900083837328, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2039.247618191696), 2596.900083837328, (-2039.247618191696)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5295722.310647087), 6743890.045434322, (-5295722.310647087)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3082.345F;
      floatArray0[1] = 258.51F;
      floatArray0[2] = (-249.75F);
      floatArray0[3] = (-1630.6521F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 813.4F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {3082.345F, 258.51F, (-249.75F), (-1630.6521F), 0.0F, 813.4F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2039.247618191696), 2596.900083837328, (-2039.247618191696)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5295722.310647087), 6743890.045434322, (-5295722.310647087)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0591444621294174E7), 1.3487780090868644E7, (-1.0591444621294174E7)}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-2039.247618191696), 2596.900083837328, (-2039.247618191696)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5295722.310647087), 6743890.045434322, (-5295722.310647087)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0591444621294174E7), 1.3487780090868644E7, (-1.0591444621294174E7)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0589405373675983E7, (-1.3485183190784806E7), 1.0589405373675983E7}, doubleArray3, 0.01);
      
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray1, 4131.374820015);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {(-2039.247618191696), 2596.900083837328, (-2039.247618191696)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5295722.310647087), 6743890.045434322, (-5295722.310647087)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5686.3686730446425, (-7241.362526074286), 5686.3686730446425}, doubleArray4, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("fQ`eE.gOR]T");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.fQ`eE.gOR]T
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1803.1065220298387;
      doubleArray0[1] = 2596.900083837328;
      doubleArray0[3] = 2596.900083837328;
      doubleArray0[4] = 2596.900083837328;
      double[] doubleArray1 = MathArrays.scale(2596.900083837328, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 0.0, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4682487.4782269215, 6743890.045434322, 0.0, 6743890.045434322, 6743890.045434322}, doubleArray1, 0.01);
      
      double[][] doubleArray2 = new double[7][7];
      doubleArray2[0] = doubleArray0;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray3);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 0.0, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      Integer integer0 = new Integer((-505));
      assertEquals((-505), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-505));
      assertEquals((-505), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      
      MathArrays.scaleInPlace((double) integerArray0[6], doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(7, integerArray0.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 0.0, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.3646561765045953E9), (-3.4056644729443326E9), -0.0, (-3.4056644729443326E9), (-3.4056644729443326E9)}, doubleArray1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(12, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, true);
      assertTrue(boolean2);
      assertEquals(1, doubleArray0.length);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2450);
      intArray0[1] = (-1);
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = (-2450);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(4898, int0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2450), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-2450)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1803.1065220298387;
      doubleArray0[1] = 2596.900083837328;
      doubleArray0[3] = 2596.900083837328;
      doubleArray0[4] = 2596.900083837328;
      double[] doubleArray1 = MathArrays.scale(2596.900083837328, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 0.0, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4682487.4782269215, 6743890.045434322, 0.0, 6743890.045434322, 6743890.045434322}, doubleArray1, 0.01);
      
      double[][] doubleArray2 = new double[7][7];
      doubleArray2[0] = doubleArray0;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray3);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 0.0, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      Integer integer0 = new Integer((-505));
      assertEquals((-505), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-505));
      assertEquals((-505), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      
      MathArrays.scaleInPlace((double) integerArray0[6], doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(7, integerArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 0.0, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.3646561765045953E9), (-3.4056644729443326E9), -0.0, (-3.4056644729443326E9), (-3.4056644729443326E9)}, doubleArray1, 0.01);
      
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (double) (int)integerArray0[4];
      doubleArray4[1] = (double) (int)integerArray0[0];
      doubleArray4[2] = (double) (-505);
//      try { 
        MathArrays.ebeDivide(doubleArray4, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2597.6864531, 1593.0, 1231.947193154433, 1593.0, 2688.1, 4863.55142);
      assertEquals(1.9174318970585313E7, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2596.900083837328;
      doubleArray0[1] = 2597.6864531;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2596.900083837328, 2597.6864531}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      
      Integer integer0 = new Integer((-1109));
      assertEquals((-1109), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2147483557);
      assertEquals(2147483557, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2525);
      assertEquals(2525, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(2240);
      assertEquals(2240, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(134217729);
      assertEquals(134217729, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(2147483557);
      assertEquals(2147483557, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      Integer integer6 = new Integer(1545);
      assertEquals(1545, (int)integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      
      Integer integer7 = new Integer(1499);
      assertEquals(1499, (int)integer7);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertNotNull(integer7);
      
      Integer integer8 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer8);
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer4));
      assertNotNull(integer8);
      
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(19, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(5527242.667572409, 9593.806773541824, (-3279.21), (-3279.21), 1.0608599421900576E7, 2596.900083837328);
      assertEquals(8.05875240895199E10, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(0.07490822288864472, 5527242.667572409, 8.05875240895199E10, 1.0);
      assertEquals(8.05879381254456E10, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertEquals(19, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double3, 0.01);
      assertEquals(19, doubleArray0.length);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      MathArrays.scaleInPlace((-3769.7), doubleArray0);
      assertEquals(19, doubleArray0.length);
      
      double double4 = MathArrays.linearCombination(1918866.1444407166, 0.0, 8.05875240895199E10, 5527242.667572409);
      assertEquals(4.454268016216137E17, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2596.900083837328;
      doubleArray0[1] = 2596.900083837328;
      doubleArray0[2] = 2596.900083837328;
      doubleArray0[3] = 2596.900083837328;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2596.900083837328);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {649.225020959332, 649.225020959332, 649.225020959332, 649.225020959332, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(1947.675062877996, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {649.225020959332, 649.225020959332, 649.225020959332, 649.225020959332, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(7790.700251511984, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {649.225020959332, 649.225020959332, 649.225020959332, 649.225020959332, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 91L;
      doubleArray0[1] = (double) 91L;
      doubleArray0[2] = (double) 91L;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 91L;
      doubleArray1[1] = (double) 91L;
      doubleArray1[2] = (double) 91L;
      doubleArray1[3] = (double) 91L;
      doubleArray1[4] = (double) 91L;
      doubleArray1[5] = (double) 91L;
      doubleArray1[6] = (double) 91L;
      doubleArray1[7] = (double) 91L;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {91.0, 91.0, 91.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3257.0844972;
      doubleArray0[1] = (-3279.21);
      doubleArray0[2] = (-3279.21);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3257.0844972, (-3279.21), (-3279.21), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0608599421900576E7, 1.0753218224100001E7, 1.0753218224100001E7, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3257.0844972;
      doubleArray2[1] = (-3279.21);
      doubleArray2[2] = (-3279.21);
      doubleArray2[3] = 3257.0844972;
      doubleArray2[4] = 3257.0844972;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[2][8];
      doubleArray3[0] = doubleArray2;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray3[1] = doubleArray4;
//      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2141;
      intArray0[3] = 0;
      intArray0[4] = (-1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1160.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[5] = (double) 134217729;
      doubleArray0[6] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1160.0, 1.34217729E8, 0.0, (-1.0), 1.34217729E8}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 1160.0, 1.34217729E8, 0.0, (-1.0), 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1345600.0, 1.801439877791744E16, 0.0, 1.0, 1.801439877791744E16}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 1160.0, 1.34217729E8, 0.0, (-1.0), 1.34217729E8}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray3, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 9593.806773541824;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {9593.806773541824}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 9593.806773541824;
      doubleArray1[1] = 9593.806773541824;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(13567.691653929713, double0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {9593.806773541824, 9593.806773541824, 0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertTrue(boolean0);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {9593.806773541824, 9593.806773541824, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 220;
      intArray0[2] = 220;
      intArray0[3] = (-3754);
      intArray0[4] = (-3754);
      intArray0[5] = (-3754);
      intArray0[6] = (-2196);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(7, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {0, 220, 220, (-3754), (-3754), (-3754), (-2196)}, intArray0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 220;
      intArray1[1] = 133;
      intArray1[2] = 220;
      intArray1[3] = (-2196);
      intArray1[4] = 1579;
      intArray1[5] = (-3754);
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.34217729E8, 2688.1, 1.34217729E8, 1.7976931348623157E308, 1.34217729E8, 2750.9);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 2688.1;
      doubleArray0[2] = 2750.9;
      doubleArray0[4] = 2688.1;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 1.34217729E8;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 2688.1, 2750.9, 0.0, 2688.1, Double.POSITIVE_INFINITY, 1.34217729E8}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, 2750.9);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 9593.806773541824;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {9593.806773541824}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 9593.806773541824;
      doubleArray1[1] = 9593.806773541824;
      doubleArray1[2] = 3566.230406705;
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1166.85565056381;
      doubleArray0[2] = 1503.1886028;
      doubleArray0[3] = 2940.344;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[][] longArray1 = new long[5][1];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(5, longArray1.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(352499.3354528562);
      assertEquals(352499.3354528562, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(352499.3354528562);
      assertEquals(352499.3354528562, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(352499.3354528562, (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[8] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(352499.3354528562, (double)double3, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals(352499.3354528562, (double)double4, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      double double5 = 3.834E-20;
      Double double6 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double5, 0.01);
      assertNotNull(double6);
      
      doubleArray0[5] = double6;
      Double double7 = new Double(2.0384590076338444E14);
      assertEquals(2.0384590076338444E14, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotNull(double7);
      
      doubleArray0[6] = double7;
      Double double8 = new Double((double) doubleArray0[3]);
      assertEquals(352499.3354528562, (double)double8, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double8, (double)double1, 0.01);
      assertEquals((double)double8, (double)double2, 0.01);
      assertEquals((double)double8, (double)double3, 0.01);
      assertEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertEquals((double)double8, (double)double0, 0.01);
      assertNotNull(double8);
      
      doubleArray0[7] = double8;
      Double double9 = new Double(2.0384590076338444E14);
      assertEquals(2.0384590076338444E14, (double)double9, 0.01);
      assertNotEquals((double)double9, (double)double4, 0.01);
      assertNotEquals((double)double9, (double)double8, 0.01);
      assertNotEquals((double)double9, (double)double3, 0.01);
      assertNotEquals((double)double9, (double)double6, 0.01);
      assertNotEquals((double)double9, (double)double5, 0.01);
      assertNotEquals((double)double9, (double)double1, 0.01);
      assertNotEquals((double)double9, (double)double2, 0.01);
      assertEquals((double)double9, (double)double7, 0.01);
      assertNotEquals((double)double9, (double)double0, 0.01);
      assertNotNull(double9);
      
      doubleArray0[8] = double9;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.Double", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1051.14F);
      floatArray0[3] = (-330.7901F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1051.14F), (-330.7901F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1051.14F);
      doubleArray0[1] = (double) (-330.7901F);
      doubleArray0[2] = (double) (-330.7901F);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) (-1051.14F);
      boolean boolean1 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1051.1400146484375), (-330.79010009765625), (-330.79010009765625), 0.0, 0.0, 0.0, (-1051.1400146484375)}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-4oy*Z96";
      stringArray0[1] = "4@x-Dx*";
      stringArray0[2] = "~:aaP*n\"\"J";
      stringArray0[3] = "L\"7?\";-*Z!{W<>,~";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean2);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 91L;
      doubleArray0[1] = (double) 91L;
      doubleArray0[2] = (-838.4054946918608);
      doubleArray0[3] = (double) 91L;
      doubleArray0[4] = (double) 91L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {91.0, 91.0, (-838.4054946918608), 91.0, 91.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {91.0, 91.0, (-838.4054946918608), 91.0, 91.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8281.0, 8281.0, 702923.7735295038, 8281.0, 8281.0}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3.4028235E38F);
      floatArray0[2] = (float) 91L;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3.4028235E38F), 91.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1803.1065220298387;
      double[] doubleArray2 = MathArrays.scale(1803.1065220298387, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1803.1065220298387}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3251193.129786541}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[1][1];
      doubleArray3[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.scale((-2039.247618191696), doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 813.4F;
      floatArray0[3] = (-249.75F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3082.345F;
      floatArray0[6] = (-1630.6521F);
      floatArray0[7] = 258.51F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 813.4F, (-249.75F), 0.0F, 3082.345F, (-1630.6521F), 258.51F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray3, 0.01);
      
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (double) (-1630.6521F);
      doubleArray4[1] = (double) 813.4F;
      doubleArray4[2] = (double) 258.51F;
      doubleArray4[3] = (double) 3082.345F;
      doubleArray4[4] = (double) 813.4F;
      doubleArray4[5] = (double) 3082.345F;
      doubleArray4[6] = (double) 0.0F;
      double[] doubleArray5 = MathArrays.normalizeArray(doubleArray4, (-2039.247618191696));
      assertEquals(7, doubleArray5.length);
      assertEquals(7, doubleArray4.length);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray5);
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {518.01264892114, (-258.39447996306745), (-82.12141324528994), (-979.1749469707055), (-258.39447996306745), (-979.1749469707055), -0.0}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {(-1630.652099609375), 813.4000244140625, 258.510009765625, 3082.344970703125, 813.4000244140625, 3082.344970703125, 0.0}, doubleArray4, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("n!kzr");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.n!kzr
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1803.1065220298387;
      doubleArray0[1] = 2596.900083837328;
      doubleArray0[2] = 2596.900083837328;
      doubleArray0[3] = 2596.900083837328;
      doubleArray0[4] = 2596.900083837328;
      double[] doubleArray1 = MathArrays.scale(2596.900083837328, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4682487.4782269215, 6743890.045434322, 6743890.045434322, 6743890.045434322, 6743890.045434322}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[7][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray3.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.443023711314014E9, 1.7513208624378113E10, 1.7513208624378113E10, 1.7513208624378113E10, 1.7513208624378113E10}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {4682487.4782269215, 6743890.045434322, 6743890.045434322, 6743890.045434322, 6743890.045434322}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4682487.4782269215, 6743890.045434322, 6743890.045434322, 6743890.045434322, 6743890.045434322}, doubleArray1, 0.01);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray1, 2215);
      assertEquals(5, doubleArray0.length);
      assertEquals(2215, doubleArray4.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4682487.4782269215, 6743890.045434322, 6743890.045434322, 6743890.045434322, 6743890.045434322}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(2.038459007633845E14, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4682487.4782269215, 6743890.045434322, 6743890.045434322, 6743890.045434322, 6743890.045434322}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-78.30242852943518);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2237;
      intArray0[1] = 255;
      intArray0[2] = (-547);
      intArray0[3] = 2207;
      intArray0[4] = (-547);
      intArray0[5] = 255;
      intArray0[6] = 154;
      intArray0[7] = 2237;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2237, 255, (-547), 2207, (-547), 255, 154, 2237}, intArray0);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-78.30242852943518)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 974.576;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, 974.576, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, Double.NaN, 974.576, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, Double.NaN, 974.576, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[7];
      intArray0[0] = (-2204);
      intArray0[1] = (-2204);
      intArray0[2] = (-2204);
      intArray0[3] = (-2204);
      intArray0[4] = (-2204);
      intArray0[5] = (-2204);
      intArray0[6] = (-2204);
      int[] intArray1 = MathArrays.copyOf(intArray0, 2227);
      assertEquals(2227, intArray1.length);
      assertEquals(7, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2204), (-2204), (-2204), (-2204), (-2204), (-2204), (-2204)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 8.0;
      doubleArray0[1] = 8.0;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 8.0;
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 1090.4260024;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-7.11611431);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(17, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-951);
      intArray0[1] = 2;
      intArray0[2] = (-808);
      intArray0[3] = 1157;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 173;
      intArray1[3] = (-808);
      intArray1[4] = 1157;
      intArray1[5] = 2;
      intArray1[6] = 2;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertEquals(2394.1167473621667, double1, 0.01);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-951), 2, (-808), 1157}, intArray0);
      assertArrayEquals(new int[] {2, 2, 173, (-808), 1157, 2, 2}, intArray1);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(17, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1157;
      floatArray0[1] = (float) 173;
      floatArray0[2] = (float) (-808);
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 173;
      floatArray0[5] = (float) (-808);
      floatArray0[6] = (float) 173;
      floatArray0[7] = (float) 173;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 173;
      floatArray1[1] = (float) 2;
      floatArray1[2] = (float) 173;
      floatArray1[3] = (-1280.219F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1157.0F, 173.0F, (-808.0F), 2.0F, 173.0F, (-808.0F), 173.0F, 173.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {173.0F, 2.0F, 173.0F, (-1280.219F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = 20.0;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, (-562.34198204));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1803.1065220298387;
      doubleArray0[1] = 2596.900083837328;
      doubleArray0[2] = 2596.900083837328;
      doubleArray0[3] = 2596.900083837328;
      doubleArray0[4] = 2596.900083837328;
      double[] doubleArray1 = MathArrays.scale(2596.900083837328, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4682487.4782269215, 6743890.045434322, 6743890.045434322, 6743890.045434322, 6743890.045434322}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3251193.129786541, 9364974.956453843, 1.6108865001888167E7, 2.285275504732249E7, 2.959664509275681E7, 2.697556018173729E7, 2.0231670136302967E7, 1.3487780090868644E7, 6743890.045434322}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 566);
      assertEquals(5, doubleArray0.length);
      assertEquals(566, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray4, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(Double.NEGATIVE_INFINITY, 0.0, -0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-5136.725586165965), 0.1246747374534607, 0.1246747374534607, 0.0);
      assertEquals((-640.4199138257156), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = -0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-397.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = Float.NEGATIVE_INFINITY;
      floatArray0[5] = (-3916.341F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {-0.0F, 0.0F, (-397.0F), 0.0F, Float.NEGATIVE_INFINITY, (-3916.341F)}, floatArray0, 0.01F);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double3 = MathArrays.linearCombination((double) Float.NEGATIVE_INFINITY, 1404.0538935983216, 5.00749978034387E13, (-484.978957));
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long[] longArray0 = new long[1];
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.3347754786720003E14;
      doubleArray0[1] = 1493.59612097;
      doubleArray0[2] = 2166.56;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (-3640.1081);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.3347754786720003E14, 1493.59612097, 2166.56, 2.0, (-3640.1081)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.7816255784640675E28, 3.9872309546207488E17, 5.783742322165527E17, 5.339101979407314E14, (-9.7174540631436518E17), (-1.0865036436142953E7), (-1.5773021210272E7), (-14560.4324), 1.325038697968561E7}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.3347754786720003E14, 1493.59612097, 2166.56, 2.0, (-3640.1081)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.7816255784640675E28, 3.9872309546207488E17, 5.783742322165527E17, 5.339101979407314E14, (-9.7174540631436518E17), (-1.0865036436142953E7), (-1.5773021210272E7), (-14560.4324), 1.325038697968561E7}, doubleArray1, 0.01);
      
      int int0 = (-2204);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2204), (-2204));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1803.1065220298387;
      doubleArray0[1] = 2596.900083837328;
      doubleArray0[2] = 2596.900083837328;
      doubleArray0[3] = 2596.900083837328;
      doubleArray0[4] = 2596.900083837328;
      double[] doubleArray1 = MathArrays.scale(2596.900083837328, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4682487.4782269215, 6743890.045434322, 6743890.045434322, 6743890.045434322, 6743890.045434322}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[7][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray3.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.443023711314014E9, 1.7513208624378113E10, 1.7513208624378113E10, 1.7513208624378113E10, 1.7513208624378113E10}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {4682487.4782269215, 6743890.045434322, 6743890.045434322, 6743890.045434322, 6743890.045434322}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = (-3.4028235E38F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F, 3.4028235E38F, (-3.4028235E38F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1194);
      intArray0[1] = 2237;
      intArray0[2] = 154;
      intArray0[3] = 255;
      intArray0[4] = (-547);
      intArray0[5] = (-689);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1194), 2237, 154, 255, (-547), (-689)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1231.947193154433;
      double double0 = MathArrays.linearCombination((-59.3861), (-59.3861), 838.99074235, 1920.959245, (-59.3861), (-4.068233003401932E-9));
      assertEquals(1615193.731860097, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1231.947193154433, 6891.9941846, (-3145.9249594149), (-4.068233003401932E-9));
      assertEquals(8490572.890967444, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1231.947193154433, double2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {1231.947193154433, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double3 = MathArrays.linearCombination(1231.947193154433, (-59.3861), 8490572.890967444, 8490572.890967444);
      assertEquals(7.208982794367072E13, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1231.947193154433, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Name is null
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = 0.0;
      double double1 = (-2039.247618191696);
      double double2 = 5.00749978034387E13;
      double[] doubleArray1 = MathArrays.scale(5.00749978034387E13, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 20.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {20.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 540.21554601);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {540.21554601}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(520.21554601, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {540.21554601}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {20.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1075.327;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 2858.2127310942255;
      doubleArray0[3] = 2858.2127310942255;
      doubleArray0[4] = 2858.2127310942255;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 1075.327;
      doubleArray0[7] = 1075.327;
      doubleArray0[8] = 1075.327;
      double[] doubleArray1 = MathArrays.scale(1075.327, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1075.327, (-1.0), 2858.2127310942255, 2858.2127310942255, 2858.2127310942255, (-1.0), 1075.327, 1075.327, 1075.327}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1156328.156929, (-1075.327), 3073513.32148936, 3073513.32148936, 3073513.32148936, (-1075.327), 1156328.156929, 1156328.156929, 1156328.156929}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1075.327, (-1.0), 2858.2127310942255, 2858.2127310942255, 2858.2127310942255, (-1.0), 1075.327, 1075.327, 1075.327}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1156328.156929, (-1075.327), 3073513.32148936, 3073513.32148936, 3073513.32148936, (-1075.327), 1156328.156929, 1156328.156929, 1156328.156929}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5397.541540023878, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1075.327, (-1.0), 2858.2127310942255, 2858.2127310942255, 2858.2127310942255, (-1.0), 1075.327, 1075.327, 1075.327}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 974.576;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, 974.576, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, Double.NaN, 974.576, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, Double.NaN, 974.576, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, Double.NaN, 974.576, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertTrue(boolean1);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 974.576, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 974.576;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, 974.576, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, Double.NaN, 974.576, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, Double.NaN, 974.576, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2204);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2204), (-2204));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[][] longArray1 = new long[5][1];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(5, longArray1.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(352499.3354528562);
      assertEquals(352499.3354528562, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(352499.3354528562);
      assertEquals(352499.3354528562, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(352499.3354528562, (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(352499.3354528562, (double)double3, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals(352499.3354528562, (double)double4, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(2.0384590076338444E14);
      assertEquals(2.0384590076338444E14, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[3]);
      assertEquals(352499.3354528562, (double)double7, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double3, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertEquals((double)double7, (double)double4, 0.01);
      assertEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(2.0384590076338444E14);
      assertEquals(2.0384590076338444E14, (double)double8, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotNull(double8);
      
      doubleArray0[8] = double8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) doubleArray0[6];
      doubleArray1[1] = 3.834E-20;
      doubleArray0[2] = (Double) 838.99074235;
      doubleArray1[3] = (double) doubleArray0[6];
      doubleArray1[4] = (double) doubleArray0[4];
      doubleArray1[5] = 3.834E-20;
      doubleArray1[6] = (double) doubleArray0[7];
      doubleArray1[7] = (double) doubleArray0[6];
      doubleArray1[8] = (double) doubleArray0[1];
      double double9 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3.5307145703682525E14, double9, 0.01);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {2.0384590076338444E14, 3.834E-20, 0.0, 2.0384590076338444E14, 352499.3354528562, 3.834E-20, 352499.3354528562, 2.0384590076338444E14, 352499.3354528562}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 437.322, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(735.4648159085472, (-1495.421106019571), 0.0, 0.0);
      assertEquals((-1099829.6084444397), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double3 = MathArrays.linearCombination(0.0, (-1166.053054662354), 0.0, (-1166.053054662354));
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 3257.0844972;
      doubleArray0[0] = 3257.0844972;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-367);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-367));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 233.02521714932;
      doubleArray0[1] = (-57.61157);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {233.02521714932, (-57.61157)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 233.02521714932;
      doubleArray2[1] = (-57.61157);
      doubleArray2[2] = (-1.7976931348623157E308);
      doubleArray2[3] = (-57.61157);
      doubleArray2[4] = (-1.7976931348623157E308);
      MathArrays.scaleInPlace((-1.7976931348623157E308), doubleArray2);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      
//      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3804.989561239);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1320.883);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 1.0E-5;
      doubleArray0[6] = (-3087.261281171306);
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[9];
      longArray1[0] = 1L;
      longArray1[1] = (-242L);
      longArray1[2] = 982L;
      longArray1[3] = 1L;
      longArray1[4] = 2853L;
      longArray1[5] = (-716L);
      longArray1[6] = 755L;
      longArray1[7] = (-225L);
      longArray1[8] = (-1561L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1803.1065220298387;
      doubleArray0[1] = 2596.900083837328;
      doubleArray0[2] = 2596.900083837328;
      doubleArray0[3] = 2596.900083837328;
      doubleArray0[4] = 2596.900083837328;
      double[] doubleArray1 = MathArrays.scale(2596.900083837328, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4682487.4782269215, 6743890.045434322, 6743890.045434322, 6743890.045434322, 6743890.045434322}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[7][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray3.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1803.1065220298387, 2596.900083837328, 2596.900083837328, 2596.900083837328, 2596.900083837328}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.443023711314014E9, 1.7513208624378113E10, 1.7513208624378113E10, 1.7513208624378113E10, 1.7513208624378113E10}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {4682487.4782269215, 6743890.045434322, 6743890.045434322, 6743890.045434322, 6743890.045434322}, doubleArray1, 0.01);
      
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1479.924);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1061.2;
      doubleArray0[4] = 1.44888888888888883E18;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][5];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1.44888888888888883E18, 1061.2, 0.0, 0.0, 0.0, 0.0, (-1.0), (-1479.924)}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1806.4;
      doubleArray0[1] = 851.342095971594;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1806.4, 851.342095971594, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2858.2127310942255;
      doubleArray0[2] = 1075.327;
      double[] doubleArray1 = MathArrays.scale(1075.327, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 2858.2127310942255, 1075.327, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1075.327), 3073513.32148936, 1156328.156929, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 2858.2127310942255, 1075.327, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1075.327), 3073513.32148936, 1156328.156929, 0.0}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3283836.186567097, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 2858.2127310942255, 1075.327, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1075.327), 3073513.32148936, 1156328.156929, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[][] longArray1 = new long[5][1];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(5, longArray1.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(352499.3354528562);
      assertEquals(352499.3354528562, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(352499.3354528562);
      assertEquals(352499.3354528562, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(352499.3354528562, (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(352499.3354528562, (double)double3, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals(352499.3354528562, (double)double4, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(2.0384590076338444E14);
      assertEquals(2.0384590076338444E14, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[3]);
      assertEquals(352499.3354528562, (double)double7, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertEquals((double)double7, (double)double3, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertEquals((double)double7, (double)double1, 0.01);
      assertEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double4, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(2.0384590076338444E14);
      assertEquals(2.0384590076338444E14, (double)double8, 0.01);
      assertEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotNull(double8);
      
      doubleArray0[8] = double8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) doubleArray0[6];
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = 838.99074235;
      doubleArray1[3] = (double) doubleArray0[6];
      doubleArray1[4] = (double) doubleArray0[4];
      doubleArray1[5] = 3.834E-20;
      doubleArray1[6] = (double) doubleArray0[7];
      doubleArray1[7] = (double) doubleArray0[6];
      doubleArray1[8] = (double) doubleArray0[1];
      double double9 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3.5307145703682525E14, double9, 0.01);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {2.0384590076338444E14, 3.834E-20, 838.99074235, 2.0384590076338444E14, 352499.3354528562, 3.834E-20, 352499.3354528562, 2.0384590076338444E14, 352499.3354528562}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 974.576;
      doubleArray0[3] = 5234.0235258;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 467.701523;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, Double.NaN, 974.576, 5234.0235258, 0.0, 467.701523, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 949798.379776, 2.7395002268627867E7, 0.0, 218744.71461651954, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(1751.385042, 1.633123935319537E16, (-747.249016680842), 666.8076758597, 467.701523, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 2 and 3 are not strictly decreasing (949,798.38 <= 27,395,002.269)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 100L;
      long[][] longArray1 = new long[9][8];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = 100L;
      longArray2[1] = 100L;
      longArray2[2] = 100L;
      longArray1[2] = longArray2;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 100L;
      longArray3[1] = 100L;
      longArray1[8] = longArray3;
//      try { 
        MathArrays.checkRectangular(longArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 3 while others have length 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.34217729E8, 2688.1, (-540.21554601), 1.7976931348623157E308, 1.34217729E8, 2750.9);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 2688.1;
      doubleArray0[2] = 2750.9;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3257.0844972;
      doubleArray0[1] = (-3279.21);
      doubleArray0[2] = (-3279.21);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3257.0844972, (-3279.21), (-3279.21), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0608599421900576E7, 1.0753218224100001E7, 1.0753218224100001E7, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3257.0844972;
      doubleArray2[1] = (-3279.21);
      doubleArray2[2] = (-3279.21);
      doubleArray2[3] = 3257.0844972;
      doubleArray2[4] = 3257.0844972;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3257.0844972, (-3279.21), (-3279.21), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0608599421900576E7, 1.0753218224100001E7, 1.0753218224100001E7, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3257.0844972, (-3279.21), (-3279.21), 3257.0844972, 3257.0844972}, doubleArray2, 0.01);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-505));
      assertEquals((-505), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2313));
      assertEquals((-2313), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-816.7533255742139);
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[0] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-816.7533255742139);
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-816.7533255742139), 0.0}, doubleArray0, 0.01);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-816.7533255742139), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2857.7104691869;
      doubleArray0[2] = 1075.327;
      doubleArray0[3] = 1026.66;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 2857.7104691869, 1075.327, 1026.66}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 2857.7104691869, 1075.327, 1026.66}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 2857.7104691869, 1075.327, 1026.66}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-5715.4209383738), 8164358.471700412, 6143893.1313986825, 7024122.217519846, 2207990.4356400003, 1054030.7556000003}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1026.66;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = (-939.0);
      boolean boolean1 = MathArrays.equals(doubleArray2, doubleArray0);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1.0), 2857.7104691869, 1075.327, 1026.66}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1026.66, 0.0, (-1.0), (-1.0), (-939.0)}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not increasing (1,026.66 > 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1231.947193154433;
      doubleArray0[1] = (-1436.6636429);
      double[] doubleArray1 = MathArrays.scale((-2039.247618191696), doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1231.947193154433, (-1436.6636429), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2512245.3793781227), 2929712.91192643, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1231.947193154433, (-1436.6636429), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double double0 = new Double((-1436.6636429));
      assertEquals((-1436.6636429), double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1231.947193154433, (-1436.6636429), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2512245.3793781227), 2929712.91192643, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2511013.432184968), 2928276.24828353, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1231.947193154433, (-1436.6636429), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2512245.3793781227), 2929712.91192643, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2511013.432184968), 2928276.24828353, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2512245.3793781227), 2929712.91192643, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1716.0);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = (-1716.0);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1716.0), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-1716.0), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1716.0);
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-1716.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 1803.1065220298387;
      doubleArray0[0] = 1803.1065220298387;
      doubleArray0[1] = 2596.900083837328;
      doubleArray0[2] = 2596.900083837328;
      doubleArray0[3] = 2596.900083837328;
      doubleArray0[4] = 2596.900083837328;
      double[] doubleArray1 = MathArrays.scale(2596.900083837328, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1.427196339939674E7;
      doubleArray2[1] = 1.427196339939674E7;
      doubleArray2[2] = 2596.900083837328;
      doubleArray2[3] = 1803.1065220298387;
      doubleArray2[4] = (-453.048);
      doubleArray2[5] = 1803.1065220298387;
      MathArrays.equals(doubleArray2, doubleArray2);
      MathArrays.convolve(doubleArray1, doubleArray0);
      double[] doubleArray3 = null;
      MathArrays.equals((double[]) null, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not decreasing (1,803.107 < 2,596.9)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      MathArrays.copyOf(intArray0);
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, intArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-92.8340082), doubleArray0);
      MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      long[][] longArray0 = new long[4][5];
      long[] longArray1 = new long[9];
      longArray1[0] = (-1L);
      longArray1[1] = 486L;
      longArray1[2] = 0L;
      longArray1[3] = 1L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray1[6] = 2034L;
      longArray1[7] = (-604L);
      longArray1[8] = (-452L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 1L;
      longArray2[1] = (-604L);
      longArray2[2] = 1L;
      longArray2[3] = 2034L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = 486L;
      longArray3[1] = 0L;
      longArray3[2] = (-604L);
      longArray3[3] = (-604L);
      longArray3[4] = 0L;
      longArray3[5] = 2034L;
      longArray3[6] = 486L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = 0L;
      longArray4[1] = (-604L);
      longArray4[2] = 2034L;
      longArray4[3] = (-1L);
      longArray4[4] = (-1L);
      longArray4[5] = 0L;
      longArray0[3] = longArray4;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 4 while others have length 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 20.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.normalizeArray(doubleArray0, (-1923.3989747981));
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {400.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(20.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination((-1923.3989747981), (-1923.3989747981), (-1.0), 20.0, (-1.0), (-1923.3989747981));
      assertEquals(3701367.01522918, double2, 0.01);
      
      double double3 = MathArrays.linearCombination(20.0, (-1267.716816), 1.0, (-1.0), (-1546.19), (-1923.3989747981));
      assertEquals(2948584.924523074, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-82.964255597);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = (-1322);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-1322));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-944.2048845859);
      doubleArray0[1] = (-3193.574536);
      doubleArray0[2] = 34.53;
      doubleArray0[3] = (-2.18258923255);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -944.205 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      long[] longArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[][] longArray0 = new long[6][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 9218868437227405312L;
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 9218868437227405312L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 9218868437227405312L;
      longArray2[6] = 9218868437227405312L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 9218868437227405312L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[6] = 9218868437227405312L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = 9218868437227405312L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 9218868437227405312L;
      longArray4[4] = 9218868437227405312L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      longArray5[0] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray0[5] = longArray6;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 7 while others have length 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 9999;
      intArray0[0] = 9999;
      MathArrays.copyOf(intArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 9999);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MathArrays.copyOf(intArray0);
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      doubleArray0[3] = double3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = null;
      double[][] doubleArray2 = new double[3][2];
      doubleArray2[0] = null;
      doubleArray2[1] = null;
      doubleArray2[2] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.dfp.DfpField$RoundingMode";
      stringArray0[3] = "non self-adjoint linear operator";
      stringArray0[4] = "INCREASING";
      stringArray0[5] = "{},kyF!UmED";
      stringArray0[6] = "]h";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<FieldElement<Integer>>) null, 2268);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Integer>) null, 209, Integer.MIN_VALUE);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-367);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-367));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 1563.9146943366702, 3640.7505996068, 3640.7505996068, 3064.6499495, 0.0);
      assertEquals(1.3255064928537272E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2857.7104691869;
      doubleArray0[2] = 1075.327;
      doubleArray0[3] = 1026.66;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (2,857.71 >= 1,075.327)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[0];
      MathArrays.equals((double[]) null, doubleArray1);
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 100L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {100L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1090.4260024;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3470.56);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(323.26754376456, doubleArray0);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace(0.0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-2542L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 141L;
      longArray0[4] = 9218868437227405312L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,542 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1716.0);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = (-1716.0);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      MathArrays.distance1(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1716.0);
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = (-1716.0);
//      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3257.0844972;
      doubleArray0[1] = (-3279.21);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 730.1064;
      doubleArray0[4] = 441.68693;
      doubleArray0[5] = 3641.7996427308;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (3,257.084 >= -3,279.21)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = 2141;
      intArray0[2] = 2141;
      intArray0[3] = 0;
      int int3 = (-1);
      intArray0[4] = (-1);
      int int4 = 134217729;
      intArray0[5] = 134217729;
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("cannot convert infinite value");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.cannot convert infinite value
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3804.989561239);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2482.589);
      doubleArray0[3] = (-56.75051);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 1.0E-5;
      doubleArray0[6] = (-3087.261281171306);
      doubleArray0[7] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      long[][] longArrayArray0 = null;
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1231.947193154433;
      doubleArray0[1] = (-1436.6636429);
      doubleArray0[2] = 1118.718790955;
      doubleArray0[3] = (-3262.489091);
      doubleArray0[4] = (-3439.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      long[][] longArray0 = new long[2][6];
      long[] longArray1 = new long[8];
      longArray1[0] = 2853L;
      longArray1[1] = 0L;
      longArray1[2] = 3263L;
      longArray1[3] = 2009L;
      longArray1[4] = 4593L;
      longArray1[5] = 0L;
      longArray1[6] = 705L;
      longArray1[7] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 2009L;
      longArray2[1] = 2009L;
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1479.924);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1061.2;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 655.195046;
      doubleArray0[6] = (-1137.1841425414273);
      doubleArray0[7] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 488.0115;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3590.3723992543;
      doubleArray0[4] = 497.946843888;
      doubleArray0[5] = 223.43075261522176;
      doubleArray0[6] = (-1518.39621935734);
      doubleArray0[7] = 1.34217729E8;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = 1.34217729E8;
      MathArrays.linearCombination(1.34217729E8, 2688.1, (-540.21554601), 1.7976931348623157E308, 1.34217729E8, 2750.9);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 2688.1;
      doubleArray0[2] = 2750.9;
      doubleArray0[3] = (-540.21554601);
      doubleArray0[4] = 2688.1;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 1.34217729E8;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-168);
      intArray0[1] = 133;
      intArray0[2] = (-3754);
      intArray0[3] = 0;
      int int0 = 220;
      intArray0[4] = 220;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 206;
      intArray0[1] = 65;
      intArray0[2] = (-556);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 158;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 206;
      doubleArray0[1] = (double) 65;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double double1 = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 4945.223372503387;
      doubleArray0[3] = 3.141592653589793;
      double double2 = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3.141592653589793;
      double double3 = 516.163047177;
      doubleArray0[6] = 516.163047177;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 715.99;
      MathArrays.equals(doubleArray0, doubleArray0);
      int int0 = 0;
      MathArrays.copyOf(doubleArray0, 0);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("ev[{yp3vx/VrJa-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.ev[{yp3vx/VrJa-
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2635.70285);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1264.7434003525264;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1264.7434003525264;
      doubleArray2[1] = (-1597.79553260991);
      doubleArray2[2] = (-20.0);
      doubleArray2[3] = (-721.15110555291);
      doubleArray2[4] = (-2635.70285);
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3747.7354;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1102.345);
      doubleArray0[5] = 646.5341654251121;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (3.142 >= -1)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathArrays.linearCombination(Double.NaN, Double.NaN, 1.0, Double.NaN, (-1036.15), Double.NaN, 2863.2249, (-1036.15));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 2863.2249;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      MathArrays.copyOf(doubleArray0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 124;
      intArray0[4] = 0;
      intArray0[5] = 218;
      intArray0[6] = 0;
      intArray0[7] = 1;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MathArrays.linearCombination((-1425.5), (-1329.9039), (-1329.9039), 0.0, (-1425.5), 0.0, (-1329.9039), (-1425.5));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3791556.0189;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3791556.0189;
      doubleArray0[6] = (-1731.42540977);
      doubleArray0[7] = (-1329.9039);
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1803.1065220298387;
      doubleArray0[1] = 2596.900083837328;
      doubleArray0[2] = 2596.900083837328;
      doubleArray0[3] = 2596.900083837328;
      doubleArray0[4] = 2596.900083837328;
      double[] doubleArray1 = MathArrays.scale(2596.900083837328, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1.4277461285655249E7, double0, 0.01);
      assertArrayEquals(new double[] {4682487.4782269215, 6743890.045434322, 6743890.045434322, 6743890.045434322, 6743890.045434322}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      int int0 = 2187;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<String>) null, 2187, 2187);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = 115;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0, 115);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1806.4;
      doubleArray0[1] = 851.342095971594;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1886.2);
      doubleArray0[5] = 2996.0341;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 2996.0341, 1806.4, 851.342095971594, 0.0, (-1886.2), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 838.99074235;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-127.4641497782);
      doubleArray0[4] = (-784.0);
      doubleArray0[5] = Double.NaN;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 838.99074235, 0.0, (-127.4641497782), (-784.0), Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1852.9931;
      doubleArray0[1] = 1683.6527550969051;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1852.9931, 0.0, 1852.9931, 0.0, 1683.6527550969051, Double.NaN);
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      long[][] longArray0 = new long[6][4];
      long[] longArray1 = new long[4];
      longArray1[0] = 4393L;
      longArray1[1] = (-716L);
      longArray1[2] = (-906L);
      longArray1[3] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = 1L;
      longArray2[1] = (-906L);
      longArray2[2] = 325L;
      longArray2[3] = 4393L;
      longArray2[4] = (-716L);
      longArray2[5] = 4393L;
      longArray2[6] = 4393L;
      longArray2[7] = (-906L);
      longArray2[8] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = (-906L);
      longArray3[1] = 0L;
      longArray3[2] = 1L;
      longArray3[3] = 4393L;
      longArray3[4] = 4393L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = 0L;
      longArray4[1] = (-716L);
      longArray4[2] = 325L;
      longArray4[3] = 325L;
      longArray4[4] = 4393L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = 325L;
      longArray6[1] = 1L;
      longArray6[2] = 1L;
      longArray6[3] = 0L;
      longArray6[4] = (-906L);
      longArray6[5] = 3378L;
      longArray0[5] = longArray6;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -716 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-735.82);
      doubleArray0[2] = (-4538.662484967715);
      doubleArray0[3] = (-4049.27);
      doubleArray0[4] = 1289.236993;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-160);
      intArray0[1] = (-1218);
      intArray0[2] = (-1);
      intArray0[3] = 1471;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.scaleInPlace(1289.236993, doubleArray0);
      MathArrays.copyOf(doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
