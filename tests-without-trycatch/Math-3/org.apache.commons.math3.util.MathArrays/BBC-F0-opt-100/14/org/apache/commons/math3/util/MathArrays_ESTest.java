/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:11:52 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("5'lnh@;3!;Lp").when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, (-2146427418));
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 732.158587;
      doubleArray0[1] = 2590.595777611576;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 23.0;
      doubleArray0[4] = 1000.906036;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
//      try { 
        MathArrays.normalizeArray(doubleArray0, 1000.906036);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, -\u221E at index 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1409.2F;
      floatArray0[1] = 0.5F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1409.2F, 0.5F, 0.0F, 0.0F, 0.0F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.5F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 1409.2F;
//      try { 
        MathArrays.normalizeArray(doubleArray0, 1409.2F);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, -\u221E at index 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1160.0), 0.0, (-1160.0), 60.254245765763, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-17);
      doubleArray1[1] = 60.254245765763;
      doubleArray1[2] = (-1160.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.7214844226837158;
      doubleArray1[7] = 60.254245765763;
      doubleArray1[8] = 1057.461043002;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {(-17.0), 60.254245765763, (-1160.0), 0.0, 0.0, 0.0, 0.7214844226837158, 60.254245765763, 1057.461043002}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-17.0), 60.254245765763, (-1160.0), 0.0, 0.0, 0.0, 0.7214844226837158, 60.254245765763, 1057.461043002}, doubleArray2, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-17));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int int0 = 204;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      int int1 = 1011;
      Object[][] objectArray0 = MathArrays.buildArray(field0, 204, 1011);
      assertNotNull(objectArray0);
      assertEquals(204, objectArray0.length);
      
      double[] doubleArray0 = null;
      int[] intArray0 = new int[6];
      intArray0[0] = 1011;
      intArray0[1] = 204;
      intArray0[2] = 1011;
      intArray0[3] = 204;
      intArray0[4] = 1011;
      intArray0[5] = 1011;
      int int2 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1011, 204, 1011, 204, 1011, 1011}, intArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.3333333333333333;
      doubleArray0[1] = (-537.838);
      doubleArray0[2] = (-2521.869714077558);
      doubleArray0[3] = 3.0;
      doubleArray0[4] = (-277.17336);
      doubleArray0[5] = 0.19999999999923582;
      doubleArray0[6] = 3624.024;
      doubleArray0[7] = (-0.2499999701976776);
      doubleArray0[8] = 1247.08762314072;
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 711.1590395356;
      doubleArray0[1] = (-602.641486439007);
      doubleArray0[2] = 3067.203351326;
      doubleArray0[3] = (-0.25);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3803);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3803, doubleArray1.length);
      assertArrayEquals(new double[] {711.1590395356, (-602.641486439007), 3067.203351326, (-0.25)}, doubleArray0, 0.01);
      
      MathArrays.checkNonNegative(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1145.9265F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-551.76F);
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-115.3486F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1145.9265F), 0.0F, 0.0F, (-551.76F), 3.4028235E38F, 0.0F, (-115.3486F)}, floatArray0, 0.01F);
      
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.036;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 3.834E-20;
      double[] doubleArray1 = MathArrays.scale(3.834E-20, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {3.834E-20, 0.036, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 1.3802399999999998E-21, 1.4699556E-39, 1.4699556E-39}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1.3802399999999998E-21, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {3.834E-20, 0.036, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 1.3802399999999998E-21, 1.4699556E-39, 1.4699556E-39}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][0];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1240.2265811);
      doubleArray2[1] = 5.0614674548127384E-8;
      doubleArray2[2] = (-375.171428);
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      doubleArray1[6] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 1183);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1374.95058068;
      doubleArray1[1] = 1249.54920472;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1600.5622;
      doubleArray1[4] = (-4123.4764);
      doubleArray1[5] = 0.041666663879186654;
      doubleArray1[6] = 1.34217729E8;
      doubleArray1[7] = Double.NaN;
      doubleArray1[8] = 3687.7404267579655;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {1374.95058068, 1249.54920472, 0.0, 1600.5622, (-4123.4764), 0.041666663879186654, 1.34217729E8, Double.NaN, 3687.7404267579655}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1374.95058068, 1249.54920472, 0.0, 1600.5622, (-4123.4764), 0.041666663879186654, 1.34217729E8, Double.NaN, 3687.7404267579655}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 867.38356);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray3.length);
      assertArrayEquals(new double[] {1374.95058068, 1249.54920472, 0.0, 1600.5622, (-4123.4764), 0.041666663879186654, 1.34217729E8, Double.NaN, 3687.7404267579655}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1374.95058068, 1249.54920472, 0.0, 1600.5622, (-4123.4764), 0.041666663879186654, 1.34217729E8, Double.NaN, 3687.7404267579655}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.008885382493046448, 0.0080749975917885, 0.0, 0.010343358918309939, (-0.026647259566907524), 2.692636746207101E-7, 867.3590718607852, Double.NaN, 0.023831390514857283}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (-1858.2083431569351);
      doubleArray0[2] = (-1858.2083431569351);
      doubleArray0[3] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.7976931348623157E308), (-1858.2083431569351), (-1858.2083431569351), 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals((-1.7976931348623157E308), double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.7976931348623157E308), (-1858.2083431569351), (-1858.2083431569351), 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(2.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.7976931348623157E308), (-1858.2083431569351), (-1858.2083431569351), 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 998.1;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {998.1}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-168.468718);
      doubleArray0[2] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(168.47168588390014, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-168.468718), 3.834E-20}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1062.810598220173;
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1062.810598220173, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      doubleArray1[6] = null;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2146281153;
      intArray0[1] = 2116;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2146281153;
      intArray1[1] = 2146281153;
      intArray1[2] = 2116;
      intArray1[3] = 1;
      intArray1[4] = 2116;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(2146279037, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {2146281153, 2116}, intArray0);
      assertArrayEquals(new int[] {2146281153, 2146281153, 2116, 1, 2116}, intArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1927);
      intArray0[1] = 1431655765;
      intArray0[2] = 2146612386;
      intArray0[3] = 123;
      intArray0[4] = (-1937);
      intArray0[5] = (-1073741824);
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1431655765;
      intArray1[1] = (-1073741824);
      intArray1[2] = 123;
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(3321.3091022, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      
//      try { 
        MathArrays.normalizeArray(doubleArray2, 1.883511811213715E-8);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[5][3];
      long[] longArray1 = new long[9];
      longArray1[0] = 1586L;
      longArray1[1] = (-964L);
      longArray1[2] = 3952090531849364496L;
      longArray1[3] = (-1916L);
      longArray1[4] = 3473L;
      longArray1[5] = 951L;
      longArray1[6] = 3952090531849364496L;
      longArray1[7] = 0L;
      longArray1[8] = 86L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 86L;
      longArray2[1] = 1586L;
      longArray2[2] = (-1916L);
      longArray2[3] = 3952090531849364496L;
      longArray2[4] = (-1916L);
      longArray2[5] = 1586L;
      longArray2[6] = 86L;
      longArray2[7] = (-964L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 86L;
      longArray3[1] = 3952090531849364496L;
      longArray3[2] = 86L;
      longArray3[3] = 0L;
      longArray3[4] = 86L;
      longArray3[5] = 3473L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 0L;
      longArray4[1] = 951L;
      longArray4[2] = 0L;
      longArray4[3] = (-964L);
      longArray4[4] = 0L;
      longArray4[5] = (-1916L);
      longArray4[6] = (-964L);
      longArray4[7] = 3473L;
      longArray4[8] = 3952090531849364496L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 0L;
      longArray5[1] = 951L;
      longArray5[2] = (-1916L);
      longArray5[3] = 951L;
      longArray0[4] = longArray5;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -964 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = new Double[3];
      Double double0 = new Double((-1954.92));
      assertEquals((-1954.92), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(0.902267575264);
      assertEquals(0.902267575264, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray1[1] = double1;
      Double double2 = new Double(0.15);
      assertEquals(0.15, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray1[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-41.071);
      doubleArray2[1] = 932.940661552;
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0F);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0F);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0F);
      assertEquals(0.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double4, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) doubleArray0[3];
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = (double) doubleArray0[0];
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 2.608E19, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      MathArrays.scaleInPlace((-646.93), doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.scaleInPlace(2255.0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 816;
      intArray0[1] = (-1073741824);
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1073741824);
      intArray1[1] = 816;
      intArray1[2] = 816;
      intArray1[3] = (-1073741824);
      intArray1[4] = 816;
      intArray1[5] = 816;
      intArray1[6] = (-1073741824);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-2147482016), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {816, (-1073741824)}, intArray0);
      assertArrayEquals(new int[] {(-1073741824), 816, 816, (-1073741824), 816, 816, (-1073741824)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[10];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-48.5898);
      doubleArray2[1] = 1.304E19;
      doubleArray2[2] = 1.304E19;
      doubleArray2[3] = 1.304E19;
      doubleArray2[4] = 922.7;
      doubleArray2[5] = 1.304E19;
      doubleArray2[6] = 1.304E19;
      doubleArray2[7] = 1.304E19;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      assertEquals(10, doubleArray3.length);
      assertArrayEquals(new double[] {1.304E19}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-48.5898), 1.304E19, 1.304E19, 1.304E19, 922.7, 1.304E19, 1.304E19, 1.304E19, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-6.336109919999999E20), 1.700416E38, 1.700416E38, 1.700416E38, 1.2032008E22, 1.700416E38, 1.700416E38, 1.700416E38, 0.0, 0.0}, doubleArray3, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1.304E19, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1.304E19}, doubleArray1, 0.01);
      
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray1, 1.304E19);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(1, doubleArray4.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1.304E19}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.distance(intArray1, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      int int0 = (-1114);
      intArray2[0] = (-1114);
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray2, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[0] = (-1151.7584F);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 2615;
      intArray0[2] = (-1239);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-1), 2615, (-1239)}, intArray0);
      assertArrayEquals(new int[] {(-1), 2615, (-1239)}, intArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-1239);
      intArray2[1] = (-1);
      intArray2[2] = 2615;
      double double0 = MathArrays.distance(intArray1, intArray2);
      assertEquals(4819.690446491351, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray2.length);
      assertArrayEquals(new int[] {(-1), 2615, (-1239)}, intArray0);
      assertArrayEquals(new int[] {(-1), 2615, (-1239)}, intArray1);
      assertArrayEquals(new int[] {(-1239), (-1), 2615}, intArray2);
      
      int int0 = MathArrays.distance1(intArray2, intArray1);
      assertEquals(7708, int0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray2.length);
      assertArrayEquals(new int[] {(-1), 2615, (-1239)}, intArray0);
      assertArrayEquals(new int[] {(-1), 2615, (-1239)}, intArray1);
      assertArrayEquals(new int[] {(-1239), (-1), 2615}, intArray2);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 922.7;
      doubleArray2[1] = 1567.0;
      doubleArray2[2] = 922.7;
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      assertArrayEquals(new double[] {1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {922.7, 1567.0, 922.7}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.2032008E22, 2.043368E22, 1.2032008E22, 0.0}, doubleArray3, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray3);
      assertEquals(2.6590857665117315E22, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      assertArrayEquals(new double[] {1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {922.7, 1567.0, 922.7}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.2032008E22, 2.043368E22, 1.2032008E22, 0.0}, doubleArray3, 0.01);
      
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray2, 107.63360563973);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray4.length);
      assertArrayEquals(new double[] {922.7, 1567.0, 922.7}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {29.10371818185995, 49.426169276010114, 29.10371818185995}, doubleArray4, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-48.5898);
      doubleArray2[1] = 1.304E19;
      doubleArray2[2] = 1.304E19;
      doubleArray2[3] = 1.304E19;
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 311.38;
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 1798.0210627;
      double double1 = 1.304E19;
      double double2 = 1.7976931348623157E308;
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-48.5898);
      doubleArray2[1] = 1.304E19;
      doubleArray2[2] = 1.304E19;
      doubleArray2[3] = 1.304E19;
      doubleArray2[4] = 922.7;
      doubleArray2[5] = 1.304E19;
      doubleArray2[6] = 1.304E19;
      doubleArray2[7] = 1.304E19;
//      try { 
        MathArrays.convolve(doubleArray2, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      Double double0 = new Double((-1.0F));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) doubleArray0[1];
      doubleArray2[1] = (double) (-1.0F);
//      try { 
        MathArrays.convolve(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double0 = MathArrays.linearCombination((double) 0, (double) 0, (double) 0, (double) 0, (double) 0, (-3041.389955831737), 1.373113490126741E12, (double) 0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.373113490126741E12;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.700416E38;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (-3041.389955831737);
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1.373113490126741E12, 0.0, 0.0, 0.0, 1.700416E38, 0.0, (-3041.389955831737)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1.373113490126741E12, 0.0, 0.0, 0.0, 1.700416E38, 0.0, (-3041.389955831737)}, doubleArray0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1.373113490126741E12, 0.0, 0.0, 0.0, 1.700416E38, 0.0, (-3041.389955831737)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double0 = MathArrays.linearCombination((-1210.05), 354.9, (-1210.05), (-1210.05));
      assertEquals(1034774.2575, double0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[3];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.902267575263977;
      doubleArray0[1] = (double) Float.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.902267575263977, Double.NaN}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(1.0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.902267575263977, Double.NaN}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.902267575263977, Double.NaN}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.902267575263977, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.8140867773727365, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) Float.NaN;
      doubleArray2[1] = 0.902267575263977;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 0.902267575263977;
      doubleArray2[7] = Double.NaN;
      doubleArray2[8] = 0.902267575263977;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray2, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = (-22);
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[][] doubleArray1 = new double[7][7];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) (-22);
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      doubleArray1[6] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      double[] doubleArray3 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray1, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1127);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, (-1127)}, intArray0);
      assertArrayEquals(new int[] {0, (-1127)}, intArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-1127);
      intArray2[1] = (-1127);
      double double0 = MathArrays.distance(intArray2, intArray0);
      assertEquals(1127.0, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {0, (-1127)}, intArray0);
      assertArrayEquals(new int[] {(-1127), (-1127)}, intArray2);
      
      int int0 = MathArrays.distance1(intArray1, intArray0);
      assertEquals(0, int0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, (-1127)}, intArray0);
      assertArrayEquals(new int[] {0, (-1127)}, intArray1);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(Integer.MIN_VALUE);
      assertEquals((-2.147483648E9), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(Integer.MIN_VALUE);
      assertEquals((-2.147483648E9), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (double) doubleArray0[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[3];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.902267575263977;
      doubleArray0[1] = (double) Float.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.902267575263977, Double.NaN}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      MathArrays.scaleInPlace((-968.49922), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "X5spck";
      stringArray0[1] = "Nu6i";
      stringArray0[2] = "";
      stringArray0[3] = "c";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace((-396.376261327861), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = 0.902267575263977;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = 0.902267575263977;
      doubleArray0[5] = 0.902267575263977;
      doubleArray0[6] = 0.902267575263977;
      doubleArray0[7] = 0.902267575263977;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.902267575263977, Double.NaN, Double.NaN, 0.902267575263977, 0.902267575263977, 0.902267575263977, 0.902267575263977}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1701);
      Integer integer0 = new Integer((-1701));
      assertEquals((-1701), (int)integer0);
      assertNotNull(integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "yy ^?'%[";
      stringArray0[1] = "yy ^?'%[";
      stringArray0[2] = "";
      stringArray0[3] = "yy ^?'%[";
      stringArray0[4] = "yy ^?'%[";
      stringArray0[5] = "yy ^?'%[";
      stringArray0[6] = "yy ^?'%[";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      Double double0 = new Double((-1.0F));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) doubleArray0[0];
      doubleArray1[1] = (-878.804361);
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) doubleArray0[0];
      doubleArray1[4] = (double) doubleArray0[1];
      doubleArray1[5] = (double) doubleArray0[1];
      doubleArray1[6] = 1711.7496890013;
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-878.804361), 0.0, (-1.0), (-1.0), (-1.0), 1711.7496890013}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-780353097);
      intArray0[1] = (-2549);
      intArray0[2] = (-1317);
      intArray0[3] = 306783363;
      intArray0[4] = (-1117);
      intArray0[5] = (-1878);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-780353097), (-2549), (-1317), 306783363, (-1117), (-1878)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Double[] doubleArray2 = new Double[4];
      Double double1 = new Double(1805.76609716);
      assertEquals(1805.76609716, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray2[0] = double1;
      Double double2 = new Double((double) doubleArray2[0]);
      assertEquals(1805.76609716, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(4, doubleArray2.length);
      
      doubleArray2[1] = double2;
      Double double3 = new Double((-1223.61131297));
      assertEquals((-1223.61131297), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray2[2] = double3;
      Double double4 = new Double((-2121.893));
      assertEquals((-2121.893), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      doubleArray2[3] = double4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(4, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.304E19;
      MathArrays.scaleInPlace(1.0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 1.304E19}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, doubleArray1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-22);
      doubleArray0[1] = 0.902267575263977;
      doubleArray0[2] = (double) (-22);
      doubleArray0[3] = (double) (-22);
      doubleArray0[4] = (double) (-22);
      doubleArray0[5] = (double) (-22);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.902267575263977, (-22.0), (-22.0), (-22.0), (-22.0), (-22.0)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {0.902267575263977, (-22.0), (-22.0), (-22.0), (-22.0), (-22.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.804535150527954, (-44.0), (-44.0), (-44.0), (-44.0), (-44.0)}, doubleArray2, 0.01);
      
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-22.0), 0.902267575263977, (-22.0), (-22.0), (-22.0), (-22.0)}, doubleArray0, 0.01);
      
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.902267575263977, (-22.0), (-22.0), (-22.0), (-22.0), (-22.0)}, doubleArray0, 0.01);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) (-22);
      doubleArray3[1] = 0.902267575263977;
      double[] doubleArray4 = MathArrays.convolve(doubleArray2, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertEquals(7, doubleArray4.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {0.902267575263977, (-22.0), (-22.0), (-22.0), (-22.0), (-22.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-22.0), 0.902267575263977}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-39.69977331161499), 969.6281735547454, 928.300226688385, 928.300226688385, 928.300226688385, 928.300226688385, (-39.69977331161499)}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {1.804535150527954, (-44.0), (-44.0), (-44.0), (-44.0), (-44.0)}, doubleArray2, 0.01);
      
      double[] doubleArray5 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertNotNull(doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray5.length);
      assertArrayEquals(new double[] {0.902267575263977, (-22.0), (-22.0), (-22.0), (-22.0), (-22.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray5, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertEquals(22.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {0.902267575263977, (-22.0), (-22.0), (-22.0), (-22.0), (-22.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.804535150527954, (-44.0), (-44.0), (-44.0), (-44.0), (-44.0)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[3];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 109.5332021;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (-3713.481419901);
      doubleArray0[4] = 1474.31589;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertArrayEquals(new double[] {1.304E19, 109.5332021, 1.304E19, (-3713.481419901), 1474.31589, 0.0, 1.304E19, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertArrayEquals(new double[] {1.304E19, 109.5332021, 1.304E19, (-3713.481419901), 1474.31589, 0.0, 1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.scale((-708.382), doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertEquals(15, doubleArray3.length);
      assertArrayEquals(new double[] {1.304E19, 109.5332021, 1.304E19, (-3713.481419901), 1474.31589, 0.0, 1.304E19, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray3);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertEquals(15, doubleArray3.length);
      assertArrayEquals(new double[] {1.304E19, 109.5332021, 1.304E19, (-3713.481419901), 1474.31589, 0.0, 1.304E19, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = MathArrays.linearCombination(4985.6554, 4985.6554, 4985.6554, 2415.47, 4985.6554, 2415.47, 4985.6554, 2415.47);
      assertEquals(6.098486291466315E7, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4985.6554;
      doubleArray0[1] = 781.715715;
      doubleArray0[2] = 4985.6554;
      doubleArray0[3] = 2415.47;
      doubleArray0[4] = (-676.4726);
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5.6616709493627034E7, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {4985.6554, 781.715715, 4985.6554, 2415.47, (-676.4726)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2515.1438F);
      floatArray0[1] = 1359.6941F;
      floatArray0[2] = (-3921.92F);
      floatArray0[3] = 757.11554F;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = Float.NaN;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = Float.NaN;
      floatArray1[1] = 1359.6941F;
      floatArray1[2] = (-623.8605F);
      floatArray1[3] = Float.NaN;
      floatArray1[4] = Float.NaN;
      floatArray1[5] = (-2515.1438F);
      floatArray1[6] = Float.NaN;
      floatArray1[7] = 757.11554F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-2515.1438F), 1359.6941F, (-3921.92F), 757.11554F, Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, 1359.6941F, (-623.8605F), Float.NaN, Float.NaN, (-2515.1438F), Float.NaN, 757.11554F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-11.23168619701);
      doubleArray0[2] = 311.38;
      doubleArray0[3] = 1798.0210627;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 462.0;
      doubleArray0[6] = 1331.68;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.7976931348623157E308);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-11.23168619701), 311.38, 1798.0210627, 1.304E19, 462.0, 1331.68}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 13;
      intArray0[2] = 0;
      intArray0[3] = 996;
      intArray0[4] = 2;
      intArray0[5] = 517;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 13, 0, 996, 2, 517}, intArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1296.9694249261;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (double) 1;
      doubleArray3[4] = (double) 1;
      doubleArray3[5] = (double) 1;
      doubleArray3[6] = (double) 1;
//      try { 
        MathArrays.sortInPlace(doubleArray3, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1.700416E38, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-658.98691);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {(-658.98691)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      
      double[] doubleArray4 = MathArrays.scale((-658.98691), doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray4.length);
      assertArrayEquals(new double[] {(-658.98691)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {434263.74755134806}, doubleArray4, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray3, doubleArray4);
      assertFalse(boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      assertArrayEquals(new double[] {(-658.98691)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {434263.74755134806}, doubleArray4, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int[] intArray0 = new int[5];
      intArray0[0] = (-1127);
      intArray0[1] = (-1127);
      intArray0[2] = (-1127);
      intArray0[3] = (-1127);
      intArray0[4] = (-1127);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-1127), (-1127), (-1127), (-1127), (-1127)}, intArray0);
      assertArrayEquals(new int[] {(-1127), (-1127), (-1127), (-1127), (-1127)}, intArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      intArray0[3] = (-1127);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) Float.NaN;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) (-1127);
      doubleArray1[4] = (double) (-1127);
      doubleArray1[5] = (double) Float.NaN;
      doubleArray1[6] = (double) (-1127);
      doubleArray1[7] = (double) (-1127);
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, (-1127.0), (-1127.0), Double.NaN, (-1127.0), (-1127.0)}, doubleArray1, 0.01);
      
      boolean boolean2 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = MathArrays.scale(Double.NaN, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1.700416E38, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-658.98691);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {(-658.98691)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-658.98691)}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1771);
      intArray0[1] = (-2215);
      intArray0[2] = 168;
      intArray0[3] = 1908;
      intArray0[4] = 16;
      intArray0[5] = (-1722);
      intArray0[6] = 948;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1771), (-2215), 168, 1908, 16, (-1722), 948}, intArray0);
      
//      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 11
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = new Integer((-1826));
      assertEquals((-1826), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (int)integerArray0[1];
      doubleArray0[1] = (double) (int)integerArray0[1];
      doubleArray0[2] = (double) (int)integerArray0[2];
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1331.68);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-1826.0), (-1826.0), (-1826.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {443.8933333333334, 443.8933333333334, 443.8933333333334}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (int)integerArray0[0];
      longArray0[1] = (long) (-1826);
      longArray0[2] = (long) (int)integerArray0[2];
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,826 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[7] = 611079.4590779613;
      doubleArray0[8] = 0.902267575263977;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, (-1.0), Double.NaN, (-1.0), (-1.0), (-1.0), 0.0, 611079.4590779613, 0.902267575263977}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN, (-1.0), Double.NaN, (-1.0), (-1.0), (-1.0), 0.0, 611079.4590779613, 0.902267575263977}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace(2205.816049416, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, (-2205.816049416), Double.NaN, (-2205.816049416), (-2205.816049416), (-2205.816049416), 0.0, 1.347928878302615E9, 1990.2362983849393}, doubleArray0, 0.01);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) Float.NaN;
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 9;
      intArray0[1] = (-1701);
      intArray0[2] = (-668);
      intArray0[3] = 972;
      intArray0[4] = 400;
      int int0 = new Integer(9);
      assertEquals(9, int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "yy ^?'%[";
      stringArray0[1] = "yy ^?'%[";
      stringArray0[2] = "yy ^?'%[";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 44;
      intArray0[1] = 3950;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {44, 3950}, intArray0);
      assertArrayEquals(new int[] {44, 3950}, intArray1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = (-781.715715);
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[0][9];
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-0.010714690733195933));
      assertEquals((-0.010714690733195933), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = double1;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      doubleArray1[3] = double1;
      doubleArray1[4] = double0;
      doubleArray1[5] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      
      double double2 = MathArrays.linearCombination(106.2797, 0.0, 7.6705882352941171E17, 7.6705882352941171E17, 1127.0, (-723.6829761316));
      assertEquals(5.8837923875432516E35, double2, 0.01);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(2, doubleArray4.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-11.23168619701);
      doubleArray0[2] = 311.38;
      doubleArray0[3] = 1798.0210627;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 462.0;
      doubleArray0[6] = 1331.68;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.7976931348623157E308);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-11.23168619701), 311.38, 1798.0210627, 1.304E19, 462.0, 1331.68}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.linearCombination(623.080530181469, 1.7976931348623157E308, (-2871.85638368), 462.0, 1331.68, (-20.0));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-11.23168619701), 311.38, 1798.0210627, 1.304E19, 462.0, 1331.68}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2102.3455F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2102.3455F;
      floatArray1[1] = 2102.3455F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2102.3455F, 2102.3455F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2102.3455F}, floatArray0, 0.01F);
      
      double double2 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-11.23168619701), 311.38, 1798.0210627, 1.304E19, 462.0, 1331.68}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equals(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2102.3455F, 2102.3455F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2102.3455F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = MathArrays.scale(1151.7584228515625, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-11.23168619701), 311.38, 1798.0210627, 1.304E19, 462.0, 1331.68}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-12936.1891802319), 358634.53770751954, 2070885.9034292423, 1.5018929833984374E22, 532112.3913574219, 1533773.656542969}, doubleArray2, 0.01);
      
//      try { 
        MathArrays.checkOrder(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= -\u221E)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1151.7584F);
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1151.7584F)}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1151.7584F);
      doubleArray0[1] = (double) (-1151.7584F);
      doubleArray0[2] = (double) (-1151.7584F);
      doubleArray0[3] = (-515.609154404);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-1.0F);
      doubleArray0[7] = (double) (-1151.7584F);
      doubleArray0[8] = (double) (-1.0F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2360.5183029460463, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1151.7584228515625), (-1151.7584228515625), (-1151.7584228515625), (-515.609154404), (-1.0), (-1.0), (-1.0), (-1151.7584228515625), (-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1151.7584228515625), (-1151.7584228515625), (-1151.7584228515625), (-515.609154404), (-1.0), (-1.0), (-1.0), (-1151.7584228515625), (-1.0)}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace((-1.0F), doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1151.7584228515625), (-1151.7584228515625), (-1151.7584228515625), (-515.609154404), (-1.0), (-1.0), (-1.0), (-1151.7584228515625), (-1.0)}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1151.7584F);
      doubleArray2[1] = (double) (-1151.7584F);
      doubleArray2[2] = (double) (-1.0F);
      doubleArray2[3] = (double) (-1.0F);
      doubleArray2[4] = (double) 0.0F;
      doubleArray2[5] = (double) 0.0F;
      doubleArray2[6] = (double) (-1.0F);
      doubleArray2[7] = (double) (-1.0F);
      double double1 = MathArrays.distance(doubleArray2, doubleArray0);
      assertEquals(1706.843424958491, double1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1151.7584228515625), (-1151.7584228515625), (-1.0), (-1.0), 0.0, 0.0, (-1.0), (-1.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1151.7584228515625), (-1151.7584228515625), (-1151.7584228515625), (-515.609154404), (-1.0), (-1.0), (-1.0), (-1151.7584228515625), (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-7.8615085543288);
      doubleArray0[6] = (double) 0.0F;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-5829.14);
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[4] = (double) 0.0F;
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-781.715715);
      doubleArray0[1] = (-781.715715);
      doubleArray0[2] = (-781.715715);
      double[] doubleArray1 = MathArrays.scale((-781.715715), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-781.715715), (-781.715715), (-781.715715)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {611079.4590779613, 611079.4590779613, 611079.4590779613}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-781.715715), (-781.715715), (-781.715715)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {611079.4590779613, 611079.4590779613, 611079.4590779613}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = -0.0F;
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[3] = (-422.0919F);
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = -0.0F;
      floatArray1[1] = (-111.36F);
      floatArray1[2] = -0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, -0.0F, Float.POSITIVE_INFINITY, (-422.0919F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {-0.0F, (-111.36F), -0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1127);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-1127)}, intArray0);
      assertArrayEquals(new int[] {1, (-1127)}, intArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1127);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (-1897.71037693582);
      doubleArray0[8] = (double) 1;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-1127.0), 1.0, 1.0, 1.0, 1.0, (-1897.71037693582), 0.0, 1.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-1127.0), 1.0, 1.0, 1.0, 1.0, (-1897.71037693582), 0.0, 1.0}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-1127);
      integerArray0[1] = (Integer) (-1127);
      integerArray0[3] = (Integer) (-1127);
      integerArray0[4] = (Integer) 1;
      Integer integer0 = new Integer((-1826));
      assertEquals((-1826), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[5] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(6, integerArray0.length);
      
      double double2 = MathArrays.linearCombination(1.0, (double) integerArray0[5], (double) integerArray0[5], (double) integerArray0[1]);
      assertEquals(2056076.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(6, integerArray0.length);
      
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.34217729E8, (-1.51263380583E11), 1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8, (-2.5470637709205975E11), 0.0, 1.34217729E8}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 911.094;
      doubleArray0[2] = 1001.31655;
      doubleArray0[3] = (-3008.740756491644);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, 911.094, 1001.31655, (-3008.740756491644), 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(1.0, 0.0, (-3008.740756491644), 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {1.304E19, 911.094, 1001.31655, (-3008.740756491644), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (13,040,000,000,000,000,000 >= 911.094)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1127);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-1127)}, intArray0);
      assertArrayEquals(new int[] {1, (-1127)}, intArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1127);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[6] = (-1897.71037693582);
      doubleArray0[8] = (double) 1;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-1127.0), 0.0, 1.0, 1.0, 0.0, (-1897.71037693582), 0.0, 1.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-1127.0), 0.0, 1.0, 1.0, 0.0, (-1897.71037693582), 0.0, 1.0}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-1127);
      integerArray0[1] = (Integer) (-1127);
      integerArray0[3] = (Integer) (-1127);
      integerArray0[4] = (Integer) 1;
      Integer integer0 = new Integer((-1826));
      assertEquals((-1826), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[5] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(6, integerArray0.length);
      
      double double2 = MathArrays.linearCombination(0.0, (double) integerArray0[5], (double) integerArray0[5], (double) integerArray0[1]);
      assertEquals(2057902.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(6, integerArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-1826));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1127);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-1127)}, intArray0);
      assertArrayEquals(new int[] {1, (-1127)}, intArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) (-1127), 1.0, 8.6933333333333338E17, 0.0);
      assertEquals((-1127.0), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) (-1127);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) (-1127);
      doubleArray2[6] = 8.6933333333333338E17;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly decreasing (0 <= 1)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2081.5885374;
      MathArrays.scaleInPlace(2081.5885374, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {4333010.839035071}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2081.5885374;
      doubleArray1[1] = 2081.5885374;
      doubleArray1[2] = 2081.5885374;
      doubleArray1[3] = 2081.5885374;
      doubleArray1[4] = 2081.5885374;
      doubleArray1[5] = 2081.5885374;
      doubleArray1[6] = 2081.5885374;
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1001.31655;
      double double0 = (-3008.740756491644);
      doubleArray0[3] = (-3008.740756491644);
      doubleArray0[4] = 1.0E-5;
      doubleArray0[5] = 0.0;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.8441344853345161E19, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1001.31655, (-3008.740756491644), 1.0E-5, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1001.31655, (-3008.740756491644), 1.0E-5, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not increasing (13,040,000,000,000,000,000 > 1,001.317)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.04168701738764507;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.04168701738764507}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(8.6933333333333338E17, 8.6933333333333338E17, (-797.820057861), 0.04168701738764507);
      assertEquals(7.557404444444445E35, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 7.557404444444445E35;
      doubleArray1[1] = (double) 1;
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2255.0;
      MathArrays.scaleInPlace(2255.0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {5085025.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2.5857479250625E13, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {5085025.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1073741824;
      intArray0[1] = 1073741824;
      intArray0[2] = 1073741824;
      intArray0[3] = 1073741824;
      intArray0[4] = 1073741824;
      intArray0[5] = 1073741824;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824}, intArray0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1765.6620426365873);
      doubleArray0[2] = (double) 1;
      doubleArray0[1] = (-1765.6620426365873);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (-1765.6620426365873);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, (-1765.6620426365873), 1.0, 0.0, 1.0, 1.0, 1.0, (-1765.6620426365873)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 3117562.448807606, 1.0, 0.0, 1.0, 1.0, 1.0, 3117562.448807606}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertEquals(19, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 2255.0;
      doubleArray0[0] = 2255.0;
      MathArrays.scaleInPlace(2255.0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {5085025.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2.5857479250625E13, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {5085025.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = 1.25;
      double double3 = 4.7124792795124595;
      double double4 = MathArrays.linearCombination(5085025.0, 2.5857479250625E13, 2255.0, 1.25, 4.7124792795124595, 1.25, 4.7124792795124595, 4.7124792795124595);
      assertEquals(1.314859284264094E20, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2255.0;
      doubleArray1[1] = 2255.0;
      doubleArray1[2] = 1.25;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {5085025.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2255.0, 2255.0, 1.25}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[8][4];
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.314859284264094E20;
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2351.57F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {Float.NaN, (-1.0F), (-2351.57F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      Double double0 = new Double(1711.7496890013);
      assertEquals(1711.7496890013, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = double0;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = double0;
      doubleArray1[6] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double double1 = MathArrays.linearCombination((-259.18129), 0.11111095942313305, (-259.18129), (double) doubleArray1[6], 413.29, (-259.18129));
      assertEquals((-107145.83322589642), double1, 0.01);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1187.320372957352;
      doubleArray0[1] = (-11.23168619701);
      doubleArray0[2] = 311.38;
      doubleArray0[3] = 1798.0210627;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 462.0;
      doubleArray0[6] = 1331.68;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.7976931348623157E308);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1187.320372957352, (-11.23168619701), 311.38, 1798.0210627, 1.304E19, 462.0, 1331.68}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1798.0210627;
      int int0 = 572;
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2, 572);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(1, doubleArray2.length);
      assertEquals(572, doubleArray3.length);
      assertArrayEquals(new double[] {1798.0210627}, doubleArray2, 0.01);
      
//      try { 
        MathArrays.ebeDivide(doubleArray3, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 572 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1127);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-1127)}, intArray0);
      assertArrayEquals(new int[] {1, (-1127)}, intArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1127);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (-1897.71037693582);
      doubleArray0[8] = (double) 1;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-1127.0), 1.0, 1.0, 1.0, 1.0, (-1897.71037693582), 0.0, 1.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-1127.0), 1.0, 1.0, 1.0, 1.0, (-1897.71037693582), 0.0, 1.0}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-1127);
      integerArray0[1] = (Integer) (-1127);
      integerArray0[3] = (Integer) (-1127);
      integerArray0[4] = (Integer) 1;
      Integer integer0 = new Integer((-1826));
      assertEquals((-1826), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[5] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(6, integerArray0.length);
      
      double double2 = MathArrays.linearCombination(1.0, (double) integerArray0[5], (double) integerArray0[5], (double) integerArray0[1]);
      assertEquals(2056076.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(6, integerArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, (-1127.0), 1.0, 1.0, 1.0, 1.0, (-1897.71037693582), 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1270129.0, 1.0, 1.0, 1.0, 1.0, 3601304.674729892, 0.0, 1.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "%pgIwu!]?";
      stringArray0[4] = "";
      stringArray0[5] = "=a6>l8R)9pM";
      boolean boolean3 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1127);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-1127)}, intArray0);
      assertArrayEquals(new int[] {1, (-1127)}, intArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) (-1127), 1.0, 8.6933333333333338E17, 0.0);
      assertEquals((-1127.0), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) (-1127);
      doubleArray2[3] = (double) (-1127);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) (-1127);
      doubleArray2[6] = 8.6933333333333338E17;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 2 and 3 are not strictly decreasing (-1,127 <= -1,127)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-264.917078642), 3755.810929352, (-1913.6270068971712), (double) Integer.MIN_VALUE);
      assertEquals(4.109481710704399E12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[0] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-2921.04F);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2921.04F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = 4;
      intArray0[5] = 4;
      intArray0[6] = 1073741824;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {4, 4, 4, 4, 4, 4, 1073741824}, intArray0);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {4, 4, 4, 4, 4, 4, 1073741824}, intArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      float float0 = (-1151.7584F);
      floatArray0[2] = (-1151.7584F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1151.7584F)}, floatArray0, 0.01F);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      int int0 = 204;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 204, 204);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 13
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int int0 = 204;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int1 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-886), 0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2255.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-236.39367778507);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-236.39367778507);
      doubleArray1[1] = 2255.0;
      doubleArray1[2] = 2255.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2255.0, 1.34217729E8, (-236.39367778507), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-236.39367778507), 2255.0, 2255.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not increasing (134,217,729 > -236.394)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = 2134.23681385;
      double double1 = MathArrays.linearCombination((-309.00772986), 0.0, 2134.23681385, 2134.23681385, (-309.00772986), 1.0, 0.0, 1.34217729E8);
      assertEquals(4554657.76986274, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[3] = (-1902L);
      long long0 = 688L;
      longArray0[2] = 688L;
      longArray0[3] = 1L;
      longArray0[4] = (-2379L);
      longArray0[5] = 20L;
      longArray0[6] = 0L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,379 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2255.0;
      MathArrays.scaleInPlace(2255.0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {5085025.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2.5857479250625E13, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {5085025.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.4E-45F);
      floatArray0[1] = (-2027.5316F);
      floatArray0[2] = 143.95375F;
      floatArray0[3] = (-1757.8F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3567.176F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-3.4028235E38F);
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1.4E-45F), (-2027.5316F), 143.95375F, (-1757.8F), 0.0F, 3567.176F, 0.0F, 0.0F, (-3.4028235E38F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[0] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-2921.04F);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2921.04F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-2921.0400390625), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 1566.02635504518, 0.0, (double) 0.0F);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-2921.0400390625), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 13 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1127);
      intArray0[1] = (-1127);
      intArray0[2] = 2;
      intArray0[3] = (-1127);
      intArray0[4] = (-1127);
      intArray0[5] = (-1127);
      intArray0[6] = (-1127);
      intArray0[7] = 712;
      intArray0[8] = (-1127);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {(-1127), (-1127), 2, (-1127), (-1127), (-1127), (-1127), 712, (-1127)}, intArray0);
      assertArrayEquals(new int[] {(-1127), (-1127), 2, (-1127), (-1127), (-1127), (-1127), 712, (-1127)}, intArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-11.23168619701);
      doubleArray0[2] = 311.38;
      doubleArray0[3] = 1798.0210627;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 462.0;
      doubleArray0[6] = 1331.68;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.7976931348623157E308);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-11.23168619701), 311.38, 1798.0210627, 1.304E19, 462.0, 1331.68}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.linearCombination(623.080530181469, 1.7976931348623157E308, (-2871.85638368), 0.0, 1331.68, (-20.0));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1.7976931348623157E308, 1.304E19, 140.0611525, 3.834E-20, 0.0, 1.304E19, 1331.68, (-1509.8874843563276));
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-11.23168619701), 311.38, 1798.0210627, 1.304E19, 462.0, 1331.68}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      
      long[][] longArray1 = new long[0][3];
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      long[][] longArray0 = new long[0][8];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 1.34217729E8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.34217729E8, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 734);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(734, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1.34217729E8, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(734, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1.34217729E8, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(734, doubleArray1.length);
      assertEquals(734, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1.34217729E8, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, false);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(7, doubleArray0.length);
      assertEquals(734, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1.34217729E8, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.0F, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int int0 = 204;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-886), 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Double[] doubleArray0 = new Double[10];
      Double double0 = new Double(1.3421772329123753E8);
      assertEquals(1.3421772329123753E8, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-784.92928120171));
      assertEquals((-784.92928120171), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1566.02635504518);
      assertEquals(1566.02635504518, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1566.02635504518);
      assertEquals(1566.02635504518, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      assertEquals((-784.92928120171), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      assertEquals(10, doubleArray0.length);
      
      doubleArray0[5] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(10, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double6 = MathArrays.linearCombination((double) doubleArray0[2], (double) doubleArray0[4], 0.0, 1.304E19, (double) doubleArray0[0], (double) doubleArray0[4]);
      assertEquals(0.0, double6, 0.01);
      assertEquals(10, doubleArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray4 = MathArrays.scale(1.3421973535697263E8, doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray4.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1127);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-1127)}, intArray0);
      assertArrayEquals(new int[] {1, (-1127)}, intArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1127);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (-1897.71037693582);
      doubleArray0[7] = (double) (-1127);
      doubleArray0[8] = (double) 1;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-1127.0), 1.0, 1.0, 1.0, 1.0, (-1897.71037693582), (-1127.0), 1.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-1127.0), 1.0, 1.0, 1.0, 1.0, (-1897.71037693582), (-1127.0), 1.0}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-1127);
      integerArray0[1] = (Integer) (-1127);
      integerArray0[2] = (Integer) 1;
      // Undeclared exception!
//      try { 
        MathArrays.scale(1, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1.3421772329123753E8);
      assertEquals(1.3421772329123753E8, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-784.92928120171));
      assertEquals((-784.92928120171), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1566.02635504518);
      assertEquals(1566.02635504518, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1566.02635504518);
      assertEquals(1566.02635504518, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2907.6908999;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) doubleArray0[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      assertFalse(boolean0);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 2907.6908999, 0.0, 0.0, (-784.92928120171)}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1105L);
      longArray2[1] = (-187L);
      longArray2[2] = (-247L);
      longArray2[3] = (-4200L);
      longArray2[4] = 3014L;
      longArray2[5] = 2093L;
      longArray2[6] = 3768L;
      longArray2[7] = 2723L;
      longArray2[8] = 3334L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1105L);
      longArray3[1] = (-4200L);
      longArray3[2] = 3362L;
      longArray3[3] = (-1105L);
      longArray3[4] = 3334L;
      longArray3[5] = (-4200L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-4200L);
      longArray0[3] = longArray4;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,105 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-775.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-775.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 194;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2255.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-236.39367778507);
      double double0 = MathArrays.linearCombination((-1508.4333514547), 249.445787, (-3515.626437873), (-1508.4333514547), 1.34217729E8, 3.834E-20, (-1.0), (-3515.626437873));
      assertEquals(4930331.452090726, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 14.101419448852539);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {2255.0, 1.34217729E8, (-236.39367778507), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.3691521869368084E-4, 14.101207369669263, (-2.48360354191811E-5), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`hhH-1*2K";
      stringArray0[1] = "`hhH-1*2K";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 2255.0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2255.0;
      doubleArray1[1] = 2255.0;
      doubleArray1[2] = 2255.0;
      doubleArray1[3] = 2255.0;
      doubleArray1[4] = 2255.0;
      doubleArray1[5] = 2255.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][4];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {2255.0, 2255.0, 2255.0, 2255.0, 2255.0, 2255.0}, doubleArray1, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray3.length);
      assertArrayEquals(new double[] {2255.0, 2255.0, 2255.0, 2255.0, 2255.0, 2255.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4510.0, 4510.0, 4510.0, 4510.0, 4510.0, 4510.0}, doubleArray3, 0.01);
      
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(6, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {2255.0, 2255.0, 2255.0, 2255.0, 2255.0, 2255.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(6, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {2255.0, 2255.0, 2255.0, 2255.0, 2255.0, 2255.0}, doubleArray1, 0.01);
      
      int int0 = (-1825);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray1, (-1825));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-652);
      doubleArray0[3] = (double) (-652);
      doubleArray0[4] = 1082.4967682812662;
      doubleArray0[5] = 1082.4967682812662;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1082.4967682812662;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 186);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(186, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-652.0), (-652.0), 1082.4967682812662, 1082.4967682812662, 0.0, 0.0, 1082.4967682812662}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(186, doubleArray1.length);
      assertEquals(186, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-652.0), (-652.0), 1082.4967682812662, 1082.4967682812662, 0.0, 0.0, 1082.4967682812662}, doubleArray0, 0.01);
      
      double[][] doubleArray3 = new double[1][4];
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (double) (-652);
      doubleArray4[2] = (-1148.78757084);
      doubleArray4[3] = (double) 186;
      doubleArray3[0] = doubleArray4;
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 911.094;
      doubleArray0[2] = 1001.31655;
      doubleArray0[3] = (-3008.740756491644);
      doubleArray0[4] = 1.0E-5;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not increasing (13,040,000,000,000,000,000 > 911.094)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-781.715715);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.32;
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 3.32, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.4699556E-39, 11.0224, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1;
      intArray0[0] = 1;
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      float float0 = (-1151.7584F);
      floatArray0[2] = (-1151.7584F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 204;
      int int1 = (-886);
      MathArrays.buildArray(field0, 204, (-886));
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2255.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-236.39367778507);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-236.39367778507);
      doubleArray0[0] = 2907.6908999;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2255.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-236.39367778507);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2907.6908999;
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[8];
      longArray1[0] = 2807L;
      longArray1[1] = 4607182418800017408L;
      longArray1[2] = 0L;
      longArray1[3] = (-4200L);
      longArray1[4] = (-1122L);
      longArray1[5] = (-2178L);
      longArray1[6] = (-1955L);
      longArray1[7] = 4294967295L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 2807L;
      longArray2[1] = (-1122L);
      longArray1[3] = 4294967295L;
      longArray2[3] = (-1122L);
      longArray0[1] = longArray2;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,122 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      int[] intArray0 = new int[7];
      intArray0[5] = 0;
      intArray0[1] = 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      double double0 = 1.34217729E8;
      Double double1 = new Double(1.34217729E8);
      doubleArray0[0] = double1;
      double double2 = (-784.92928120171);
      Double double3 = new Double((-784.92928120171));
      doubleArray0[1] = double3;
      Double double4 = new Double(1566.02635504518);
      doubleArray0[2] = double4;
      Double double5 = new Double(1566.02635504518);
      doubleArray0[3] = double5;
      double double6 = 0.0;
      Double double7 = new Double(0.0);
      doubleArray0[4] = double7;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) doubleArray0[3];
      doubleArray1[1] = 1566.02635504518;
      MathArrays.equals(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (1,566.026 >= 1,566.026)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1082.4967682812662;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Double double0 = new Double(1082.4967682812662);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[1];
      Double double1 = new Double(1711.7496890013);
      doubleArray1[0] = double1;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.linearCombination(2.800552834259E-8, 0.11111095942313305, 1.304E19, 413.29, 1.304E19, 106.2797);
      MathArrays.ebeAdd(doubleArray2, doubleArray0);
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (1,082.497 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2255.0;
      MathArrays.scaleInPlace(2255.0, doubleArray0);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2.5857479250625E13, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(5085025.0, doubleArray0);
      assertArrayEquals(new double[] {2.5857479250625E13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1584.721111);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-236.39367778507);
      doubleArray1[3] = (-1061.82794837);
      doubleArray1[4] = (-1584.721111);
      doubleArray1[5] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(4467.66384815507, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-781.715715);
      doubleArray0[1] = (-781.715715);
      doubleArray0[2] = (-781.715715);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-781.715715);
      doubleArray1[2] = (-781.715715);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[5][9];
      doubleArray2[0] = doubleArray0;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-781.715715);
      doubleArray3[1] = (-781.715715);
      doubleArray3[2] = (-781.715715);
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1584.721111);
      doubleArray0[2] = (-1584.721111);
      doubleArray0[3] = (-1584.721111);
      MathArrays.scale(0.0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1361);
      intArray0[1] = (-334);
      MathArrays.copyOf(intArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-334);
      doubleArray1[1] = (double) (-334);
      doubleArray1[2] = (double) (-334);
      doubleArray1[3] = (double) (-1361);
      doubleArray1[4] = (double) (-334);
      doubleArray1[5] = (double) (-1361);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) (-334);
      doubleArray2[2] = (double) (-1361);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      MathArrays.copyOf(doubleArray0, 0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-1.0E-6);
      doubleArray1[3] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray1);
//      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (6.283 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1082.4967682812662;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1171799.2533393854, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertEquals(15, doubleArray2.length);
      assertTrue(boolean0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathArrays.linearCombination(4573.771870446112, 1.0, 0.0, 0.0, 0.0, 1.0, 3.834E-20, 1335.84);
      assertEquals(4573.771870446112, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1866.021451235203;
      double[] doubleArray1 = MathArrays.scale(1866.021451235203, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("`7h*par^Ja7i");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.`7h*par^Ja7i
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.32;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (3.32 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 2276.83, 2276.83, 2276.83, 1.304E19);
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MathArrays.linearCombination((-2958.5), (-2958.5), (-2958.5), 0.0, (-2958.5), 0.0, 0.0, 0.0);
      long[][] longArray0 = new long[1][5];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 2679L;
      longArray1[2] = 0L;
      longArray1[3] = 264L;
      longArray1[4] = 586L;
      longArray1[5] = 989L;
      longArray1[6] = (-60L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1174.4793);
      doubleArray0[1] = (-1174.4793);
      doubleArray0[2] = (-1174.4793);
      doubleArray0[3] = (-1174.4793);
      doubleArray0[4] = (-1174.4793);
      doubleArray0[5] = (-1174.4793);
      MathArrays.scaleInPlace((-1174.4793), doubleArray0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 175;
      int[] intArray1 = new int[1];
      intArray1[0] = 175;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(0, int0);
      
      double[] doubleArray1 = MathArrays.scale(175, doubleArray0);
      assertArrayEquals(new double[] {2.4139528457248572E8, 2.4139528457248572E8, 2.4139528457248572E8, 2.4139528457248572E8, 2.4139528457248572E8, 2.4139528457248572E8}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection.values();
      int[] intArray2 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray2.length);
      
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 175;
      doubleArray2[1] = (double) 175;
      doubleArray2[2] = (-1174.4793);
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 175;
      doubleArray2[5] = (double) 175;
      doubleArray2[6] = (double) 175;
      doubleArray2[7] = (double) 0;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long[][] longArray0 = new long[0][2];
      MathArrays.checkRectangular(longArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2390;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2390);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 4138.702F;
      floatArray0[4] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 4814.77F;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 1.4E-45F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      float[] floatArray1 = new float[9];
      floatArray1[0] = 4814.77F;
      floatArray1[1] = 4138.702F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-1.0F);
      floatArray1[4] = 1.4E-45F;
      floatArray1[5] = 4138.702F;
      floatArray1[6] = 1.4E-45F;
      floatArray1[7] = 4814.77F;
      floatArray1[8] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 5.4333333333333331E17;
      doubleArray0[1] = 4224.60088485;
      doubleArray0[2] = (-2594.3);
      doubleArray0[3] = 1537.6;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int int0 = (-566);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Integer>) null, (-566), (-566));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1127);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {1, (-1127)}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      MathArrays.OrderDirection.values();
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1127);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (-1897.71037693582);
      doubleArray0[7] = (double) (-1127);
      doubleArray0[8] = (double) 1;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-1127);
      integerArray0[1] = (Integer) (-1127);
      integerArray0[2] = (Integer) 1;
      integerArray0[3] = (Integer) (-1127);
      integerArray0[4] = (Integer) 1;
      Integer integer0 = new Integer((-1826));
      integerArray0[5] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      float float0 = (-1151.7584F);
      floatArray0[2] = (-1151.7584F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-886);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 204, (-886));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = null;
      double double0 = new Integer(204);
      MathArrays.linearCombination(1.0, 1.0, (double) 204, (-3042.45), 204, (double) 204, (double) 0, 1317.4697688309163);
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 6.283185307179586;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      double double2 = (-1.0);
      doubleArray0[3] = (-1.0);
      double double3 = (-20.0);
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = (-658.98691);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
//      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 11 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
//      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1082.4967682812662;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1.304E19;
      double double0 = 100.0;
      doubleArray0[7] = 100.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1383;
      intArray0[1] = (-257);
      intArray0[2] = (-737);
      intArray0[3] = (-1890);
      intArray0[4] = 83;
      intArray0[5] = (-731);
      intArray0[6] = 1478;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {1383, (-257), (-737), (-1890), 83, (-731), 1478}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2146.579023326891;
      doubleArray0[1] = 2146.579023326891;
      doubleArray0[2] = 2146.579023326891;
      doubleArray0[3] = 2146.579023326891;
      doubleArray0[4] = 2146.579023326891;
      doubleArray0[5] = 2146.579023326891;
      doubleArray0[6] = 2146.579023326891;
      doubleArray0[7] = 2146.579023326891;
      MathArrays.scale(2146.579023326891, doubleArray0);
      long[][] longArray0 = new long[5][4];
      long[] longArray1 = new long[6];
      longArray1[0] = 1717L;
      longArray1[1] = (-549L);
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 796L;
      longArray1[5] = 2147483647L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = 796L;
      longArray2[1] = (-549L);
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 2147483647L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = (-549L);
      longArray5[1] = 0L;
      longArray5[2] = 0L;
      longArray5[3] = 2147483647L;
      longArray5[4] = 796L;
      longArray5[5] = 796L;
      longArray5[6] = 0L;
      longArray5[7] = 0L;
      longArray5[8] = (-549L);
      longArray0[4] = longArray5;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 0 while others have length 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 3.834E-20;
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-52.6884994534699);
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      double double2 = (-1265.0);
      doubleArray0[3] = (-1265.0);
      double double3 = 3372.4833170847;
      doubleArray0[4] = 3372.4833170847;
      int int0 = 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-495.89839867026967);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3760.124473844426;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not increasing (13,040,000,000,000,000,000 > 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1.34217729E8);
      doubleArray0[0] = double0;
      Double double1 = new Double((-784.92928120171));
      doubleArray0[1] = double1;
      Double double2 = new Double(1566.02635504518);
      doubleArray0[2] = double2;
      Double double3 = new Double(1566.02635504518);
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      doubleArray0[5] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      MathArrays.linearCombination((double) doubleArray0[2], (double) doubleArray0[4], 0.0, 1.304E19, (double) doubleArray0[0], (double) doubleArray0[4]);
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray2);
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 911.094;
      doubleArray0[2] = 1001.31655;
      doubleArray0[3] = (-3008.740756491644);
      doubleArray0[4] = 1.0E-5;
      double double0 = 0.0;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (13,040,000,000,000,000,000 >= 911.094)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 657.8;
      doubleArray0[1] = 2994.3915;
      doubleArray0[2] = 897.34602;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      double double0 = 2134.23681385;
      MathArrays.linearCombination((-309.00772986), 0.0, 2134.23681385, 2134.23681385, (-309.00772986), 1.0, 0.0, 1.34217729E8);
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = (-1902L);
      long long0 = 688L;
      longArray0[2] = 688L;
      long long1 = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-2379L);
      longArray0[5] = 0L;
      longArray0[6] = 0L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,902 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = (-4200L);
      longArray0[0] = (-4200L);
      long long1 = 0L;
      longArray0[1] = 0L;
      long long2 = 49L;
      longArray0[2] = 49L;
      longArray0[3] = 9218868437227405312L;
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -4,200 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1998L);
      longArray0[1] = 0L;
      longArray0[2] = 1143L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,998 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2255.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-236.39367778507);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2907.6908999;
      doubleArray0[6] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-775.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 191;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = (-2544);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.normalizeArray(doubleArray1, 0.0);
      long[][] longArray0 = new long[8][1];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 191;
      longArray1[1] = (long) (-2544);
      longArray1[2] = (-4985L);
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 191;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = (long) 0;
      longArray2[1] = 523L;
      longArray2[2] = (long) 0;
      longArray2[3] = 1504L;
      longArray2[4] = (long) (-2544);
      longArray2[5] = (long) 1;
      longArray2[6] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = (long) 0;
      longArray4[1] = 523L;
      longArray4[2] = (long) 191;
      longArray4[3] = (long) 0;
      longArray4[4] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      longArray5[0] = (long) 0;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = (long) (-2544);
      longArray6[1] = (long) (-2544);
      longArray6[2] = (long) 0;
      longArray6[3] = (long) 191;
      longArray6[4] = (long) 0;
      longArray6[5] = (long) 0;
      longArray6[6] = (long) 0;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      longArray0[6] = longArray7;
      long[] longArray8 = new long[7];
      longArray8[0] = (long) 0;
      longArray8[1] = (long) (-2544);
      longArray8[2] = 1504L;
      longArray8[3] = 1504L;
      longArray8[4] = (long) (-2544);
      longArray8[5] = 0L;
      longArray8[6] = (long) 0;
      longArray0[7] = longArray8;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 7 while others have length 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-111.557781208037);
      doubleArray0[1] = 1213.693128;
      doubleArray0[2] = (-3296.188131);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 2394.6148;
      doubleArray0[5] = (-268.0360290171231);
      doubleArray0[6] = 20.0;
      doubleArray0[7] = 3580.67924835;
      doubleArray0[8] = 1986.425;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MathArrays.linearCombination(0.0, 2562.449760065, 963.8859181689, 963.8859181689);
      MathArrays.linearCombination(2.0, (-1.0), 0.0, 0.0, (-1.0), 0.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2032.693F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      MathArrays.equals(floatArray0, floatArray0);
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[5];
      longArray1[0] = 654L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 2969L;
      longArray1[4] = 1220L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 2562.449760065;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 1220L;
      doubleArray0[5] = (double) (-2032.693F);
      doubleArray0[6] = (double) 1.0F;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[4][5];
      doubleArray1[0] = doubleArray0;
      int[] intArray0 = new int[1];
      intArray0[0] = 1201;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Pair<Object, Integer>>) null, 2147002796, 2147002796);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MathArrays.linearCombination(0.0, (-1160.0), 0.0, (-1160.0), 60.254245765763, 0.0);
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 761.6010883895435;
      doubleArray0[2] = 1480.7683871957;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.linearCombination(2782711.2343542916, 6.283185307179586, 2782711.2343542916, 2782711.2343542916, 0.0, 1480.7683871957, (-1691.6488), 100.0);
      int int0 = (-1312);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-1312));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.scale(Double.NaN, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2976);
      intArray0[1] = (-1928);
      intArray0[2] = 816;
      intArray0[3] = (-259);
      intArray0[4] = 2147478707;
      intArray0[5] = 8;
      intArray0[6] = 1013;
      intArray0[7] = 5;
      MathArrays.copyOf(intArray0);
      double[] doubleArray1 = MathArrays.scale(1810.0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      int[] intArray1 = new int[8];
      intArray1[0] = (-2976);
      intArray1[1] = (-259);
      intArray1[2] = (-2976);
      intArray1[3] = 8;
      intArray1[4] = 8;
      intArray1[5] = (-2976);
      intArray1[6] = 816;
      intArray1[7] = 1013;
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertArrayEquals(new int[] {(-2976), (-259), (-2976), 8, 8, (-2976), 816, 1013}, intArray2);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-11.23168619701);
      doubleArray0[2] = 311.38;
      doubleArray0[3] = 1798.0210627;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 462.0;
      doubleArray0[6] = 1331.68;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.7976931348623157E308);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      MathArrays.OrderDirection.values();
      MathArrays.linearCombination(623.080530181469, 1.7976931348623157E308, (-2871.85638368), 0.0, 1331.68, (-20.0));
      MathArrays.linearCombination(1.7976931348623157E308, 1.304E19, 140.0611525, 3.834E-20, 0.0, 1.304E19, 1331.68, (-1509.8874843563276));
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      long[][] longArray1 = new long[0][3];
      MathArrays.checkRectangular(longArray1);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 2666.98144;
      doubleArray0[0] = 2666.98144;
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-444.2834);
      doubleArray0[1] = (-387.0);
      doubleArray0[2] = 1530.2788171130467;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1970.88;
      double[][] doubleArray1 = new double[0][6];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.linearCombination((-1.0), (-1.0), (-1.0), 1530.2788171130467, 1717.5735330234133, 1530.2788171130467, 598.53692, (-444.2834));
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 598.53692;
      doubleArray2[1] = 1717.5735330234133;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-444.2834);
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (-444.2834);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 1970.88;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = 1530.2788171130467;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 2360917.0977595043;
      doubleArray3[6] = 1530.2788171130467;
      doubleArray3[7] = (-1.0);
      doubleArray3[8] = (-1.0);
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1717.5735330234133;
//      try { 
        MathArrays.ebeAdd(doubleArray3, doubleArray4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1560.5757633455);
      doubleArray0[2] = 263.2653475319234;
      doubleArray0[3] = 1929.787003;
      doubleArray0[4] = 0.0;
      MathArrays.copyOf(doubleArray0, 0);
      long[][] longArray0 = new long[9][5];
      long[] longArray1 = new long[7];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (-2625L);
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (-2625L);
      longArray2[1] = (-2934L);
      longArray2[2] = (long) 0;
      longArray2[3] = 1L;
      longArray2[4] = (long) 0;
      longArray2[5] = (-2625L);
      longArray2[6] = (long) 0;
      longArray2[7] = (long) 0;
      longArray2[8] = (-2625L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = (-2625L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = 100L;
      longArray5[1] = (-2934L);
      longArray5[2] = (-2625L);
      longArray5[3] = (-2625L);
      longArray5[4] = (long) 0;
      longArray5[5] = (long) 0;
      longArray5[6] = 0L;
      longArray5[7] = 1L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = 100L;
      longArray6[1] = (-2934L);
      longArray6[2] = (-2625L);
      longArray6[3] = 0L;
      longArray6[4] = (-2625L);
      longArray6[5] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      longArray7[0] = (long) 0;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[4];
      longArray8[0] = (long) 0;
      longArray8[1] = 100L;
      longArray8[2] = 0L;
      longArray8[3] = (-2934L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[3];
      longArray9[0] = 100L;
      longArray9[1] = (long) 0;
      longArray9[2] = 100L;
      longArray0[8] = longArray9;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,625 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1255.21930946087);
      doubleArray0[2] = 3.834E-20;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,255.219 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = (-2799);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Object>) null, (-2799));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2037.228;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 289.163872803409;
      doubleArray0[5] = 210.4;
      doubleArray0[6] = 1533.656396;
      doubleArray0[7] = (-4232.67088);
      doubleArray0[8] = 509.622;
      MathArrays.distance1(doubleArray0, doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 3066;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 3066);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      int int0 = (-1825);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-1825));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
