/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 15:05:49 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 3.834E-20;
      doubleArray0[8] = 3.834E-20;
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.4699556E-39, 0.0, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.4699556E-39, 0.0, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(4.157662291212561E-39, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 0.0, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 25;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = (double) 25;
      doubleArray0[3] = (double) 25;
      doubleArray0[4] = (double) 25;
      doubleArray0[5] = (double) 25;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {25.0, 25.0, 25.0, 25.0, 25.0, 25.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-580));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 25;
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 25;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 25;
      doubleArray0[3] = (double) 25;
      doubleArray0[4] = 1.2395460526192278E7;
      doubleArray0[5] = (double) 25;
      doubleArray0[6] = (double) 25;
      doubleArray0[7] = (double) 25;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {25.0, (-1.0), 25.0, 25.0, 1.2395460526192278E7, 25.0, 25.0, 25.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {625.0, 1.0, 625.0, 625.0, 1.5364744165639094E14, 625.0, 625.0, 625.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 25);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2173.0);
      doubleArray0[1] = 9.081993794249275E13;
      doubleArray0[2] = (-3307.055525);
      doubleArray0[3] = (-5518.4479542);
      doubleArray0[4] = 4.3466666666666665E18;
      doubleArray0[5] = (-112.770320667);
      doubleArray0[6] = (-2.5857668567479893E-8);
      doubleArray0[7] = (-0.09088450866185192);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2173.0), 9.081993794249275E13, (-3307.055525), (-5518.4479542), 4.3466666666666665E18, (-112.770320667), (-2.5857668567479893E-8), (-0.09088450866185192)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2173.0), 9.081993794249275E13, (-3307.055525), (-5518.4479542), 4.3466666666666665E18, (-112.770320667), (-2.5857668567479893E-8), (-0.09088450866185192)}, doubleArray0, 0.01);
      assertEquals(1.889351112760763E37, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[23];
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[4];
      longArray1[0] = (-589L);
      longArray1[1] = 0L;
      longArray1[2] = 2433L;
      longArray1[3] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-589L);
      longArray3[1] = 2433L;
      longArray3[2] = (-589L);
      longArray3[3] = 2433L;
      longArray3[4] = (-589L);
      longArray0[2] = longArray3;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2433L;
      doubleArray0[1] = (double) 2433L;
      doubleArray0[2] = 0.9974949359893799;
      doubleArray0[3] = (double) (-589L);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-589L);
      doubleArray1[1] = (double) (-589L);
      doubleArray1[2] = (double) 2433L;
      doubleArray1[3] = (double) 0L;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2433.0, 2433.0, 0.9974949359893799, (-589.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-589.0), (-589.0), 2433.0, 0.0}, doubleArray1, 0.01);
      assertEquals((-2863647.094820738), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-407));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 25;
      intArray0[1] = 25;
      intArray0[2] = 25;
      intArray0[3] = 1968526677;
      intArray0[4] = 25;
      intArray0[5] = 25;
      intArray0[6] = 25;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 25;
      intArray1[1] = 25;
      intArray1[2] = 25;
      intArray1[3] = 25;
      intArray1[4] = 25;
      intArray1[5] = 1968526677;
      intArray1[6] = 25;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {25, 25, 25, 1968526677, 25, 25, 25}, intArray0);
      assertArrayEquals(new int[] {25, 25, 25, 25, 25, 1968526677, 25}, intArray1);
      assertEquals((-357913992), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = (-101);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int1 = 2146962376;
      int int2 = 2145938695;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146962376, 2145938695);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1284.447677291819);
      doubleArray0[1] = 1.388094693877551E37;
      doubleArray0[2] = 3822.0;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (-0.49999999999999994);
      doubleArray0[5] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1284.447677291819), 1.388094693877551E37, 3822.0, 3.834E-20, (-0.49999999999999994), 1.304E19}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1284.447677291819), 1.388094693877551E37, 3822.0, 3.834E-20, (-0.49999999999999994), 1.304E19}, doubleArray0, 0.01);
      assertEquals(1.388094693877551E37, double0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1284.447677291819), 1.388094693877551E37, 3822.0, 3.834E-20, (-0.49999999999999994), 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1284.447677291819), 1.388094693877551E37, 3822.0, 3.834E-20, (-0.49999999999999994), 1.304E19}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract(doubleArray1, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-4905.56F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-70.5573F);
      floatArray0[5] = Float.NEGATIVE_INFINITY;
      floatArray0[6] = (-3.4028235E38F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-1695.0F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, 0.0F, (-4905.56F), (-1.0F), (-70.5573F), Float.NEGATIVE_INFINITY, (-3.4028235E38F), 0.0F, (-1695.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-4905.56F);
      doubleArray0[1] = (double) (-4905.56F);
      doubleArray0[2] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) (-1695.0F);
      doubleArray0[4] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[5] = (double) (-3.4028235E38F);
//      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0F);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, -\u221E at index 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-101);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-101), (-101));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2302.1);
      doubleArray0[1] = (-2375.5797245);
      doubleArray0[2] = (-6.032174644509064E-23);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2302.1), (-2375.5797245), (-6.032174644509064E-23)}, doubleArray0, 0.01);
      assertEquals(3308.0271216323927, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1210);
      intArray0[1] = 2009;
      intArray0[2] = 2316;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1210), 2009, 2316}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1210);
      doubleArray0[1] = (double) 2009;
      doubleArray0[2] = (double) 2009;
      doubleArray0[3] = (double) 2316;
      doubleArray0[4] = (double) (-1210);
      doubleArray0[5] = (double) 2009;
      doubleArray0[6] = (double) 2316;
      doubleArray0[7] = (double) 2009;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2009);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(2009, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1210.0), 2009.0, 2009.0, 2316.0, (-1210.0), 2009.0, 2316.0, 2009.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, ")CVu0^<]rr+?Yy{[,").when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 12, 12);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 12, 12);
      assertNotNull(objectArray0);
      assertEquals(12, objectArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.4342944622039795;
      doubleArray0[1] = (-505.21731074);
      doubleArray0[2] = 0.3333333333332802;
      doubleArray0[3] = (-3554.93);
      doubleArray0[4] = 2.3964890912765;
      doubleArray0[5] = (-18.10393275100224);
      doubleArray0[6] = (-18.10393275100224);
      doubleArray0[7] = (-286.436222);
      doubleArray0[8] = 1725.4;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.4342944622039795, (-505.21731074), 0.3333333333332802, (-3554.93), 2.3964890912765, (-18.10393275100224), (-18.10393275100224), (-286.436222), 1725.4}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3137.5703F;
      floatArray0[1] = 1004.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 802.1855F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 2095.0F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2095.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2095.0F;
      floatArray1[5] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {3137.5703F, 1004.0F, 0.0F, 802.1855F, 0.0F, 2095.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2095.0F, 0.0F, 0.0F, 0.0F, 2095.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 622.3798471824634;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 5.8361541129195;
      doubleArray0[5] = 834.63315;
      doubleArray0[6] = 0.008336750013465571;
      doubleArray0[7] = (-2633.547974096632);
      doubleArray0[8] = 268.3815;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {622.3798471824634, 3.834E-20, 3.834E-20, 1.0, 5.8361541129195, 834.63315, 0.008336750013465571, (-2633.547974096632), 268.3815}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1082.2004F;
      floatArray0[1] = (-1076.0F);
      floatArray0[2] = (-2080.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 207.0339F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 2588.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1082.2004F, (-1076.0F), (-2080.0F), 0.0F, 1.0F, 207.0339F, 0.0F, 2588.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, 207.0339F);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[0][7];
      MathArrays.scaleInPlace((-1222.4969), doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "DECREASING";
      stringArray0[1] = "POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS";
      stringArray0[2] = "";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1708.69376);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1708.69376);
      doubleArray1[1] = (-1708.69376);
      doubleArray1[2] = (-1708.69376);
      doubleArray1[3] = (-1708.69376);
      doubleArray1[4] = (-1708.69376);
      doubleArray1[5] = 1.388094693877551E37;
      doubleArray1[6] = (-1708.69376);
      doubleArray1[7] = 1.388094693877551E37;
      doubleArray1[8] = (-1708.69376);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1708.69376), (-1708.69376), (-1708.69376), (-1708.69376), (-1708.69376), 1.388094693877551E37, (-1708.69376), 1.388094693877551E37, (-1708.69376)}, doubleArray1, 0.01);
      assertEquals(1.9630623419397623E37, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1708.69376), (-1708.69376), (-1708.69376), (-1708.69376), (-1708.69376), 1.388094693877551E37, (-1708.69376), 1.388094693877551E37, (-1708.69376)}, doubleArray1, 0.01);
      assertEquals(1.9630623419397623E37, double1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 6;
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(6, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = 23;
      Integer integer1 = new Integer(23);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertEquals(23, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertNotNull(integer2);
      assertFalse(int0 == int1);
      assertFalse(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(6, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      assertNotNull(integer3);
      assertFalse(int1 == int0);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertEquals(23, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger("s9D@pLP");
      assertNull(integer4);
      
      integerArray0[4] = null;
      Integer integer5 = new Integer(2147187810);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int1));
      assertEquals(2147187810, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = Integer.getInteger("s9D@pLP", 141);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertEquals(141, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1763);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer0));
      assertEquals(1763, (int)integer7);
      
      integerArray0[7] = integer7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1763;
      doubleArray0[1] = (double) int0;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1763.0, 6.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 19;
      intArray1[1] = 22;
      intArray1[2] = 31;
      intArray1[3] = (-747);
      intArray1[4] = 111;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray1, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 2.608E18;
      doubleArray0[2] = 1687.3771192;
      doubleArray0[3] = (-3321.0);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 1.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.834E-20, 2.608E18, 1687.3771192, (-3321.0), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.470092024539878E-38, 1.0000000000000007, 6.470004291411046E-16, (-1.273389570552148E-15), Double.NaN, 3.8343558282208612E-19}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3.834E-20, 2.608E18, 1687.3771192, (-3321.0), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3.834E-20, 2.608E18, 1687.3771192, (-3321.0), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3.834E-20, 2.608E18, 1687.3771192, (-3321.0), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray2, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-3321);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5.206150291559893E-8;
      doubleArray0[1] = 1.86285714285714278E18;
      doubleArray0[2] = 905.7;
      doubleArray0[3] = (-2000.8);
      doubleArray0[4] = (double) (-3321);
      doubleArray0[5] = (double) (-3321);
      doubleArray0[6] = 1.86285714285714278E18;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {5.206150291559893E-8, 1.86285714285714278E18, 905.7, (-2000.8), (-3321.0), (-3321.0), 1.86285714285714278E18}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {5.206150291559893E-8, 1.86285714285714278E18, 905.7, (-2000.8), (-3321.0), (-3321.0), 1.86285714285714278E18}, doubleArray0, 0.01);
      assertEquals(2.6344778361921654E18, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.scale(1130, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 1135.56548330731;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 6.031409265844357E9;
      doubleArray2[1] = 6.031409265844357E9;
      doubleArray2[2] = 0.7249995199969751;
      doubleArray2[3] = (-1973.624);
      doubleArray2[4] = (-1583.8121947);
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.031409265844357E9, 6.031409265844357E9, 0.7249995199969751, (-1973.624), (-1583.8121947)}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-215.0);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 411.4753;
      doubleArray1[3] = 504.159;
      doubleArray1[4] = 1038.6801345;
      doubleArray1[5] = 643.2289650373071;
      doubleArray1[6] = 0.7937005259840998;
      doubleArray1[7] = (-857.7158171622);
      doubleArray1[8] = (-2327.137138347324);
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, doubleArray1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(18, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 681.2006782;
      doubleArray1[3] = (-894.61);
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 18 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer integer0 = new Integer(3333);
      assertNotNull(integer0);
      assertEquals(3333, (int)integer0);
      
      Integer integer1 = new Integer(3333);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3333, (int)integer1);
      
      Integer integer2 = new Integer(1309);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1309, (int)integer2);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      double double0 = MathArrays.linearCombination((double) 3333, (double) integerArray0[0], (double) integerArray0[0], (double) integerArray0[1], 4.3466666666666665E18, (-1.0), (-1316.586276), (-1.0));
      assertEquals(4, integerArray0.length);
      assertEquals((-4.3466666666579395E18), double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 3333;
      floatArray0[1] = (-3456.0818F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {3333.0F, (-3456.0818F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {3333.0F, (-3456.0818F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Name is null
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3300.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-3567.627671767);
      doubleArray0[3] = 2134.86867381;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1499.11556220776);
      doubleArray0[6] = 1468.5619;
      doubleArray0[7] = 40.19140625;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {3300.0, 3.834E-20, (-3567.627671767), 2134.86867381, 1.304E19, (-1499.11556220776), 1468.5619, 40.19140625}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3300.0, 3.834E-20, (-3567.627671767), 2134.86867381, 1.304E19, (-1499.11556220776), 1468.5619, 40.19140625}, doubleArray0, 0.01);
      assertEquals(1.304E19, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3300.0, 3.834E-20, (-3567.627671767), 2134.86867381, 1.304E19, (-1499.11556220776), 1468.5619, 40.19140625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[8][3];
      long[] longArray1 = new long[5];
      longArray1[0] = (-1736L);
      longArray1[1] = (-354L);
      longArray1[2] = 979L;
      longArray1[3] = 5152L;
      longArray1[4] = (-1137L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 979L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 5152L;
      longArray3[1] = (-1736L);
      longArray3[2] = (-1137L);
      longArray3[3] = (-354L);
      longArray3[4] = 5152L;
      longArray3[5] = 0L;
      longArray3[6] = 5152L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-1736L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 0L;
      longArray5[1] = 0L;
      longArray5[2] = (-1137L);
      longArray5[3] = 0L;
      longArray5[4] = (-1137L);
      longArray5[5] = 5152L;
      longArray5[6] = 979L;
      longArray5[7] = (-1736L);
      longArray5[8] = (-354L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = (-1736L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = 5152L;
      longArray7[1] = (-1137L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[7];
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray3));
      
      longArray8[0] = (-1736L);
      longArray8[1] = 5152L;
      longArray8[2] = (-174L);
      longArray8[3] = (-1137L);
      longArray8[4] = (-1137L);
      longArray8[5] = 0L;
      longArray8[6] = (-1953L);
      longArray0[7] = longArray8;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 1 while others have length 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 0);
      assertNotNull(intArray2);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Integer integer0 = new Integer((-3247));
      assertNotNull(integer0);
      assertEquals((-3247), (int)integer0);
      
      MathArrays.scaleInPlace((-3247), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3247);
      intArray0[1] = (-3247);
      intArray0[2] = (-3247);
      intArray0[3] = (-3247);
      intArray0[4] = (-3247);
      intArray0[5] = (-3247);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-3247));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertNotNull(intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-499.1819439864);
      double double0 = 718.7443;
      doubleArray2[1] = 718.7443;
      doubleArray2[2] = 4379.774258574706;
      double double1 = (-175.7907208081551);
      doubleArray2[3] = (-175.7907208081551);
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2143749543);
      intArray1[1] = (-2143749543);
      intArray1[2] = 970;
      intArray1[4] = (-2143749543);
      intArray1[5] = (-2143749543);
      intArray1[6] = 970;
      intArray1[7] = 970;
      intArray1[8] = (-2143749543);
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray1, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2537.532476;
      doubleArray0[1] = (-3077.425007769739);
      doubleArray0[2] = 1640.4088;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2537.532476, (-3077.425007769739), 1640.4088}, doubleArray0, 0.01);
      assertEquals(1.8600556776318707E7, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1879;
      intArray0[1] = 173;
      intArray0[2] = 62;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1879, 173, 62}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2537.532476, (-3077.425007769739), 1640.4088}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2537.532476, (-3077.425007769739), 1640.4088}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[][] longArray1 = new long[2][2];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 134217729;
      intArray0[1] = 2309;
      intArray0[2] = 3947;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {134217729, 2309, 3947}, intArray0);
      assertArrayEquals(new int[] {134217729, 2309, 3947}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = 0.0036;
      doubleArray0[2] = 9.1913242062498191E18;
      doubleArray0[3] = (double) 3947;
      doubleArray0[4] = (-3300.0);
      doubleArray0[5] = (double) 134217729;
      doubleArray0[6] = (double) 134217729;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.34217729E8, 0.0036, 9.1913242062498191E18, 3947.0, (-3300.0), 1.34217729E8, 1.34217729E8}, doubleArray0, 0.01);
      assertEquals(9.1913242062498191E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 3.260000000000001E18;
      doubleArray0[3] = 0.3333333333332802;
      doubleArray0[4] = (-3685.216480587);
      doubleArray0[5] = (-122.33);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][7];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      doubleArray1[6] = null;
      doubleArray1[7] = null;
      doubleArray1[8] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1192.1765786149904);
      doubleArray0[1] = 970.0;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = (-1038.6801345);
      doubleArray0[4] = (-1830.552275288016);
      doubleArray0[5] = 0.78525872536;
      doubleArray0[6] = 1.125;
      doubleArray0[7] = (-1049.241314);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1192.1765786149904), 970.0, 1.7976931348623157E308, (-1038.6801345), (-1830.552275288016), 0.78525872536, 1.125, (-1049.241314)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1192.1765786149904), 970.0, 1.7976931348623157E308, (-1038.6801345), (-1830.552275288016), 0.78525872536, 1.125, (-1049.241314)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1192.1765786149904), 970.0, 1.7976931348623157E308, (-1038.6801345), (-1830.552275288016), 0.78525872536, 1.125, (-1049.241314)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 246.7F;
      floatArray0[1] = (-447.027F);
      floatArray0[2] = 1376.601F;
      floatArray0[3] = (-798.5F);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-447.027F);
      floatArray1[1] = 1376.601F;
      floatArray1[2] = 1376.601F;
      floatArray1[3] = 246.7F;
      floatArray1[4] = (-798.5F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {246.7F, (-447.027F), 1376.601F, (-798.5F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-447.027F), 1376.601F, 1376.601F, 246.7F, (-798.5F)}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-3247));
      assertNotNull(integer0);
      assertEquals((-3247), (int)integer0);
      
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (int)integerArray0[0];
      floatArray0[1] = (float) (-3247);
      floatArray0[2] = (float) (int)integerArray0[0];
      floatArray0[3] = (float) (int)integerArray0[0];
      floatArray0[4] = (float) (-3247);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-3247.0F), (-3247.0F), (-3247.0F), (-3247.0F), (-3247.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1502.3F;
      floatArray1[1] = (float) (int)integerArray0[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-3247.0F), (-3247.0F), (-3247.0F), (-3247.0F), (-3247.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1502.3F, (-3247.0F)}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 970;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {970, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 970;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.scale(970, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {970.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {940900.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {970.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = (-68);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1967.478312105476;
      doubleArray1[1] = (-454.656414744);
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3807.0291358312);
      doubleArray2[1] = 1967.478312105476;
      doubleArray2[2] = 0.8333333333333334;
      doubleArray2[3] = (-212.55632911296);
      double double0 = MathArrays.distance1(doubleArray1, doubleArray2);
      assertEquals(2, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1967.478312105476, (-454.656414744)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3807.0291358312), 1967.478312105476, 0.8333333333333334, (-212.55632911296)}, doubleArray2, 0.01);
      assertEquals(8196.642174786151, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.scale((-0.7853981633974483), doubleArray1);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1967.478312105476, (-454.656414744)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1545.2538528519524), 357.08631311680614}, doubleArray3, 0.01);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      double[] doubleArray4 = MathArrays.convolve(doubleArray3, doubleArray0);
      assertNotNull(doubleArray4);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertEquals(6, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1967.478312105476, (-454.656414744)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1545.2538528519524), 357.08631311680614}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      
//      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3229.15303;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3229.15303);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 3229.15303}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3229.15303}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 3229.15303}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 153;
      intArray0[0] = 153;
      double double0 = MathArrays.linearCombination(1.0, Double.NaN, (-991.4684149000004), (-0.25), 1.0, (double) 153);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 153;
      doubleArray0[1] = (double) 153;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 153;
      doubleArray0[4] = (-991.4684149000004);
      MathArrays.scaleInPlace((-0.25), doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-38.25), (-38.25), Double.NaN, (-38.25), 247.8671037250001}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 154;
      intArray0[1] = (-683);
      intArray0[2] = 1149;
      intArray0[3] = 2;
      intArray0[4] = 5;
      intArray0[5] = 1;
      intArray0[6] = 1565;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {154, (-683), 1149, 2, 5, 1, 1565}, intArray0);
      assertEquals(0, int0);
      
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2480.65F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1760.6436F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-2480.65F), 0.0F, 0.0F, 0.0F, (-1760.6436F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1760.6436F);
      floatArray1[2] = (-1.4E-45F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, (-2480.65F), 0.0F, 0.0F, 0.0F, (-1760.6436F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1760.6436F), (-1.4E-45F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathArrays.linearCombination(872.0, 1967.478312105476, 1.304E19, (-3807.0291358312), (-3807.0291358312), 3913.94);
      assertEquals((-4.9643659931238865E22), double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(3.834E-20, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.2860509143963117E-8;
      doubleArray0[1] = 303.1681419175;
      doubleArray0[2] = (-528.44);
      doubleArray0[3] = (-311.351952763);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-311.351952763);
      doubleArray1[2] = (-311.351952763);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.5574076175689697;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.5574076175689697, 0.0}, doubleArray0, 0.01);
      assertEquals(2.4255184872618543, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 158;
      intArray0[0] = 158;
      intArray0[1] = 150;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      long[][] longArray0 = new long[0][8];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 4;
      intArray0[2] = 4723;
      intArray0[3] = 2146747956;
      intArray0[4] = (-1);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = 2527;
      intArray1[2] = 4723;
      intArray1[3] = 2146747956;
      intArray1[4] = 4723;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 4, 4723, 2146747956, (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), 2527, 4723, 2146747956, 4723}, intArray1);
      assertEquals(5355.530412573529, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 2527;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {16.0, 6385729.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4.0, 2527.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {4.0, 2527.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {8.0, 5054.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {4.0, 2527.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 4723;
      longArray1[1] = (long) 2146747956;
      longArray1[2] = (-542L);
      longArray1[3] = (-1908L);
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 4723;
      longArray1[6] = (long) 4723;
      longArray1[7] = (long) (-1);
      longArray0[0] = longArray1;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -542 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 153;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {153, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.4E-45F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1064.5292F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 2430.33F;
      floatArray0[5] = (-1027.4F);
      floatArray0[6] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1.4E-45F, 0.0F, (-1064.5292F), (-1.0F), 2430.33F, (-1027.4F), 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.5574076175689697;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.5574076175689697, 0.0}, doubleArray0, 0.01);
      assertEquals(2.4255184872618543, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination(1.5574076175689697, Double.NaN, Double.NaN, 1.5574076175689697, (-0.16666666666666666), 1.5574076175689697);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = Double.NaN;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = 0.0;
//      try { 
        MathArrays.normalizeArray(doubleArray2, (-850.5521270818298));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1140.366, (-4264.92651405369), 177.7773355555, 366.0, 244.76, (-2621.8575231659956));
      assertEquals((-5440236.531682146), double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4264.92651405369);
      doubleArray0[1] = (-4264.92651405369);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-737.961);
      doubleArray0[4] = 4075.7477621648627;
      MathArrays.scaleInPlace((-1012.0), doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {4316105.632222334, 4316105.632222334, Double.NaN, 746816.532, (-4124656.735310841)}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(4075.7477621648627, 4316105.632222334, Double.NaN, (-1.0), (-1244.7035706469), 378.0, (-1012.0), (-3807.0291358312));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-392);
      intArray0[1] = (-2143749550);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2143749550);
      intArray1[1] = (-392);
      intArray1[2] = (-2143749550);
      intArray1[3] = 150;
      intArray1[5] = 158;
      intArray1[6] = (-1691);
      intArray1[7] = 150;
      intArray1[8] = 158;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-392), (-2143749550)}, intArray0);
      assertArrayEquals(new int[] {(-2143749550), (-392), (-2143749550), 150, 0, 158, (-1691), 150, 158}, intArray1);
      assertEquals(2143749158, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = Double.NaN;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale(Double.NaN, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = Double.NaN;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = Double.NaN;
//      try { 
        MathArrays.normalizeArray(doubleArray2, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3573.0);
      doubleArray0[1] = (-1609.42423);
      doubleArray0[2] = (-3573.0);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-0.49999999999999994);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3573.0), (-1609.42423), (-3573.0), 1.304E19, (-0.49999999999999994)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-7146.0), (-3218.84846), (-7146.0), 2.608E19, (-0.9999999999999999)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = 9;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 9);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float float0 = (-1151.811F);
      float float1 = 1.0F;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1151.811F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      int[] intArray0 = new int[5];
      intArray0[0] = 54;
      intArray0[1] = 242;
      intArray0[2] = 54;
      intArray0[3] = 242;
      intArray0[4] = 242;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 242;
      int int0 = (-2834);
      intArray1[1] = (-2834);
      intArray1[2] = 242;
      intArray1[3] = 54;
      intArray1[4] = 242;
      intArray1[5] = 54;
      int int1 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {54, 242, 54, 242, 242}, intArray0);
      assertArrayEquals(new int[] {242, (-2834), 242, 54, 242, 54}, intArray1);
      assertEquals(3640, int1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 242);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-3300);
      intArray0[1] = 242;
      intArray0[2] = (-310);
      intArray0[3] = 1130;
      intArray0[4] = (-68);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 242;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {242.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-68);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-68.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale((-68.0), doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-68.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4624.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
//      try { 
        MathArrays.convolve(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathArrays.linearCombination(872.0, 1967.478312105476, 1.304E19, (-3807.0291358312), (-3807.0291358312), 3913.94);
      assertEquals((-4.9643659931238865E22), double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3807.0291358312);
      doubleArray0[1] = (-4.9643659931238865E22);
      doubleArray0[2] = 1.304E19;
      MathArrays.scaleInPlace((-3807.0291358312), doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.4493470841067655E7, 1.8899485976752227E26, (-4.964365993123885E22)}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((-737.961), 1967.478312105476, (-1.0), 2387.1, (-3807.0291358312), (-611.146), 3913.94, 1.304E19);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5.1037777600000006E22, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 198;
      intArray0[2] = 0;
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 198;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      Integer integer0 = Integer.valueOf(1493);
      assertNotNull(integer0);
      assertEquals(1493, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(1493, (int)integer1);
      
      integerArray0[3] = integer1;
      integerArray0[4] = (Integer) 198;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 0;
      integerArray0[7] = (Integer) 198;
      integerArray0[8] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      long[][] longArray1 = new long[2][2];
      longArray1[0] = longArray0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = 3373L;
      longArray2[1] = (-1L);
      longArray2[2] = 1389L;
      longArray2[3] = (-619L);
      longArray2[4] = (-5034868814120038111L);
//      try { 
        MathArrays.checkNonNegative(longArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-3300);
      intArray0[1] = 242;
      intArray0[2] = (-310);
      intArray0[3] = 1130;
      intArray0[4] = (-68);
      intArray0[5] = (-1099);
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[6];
      longArray1[0] = (-1012L);
      longArray1[1] = 128L;
      longArray1[2] = (-1012L);
      longArray1[3] = 100L;
      longArray1[4] = 0L;
      longArray1[5] = 805L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 2 while others have length 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 634.91251;
      doubleArray0[2] = 377165.9743545601;
      doubleArray0[3] = (-4108.68);
      doubleArray0[4] = 4.0;
      doubleArray0[5] = 377165.9743545601;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 377165.9743545601;
      doubleArray1[1] = 377165.9743545601;
      doubleArray1[2] = (-4108.68);
      doubleArray1[3] = 634.91251;
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = Double.NaN;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = Double.NaN;
      double[] doubleArray1 = new double[14];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(Double.NaN, doubleArray1);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      long[][] longArray0 = new long[0][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2285.42047);
      doubleArray0[1] = 548.819573518101;
      doubleArray0[2] = (-1974.513);
      doubleArray0[3] = 1012.0;
      doubleArray0[4] = (-1677.6006684380177);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2285.42047), 548.819573518101, (-1974.513), 1012.0, (-1677.6006684380177)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5223146.724695021, 301202.9242765903, 3898701.5871689995, 1024144.0, 2814344.0027436838}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination((-2285.42047), (-2285.42047), (-2563.63), 4299.0, (-1547.876), (-2563.63), 1012.0, (-2285.42047));
      assertEquals((-4142562.8110649795), double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2285.42047), 548.819573518101, (-1974.513), 1012.0, (-1677.6006684380177)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5223146.724695021, 301202.9242765903, 3898701.5871689995, 1024144.0, 2814344.0027436838}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5225432.1451650215, 300654.10470307217, 3900676.1001689993, 1023132.0, 2816021.603412122}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-929);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {(-929)}, intArray0);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray3);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2285.42047), 548.819573518101, (-1974.513), 1012.0, (-1677.6006684380177)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5223146.724695021, 301202.9242765903, 3898701.5871689995, 1024144.0, 2814344.0027436838}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5223146.724695021, 301202.9242765903, 3898701.5871689995, 1024144.0, 2814344.0027436838}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1), 154);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[1];
      longArray1[0] = 2918L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 4503599627370495L;
      longArray2[2] = (-1424L);
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 4503599627370495L;
      floatArray0[4] = (float) (-721L);
      floatArray0[5] = (float) 4503599627370495L;
      floatArray0[6] = (float) 2918L;
      floatArray0[7] = (float) 2918L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 4.5035996E15F, (-721.0F), 4.5035996E15F, 2918.0F, 2918.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 158;
      intArray0[1] = 150;
      intArray0[2] = 23;
      intArray0[3] = (-2143749550);
      intArray0[4] = (-392);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {158, 150, 23, (-2143749550), (-392)}, intArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Bvm&|4P ";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {158, 150, 23, (-2143749550), (-392)}, intArray0);
      assertArrayEquals(new int[] {158, 150, 23, (-2143749550), (-392)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double double0 = MathArrays.linearCombination((double) 150, (double) (-2143749550), (double) 23, (double) 0, (double) 23, (-459.8915), (double) 23, (double) 0);
      assertEquals((-3.215624430775045E11), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(900);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(900, (int)integer1);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      long[][] longArray1 = new long[2][2];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(2, longArray1.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      MathArrays.scaleInPlace(0L, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(4186);
      assertNotNull(integer0);
      assertEquals(4186, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(900);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(900, (int)integer1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = new int[1];
      intArray0[0] = (-1647);
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 4186;
      intArray1[1] = (int) integerArray0[1];
      intArray1[2] = (-1647);
      intArray1[3] = 900;
      intArray1[4] = 0;
      intArray1[5] = 4186;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1647)}, intArray0);
      assertArrayEquals(new int[] {4186, 900, (-1647), 900, 0, 4186}, intArray1);
      assertEquals(5833, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[0][6];
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1151.811F);
      doubleArray0[3] = (double) (-1151.811F);
      doubleArray0[4] = (double) (-1L);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) (-1L);
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 0.0F;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-3265.81);
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(243);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(243, (int)integer2);
      
      Integer integer3 = Integer.getInteger("DECREASING", integer2);
      assertNotNull(integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(243, (int)integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer((-1457));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals((-1457), (int)integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer(141);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals(141, (int)integer5);
      
      integerArray0[4] = integer5;
      Integer integer6 = new Integer(int0);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer0));
      assertEquals(0, (int)integer6);
      
      integerArray0[5] = integer6;
      Integer integer7 = new Integer((-1));
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertEquals((-1), (int)integer7);
      
      integerArray0[6] = integer7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean0);
      
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[22][2];
      doubleArray1[0] = doubleArray0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1[2]);
      assertEquals(0, doubleArray0.length);
      assertEquals(22, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
//      try { 
        MathArrays.ebeDivide(doubleArray1[2], doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[0] = doubleArray0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1[2]);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
//      try { 
        MathArrays.ebeDivide(doubleArray1[2], doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 158;
      intArray0[1] = 150;
      intArray0[2] = 23;
      intArray0[3] = (-2143749550);
      intArray0[4] = (-392);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 158;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-392);
      doubleArray0[3] = 614.1384;
      doubleArray0[4] = (double) 150;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {158.0, Double.NaN, (-392.0), 614.1384, 150.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      long long0 = (-597L);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination((-2999.078475), (double) 0L, 0.0, 0.0, 0.0, 3.32);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(872.0, 1967.478312105476, 1.304E19, (-3807.0291358312), (-3807.0291358312), 3913.94);
      assertEquals((-4.9643659931238865E22), double0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float float0 = (-737.2F);
      double double0 = 1505.2559794043257;
      double double1 = MathArrays.linearCombination((double) (-737.2F), 1505.2559794043257, 1.0, 1505.2559794043257, (-1648.416759097721), (-3379.9695690307));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4463429.012418336, double1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int1);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(4186);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(4186, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(900);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(900, (int)integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, integerArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer integer0 = new Integer(3333);
      assertNotNull(integer0);
      assertEquals(3333, (int)integer0);
      
      Integer integer1 = new Integer(3333);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3333, (int)integer1);
      
      Integer integer2 = new Integer(1309);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(1309, (int)integer2);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      double double0 = MathArrays.linearCombination((double) 3333, (double) integerArray0[0], (double) integerArray0[0], (double) integerArray0[1], 4.3466666666666665E18, (-1.0), (-1316.586276), (-1.0));
      assertEquals(4, integerArray0.length);
      assertEquals((-4.3466666666579395E18), double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 3333;
      floatArray0[1] = (-3456.0818F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {3333.0F, (-3456.0818F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) integerArray0[1];
      intArray0[1] = (int) integerArray0[0];
      intArray0[2] = (int) integerArray0[1];
      intArray0[3] = 3333;
      intArray0[4] = (int) integerArray0[1];
      intArray0[5] = 3333;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {3333, 1309, 3333, 3333, 3333, 3333}, intArray0);
      assertEquals(0.0, double1, 0.01);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {3333, 1309, 3333, 3333, 3333, 3333}, intArray0);
      assertEquals(0, int0);
      
      double double2 = MathArrays.distance1(doubleArray1, doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 244.76;
      doubleArray0[1] = 3913.94;
      doubleArray0[2] = (-333.737645);
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (-1238.1742955472);
      doubleArray0[5] = (-6.032174644509064E-23);
      doubleArray0[6] = 1193.629;
      doubleArray0[7] = 963.4313462421118;
      doubleArray0[8] = (-172.404053327358);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {244.76, 3913.94, (-333.737645), 1.34217729E8, (-1238.1742955472), (-6.032174644509064E-23), 1193.629, 963.4313462421118, (-172.404053327358)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination((-172.404053327358), 532.0, 244.76, 1193.629, 0.0, (-333.737645));
      assertEquals(200433.6776698455, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {244.76, 3913.94, (-333.737645), 1.34217729E8, (-1238.1742955472), (-6.032174644509064E-23), 1193.629, 963.4313462421118, (-172.404053327358)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-53.4873F);
      floatArray0[1] = (-2105.2083F);
      floatArray0[2] = (-1175.0F);
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {244.76, 3913.94, (-333.737645), 1.34217729E8, (-1238.1742955472), (-6.032174644509064E-23), 1193.629, 963.4313462421118, (-172.404053327358)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1.34217729E8, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 158;
      intArray0[1] = 150;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 23;
      floatArray0[1] = 3025.0F;
      floatArray0[2] = (float) 150;
      floatArray0[3] = (-466.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 158;
      floatArray0[6] = (float) 158;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {23.0F, 3025.0F, 150.0F, (-466.0F), 0.0F, 158.0F, 158.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 3025.0F;
      doubleArray0[2] = (double) (-466.0F);
      doubleArray0[3] = (double) (-466.0F);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 3025.0, (-466.0), (-466.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 3025.0, (-466.0), (-466.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, 3025.0, (-466.0), (-466.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
//      try { 
        MathArrays.normalizeArray(doubleArray3, 150);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 459.8915;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 459.8915}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-392);
      intArray0[1] = (-2143749550);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, intArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      long long0 = 3373L;
      long long1 = (-1012L);
      long[] longArray0 = new long[3];
      longArray0[0] = 3373L;
      longArray0[1] = (-1012L);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,012 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 245;
      intArray0[1] = (-1);
      intArray0[2] = 2;
      intArray0[3] = 232;
      intArray0[4] = 1;
      intArray0[5] = 223;
      intArray0[6] = 255;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 134217729;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer integer0 = new Integer(3333);
      assertNotNull(integer0);
      assertEquals(3333, (int)integer0);
      
      Integer integer1 = new Integer(3333);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3333, (int)integer1);
      
      Integer integer2 = new Integer(1309);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1309, (int)integer2);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 273;
      intArray0[1] = 3333;
      intArray0[2] = (-392);
      intArray0[3] = (-2143749550);
      intArray0[4] = 3333;
      intArray0[5] = 1309;
      intArray0[6] = 1309;
      intArray0[7] = (-392);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {273, 3333, (-392), (-2143749550), 3333, 1309, 1309, (-392)}, intArray0);
      assertEquals(0, int0);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[2];
      longArray1[0] = (-1L);
      longArray1[1] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 2147483647L;
      longArray2[1] = (-1L);
      longArray2[2] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-5096L);
      longArray4[1] = (-1L);
      longArray4[2] = (-1L);
      longArray4[3] = (-1L);
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray2, (-1437));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 244.76;
      doubleArray0[1] = 3913.94;
      doubleArray0[2] = (-333.737645);
      doubleArray0[3] = 1.34217729E8;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {244.76, 3913.94, (-333.737645), 1.34217729E8, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(0.0, (-1238.1742955472), 1193.629, 0.0, 532.0, 3402.57135203);
      assertEquals(1810167.95927996, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1175.0F);
      floatArray0[1] = (-53.4873F);
      floatArray0[2] = (-2105.2083F);
      floatArray0[3] = (-2105.2083F);
      floatArray0[4] = (-2105.2083F);
      floatArray0[5] = (-2105.2083F);
      floatArray0[6] = (-1175.0F);
      floatArray0[7] = (-2105.2083F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1175.0F), (-53.4873F), (-2105.2083F), (-2105.2083F), (-2105.2083F), (-2105.2083F), (-1175.0F), (-2105.2083F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[1][8];
      long[] longArray1 = new long[4];
      longArray1[0] = (-2419L);
      longArray1[1] = (-3461L);
      longArray1[2] = 0L;
      longArray1[3] = 2317L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 430.0F;
      floatArray0[1] = 430.0F;
      floatArray0[2] = 1496.4F;
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 1496.4F;
      floatArray0[5] = 430.0F;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3.4028235E38F;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-4203.326);
      doubleArray1[3] = (double) 3.4028235E38F;
      doubleArray1[4] = (double) 1496.4F;
      doubleArray1[5] = (double) 430.0F;
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(11, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.4028234663852886E38, Double.NaN, (-4203.326), 3.4028234663852886E38, 1496.4000244140625, 430.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(11, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray3.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.4028234663852886E38, Double.NaN, (-4203.326), 3.4028234663852886E38, 1496.4000244140625, 430.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray4 = MathArrays.scale((-4545.34), doubleArray0);
      assertNotNull(doubleArray4);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 3.32;
      doubleArray2[0] = 0.0;
      doubleArray2[3] = 5735.205888061;
      doubleArray2[4] = (-1657.4187580209);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3.32, 0.0, 5735.205888061, (-1657.4187580209)}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2391;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2391;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2391}, intArray0);
      assertArrayEquals(new int[] {2391}, intArray1);
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1316.586276);
      doubleArray0[3] = 1.7976931348623157E308;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, (-1316.586276), 1.7976931348623157E308, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (1 >= -1,316.586)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.2246467991473532E-16;
      doubleArray2[1] = 3.32;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 5735.205888061;
      doubleArray2[4] = (-1657.4187580209);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.2246467991473532E-16, 3.32, 0.0, 5735.205888061, (-1657.4187580209)}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3.32;
      doubleArray3[1] = 1.2246467991473532E-16;
      doubleArray3[2] = (-1657.4187580209);
      doubleArray3[3] = 5735.205888061;
      doubleArray3[4] = 5735.205888061;
      doubleArray3[5] = (-1657.4187580209);
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.32, 1.2246467991473532E-16, (-1657.4187580209), 5735.205888061, 5735.205888061, (-1657.4187580209)}, doubleArray3, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 6;
      intArray0[1] = 261;
      intArray0[2] = 736;
      int[] intArray1 = MathArrays.copyOf(intArray0, 261);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(261, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {6, 261, 736}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int0 = MathArrays.distanceInf(intArray1, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(261, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {6, 261, 736}, intArray0);
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1608.24;
      doubleArray0[2] = 991.1825106052161;
      doubleArray0[3] = (-943.0);
      doubleArray0[5] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1608.24, 991.1825106052161, (-943.0), 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1608.24, 991.1825106052161, (-943.0), 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1608.24, 991.1825106052161, (-943.0), 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 1608.24, 991.1825106052161, (-943.0), 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 262;
      longArray1[1] = (long) 262;
      longArray1[2] = (long) 262;
      longArray1[3] = (long) 262;
      longArray1[4] = (long) 262;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 262;
      longArray2[1] = (long) 262;
      longArray2[2] = (long) 262;
      longArray2[3] = (long) 262;
      longArray2[4] = (long) 262;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 262;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 244.76;
      doubleArray0[1] = 3913.94;
      doubleArray0[2] = (-333.737645);
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (-1238.1742955472);
      doubleArray0[5] = (-6.032174644509064E-23);
      doubleArray0[6] = 1193.629;
      doubleArray0[7] = 963.4313462421118;
      doubleArray0[8] = (-172.404053327358);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {244.76, 3913.94, (-333.737645), 1.34217729E8, (-1238.1742955472), (-6.032174644509064E-23), 1193.629, 963.4313462421118, (-172.404053327358)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination((-172.404053327358), 532.0, 244.76, 1193.629, 0.0, (-333.737645));
      assertEquals(200433.6776698455, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {244.76, 3913.94, (-333.737645), 1.34217729E8, (-1238.1742955472), (-6.032174644509064E-23), 1193.629, 963.4313462421118, (-172.404053327358)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-53.4873F);
      floatArray0[1] = (-2105.2083F);
      floatArray0[2] = (-1175.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-53.4873F), (-2105.2083F), (-1175.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-737.2F);
      floatArray0[1] = 430.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2341.0F;
      floatArray0[4] = 2341.0F;
      floatArray0[5] = 3.4028235E38F;
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 459.8915;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 459.8915}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1151.811F);
      floatArray0[1] = 3025.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1151.811F), 3025.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 459.8915}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, (-459.8915)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 459.8915}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, (-459.8915)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 459.8915}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray1, 0.0F);
      assertNotNull(doubleArray3);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, (-459.8915)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 459.8915}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 532;
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace((-1), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 777.3;
      doubleArray0[1] = 676.8343519413521;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {777.3, 676.8343519413521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 1.0F, 1.0F, (-1.0F), 1.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[6][2];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-1.0F);
      doubleArray3[1] = (double) 1.0F;
      doubleArray3[2] = 676.8343519413521;
      doubleArray3[3] = (double) (-1.0F);
      doubleArray2[3] = doubleArray3;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 17
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 249;
      intArray0[1] = 1349;
      intArray0[2] = (-1782);
      intArray0[3] = (-1782);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {249, 1349, (-1782), (-1782)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = "T-^_\"";
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int1);
      
      double double1 = MathArrays.linearCombination((-20.0), (-20.0), 0.0, 0.0, (-20.0), (double) 0, (-20.0), (double) 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(400.0, double1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
//      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = (-614.1384);
      int int0 = 0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int1);
      
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.2246467991473532E-16;
      double double0 = 3.32;
      doubleArray2[1] = 3.32;
      double double1 = 0.0;
      doubleArray2[2] = 0.0;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = (-614.1384);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = (-614.1384);
      int int0 = 0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = (-101);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 2146962376;
      int int2 = 2145938695;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2146962376, 2145938695);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      String[] stringArray0 = new String[11];
      String string0 = "<;2DoV);N;ZWQE";
      stringArray0[0] = "<;2DoV);N;ZWQE";
      stringArray0[1] = "<;2DoV);N;ZWQE";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 532;
      intArray0[3] = 1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 532;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 134217729;
      doubleArray0[3] = (double) 532;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {532.0, 0.0, 1.34217729E8, 532.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly decreasing (0 <= 134,217,729)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int1);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(4186);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(4186, (int)integer0);
      
      integerArray0[0] = integer0;
      double double1 = MathArrays.linearCombination(4.455505956692757, 4.455505956692757, 0.0, (double) integerArray0[0], 4.455505956692757, (double) 4186);
      assertEquals(6, integerArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(18670.599468046003, double1, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 4186;
      doubleArray2[2] = 4.455505956692757;
      doubleArray2[3] = (double) 4186;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) 0;
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      double double1 = 459.8915;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.031;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 459.8915;
      double double2 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.031, 0.0, 0.0, 0.0, 0.0, 459.8915}, doubleArray1, 0.01);
      assertEquals(0.031, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = 0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, (-101));
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean0);
      
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "!UJBha:8*[";
      stringArray0[1] = ")y^%]$";
      stringArray0[2] = "/j>Z";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "}`";
      stringArray0[6] = "'H";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 158;
      Integer integer0 = new Integer(183);
      assertNotNull(integer0);
      assertEquals(183, (int)integer0);
      
      Integer integer1 = new Integer(183);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(183, (int)integer1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer integer0 = new Integer(3333);
      assertNotNull(integer0);
      assertEquals(3333, (int)integer0);
      
      Integer integer1 = new Integer(3333);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3333, (int)integer1);
      
      Integer integer2 = new Integer(1309);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1309, (int)integer2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, integerArray0.length);
      assertTrue(boolean0);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.checkOrder(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-1L);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(4333);
      assertNotNull(integer0);
      assertEquals(4333, (int)integer0);
      
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (int)integerArray0[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), 4333.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale((-1L), doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), 4333.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 1.0, 1.0, (-4333.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), 4333.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 1.0, 1.0, (-4333.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 2.0, (-8665.0), (-8666.0), 1.8774889E7}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, 0.1428571343421936);
      assertNotNull(doubleArray3);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), 4333.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-3.298479204391448E-5), (-3.298479204391448E-5), 0.14292310392628144}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, (-101));
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float float0 = 3.4028235E38F;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-737.2F);
      floatArray0[1] = 430.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2341.0F;
      floatArray0[4] = 2341.0F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = 2341.0F;
      floatArray0[7] = 430.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-737.2F), 430.0F, 0.0F, 2341.0F, 2341.0F, 3.4028235E38F, 2341.0F, 430.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(2341.0F, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
//      try { 
        MathArrays.convolve(doubleArray1, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<String>) null, 0, (-28));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = 0;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0, (-101));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-1L);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(4333);
      assertNotNull(integer0);
      assertEquals(4333, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3333);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(3333, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertNotNull(integer2);
      assertEquals(4, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(4333, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-21));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-21), (int)integer3);
      
      integerArray0[3] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[3] = 968.2751;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 532;
      intArray0[2] = 134217729;
      intArray0[3] = 1;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1224.3232909264768);
      doubleArray0[1] = (double) 532;
      doubleArray0[2] = (double) 134217729;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) 134217729;
      doubleArray0[8] = (double) 532;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1468.5619);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 430.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 430.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {430.0F, 0.0F, 430.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, (-1468.5619), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, (-1468.5619), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1468.5619, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[5];
      longArray1[0] = 2047L;
      longArray1[1] = 2317L;
      longArray1[2] = 1023L;
      longArray1[3] = 0L;
      longArray1[4] = 589L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 979L;
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = 1023L;
      longArray3[2] = 2047L;
      longArray3[3] = 2047L;
      longArray3[4] = 2047L;
      longArray3[5] = 979L;
      longArray3[6] = 2317L;
      longArray3[7] = 589L;
      longArray3[8] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 2317L;
      longArray4[1] = 2047L;
      longArray4[2] = 1023L;
      longArray4[3] = 589L;
      longArray4[4] = 2317L;
      longArray4[5] = 979L;
      longArray4[6] = 1023L;
      longArray0[3] = longArray4;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<;2DoV);N;ZWQE";
      stringArray0[1] = "T-^_\"";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("w_Wt(O-AU+}xF\"0fe_");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.w_Wt(O-AU+}xF\"0fe_
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[4];
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[16][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      long long0 = (-597L);
      longArray0[1] = (-597L);
      long long1 = 45L;
      longArray0[2] = 45L;
      longArray0[3] = 3363L;
      longArray0[4] = 197L;
      longArray0[5] = (-1012L);
      longArray0[6] = 4503599627370495L;
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -597 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1468.5619);
      doubleArray0[2] = 2186.43090158;
      doubleArray0[3] = 854.6965815778785;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, (-1468.5619), 2186.43090158, 854.6965815778785}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0E-5;
      doubleArray0[2] = (-1904.65187);
      doubleArray0[3] = (-1.0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1.0E-5, (-1904.65187), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0000000000000002E-10, (-0.0380930374), 3627698.7458744966, 3809.30374, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-3516L);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -3,516 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 777.3;
      doubleArray1[1] = 676.8343519413521;
      doubleArray1[2] = 3431.759351137;
      doubleArray1[3] = 586.84;
      doubleArray1[4] = 2087.639101308;
      doubleArray1[5] = 3760.0;
      doubleArray1[6] = 2707.379451784945;
      doubleArray1[7] = 3.834E-20;
      doubleArray1[8] = 468.564;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {777.3, 676.8343519413521, 3431.759351137, 586.84, 2087.639101308, 3760.0, 2707.379451784945, 3.834E-20, 468.564}, doubleArray1, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1839.1F;
      float[] floatArray1 = new float[3];
      floatArray1[0] = 1839.1F;
      floatArray1[1] = 1839.1F;
      floatArray1[2] = 1839.1F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1839.1F;
      doubleArray0[1] = (double) 1839.1F;
      doubleArray0[2] = (double) 1839.1F;
      doubleArray0[3] = (double) 1839.1F;
      doubleArray0[4] = (double) 1839.1F;
      doubleArray0[5] = (double) 1839.1F;
      doubleArray0[6] = (double) 1839.1F;
      doubleArray0[7] = (double) 1839.1F;
      doubleArray0[8] = (double) 1839.1F;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3382288.720200196, 3382288.720200196, 3382288.720200196, 3382288.720200196, 3382288.720200196, 3382288.720200196, 3382288.720200196, 3382288.720200196, 3382288.720200196}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 978.0, 0.0, 0.0, 0.0, 0.0, 3703.0752947);
      long[][] longArray0 = new long[7][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (-207L);
      longArray2[1] = 1L;
      longArray2[2] = 0L;
      longArray2[3] = (-1L);
      longArray2[4] = 1023L;
      longArray2[5] = (-3728L);
      longArray2[6] = 0L;
      longArray2[7] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = (-1L);
      longArray3[1] = 0L;
      longArray3[2] = (-1L);
      longArray3[3] = (-3728L);
      longArray3[4] = 1L;
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray3[7] = (-3728L);
      longArray3[8] = (-207L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = 1023L;
      longArray4[1] = (-1L);
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      longArray5[0] = 2147483647L;
      longArray5[1] = 0L;
      longArray5[2] = 0L;
      longArray5[3] = 1005L;
      longArray5[4] = 1L;
      longArray5[5] = (-3728L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = 0L;
      longArray6[1] = (-207L);
      longArray6[2] = (-3728L);
      longArray6[3] = 1005L;
      longArray6[4] = 0L;
      longArray6[5] = 1L;
      longArray6[6] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[3];
      longArray7[0] = (-3728L);
      longArray7[1] = 1023L;
      longArray7[2] = 1815L;
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 8 while others have length 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2175.64813349, 2175.64813349, 0.0, (-1647.41917));
      assertEquals(4733444.800758521, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2341.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 1496.4F;
      floatArray0[3] = (-737.2F);
      floatArray0[4] = 430.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) (-737.2F);
      doubleArray2[2] = (double) (-737.2F);
      doubleArray2[3] = (double) 2341.0F;
      doubleArray2[4] = (double) 1496.4F;
      doubleArray2[5] = (double) 1496.4F;
      double[] doubleArray3 = MathArrays.scale(0.0, doubleArray2);
      assertArrayEquals(new double[] {0.0, -0.0, -0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      double double0 = 2051.811983656;
      doubleArray0[0] = 2051.811983656;
      MathArrays.checkOrder(doubleArray0);
      int int0 = 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      MathArrays.distance1(intArray0, intArray0);
      float[] floatArray0 = null;
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.distance1(intArray0, intArray0);
      double double1 = 0.0;
      MathArrays.linearCombination((-20.0), (-20.0), 2051.811983656, 0.0, (-20.0), (double) 0, (-20.0), (double) 0);
      MathArrays.ebeAdd(doubleArray1, doubleArray1);
//      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DENOMINATOR_FORMAT";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 314.136699052508;
      doubleArray0[2] = (-244.76);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2086.0060979296;
      MathArrays.safeNorm(doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[][] longArray0 = new long[7][9];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 6083L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 2918L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = 0L;
      longArray4[1] = 4503599627370495L;
      longArray4[2] = 2918L;
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray4[5] = 0L;
      longArray4[6] = 0L;
      longArray4[7] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      longArray5[0] = 6083L;
      longArray5[1] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = 0L;
      longArray6[1] = 4503599627370495L;
      longArray6[2] = 4503599627370495L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[3];
      longArray7[0] = 4503599627370495L;
      longArray7[1] = 0L;
      longArray7[2] = (-721L);
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -721 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-468.564);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-872.0);
      MathArrays.safeNorm(doubleArray0);
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (3.32 >= -468.564)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 532;
      intArray0[2] = 134217729;
      intArray0[3] = 1;
      intArray0[4] = (-1401);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2112.33164897558;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray1, (-2006));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[7];
      longArray1[0] = 359L;
      longArray1[1] = 0L;
      longArray1[2] = 10000L;
      longArray1[3] = 1232L;
      longArray1[4] = (-692L);
      longArray1[5] = 0L;
      longArray1[6] = 0L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0L;
      doubleArray2[1] = (double) 0L;
      doubleArray2[2] = (double) 1232L;
      doubleArray2[3] = (double) (-692L);
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1608.24;
      doubleArray0[2] = 991.1825106052161;
      doubleArray0[3] = (-943.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 262);
      double[][] doubleArray3 = new double[6][1];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray0;
      doubleArray3[2] = doubleArray2;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray1;
      doubleArray3[5] = doubleArray2;
//      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 262 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3126.22);
      doubleArray0[1] = 1105.830311299;
      doubleArray0[2] = (-3224.01689837);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1100.5791416267);
      doubleArray0[5] = 1.304E19;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (1,105.83 >= -3,224.017)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 689.5223270039728;
      doubleArray0[1] = 2390.72191029177;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-317.10349491);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1312.356;
      doubleArray0[1] = (-2884.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1305.3228227;
      doubleArray0[6] = 209.0;
      doubleArray0[7] = (-723.5273584031269);
      doubleArray0[8] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1722278.270736, 8317456.0, 0.0, 1.801439877791744E16, 0.0, 1703867.6714614956, 43681.0, 523491.8383578068, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1558.278828146;
      double[][] doubleArray1 = new double[9][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1558.278828146;
      doubleArray2[1] = 1558.278828146;
      doubleArray2[2] = 1558.278828146;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-1L);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(4333);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3333);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-21));
      integerArray0[3] = integer3;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) integerArray0[2];
      intArray0[1] = 0;
      intArray0[2] = (-21);
      intArray0[3] = 3333;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4333;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Pair<Object, Object>>) null, 1062, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-101);
      int int1 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-101), 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1468.5619);
      doubleArray0[2] = 2186.43090158;
      doubleArray0[3] = 854.6965815778785;
      doubleArray0[4] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2482.4662137835967;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 459.8915;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection.values();
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6374138.694349316, double1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1588;
      intArray0[4] = (-2199);
      intArray0[5] = (-1861);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[2];
      longArray1[0] = (-1L);
      longArray1[1] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 2147483647L;
      longArray2[1] = (-1L);
      longArray2[2] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = (-1L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = (-5096L);
      longArray4[1] = (-1L);
      longArray4[2] = (-1L);
      longArray4[3] = (-1L);
      longArray4[4] = 2147483647L;
      longArray0[3] = longArray4;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 3 while others have length 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      long[][] longArray0 = new long[3][4];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = (-597L);
      longArray1[2] = 45L;
      longArray1[3] = 3363L;
      longArray1[4] = 197L;
      longArray1[5] = (-1012L);
      longArray1[6] = 4503599627370495L;
      longArray1[7] = 0L;
      longArray1[8] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = (-1012L);
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = 197L;
      longArray3[1] = 3363L;
      longArray3[2] = 3363L;
      longArray3[3] = 1389L;
      longArray0[2] = longArray3;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -597 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, (-689.46508462333), 0.0, (-2369.0130208405), 460.571126, 1381.57, 1381.57);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1381.57;
      doubleArray0[1] = 817636.6703828294;
      doubleArray0[2] = 817636.6703828294;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 460.571126;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (817,636.67 >= 817,636.67)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 4118.70326329;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = (-574.10114);
      doubleArray0[5] = 0.0;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -574.101 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2902.18685;
      doubleArray0[1] = 164.9;
      doubleArray0[2] = 3.32;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1409.2);
      doubleArray0[7] = 0.0;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (2,902.187 >= 164.9)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[4];
      longArray1[0] = (-589L);
      longArray1[1] = 0L;
      longArray1[2] = 2433L;
      longArray1[3] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = (-589L);
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 2433L;
      longArray3[4] = 0L;
      longArray0[2] = longArray3;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -589 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 819.820239683;
      doubleArray1[1] = 1219.3;
      doubleArray1[2] = 4.0;
      doubleArray1[3] = 263.4836730444216;
      doubleArray1[4] = (-2717.89);
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-3994.08);
      doubleArray0[2] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.linearCombination((-1.0), 1.304E19, (-1.0), (-1067.26));
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      MathArrays.linearCombination(1.304E19, -0.0, Double.NaN, 0.0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = 1L;
      longArray2[1] = 4552L;
      longArray2[2] = 1L;
      longArray2[3] = 0L;
      longArray2[4] = (-2721L);
      longArray2[5] = 1541L;
      longArray2[6] = 4503599627370496L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = 1L;
      longArray3[1] = (-2721L);
      longArray3[2] = 1L;
      longArray3[3] = 1541L;
      longArray3[4] = 4503599627370496L;
      longArray3[5] = 4503599627370496L;
      longArray3[6] = 4503599627370496L;
      longArray0[2] = longArray3;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 7 while others have length 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-278.6792927687);
      doubleArray0[2] = (double) (-3321);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1538.1);
      MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Pair<String, Integer>>) null, (-3321));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-614.1384);
      doubleArray0[1] = (-614.1384);
      MathArrays.scaleInPlace((-614.1384), doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("Unable to convert {0} to fraction after {1} iterations");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.Unable to convert {0} to fraction after {1} iterations
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 5090.03130539;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-289);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-289));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3431.759351137;
      doubleArray0[2] = (-3265.81);
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not decreasing (0 < 3,431.759)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1316.586276);
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 142.89656;
      doubleArray0[6] = 2443.10038204422;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(15, doubleArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }
}
