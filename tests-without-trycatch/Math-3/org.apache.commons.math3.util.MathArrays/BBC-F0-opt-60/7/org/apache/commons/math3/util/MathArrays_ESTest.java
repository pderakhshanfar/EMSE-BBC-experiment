/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 15:12:38 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3341.706F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-3341.706F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 1.4E-45F;
      doubleArray0[3] = (double) 1.4E-45F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.981735293180747E-45, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.401298464324817E-45, 1.401298464324817E-45, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.981735293180747E-45;
      doubleArray1[1] = (double) (-3341.706F);
      doubleArray1[2] = 1.981735293180747E-45;
      doubleArray1[3] = (double) (-3341.706F);
      doubleArray1[4] = 1.981735293180747E-45;
      doubleArray1[5] = (-284.6765577);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= -3,341.706)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 282, 2146716374);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = Float.POSITIVE_INFINITY;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 5015.154F;
      floatArray0[6] = 1093.2F;
      floatArray0[7] = 2162.196F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, Float.POSITIVE_INFINITY, 0.0F, 0.0F, 0.0F, 5015.154F, 1093.2F, 2162.196F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 5015.154F;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 2162.196F;
      doubleArray0[5] = (double) 5015.154F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[8] = 0.036;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {10030.3076171875, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 4324.39208984375, 10030.3076171875, 0.0, Double.POSITIVE_INFINITY, 0.072}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5015.15380859375, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 2162.196044921875, 5015.15380859375, 0.0, Double.POSITIVE_INFINITY, 0.036}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, 5015.15380859375);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 70.18;
      doubleArray0[1] = (-2748.083957571366);
      doubleArray0[2] = 332.0074715258;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-481.619734931361);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 319.89085;
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 319.89085;
      doubleArray2[2] = 70.18;
      doubleArray2[3] = 1.8014398509481984E16;
      doubleArray2[4] = (-5.207000323380292E-8);
      doubleArray2[5] = 332.0074715258;
      doubleArray2[6] = (-1.0);
      doubleArray2[7] = (-1.0);
      doubleArray1[1] = doubleArray2;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-481.619734931361), 70.18, (-1.0), 0.0, 319.89085, (-2748.083957571366), 332.0074715258, (-1.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-481.619734931361), 70.18, (-1.0), 0.0, 319.89085, (-2748.083957571366), 332.0074715258, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-481.619734931361), 70.18, (-1.0), 0.0, 319.89085, (-2748.083957571366), 332.0074715258, (-1.0)}, doubleArray3, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double double0 = MathArrays.linearCombination(doubleArray3, doubleArray2);
      assertEquals((-1.8014398509610724E16), double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-481.619734931361), 70.18, (-1.0), 0.0, 319.89085, (-2748.083957571366), 332.0074715258, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-481.619734931361), 70.18, (-1.0), 0.0, 319.89085, (-2748.083957571366), 332.0074715258, (-1.0)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {319.89085, 332.0074715258, 1.8014398509481984E16, (-5.207000323380292E-8), (-1.0), (-1.0), (-1.0), 70.18}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Integer> fieldElement0 = (FieldElement<Integer>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0).when(field0).getZero();
      FieldElement<Integer>[][] fieldElementArray0 = MathArrays.buildArray(field0, 2919, (-728));
      assertEquals(2919, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Integer> fieldElement0 = (FieldElement<Integer>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      FieldElement<Integer>[][] fieldElementArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-1896.5324);
      doubleArray0[0] = (-1896.5324);
      double double1 = 1.700416E38;
      doubleArray0[1] = 1.700416E38;
      double double2 = 1.304E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 2.925681159240093E-8;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1896.5324), 1.700416E38, 1.304E19, 2.925681159240093E-8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3793.0648), 3.400832E38, 2.608E19, 5.851362318480186E-8}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = 1356;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1356);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1896.5324), 1.700416E38, 1.304E19, 2.925681159240093E-8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3793.0648), 3.400832E38, 2.608E19, 5.851362318480186E-8}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(1356, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-309.6489082914381);
      doubleArray0[1] = 926.4071750140854;
      doubleArray0[2] = 93.26163924;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-1099.62235789217);
      doubleArray0[5] = 83.05306587235;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-309.6489082914381), 926.4071750140854, 93.26163924, 1.304E19, (-1099.62235789217), 83.05306587235}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1.700416E38, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-309.6489082914381), 926.4071750140854, 93.26163924, 1.304E19, (-1099.62235789217), 83.05306587235}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not decreasing (-309.649 < 926.407)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[0];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = 0.3153223395347595;
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = 1.304E19;
      doubleArray1[5] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 0.3153223395347595, 1.304E19, 1.304E19, 1.304E19}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 773.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 2438.0293F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {773.0F, 0.0F, 3.4028235E38F, 2438.0293F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2146419938);
      intArray0[1] = 17;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 17;
      intArray1[1] = (-2146419938);
      intArray1[2] = (-2146419938);
      intArray1[3] = (-2146419938);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-2127386), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2146419938), 17}, intArray0);
      assertArrayEquals(new int[] {17, (-2146419938), (-2146419938), (-2146419938)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Integer> fieldElement0 = (FieldElement<Integer>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      FieldElement<Integer>[][] fieldElementArray0 = MathArrays.buildArray(field0, 2240, 2240);
      assertEquals(2240, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 5.865827662008209E-8;
      doubleArray0[2] = (-185.87);
      doubleArray0[3] = 2646.457;
      doubleArray0[4] = 4.3466666666666665E18;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1542.293010233872);
      doubleArray0[7] = 1010.1367;
      doubleArray0[8] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3745366896198556E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 5.865827662008209E-8, (-185.87), 2646.457, 4.3466666666666665E18, 0.0, (-1542.293010233872), 1010.1367, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 4.3466666666666665E18;
      doubleArray2[1] = 1.3745366896198556E19;
      doubleArray2[2] = 1010.1367;
      doubleArray2[3] = 1010.1367;
      doubleArray2[4] = (-1542.293010233872);
      doubleArray2[5] = 1.304E19;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-185.87);
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = (-10.376F);
      floatArray0[2] = 5151.281F;
      floatArray0[3] = (-416.0F);
      floatArray0[4] = Float.NEGATIVE_INFINITY;
      floatArray0[5] = 67.5F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, (-10.376F), 5151.281F, (-416.0F), Float.NEGATIVE_INFINITY, 67.5F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) 67.5F;
      doubleArray0[2] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) 5151.281F;
      doubleArray0[4] = 2.2860509143963117E-8;
      doubleArray0[5] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[6] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[7] = (double) 67.5F;
      doubleArray0[8] = (double) (-416.0F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 67.5, Double.NEGATIVE_INFINITY, 5151.28076171875, 2.2860509143963117E-8, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 67.5, (-416.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 67.5, Double.NEGATIVE_INFINITY, 5151.28076171875, 2.2860509143963117E-8, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 67.5, (-416.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 67.5, Double.NEGATIVE_INFINITY, 5151.28076171875, 2.2860509143963117E-8, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 67.5, (-416.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      int int0 = 582;
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 582);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      Object[] objectArray0 = MathArrays.buildArray(field0, 582);
      assertEquals(582, objectArray0.length);
      assertNotNull(objectArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 582;
      intArray0[1] = 748;
      intArray0[2] = 582;
      intArray0[3] = 0;
      intArray0[4] = (-3570);
      intArray0[5] = 582;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {582, 748, 582, 0, (-3570), 582}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 748;
      doubleArray0[1] = (double) 582;
      doubleArray0[2] = (double) (-3570);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 582;
      doubleArray0[5] = (double) (-3570);
      doubleArray0[6] = (double) 582;
      doubleArray0[7] = (double) 0;
      MathArrays.scaleInPlace((-3570), doubleArray0);
      assertArrayEquals(new double[] {(-2670360.0), (-2077740.0), 1.27449E7, -0.0, (-2077740.0), 1.27449E7, (-2077740.0), -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-3570);
      doubleArray1[1] = (double) 582;
      doubleArray1[2] = (double) 582;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.8441344853345161E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1724.655950842);
      doubleArray0[1] = 4219.2574161;
      doubleArray0[2] = 2.925681159240093E-8;
      doubleArray0[3] = (-2.144064087E9);
      doubleArray0[4] = 1151.66755;
      doubleArray0[5] = 0.041666666666621166;
      doubleArray0[6] = 1105.2098520977;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 318.11;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1724.655950842), 4219.2574161, 2.925681159240093E-8, (-2.144064087E9), 1151.66755, 0.041666666666621166, 1105.2098520977, 1.0, 318.11}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2496.928885;
      doubleArray0[1] = 1506.693151632;
      doubleArray0[2] = (-62.0622);
      doubleArray0[3] = 60.210384792095;
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = (-823.670848032);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2496.928885, 1506.693151632, (-62.0622), 60.210384792095, (-20.0), (-823.670848032)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2033.6812);
      doubleArray1[1] = 2214.815624052;
      doubleArray1[2] = 1.342254111142783E8;
      doubleArray1[3] = (-997.9);
      doubleArray1[4] = 0.2;
      doubleArray1[5] = (-1197.4);
      doubleArray1[6] = 3466.099;
      doubleArray1[7] = 1268.66917;
      double[][] doubleArray2 = new double[5][5];
      doubleArray2[0] = null;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = null;
      doubleArray2[4] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 314.65412478734;
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 314.65412478734}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {Double.NaN, 314.65412478734}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-669.095F);
      floatArray0[1] = 4234.481F;
      floatArray0[2] = (-675.624F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1103.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-669.095F), 4234.481F, (-675.624F), 0.0F, 1103.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2523.0;
      doubleArray0[2] = (-4.9E-324);
      doubleArray0[3] = (-2336.4);
      doubleArray0[4] = 1685.83346;
      doubleArray0[5] = (-5373.314589);
      doubleArray0[6] = 1280.792061551169;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6721.552454020448, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2523.0, (-4.9E-324), (-2336.4), 1685.83346, (-5373.314589), 1280.792061551169}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[][] longArray0 = new long[9][2];
      long[] longArray1 = new long[5];
      longArray1[0] = 1312L;
      longArray1[1] = (-9223372036854775808L);
      longArray1[2] = 4208363204685324176L;
      longArray1[3] = (-2658L);
      longArray1[4] = 302L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-2658L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 4208363204685324176L;
      longArray3[1] = 4208363204685324176L;
      longArray3[2] = (-445L);
      longArray3[3] = 1312L;
      longArray3[4] = 4208363204685324176L;
      longArray3[5] = 302L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 4208363204685324176L;
      longArray4[1] = 1312L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (-445L);
      longArray5[1] = 302L;
      longArray5[2] = (-2658L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = (-9223372036854775808L);
      longArray6[1] = 4208363204685324176L;
      longArray6[2] = (-2658L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[3];
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray7[0] = 4208363204685324176L;
      longArray7[1] = (-9223372036854775808L);
      longArray7[2] = (-445L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[1];
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray1));
      
      longArray8[0] = 302L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[4];
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray2));
      
      longArray9[0] = (-9223372036854775808L);
      longArray9[1] = (-2658L);
      longArray9[2] = (-445L);
      longArray9[3] = (-445L);
      longArray0[8] = longArray9;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 69;
      intArray0[1] = (-1);
      intArray0[2] = (-1481);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 69;
      intArray1[1] = (-1);
      intArray1[2] = (-1);
      intArray1[3] = (-1);
      intArray1[4] = 801;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(1480, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {69, (-1), (-1481)}, intArray0);
      assertArrayEquals(new int[] {69, (-1), (-1), (-1), 801}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(5, intArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 69;
      doubleArray0[2] = (double) (-1481);
      doubleArray0[3] = (double) 801;
      doubleArray0[4] = (double) (-1481);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 1480;
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) 69;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = 1.25;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1.25, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 1.25}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long[][] longArray0 = new long[20][6];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(20, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-648);
      intArray0[2] = 1760;
      intArray0[3] = 294;
      intArray0[4] = (-1835);
      intArray0[5] = (-724);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 21;
      intArray1[1] = (-1);
      intArray1[2] = (-544);
      intArray1[3] = (-1835);
      intArray1[4] = 2;
      intArray1[5] = (-724);
      intArray1[6] = 294;
      intArray1[7] = 1760;
      intArray1[8] = (-1835);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(3692.522037848928, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-648), 1760, 294, (-1835), (-724)}, intArray0);
      assertArrayEquals(new int[] {21, (-1), (-544), (-1835), 2, (-724), 294, 1760, (-1835)}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-2691);
      intArray1[2] = 2326;
      intArray1[3] = 1879;
      intArray1[4] = (-2358);
      intArray1[5] = (-2147483647);
      intArray1[6] = (-2147483647);
      intArray1[7] = (-676);
      intArray1[8] = 1764;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray1, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2907;
      int int0 = 2147061869;
      intArray0[1] = 2147061869;
      intArray0[2] = 4;
      intArray0[3] = 24;
      int int1 = 6;
      intArray0[4] = 6;
      intArray0[5] = 42;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2907;
      intArray1[1] = 2147061869;
      intArray1[2] = 2147061869;
      intArray1[3] = 6;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      double double0 = Double.NaN;
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      assertEquals(15, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 997.306384861535;
      doubleArray0[1] = (-1538.87);
      doubleArray0[2] = 0.4794255495071411;
      doubleArray0[3] = 1.3040000000009908E19;
      doubleArray0[4] = 2205.519087259031;
      doubleArray0[5] = (-501.0);
      doubleArray0[6] = 1004.0;
      doubleArray0[7] = (-556.3397875373);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.3040000000009908E19;
      doubleArray1[1] = (-556.3397875373);
      doubleArray1[2] = 1004.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {997.306384861535, (-1538.87), 0.4794255495071411, 1.3040000000009908E19, 2205.519087259031, (-501.0), 1004.0, (-556.3397875373)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.3040000000009908E19, (-556.3397875373), 1004.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 2367);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1767.458325232);
      doubleArray0[1] = 1069.7;
      doubleArray0[2] = 735.961;
      doubleArray0[3] = (-648.364737634173);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1767.458325232), 1069.7, 735.961, (-648.364737634173), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[1];
      int int0 = 3174;
      intArray0[0] = 3174;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {3174}, intArray0);
      assertArrayEquals(new int[] {3174}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 3174;
      doubleArray2[1] = (-1767.458325232);
      doubleArray2[2] = 1069.7;
      doubleArray2[3] = (-451.7852975678748);
      doubleArray2[4] = (-1767.458325232);
      doubleArray2[5] = (-1767.458325232);
      doubleArray2[6] = (-648.364737634173);
      doubleArray2[7] = (double) 3174;
      doubleArray2[8] = 4545.61788;
//      try { 
        MathArrays.normalizeArray(doubleArray2, Double.NEGATIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-63.53198273349898);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1.304E19;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(14, doubleArray0.length);
      assertEquals(27, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 2017.9091633903977);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "_j*2[h[Zh[+";
      stringArray0[2] = "p]$pU$";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1752;
      intArray0[1] = 150;
      intArray0[2] = 8388607;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1752, 150, 8388607}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 197488.24192755134, 197488.24192755134, Double.NaN, (-2988.9233), (-3441.22576914));
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-3441.22576914);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 197488.24192755134;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, (-3441.22576914), Double.NaN, 197488.24192755134}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.scaleInPlace((-2256.0911888446603), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = Double.NaN;
//      try { 
        MathArrays.normalizeArray(doubleArray2, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[3] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 265;
      intArray0[1] = (-2136582714);
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = 3160.86977;
      doubleArray1[3] = (double) (-1);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 3160.86977, (-1.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(3160.86977, Double.NaN, 0.0, (double) (-1));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = 3160.86977;
      doubleArray1[3] = (double) (-1);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 3160.86977, (-1.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      MathArrays.scaleInPlace((-2221.3622339), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4259.0781129282805);
      doubleArray1[1] = (-3960.26852350416);
      doubleArray1[2] = 264.6957448546584;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = 2331.006385885875;
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4259.0781129282805), (-3960.26852350416), 264.6957448546584, Double.NaN, 2331.006385885875}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, Double.NaN, Double.NaN, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      Double double0 = new Double(1013578.0129253203);
      assertEquals(1013578.0129253203, (double)double0, 0.01);
      assertNotNull(double0);
      
//      try { 
        MathArrays.normalizeArray(doubleArray2, 2331.006385885875);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-796);
      intArray0[1] = 36;
      intArray0[2] = (-2096);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {(-796), 36, (-2096)}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace(36, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1120.17F;
      floatArray0[1] = 1159.79F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1754.8644F);
      floatArray0[4] = 1422.4525F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1872.4286F);
      floatArray0[7] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {1120.17F, 1159.79F, 1.0F, (-1754.8644F), 1422.4525F, (-1.0F), (-1872.4286F), 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2919.0, 1434054.0158629424, 1434054.0158629424, 1434054.0158629424);
      assertEquals(2.0606969240849363E12, double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 102;
      intArray0[1] = 134217729;
      intArray0[2] = 2140671338;
      intArray0[3] = 2147470226;
      intArray0[4] = 2344;
      intArray0[5] = (-1716);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {102, 134217729, 2140671338, 2147470226, 2344, (-1716)}, intArray0);
      assertEquals(6, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (double) 2344;
      doubleArray0[2] = (double) 102;
      doubleArray0[3] = 2.0606969240849363E12;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 2344.0, 102.0, 2.0606969240849363E12}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, 5494336.0, 10404.0, 4.246471812933118E24}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 2344.0, 102.0, 2.0606969240849363E12}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.8014398643699712E16), (-5491992.0), (-10302.0), (-4.2464718129310574E24)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 2344.0, 102.0, 2.0606969240849363E12}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, 5494336.0, 10404.0, 4.246471812933118E24}, doubleArray1, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(4.246471812933118E24, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 2344.0, 102.0, 2.0606969240849363E12}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, 5494336.0, 10404.0, 4.246471812933118E24}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1434054.0158629424;
      doubleArray0[1] = 1434054.0158629424;
      doubleArray0[2] = 2919.0;
      doubleArray0[3] = 2919.0;
      doubleArray0[4] = 0.4342944622039795;
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 3.4028235E38F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-946.4F);
      floatArray1[3] = 1602.443F;
      floatArray1[4] = 646.9277F;
      floatArray1[5] = (-1.0F);
      floatArray1[6] = (-1.4E-45F);
      floatArray1[7] = Float.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3.4028235E38F, 0.0F, (-946.4F), 1602.443F, 646.9277F, (-1.0F), (-1.4E-45F), Float.NaN}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2776;
      intArray0[1] = (-238);
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-238);
      intArray1[1] = (-238);
      intArray1[2] = 2776;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(3014, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2776, (-238)}, intArray0);
      assertArrayEquals(new int[] {(-238), (-238), 2776}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
//      try { 
        MathArrays.normalizeArray(doubleArray1, (-946.4F));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3646.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {3646.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {3646.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-20.0);
      int[] intArray0 = new int[8];
      intArray0[0] = 167;
      intArray0[1] = 4;
      intArray0[2] = 167;
      intArray0[3] = 167;
      intArray0[5] = 167;
      intArray0[6] = 167;
      intArray0[7] = 1880;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {167, 4, 167, 167, 0, 167, 167, 1880}, intArray0);
      assertEquals(8, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-20.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {400.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2559, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (-2686.5764F);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = 3581.4F;
      floatArray0[6] = (float) (-1);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-2686.5764F), (-1.0F), 0.0F, (-1.0F), 3581.4F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 3581.4F;
      floatArray1[2] = (-2686.5764F);
      floatArray1[3] = (-2686.5764F);
      floatArray1[4] = 0.0F;
      floatArray1[5] = (float) (-1);
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 3581.4F;
      floatArray2[1] = (float) (-1);
      floatArray2[2] = 3581.4F;
      floatArray2[3] = (-2686.5764F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray1, floatArray2);
      assertFalse(boolean1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertArrayEquals(new float[] {3581.4F, (-1.0F), 3581.4F, (-2686.5764F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, 3581.4F, (-2686.5764F), (-2686.5764F), 0.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray2.length);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 258;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 258}, intArray0);
      assertEquals(2, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((double) 0, (-1838.739650814195), (double) doubleArray0[2], (-3510.276796));
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) doubleArray0[1];
      double double2 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 190.13678;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {190.13678, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(36151.995108768395, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {190.13678, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-314.23577289);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-314.23577289), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = new Double((-314.23577289));
      assertEquals((-314.23577289), double0, 0.01);
      
//      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 17 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 338;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 338);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.4E-45F);
      floatArray0[1] = (-2447.3F);
      floatArray0[2] = 193.0F;
      floatArray0[3] = 119.8442F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1.4E-45F), (-2447.3F), 193.0F, 119.8442F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = (-1371.4305);
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-20.0), (-1371.4305), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-20.0), (-1371.4305), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-20.0), (-1371.4305), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.linearCombination(0.0, 0.031, (-1664.810447), 0.0, (-20.0), (-1664.810447));
      assertEquals(33296.208940000004, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[1];
      Double double0 = new Double(2905.0);
      assertEquals(2905.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[0] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) doubleArray2[0];
      doubleArray3[1] = (double) doubleArray2[0];
      doubleArray3[2] = (-1617.918);
      doubleArray3[3] = (double) doubleArray2[0];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection1, true);
      assertFalse(boolean1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {2905.0, 2905.0, (-1617.918), 2905.0}, doubleArray3, 0.01);
      assertEquals(4, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray4.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray4);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, doubleArray3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 1.0F;
      floatArray1[5] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, 0.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1534;
      intArray0[1] = 2143903076;
      intArray0[2] = (-125);
      intArray0[3] = (-252);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {1534, 2143903076, (-125), (-252)}, intArray0);
      assertEquals(4, intArray0.length);
      
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 2143903076;
      floatArray2[1] = (-1839.0187F);
      floatArray2[2] = (float) (-125);
      floatArray2[3] = 0.0F;
      floatArray2[4] = (float) 1534;
      floatArray2[5] = (float) 2143903076;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray2, floatArray1);
      assertFalse(boolean1);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, 0.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.1439031E9F, (-1839.0187F), (-125.0F), 0.0F, 1534.0F, 2.1439031E9F}, floatArray2, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray2.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1839.0187F);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1534;
      doubleArray0[3] = (double) (-125);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-1839.0187F);
      doubleArray0[6] = (double) 1.0F;
      doubleArray0[7] = (-20.0);
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1839.0186767578125), 0.0, 1534.0, (-125.0), 0.0, (-1839.0186767578125), 1.0, (-20.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = (-1371.4305);
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-20.0), (-1371.4305), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-71.05698956443999));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-20.0), (-1371.4305), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.021351617122666), (-70.03563794731733), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-20.0), (-1371.4305), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-20.0), (-1371.4305), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.linearCombination(1697.24217019, (-20.0), Double.NaN, 1697.24217019);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2143903076;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-1);
      intArray0[3] = 1;
      intArray0[4] = (-2);
      intArray0[5] = 0;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new int[] {2143903076, Integer.MAX_VALUE, (-1), 1, (-2), 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2146901858);
      intArray0[1] = 4;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 4;
      intArray1[1] = (-2146901858);
      intArray1[2] = 4;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(3.036177730324451E9, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2146901858), 4}, intArray0);
      assertArrayEquals(new int[] {4, (-2146901858), 4}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination(1.63E18, 1.63E18, (double) 1.0F, (-954.9714), (double) (-2146901858), (double) 0.0F, Double.NaN, (-8118.591076000001));
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      long[] longArray0 = new long[3];
      long long0 = 0L;
      longArray0[0] = 0L;
      long long1 = 2612L;
      double double1 = MathArrays.linearCombination((double) 2612L, (double) 2612L, 0.0, (double) 0L, (double) 0L, (double) 2612L);
      assertEquals(6822544.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
//      try { 
        MathArrays.checkPositive(doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      double double0 = MathArrays.linearCombination(2768.470405394413, 2919.0, 2768.470405394413, 2768.470405394413, 1545.074095007, 1545.074095007);
      assertEquals(1.8132847457952697E7, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.8132847457952697E7;
      doubleArray0[1] = 1.8132847457952697E7;
      doubleArray0[2] = 1545.074095007;
      doubleArray0[3] = 2919.0;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1.8132847457952697E7, 1.8132847457952697E7, 1545.074095007, 2919.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.8132847457952697E7, 1.8132847457952697E7, 1545.074095007, 2919.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.8132847457952697E7, 1.8132847457952697E7, 1545.074095007, 2919.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = new double[9][0];
      doubleArray2[0] = doubleArray1;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1545.074095007;
      doubleArray2[1] = doubleArray3;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) (-1);
      doubleArray4[1] = 1545.074095007;
      doubleArray4[2] = 2919.0;
      doubleArray4[3] = (-517.726);
      doubleArray4[4] = 1545.074095007;
      doubleArray4[5] = 0.0;
      doubleArray2[6] = doubleArray4;
      doubleArray2[7] = doubleArray1;
      doubleArray2[8] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[2];
      intArray0[0] = 3055;
      intArray0[1] = 258;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {3055, 258}, intArray0);
      assertEquals(2, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[4] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(833.5974483, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1.0F;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = (double) 0.0F;
      doubleArray2[3] = (double) 1.0F;
      doubleArray2[4] = (double) 0.0F;
      doubleArray2[5] = (double) 1.0F;
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-20.0);
      int[] intArray0 = new int[8];
      intArray0[0] = 167;
      intArray0[1] = 4;
      intArray0[2] = 167;
      intArray0[3] = 167;
      intArray0[4] = 167;
      intArray0[5] = 167;
      intArray0[6] = 167;
      intArray0[7] = 1864;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {167, 4, 167, 167, 167, 167, 167, 1864}, intArray0);
      assertEquals(8, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 4;
      longArray0[1] = (long) 167;
      longArray0[2] = (long) 4;
      longArray0[3] = (long) 1864;
      longArray0[4] = (long) 167;
      longArray0[5] = (long) 167;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {4L, 167L, 4L, 1864L, 167L, 167L}, longArray0);
      assertEquals(6, longArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.scaleInPlace((-2713.1677501921467), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(414.61085222228, (-2713.1677501921467), (-844.78), 414.61085222228);
      assertEquals((-1475163.74886951), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.linearCombination((-20.0), (-3089.6), 1545.074095007, (-3022.5910756), (-3089.6), 2919.0);
      assertEquals((-1.3626877570708904E7), double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 167;
      intArray0[1] = 4;
      intArray0[2] = 1864;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {167, 4, 1864}, intArray0);
      assertEquals(3, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2145941392);
      intArray1[1] = 167;
      intArray1[2] = 0;
      intArray1[3] = 1864;
      intArray1[4] = 1864;
      intArray1[5] = 4;
      intArray1[6] = 1864;
      intArray1[7] = 0;
      intArray1[8] = 0;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertEquals(2.1459415590008159E9, double1, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {167, 4, 1864}, intArray0);
      assertArrayEquals(new int[] {(-2145941392), 167, 0, 1864, 1864, 4, 1864, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(9, intArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-20.0);
      int[] intArray0 = new int[8];
      intArray0[0] = 167;
      intArray0[1] = 4;
      intArray0[2] = 167;
      intArray0[3] = 167;
      intArray0[4] = 167;
      intArray0[5] = 167;
      intArray0[6] = 167;
      intArray0[7] = 1864;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {167, 4, 167, 167, 167, 167, 167, 1864}, intArray0);
      assertEquals(8, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-20.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {400.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = (Double) (-20.0);
      doubleArray2[1] = (Double) (-20.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {(-20.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection2, true, false);
      assertFalse(boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection1));
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {(-20.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[4] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 1.0F;
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[4] = (double) 1.0F;
      doubleArray1[5] = (double) 3710.396F;
      doubleArray1[6] = (double) 0.0F;
      doubleArray1[7] = (double) 1.0F;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 3710.396F;
      doubleArray2[1] = (double) 3710.396F;
      doubleArray2[2] = (double) 3710.396F;
      doubleArray2[3] = (double) 1.0F;
      doubleArray2[4] = (double) 0.0F;
      doubleArray2[5] = (double) 1.0F;
      doubleArray2[6] = (double) 1.0F;
      doubleArray0[4] = doubleArray2;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 134217729;
      doubleArray1[0] = 0.0;
      doubleArray1[3] = 0.0;
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-149);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-149));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.scale((-2816.982493961119), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1292);
      intArray0[4] = (-529);
      intArray0[5] = (-529);
      intArray0[6] = (-1292);
      intArray0[7] = (-1292);
      intArray0[8] = (-1292);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, (-1292), (-529), (-529), (-1292), (-1292), (-1292)}, intArray0);
      assertEquals(9, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1689);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1689)}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1689);
      doubleArray0[2] = (double) (-1689);
      doubleArray0[3] = (double) 0;
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) (-1689.0);
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) (-1689.0);
      doubleArray1[3] = (Double) (-1689.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1689.0), (-1689.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray3, doubleArray2);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-13);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-13.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {169.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-13.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {169.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2197.0)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) (-13);
      doubleArray3[2] = 4.503599627370496E15;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-1296.58494);
      doubleArray4[1] = 0.0;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray3, doubleArray4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 142.77;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {142.77}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {142.77}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {285.54}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double1 = (-1218.203686505);
      double double2 = MathArrays.linearCombination((-1218.203686505), 999.96232936, 999.96232936, 999.96232936, 308.204, 308.204, (-658.78920615), 5.0);
      assertEquals((-126537.37626815181), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {142.77}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 5.0;
      doubleArray2[1] = 999.96232936;
      doubleArray2[2] = 6.71093253338933E8;
      doubleArray2[3] = 142.77;
      doubleArray2[4] = (-658.78920615);
      doubleArray2[5] = 142.77;
      doubleArray2[6] = 142.77;
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = 2607.8;
      double double1 = MathArrays.linearCombination(2607.8, 2607.8, 2607.8, 2663.17);
      assertEquals(1.3745635566000002E7, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1571);
      int int0 = 2136121300;
      intArray1[1] = 2136121300;
      double double2 = MathArrays.distance(intArray0, intArray1);
      assertEquals(0.0, double2, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1571), 2136121300}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1371.4305);
      double[][] doubleArray1 = new double[6][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1689);
      intArray0[1] = 2957;
      intArray0[2] = (-1689);
      Double[] doubleArray2 = new Double[9];
      doubleArray2[0] = (Double) (-1371.4305);
      doubleArray2[1] = (Double) (-1371.4305);
      doubleArray2[2] = (Double) (-1371.4305);
      Double double0 = new Double(2957);
      assertEquals(2957.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[3] = double0;
      doubleArray2[4] = (Double) (-1371.4305);
      doubleArray2[5] = (Double) (-1371.4305);
      Double double1 = new Double((double) doubleArray2[3]);
      assertEquals(2957.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(9, doubleArray2.length);
      assertNotNull(double1);
      
      doubleArray2[6] = double1;
      doubleArray2[7] = (Double) (-1371.4305);
      doubleArray2[8] = (Double) (-1371.4305);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, doubleArray2.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, (-1371.4305), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double3 = MathArrays.linearCombination((-281.6827004855), (-5892.4045603465), 1605.8887054852, (-1371.4305), (-2076.9319870675), (-3580.80483008225));
      assertEquals(6894511.769647187, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3.834E-20;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 0.0;
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-221.9008935894);
      doubleArray0[1] = 150.84390402496;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-221.9008935894), 150.84390402496}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {49240.00657577422, (-66944.79419130464), 22753.88338149135}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[5];
      doubleArray2[0] = (Double) 150.84390402496;
      doubleArray2[1] = (Double) (-221.9008935894);
      doubleArray2[2] = (Double) (-221.9008935894);
      doubleArray2[3] = (Double) 150.84390402496;
      doubleArray2[4] = (Double) (-221.9008935894);
      double[][] doubleArray3 = new double[0][9];
      MathArrays.sortInPlace(doubleArray0, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-221.9008935894), 150.84390402496}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = null;
      double[][] doubleArray2 = new double[6][9];
      doubleArray2[0] = doubleArray0;
      doubleArray2[0] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = null;
      doubleArray2[4] = null;
      doubleArray2[5] = doubleArray0;
//      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      Double[] doubleArray3 = new Double[4];
      Double double0 = new Double((-2264.8176));
      assertEquals((-2264.8176), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray3[0] = double0;
      Double double1 = new Double((-2264.8176));
      assertEquals((-2264.8176), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray3[1] = double1;
      Double double2 = new Double(0.24740394949913025);
      assertEquals(0.24740394949913025, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray3[2] = double2;
      Double double3 = new Double((double) doubleArray3[2]);
      assertEquals(0.24740394949913025, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(4, doubleArray3.length);
      assertNotNull(double3);
      
      doubleArray3[3] = double3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, doubleArray3.length);
      
      boolean boolean2 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      int[] intArray0 = new int[7];
      intArray0[0] = 167;
      intArray0[1] = 167;
      intArray0[2] = 4;
      intArray0[3] = 167;
      intArray0[4] = 4;
      intArray0[5] = 167;
      intArray0[6] = (-2147483647);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {167, 167, 4, 167, 4, 167, (-2147483647)}, intArray0);
      assertEquals(7, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-2147483647);
      doubleArray0[2] = (double) 167;
      doubleArray0[3] = (double) 167;
      doubleArray0[4] = 0.4794255495071411;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 4.6116860141324206E18, 27889.0, 27889.0, 0.22984885752022421}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2.147483647E9), 167.0, 167.0, 0.4794255495071411}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[5];
      doubleArray2[0] = (Double) 0.4794255495071411;
      doubleArray2[1] = (Double) 0.0;
      doubleArray2[2] = (Double) 167.0;
      doubleArray2[3] = (Double) 167.0;
      doubleArray2[4] = (Double) 167.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1371.4305);
      double[][] doubleArray1 = new double[6][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1689);
      intArray0[1] = 2957;
      intArray0[2] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1689), 2957, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= -1,371.43)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`yj[";
      stringArray0[1] = "`yj[";
      stringArray0[2] = "";
      stringArray0[3] = "`yj[";
      stringArray0[4] = "`yj[";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 1.0F, 1.34217729E8, (double) 1.0F, 1150.9591, (-2386.0), 4440.879190223545, 0.7675435543060303, 1.0);
      assertEquals(1.2362294297877018E8, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = 4440.879190223545;
      doubleArray0[2] = 0.7675435543060303;
      doubleArray0[3] = 1.2362294297877018E8;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-2386.0);
      doubleArray0[6] = (double) 1.0F;
      doubleArray0[7] = (-2.136582714E9);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 4440.879190223545, 0.7675435543060303, 1.2362294297877018E8, 1.0, (-2386.0), 1.0, (-2.136582714E9)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace((-99.472049), doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 4440.879190223545, 0.7675435543060303, 1.2362294297877018E8, 1.0, (-2386.0), 1.0, (-2.136582714E9)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.linearCombination((-20.0), (-3089.6), 1545.074095007, (-3022.5910756), (-3089.6), 2919.0);
      assertEquals((-1.3626877570708904E7), double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 167;
      intArray0[1] = 4;
      intArray0[2] = 1864;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {167, 4, 1864}, intArray0);
      assertEquals(3, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[1];
      Double double1 = new Double((-1371.4305));
      assertEquals((-1371.4305), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray2[0] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.linearCombination(0.11113807559013367, 6255001.0, 160000.0, (-879.890375999));
      assertEquals((-1.4008729138588563E8), double0, 0.01);
      
      double double1 = 1955.6526433457552;
      double double2 = MathArrays.linearCombination((-8118.591076000001), 0.5039018405998233, (-7.44321345601866E-11), (-879.890375999), 1955.6526433457552, (double) 1931L, 1784.076301, (-7.44321345601866E-11));
      assertEquals(3772274.2813143125, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2), 327);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 190.13678;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {190.13678, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(36151.995108768395, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {190.13678, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      intArray0[1] = 4;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {4, 4}, intArray0);
      assertEquals(2, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[0];
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, 512.7063012905511);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-20.0);
      int[] intArray0 = new int[8];
      intArray0[0] = 167;
      intArray0[1] = 4;
      intArray0[2] = 167;
      intArray0[3] = 167;
      intArray0[4] = 167;
      intArray0[5] = 167;
      intArray0[6] = 167;
      intArray0[7] = 1864;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {167, 4, 167, 167, 167, 167, 167, 1864}, intArray0);
      assertEquals(8, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-20.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {400.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = (Double) (-20.0);
      doubleArray2[1] = (Double) (-20.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {(-20.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-20.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(400.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-20.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {400.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 290.122804089268;
      doubleArray0[2] = 228.087592223;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 3710.396F;
      floatArray0[1] = 3710.396F;
      floatArray0[2] = 2820.372F;
      floatArray0[3] = 3710.396F;
      floatArray0[4] = 2820.372F;
      floatArray0[5] = 2820.372F;
      floatArray0[6] = 2820.372F;
      floatArray0[7] = 2820.372F;
      floatArray0[8] = 3710.396F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {3710.396F, 3710.396F, 2820.372F, 3710.396F, 2820.372F, 2820.372F, 2820.372F, 2820.372F, 3710.396F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-356);
      intArray0[1] = (-2145918917);
      intArray0[2] = (-1063);
      intArray0[3] = 988;
      intArray0[4] = 1820;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-356), (-2145918917), (-1063), 988, 1820}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray1 = new double[11];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3710.396F;
      doubleArray1[1] = (double) (-2145918917);
      doubleArray1[2] = (double) (-356);
      doubleArray1[3] = (double) (-2145918917);
      doubleArray1[4] = (double) 3710.396F;
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 11
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-598.7599719134);
      doubleArray0[2] = (-598.7599719134);
      doubleArray0[3] = (-598.7599719134);
      doubleArray0[4] = (-598.7599719134);
      double[] doubleArray1 = MathArrays.scale((-598.7599719134), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-598.7599719134), (-598.7599719134), (-598.7599719134), (-598.7599719134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 358513.5039657356, 358513.5039657356, 358513.5039657356, 358513.5039657356}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1197.5199438268, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-598.7599719134), (-598.7599719134), (-598.7599719134), (-598.7599719134)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-598.7599719134), (-598.7599719134), (-598.7599719134), (-598.7599719134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 358513.5039657356, 358513.5039657356, 358513.5039657356, 358513.5039657356}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 134217729;
      doubleArray2[2] = (double) 1075;
      doubleArray2[3] = (double) 1075;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = 1197.5199438268;
      doubleArray2[6] = 1197.5199438268;
      doubleArray2[7] = 2527.818548778689;
      doubleArray2[8] = 1197.5199438268;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.34217729E8, 1075.0, 1075.0, 0.0, 1197.5199438268, 1197.5199438268, 2527.818548778689, 1197.5199438268}, doubleArray2, 0.01);
      assertEquals(17, doubleArray3.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 2527.818548778689;
      doubleArray4[1] = (-598.7599719134);
      doubleArray4[2] = (-598.7599719134);
      doubleArray4[3] = (-598.7599719134);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (double) 134217729;
      doubleArray4[7] = (-598.7599719134);
      doubleArray4[8] = 0.0;
//      try { 
        MathArrays.ebeDivide(doubleArray4, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 290.122804089268;
      doubleArray0[2] = 228.087592223;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 334.2488F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 334.2488F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 290.122804089268, 228.087592223, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2655.102), (-0.33333333333333287), (-0.33333333333333287), (-3022.5910756), (-3022.5910756), (-2655.102));
      assertEquals(8027180.174366244, double0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[1] = 1864;
      intArray0[3] = 4;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 1864, 0, 4}, intArray0);
      assertEquals(4, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1864;
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1864.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1864.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1864.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1864;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 1864;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1864L, 0L, 1864L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {1864.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double3 = MathArrays.linearCombination((double) 4, (double) 0L, 1864.0, 2127.8661873, (double) 1864, 3140.15);
      assertEquals(9819582.1731272, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 134217729;
      doubleArray1[0] = 0.0;
      doubleArray1[2] = (double) 134217729;
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-20.0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3710.396F;
      floatArray0[1] = 3710.396F;
      floatArray0[2] = 3710.396F;
      floatArray0[3] = 3710.396F;
      floatArray0[4] = 3710.396F;
      floatArray0[5] = (-4167.9004F);
      floatArray0[6] = 3710.396F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 3710.396F;
      floatArray1[1] = 2815.225F;
      floatArray1[2] = 3710.396F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {3710.396F, 3710.396F, 3710.396F, 3710.396F, 3710.396F, (-4167.9004F), 3710.396F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3710.396F, 2815.225F, 3710.396F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 805;
      intArray0[1] = (-897);
      intArray0[2] = 0;
      intArray0[3] = 1208;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {805, (-897), 0, 1208}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-20.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {3710.396F, 3710.396F, 3710.396F, 3710.396F, 3710.396F, (-4167.9004F), 3710.396F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-20.0);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-20.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-20.0);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-20.0);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-20.0);
      double double0 = new Double((-20.0));
      assertEquals((-20.0), double0, 0.01);
      
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = (-1371.4305);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "AkDZ-}";
      stringArray0[1] = "`yj[";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 874.02F;
      floatArray0[7] = 1.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 874.02F, 1.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[4] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1.0F;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = 4081L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[4] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 2820.372F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 2820.372F;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 2820.3720703125, 1.0, 0.0, 2820.3720703125, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2655.102), (-0.33333333333333287), (-0.33333333333333287), (-3022.5910756), (-3022.5910756), (-2655.102));
      assertEquals(8027180.174366244, double0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2147483304);
      intArray0[1] = 1864;
      intArray0[3] = 4;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-2147483304), 1864, 0, 4}, intArray0);
      assertEquals(4, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1864;
      doubleArray0[1] = (double) 1864;
      doubleArray0[2] = (double) 167;
      doubleArray0[3] = (-4189.88774730889);
      doubleArray0[4] = (-2655.102);
      doubleArray0[5] = (double) 167;
      doubleArray0[6] = (double) (-2147483304);
      doubleArray0[7] = (-2655.102);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {3474496.0, 3474496.0, 27889.0, 1.7555159335049164E7, 7049566.630403999, 27889.0, 4.6116845409587564E18, 7049566.630403999}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1864.0, 1864.0, 167.0, (-4189.88774730889), (-2655.102), 167.0, (-2.147483304E9), (-2655.102)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[8];
      doubleArray2[0] = (Double) 1864.0;
      doubleArray2[1] = (Double) (-2655.102);
      doubleArray2[2] = (Double) 1864.0;
      doubleArray2[3] = (Double) 167.0;
      doubleArray2[4] = (Double) 1864.0;
      doubleArray2[5] = (Double) (-2655.102);
      doubleArray2[6] = (Double) 1864.0;
      doubleArray2[7] = (Double) (-2655.102);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-4220.3);
      doubleArray1[3] = 0.0;
      double[][] doubleArray2 = new double[2][4];
      doubleArray2[0] = doubleArray1;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-4220.3);
      doubleArray3[3] = 0.0;
      doubleArray2[1] = doubleArray3;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, (-4220.3), 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3710.396F;
      floatArray0[4] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 3710.396F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 2820.372F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 3710.396F;
      doubleArray0[4] = (double) 2820.372F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 1.0F;
      doubleArray0[7] = (double) 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = 2820.372F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 3710.396F;
      floatArray1[4] = 1.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 1.0F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = 2820.372F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 3710.396F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 2820.372F, 1.0F, 3710.396F, 1.0F, 0.0F, 1.0F, 0.0F, 2820.372F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2.9676038677826166E7, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 2820.3720703125, 1.0, 3710.39599609375, 2820.3720703125, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-801.9110617577);
      doubleArray0[2] = (-697.06);
      doubleArray0[3] = -0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-801.9110617577), (-697.06), -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-801.9110617577), (-697.06), -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-801.9110617577), (-697.06), -0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1603.8221235154), (-1394.12), -0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = Double.NaN;
      doubleArray3[2] = Double.NaN;
      doubleArray3[3] = 0.0;
      double[][] doubleArray4 = new double[4][3];
      doubleArray4[0] = doubleArray2;
      doubleArray4[1] = doubleArray1;
      doubleArray4[2] = doubleArray1;
      doubleArray4[3] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray3, doubleArray4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 2501L;
      longArray0[2] = 1L;
      longArray0[3] = (-1590L);
      longArray0[4] = 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 2501L;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 2501.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[4][0];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      long[][] longArray0 = new long[0][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1542;
      intArray0[1] = 1321;
      intArray0[2] = 2147061869;
      intArray0[3] = 0;
      intArray0[4] = 134217729;
      intArray0[5] = 143;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1321;
      intArray1[1] = 134217729;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = (-1371.4305);
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-801.9110617577);
      doubleArray0[2] = (-697.06);
      doubleArray0[3] = -0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-801.9110617577), (-697.06), -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-801.9110617577), (-697.06), -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-801.9110617577), (-697.06), -0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1603.8221235154), (-1394.12), -0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination((-1.0), (-20.0), 4116.3282017088, 4116.3282017088, (-1.0), 2.608E18, 4116.3282017088, (-1.0));
      assertEquals((-2.60799999998306E18), double0, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, (int[]) null);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[][] doubleArray2 = new double[7][4];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(0.0, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray3.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2655.102), (-0.33333333333333287), (-0.33333333333333287), (-3022.5910756), (-3022.5910756), (-2655.102));
      assertEquals(8027180.174366244, double0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2147483304);
      intArray0[1] = 1864;
      intArray0[2] = 167;
      intArray0[3] = 4;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-2147483304), 1864, 167, 4}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 167;
      doubleArray0[1] = (double) 167;
      doubleArray0[2] = (-3022.5910756);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 167);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {167.0, 167.0, (-3022.5910756)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.37309104129052), (-10.37309104129052), 187.74618208258104}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 8027180.174366244;
      doubleArray2[1] = (double) (-2147483304);
      doubleArray2[2] = 8027180.174366244;
      doubleArray2[3] = (double) 1864;
//      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int int0 = 539;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 134217729;
      doubleArray1[0] = 0.0;
      doubleArray1[2] = (double) 134217729;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 134217729;
      doubleArray1[5] = (double) 134217729;
      doubleArray1[6] = (double) 134217729;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (double) 539;
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = new double[4][0];
      doubleArray2[0] = doubleArray0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 412;
      intArray0[3] = 0;
      intArray0[4] = 412;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 412, 0, 412}, intArray0);
      assertEquals(5, intArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 2224L;
      longArray0[2] = 2224L;
      longArray0[3] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 2224L, 2224L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 265;
      intArray0[1] = (-2136582714);
      intArray0[2] = 1909;
      intArray0[3] = 221;
      intArray0[4] = 5297;
      intArray0[5] = 2;
      intArray0[6] = (-391);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {265, (-2136582714), 1909, 221, 5297, 2, (-391)}, intArray0);
      assertEquals(7, intArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 134217729;
      intArray0[1] = 10;
      intArray0[2] = 4772;
      intArray0[3] = 4772;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {134217729, 10, 4772, 4772, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (double) 134217729;
      doubleArray0[2] = (-2977.0);
      doubleArray0[3] = (double) 4772;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 2813.338932921;
      doubleArray0[6] = (double) 134217729;
      doubleArray0[7] = 1.34217729E8;
      doubleArray0[8] = (double) 134217729;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.34217729E8, 1.34217729E8, (-2977.0), 4772.0, 0.0, 2813.338932921, 1.34217729E8, 1.34217729E8, 1.34217729E8}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {134217729, 10, 4772, 4772, 0, 0}, intArray0);
      assertArrayEquals(new int[] {134217729, 10, 4772, 4772, 0, 0}, intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray2.length);
      assertNotNull(intArray2);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {7.667947344511716E-21, 7.667947344511716E-21, (-1.7007797266940331E-25), 2.7262750607268814E-25, 0.0, 1.6072790800910518E-25, 7.667947344511716E-21, 7.667947344511716E-21, 7.667947344511716E-21}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 1.34217729E8, (-2977.0), 4772.0, 0.0, 2813.338932921, 1.34217729E8, 1.34217729E8, 1.34217729E8}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      int int0 = MathArrays.distance1(intArray0, intArray2);
      assertEquals(0, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {134217729, 10, 4772, 4772, 0, 0}, intArray0);
      assertArrayEquals(new int[] {134217729, 10, 4772, 4772, 0, 0}, intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray2.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {7.667947344511716E-21, 7.667947344511716E-21, (-1.7007797266940331E-25), 2.7262750607268814E-25, 0.0, 1.6072790800910518E-25, 7.667947344511716E-21, 7.667947344511716E-21, 7.667947344511716E-21}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 1.34217729E8, (-2977.0), 4772.0, 0.0, 2813.338932921, 1.34217729E8, 1.34217729E8, 1.34217729E8}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(17, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      long[][] longArray1 = new long[1][6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = new long[0];
      longArray1[0] = longArray2;
      MathArrays.checkNonNegative(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.valueOf("INCREASING");
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection1, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = 0L;
      longArray0[0] = 0L;
      longArray0[1] = 2501L;
      longArray0[2] = 1L;
      longArray0[3] = (-1590L);
      longArray0[4] = 0L;
      longArray0[5] = 940L;
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = 2919.0;
      double double1 = 1434054.0158629424;
      double double2 = MathArrays.linearCombination(2919.0, 1434054.0158629424, 1434054.0158629424, 1434054.0158629424);
      assertEquals(2.0606969240849363E12, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1434054.0158629424;
      doubleArray0[1] = 2919.0;
      double double3 = (-4220.3);
      doubleArray0[2] = (-4220.3);
      doubleArray0[3] = 2.0606969240849363E12;
      doubleArray0[4] = 2919.0;
      doubleArray0[5] = 1434054.0158629424;
      doubleArray0[6] = 2919.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not increasing (1,434,054.016 > 2,919)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2501L;
      boolean boolean0 = false;
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-221.9008935894);
      doubleArray0[1] = 150.84390402496;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-221.9008935894), 150.84390402496}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {49240.00657577422, (-66944.79419130464), 22753.88338149135}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-221.9008935894), 150.84390402496}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {49240.00657577422, (-66944.79419130464), 22753.88338149135}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {49240.00657577422}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 2501L;
      longArray1[2] = 1L;
      longArray1[3] = (-1590L);
      longArray1[4] = 0L;
      longArray1[5] = 940L;
      longArray1[6] = (-872L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 2501L;
      longArray2[2] = 0L;
      longArray2[3] = (-872L);
      longArray2[4] = (-872L);
      longArray2[5] = 0L;
      longArray2[6] = 940L;
      longArray0[1] = longArray2;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1590L);
      doubleArray0[1] = (double) (-872L);
      doubleArray0[2] = (double) (-1590L);
      double[] doubleArray1 = MathArrays.scale((-1983.275954449), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1590.0), (-872.0), (-1590.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3153408.76757391, 1729416.632279528, 3153408.76757391}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(8040286.167427348, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1590.0), (-872.0), (-1590.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3153408.76757391, 1729416.632279528, 3153408.76757391}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1638.5236744073657;
      doubleArray1[3] = (-1263.84524956609);
      doubleArray1[4] = 100.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1138.19723885;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray2, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination((-1448.6392139), (-2192.776086), (-1448.6392139), 2271.004015, 2.356194490192345, (-1.0), (-1373.76879123), 0.0);
      assertEquals((-113326.40176607539), double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1146.9;
      doubleArray2[3] = 1.0;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-113326.40176607539);
      doubleArray3[1] = 1138.19723885;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1373.76879123);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 4116.3282017088;
      doubleArray3[6] = 0.0;
      double double2 = MathArrays.distance(doubleArray2, doubleArray3);
      assertEquals(113345.25815946721, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 0.0, 1146.9, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-113326.40176607539), 1138.19723885, 0.0, (-1373.76879123), 0.0, 4116.3282017088, 0.0}, doubleArray3, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 1146.9, 1.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.scale(0.0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 539;
      intArray0[1] = 134217729;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 3013L;
      longArray0[1] = (long) 134217729;
      longArray0[2] = 2224L;
      longArray0[3] = (long) 134217729;
      longArray0[4] = (long) 134217729;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {3013L, 134217729L, 2224L, 134217729L, 134217729L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-559.012369);
      doubleArray0[2] = 1638.5236744073657;
      doubleArray0[3] = (-1263.84524956609);
      doubleArray0[4] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-559.012369), 1638.5236744073657, (-1263.84524956609), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 312494.8286949922, 2684759.831593415, 1597304.814850772, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(1638.5236744073657, (-559.012369), 1146.9, 4116.3282017088, 1146.9, 0.0, 1138.19723885, 1146.9);
      assertEquals(5110460.226883843, double0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-221.9008935894);
      doubleArray0[1] = 150.84390402496;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-221.9008935894), 150.84390402496}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {49240.00657577422, (-66944.79419130464), 22753.88338149135}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-221.9008935894), 150.84390402496}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {49240.00657577422, (-66944.79419130464), 22753.88338149135}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3710.396F;
      floatArray0[4] = 2820.372F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 3710.396F, 2820.372F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 2820.372F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 3710.396F;
      doubleArray0[4] = (double) 2820.372F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 2820.372F;
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 1.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.0, 2820.3720703125, 1.0, 3710.39599609375, 2820.3720703125, 0.0, 2820.3720703125, 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 2820.3720703125, 1.0, 3710.39599609375, 2820.3720703125, 0.0, 2820.3720703125, 0.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 2820.3720703125, 1.0, 3710.39599609375, 2820.3720703125, 0.0, 2820.3720703125, 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace(1009.2311, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1009.2311, 2846407.2069307617, 1009.2311, 3744647.032573291, 2846407.2069307617, 0.0, 2846407.2069307617, 0.0, 1009.2311}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[3];
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2820.372F;
      floatArray0[1] = 2820.372F;
      floatArray0[2] = 2820.372F;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 2820.372F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2820.372F, 2820.372F, 2820.372F, 0.0F, 2820.372F, 0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean1 = false;
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-2);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2), (-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-598.7599719134);
      doubleArray0[2] = (-598.7599719134);
      doubleArray0[3] = (-598.7599719134);
      doubleArray0[4] = (-598.7599719134);
      double[] doubleArray1 = MathArrays.scale((-598.7599719134), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-598.7599719134), (-598.7599719134), (-598.7599719134), (-598.7599719134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 358513.5039657356, 358513.5039657356, 358513.5039657356, 358513.5039657356}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1197.5199438268, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-598.7599719134), (-598.7599719134), (-598.7599719134), (-598.7599719134)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-529);
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1292);
      intArray1[1] = (-529);
      intArray1[2] = 0;
      int int0 = MathArrays.distance1(intArray1, intArray1);
      assertEquals(0, int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1292), (-529), 0}, intArray1);
      assertEquals(3, intArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[1][0];
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray2[0] = doubleArray3;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = (-1434);
      intArray0[3] = 0;
      intArray0[4] = (-4370);
      intArray0[5] = 554;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 0, (-1434), 0, (-4370), 554}, intArray0);
      assertArrayEquals(new int[] {2, 0, (-1434), 0, (-4370), 554}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-4370);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 554;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1434);
      doubleArray0[7] = (double) (-1434);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-8740.0), 0.0, 1108.0, 0.0, 0.0, 0.0, (-2868.0), (-2868.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4370.0), 0.0, 554.0, 0.0, 0.0, 0.0, (-1434.0), (-1434.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[7];
      long long0 = 0L;
      longArray1[0] = 0L;
      longArray1[1] = 2501L;
      long long1 = 1L;
      longArray1[2] = 1L;
      longArray1[3] = (-1590L);
      longArray1[4] = 0L;
      long long2 = 940L;
      longArray1[5] = 940L;
      long long3 = (-872L);
      longArray1[6] = (-872L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 2501L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-1590L);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2501.0, 0.0, 0.0, (-1590.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 6255001.0, 0.0, 0.0, 2528100.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (6,255,001 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2215.9229);
      doubleArray0[1] = (-3853.095405);
      doubleArray0[2] = (-909.6848125);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2215.9229), (-3853.095405), (-909.6848125), 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-431);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-431);
      intArray1[1] = (-1459);
      intArray1[2] = (-431);
      intArray1[3] = (-431);
      intArray1[4] = (-431);
      intArray1[5] = (-1176);
      intArray1[6] = (-431);
      intArray1[7] = (-431);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(0, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-431)}, intArray0);
      assertArrayEquals(new int[] {(-431), (-1459), (-431), (-431), (-431), (-1176), (-431), (-431)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(8, intArray1.length);
      
      double double0 = MathArrays.linearCombination((-4803.7373662), (double) (-431), (-593.99095759), (-1248.49), (-3853.095405), 0.0);
      assertEquals(2812002.5754737393, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2215.9229), (-3853.095405), (-909.6848125), 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("3g//Le]d3grt;y=ozC");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.3g//Le]d3grt;y=ozC
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2766.1755;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][6];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {2766.1755, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[][] longArray0 = new long[9][8];
      long[] longArray1 = new long[1];
      longArray1[0] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1L;
      longArray3[1] = 1L;
      longArray3[2] = 1L;
      longArray3[3] = 1L;
      longArray3[4] = 1L;
      longArray3[5] = 1L;
      longArray3[6] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1L;
      longArray4[1] = 1L;
      longArray4[2] = 1L;
      longArray4[3] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 1L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = (-3029L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray2));
      
      longArray7[0] = (-3029L);
      longArray7[1] = 1L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[7];
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray5));
      
      longArray8[0] = (-3029L);
      longArray8[1] = (-3029L);
      longArray8[2] = (-3029L);
      longArray8[3] = 1L;
      longArray8[4] = (-3029L);
      longArray8[5] = 1L;
      longArray8[6] = (-3029L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[9];
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray1));
      
      longArray9[0] = (-3029L);
      longArray9[1] = 1L;
      longArray9[2] = (-3029L);
      longArray9[3] = (-3029L);
      longArray9[4] = 1L;
      longArray9[5] = 1L;
      longArray9[6] = 1L;
      longArray9[7] = (-3029L);
      longArray9[8] = 1L;
      longArray0[8] = longArray9;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -3,029 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-503.62);
      doubleArray0[4] = 100.0;
      doubleArray0[5] = (-121.646182);
      doubleArray0[6] = 3.32;
      doubleArray0[7] = (-356.8581);
      doubleArray0[8] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, (-503.62), 100.0, (-121.646182), 3.32, (-356.8581), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5892.4045603465);
      doubleArray0[1] = (-801.9110617577);
      doubleArray0[2] = (-697.06);
      doubleArray0[3] = -0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-5892.4045603465), (-801.9110617577), (-697.06), -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-5892.4045603465), (-801.9110617577), (-697.06), -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 981.0F;
      floatArray0[2] = (-665.0895F);
      floatArray0[3] = (-968.7049F);
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1680.3964F;
      floatArray0[7] = 334.76F;
      floatArray0[8] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1.0F, 981.0F, (-665.0895F), (-968.7049F), 3.4028235E38F, 0.0F, 1680.3964F, 334.76F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-598.7599719134);
      doubleArray0[2] = (-598.7599719134);
      doubleArray0[3] = (-598.7599719134);
      doubleArray0[4] = (-598.7599719134);
      double[] doubleArray1 = MathArrays.scale((-598.7599719134), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-598.7599719134), (-598.7599719134), (-598.7599719134), (-598.7599719134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 358513.5039657356, 358513.5039657356, 358513.5039657356, 358513.5039657356}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1197.5199438268, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-598.7599719134), (-598.7599719134), (-598.7599719134), (-598.7599719134)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-529);
      intArray0[1] = (-142);
      intArray0[2] = 0;
      intArray0[3] = (-4737);
      intArray0[4] = 2582;
      intArray0[5] = (-1731);
      intArray0[6] = (-1);
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1426);
      intArray0[4] = (-1709);
      intArray0[5] = (-2474);
      intArray0[6] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, (-1426), (-1709), (-2474), 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[][] longArray0 = new long[7][3];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) (-1426);
      longArray2[3] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) (-1426);
      longArray3[1] = (long) 0;
      longArray3[2] = (long) 0;
      longArray3[3] = (long) (-1709);
      longArray3[4] = (long) 0;
      longArray3[5] = (long) (-1709);
      longArray3[6] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 0;
      longArray4[2] = (long) (-1709);
      longArray4[3] = (long) 0;
      longArray4[4] = (long) (-1426);
      longArray4[5] = (long) (-1709);
      longArray4[6] = (long) 0;
      longArray4[7] = (long) (-1426);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = (long) 0;
      longArray6[1] = (long) 0;
      longArray6[2] = (long) (-1426);
      longArray6[3] = (long) (-1709);
      longArray6[4] = 0L;
      longArray6[5] = (long) (-1709);
      longArray6[6] = (long) (-2474);
      longArray6[7] = (long) (-1426);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      
      longArray7[0] = (long) 0;
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 4 while others have length 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2933.538);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-2933.538)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2933.538);
      doubleArray2[1] = (-2933.538);
      doubleArray2[2] = (-2933.538);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-750.89894308);
      doubleArray2[5] = (-2933.538);
      doubleArray2[6] = (-2933.538);
      double[] doubleArray3 = MathArrays.scale((-2933.538), doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-2933.538), (-2933.538), (-2933.538), 0.0, (-750.89894308), (-2933.538), (-2933.538)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {8605645.197444, 8605645.197444, 8605645.197444, -0.0, 2202790.583685017, 8605645.197444, 8605645.197444}, doubleArray3, 0.01);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 43;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {43, 0, (-1), 0}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 229.8;
      doubleArray0[3] = 116.606;
      doubleArray0[4] = (-2098.93131813462);
      doubleArray0[5] = 1.0E-5;
      doubleArray0[6] = 2394.322569;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 1.0, 229.8, 116.606, (-2098.93131813462), 1.0E-5, 2394.322569}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      int int0 = 296;
      intArray0[1] = 296;
      intArray0[2] = 1;
      int int1 = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      int int2 = 2306;
      intArray0[5] = 2306;
      intArray0[6] = 722;
      intArray0[7] = 2;
      intArray0[8] = 87;
      int int3 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertArrayEquals(new int[] {0, 296, 1, 0, 1, 2306, 722, 2, 87}, intArray0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-2948));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-559.012369);
      doubleArray0[2] = 1638.5236744073657;
      doubleArray0[3] = (-1263.84524956609);
      doubleArray0[4] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-559.012369), 1638.5236744073657, (-1263.84524956609), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 312494.8286949922, 2684759.831593415, 1597304.814850772, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(1638.5236744073657, (-559.012369), 1146.9, 4116.3282017088, 1146.9, 0.0, 1138.19723885, 1146.9);
      assertEquals(5110460.226883843, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(2683121.3079190073, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-559.012369), 1638.5236744073657, (-1263.84524956609), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 312494.8286949922, 2684759.831593415, 1597304.814850772, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 5110460.226883843;
      double double2 = MathArrays.distance(doubleArray2, doubleArray0);
      assertEquals(5108821.733793379, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-559.012369), 1638.5236744073657, (-1263.84524956609), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 5110460.226883843}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 5108821.733793379;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 1638.5236744073657;
      doubleArray3[3] = (-1263.84524956609);
      doubleArray3[4] = 100.0;
      doubleArray3[5] = 5108821.733793379;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 1138.19723885;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray3);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-559.012369), 1638.5236744073657, (-1263.84524956609), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 312494.8286949922, 2684759.831593415, 1597304.814850772, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5108821.733793379, 0.0, 1638.5236744073657, (-1263.84524956609), 100.0, 5108821.733793379, 0.0, 1138.19723885}, doubleArray3, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(8, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
//      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3474.936819);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 3558.477296;
      doubleArray0[5] = (-3467.29993);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-496.3);
      doubleArray0[8] = (-1290.037116);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-3474.936819), Double.POSITIVE_INFINITY, 1.304E19, 3558.477296, (-3467.29993), 1.0, (-496.3), (-1290.037116)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 769;
      intArray0[2] = 0;
      intArray0[3] = 616;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 769, 0, 616}, intArray0);
      assertEquals(4, intArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-156.86876F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 616;
      floatArray0[4] = (float) 769;
      floatArray0[5] = (float) 769;
      floatArray0[6] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-156.86876F), 0.0F, 0.0F, 616.0F, 769.0F, 769.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-156.86876F);
      doubleArray0[1] = (double) (-156.86876F);
      doubleArray0[2] = (double) (-156.86876F);
      doubleArray0[3] = (double) 616.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 769;
      doubleArray0[6] = (double) 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-156.86875915527344), (-156.86875915527344), (-156.86875915527344), 616.0, 0.0, 769.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {(-156.86875915527344), (-156.86875915527344), (-156.86875915527344), 616.0, 0.0, 769.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean3 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean3);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {(-156.86875915527344), (-156.86875915527344), (-156.86875915527344), 616.0, 0.0, 769.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -156.869 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 582;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 582);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[][] longArray0 = new long[9][7];
      long[] longArray1 = new long[7];
      longArray1[0] = (-196L);
      longArray1[1] = (-1L);
      longArray1[2] = 1L;
      longArray1[3] = (-1872L);
      longArray1[4] = 0L;
      longArray1[5] = (-9223372036854775808L);
      longArray1[6] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = (-1L);
      longArray2[2] = (-1872L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1872L);
      longArray3[1] = (-1L);
      longArray3[2] = (-9223372036854775808L);
      longArray3[3] = (-9223372036854775808L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1L;
      longArray4[1] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (-196L);
      longArray5[1] = (-1872L);
      longArray5[2] = (-9223372036854775808L);
      longArray5[3] = (-1L);
      longArray5[4] = (-196L);
      longArray5[5] = 0L;
      longArray5[6] = (-1L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = 1L;
      longArray6[1] = (-9223372036854775808L);
      longArray6[2] = 0L;
      longArray6[3] = (-1L);
      longArray6[4] = (-1872L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray7[0] = (-1872L);
      longArray7[1] = 0L;
      longArray7[2] = (-1872L);
      longArray7[3] = (-9223372036854775808L);
      longArray7[4] = (-1872L);
      longArray7[5] = (-1872L);
      longArray7[6] = 0L;
      longArray7[7] = 781L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[3];
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray7));
      
      longArray8[0] = 781L;
      longArray8[1] = 0L;
      longArray8[2] = (-1L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[6];
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray6));
      
      longArray9[0] = (-654L);
      longArray9[1] = 0L;
      longArray9[2] = (-1872L);
      longArray9[3] = 0L;
      longArray9[4] = 0L;
      longArray9[5] = 0L;
      longArray0[8] = longArray9;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -196 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1482.39743783;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray1[4] = doubleArray3;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination((-1.0), 0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, (-1.0));
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1012);
      intArray0[1] = 830;
      intArray0[2] = 118;
      intArray0[3] = 412;
      intArray0[4] = (-362);
      intArray0[5] = 0;
      intArray0[6] = 114;
      intArray0[7] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1012), 830, 118, 412, (-362), 0, 114, 0}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Integer>) null, 327, 2944);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = (-1647);
      intArray0[2] = (-6520);
      intArray0[3] = (-2090);
      intArray0[4] = 1999;
      intArray0[5] = 378;
      intArray0[6] = 1804;
      intArray0[7] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {2, (-1647), (-6520), (-2090), 1999, 378, 1804, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1999;
      floatArray0[1] = (float) 1804;
      floatArray0[2] = (float) 378;
      floatArray0[3] = (float) 1999;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1999.0F, 1804.0F, 378.0F, 1999.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Pair<Object, Integer>>) null, 339);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = 190.13678;
      int int0 = (-288);
      int int1 = (-933);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Integer>) null, (-288), (-933));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2), (-2));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3089.6);
      doubleArray0[1] = 2512.24257674139;
      double double0 = (-3464.855422);
      doubleArray0[2] = (-3464.855422);
      doubleArray0[3] = 0.0;
      double double1 = 569.5031;
      doubleArray0[4] = 569.5031;
      doubleArray0[5] = (-2614.31);
      double double2 = 0.0;
      doubleArray0[6] = 0.0;
      double double3 = (-909.4901166900102);
      doubleArray0[7] = (-909.4901166900102);
      double double4 = 1857.149;
      doubleArray0[8] = 1857.149;
      MathArrays.convolve(doubleArray0, doubleArray0);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -3,089.6 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = (-3012);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, (-3012));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[][] longArray0 = new long[8][9];
      long[] longArray1 = new long[9];
      longArray1[0] = (-463L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 1L;
      longArray1[5] = 1L;
      longArray1[6] = (-2L);
      longArray1[7] = 0L;
      longArray1[8] = (-2977L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (-463L);
      longArray2[1] = (-463L);
      longArray2[2] = 1L;
      longArray2[3] = 0L;
      longArray2[4] = (-463L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = 1L;
      longArray3[1] = 1L;
      longArray3[2] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = 4254L;
      longArray4[1] = (-2L);
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = (-2L);
      longArray4[5] = (-463L);
      longArray4[6] = 0L;
      longArray4[7] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = 0L;
      longArray5[1] = 1L;
      longArray5[2] = 1L;
      longArray5[3] = (-2L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = 0L;
      longArray6[1] = 1L;
      longArray6[2] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      longArray7[0] = 0L;
      longArray7[1] = 0L;
      longArray7[2] = 0L;
      longArray7[3] = 1L;
      longArray7[4] = (-463L);
      longArray7[5] = 4254L;
      longArray7[6] = 0L;
      longArray7[7] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[2];
      longArray8[0] = (-463L);
      longArray8[1] = 1L;
      longArray0[7] = longArray8;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -463 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double double0 = 156.0193138;
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace(156.0193138, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = (-1371.4305);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4140.15058315);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 12.844083034609;
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not increasing (-20 > -1,371.43)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[][] longArray0 = new long[6][9];
      long[] longArray1 = new long[7];
      longArray1[0] = (-3398L);
      longArray1[1] = (-1151L);
      longArray1[2] = (-3996L);
      longArray1[3] = (-2004L);
      longArray1[4] = (-1459L);
      longArray1[5] = 337L;
      longArray1[6] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = (-1643L);
      longArray2[1] = (-3996L);
      longArray2[2] = (-2004L);
      longArray2[3] = 0L;
      longArray2[4] = (-1151L);
      longArray2[5] = (-1151L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (-3996L);
      longArray3[1] = (-1459L);
      longArray3[2] = (-3398L);
      longArray3[3] = (-1L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = 56L;
      longArray4[1] = (-1L);
      longArray4[2] = (-3996L);
      longArray4[3] = (-1L);
      longArray4[4] = (-1643L);
      longArray4[5] = (-1459L);
      longArray4[6] = (-1151L);
      longArray4[7] = 337L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = (-3996L);
      longArray5[1] = 337L;
      longArray5[2] = 337L;
      longArray5[3] = (-1459L);
      longArray5[4] = (-3996L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      longArray6[0] = 337L;
      longArray6[1] = 337L;
      longArray6[2] = (-3398L);
      longArray6[3] = (-1L);
      longArray6[4] = (-9223372036854775808L);
      longArray6[5] = 0L;
      longArray6[6] = (-3996L);
      longArray6[7] = (-1643L);
      longArray0[5] = longArray6;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 6 while others have length 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 45;
      intArray0[1] = 0;
      intArray0[2] = 188;
      MathArrays.copyOf(intArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 45;
      doubleArray0[3] = (double) 188;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[5][1];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 188;
      longArray1[1] = (long) 45;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 188;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = (long) 0;
      longArray3[1] = 0L;
      longArray3[2] = (long) 188;
      longArray3[3] = (long) 188;
      longArray3[4] = (long) 188;
      longArray3[5] = (long) 0;
      longArray3[6] = (long) 188;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 45;
      longArray4[2] = (long) 0;
      longArray4[3] = (long) 45;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      longArray5[0] = (long) 45;
      longArray5[1] = (long) 45;
      longArray0[4] = longArray5;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1611.276221442796);
      doubleArray0[4] = (-2031.360583);
      doubleArray0[5] = (-1294.519529401968);
      doubleArray0[6] = (-2652.865);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 4503599627370496L;
      longArray0[1] = 2224L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = 134217729;
      intArray0[2] = 134217729;
      int[] intArray1 = MathArrays.copyOf(intArray0, 4772);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.copyOf(intArray1);
      double double0 = 0.0;
//      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "FUNCTION";
      stringArray0[4] = "NO_DATA";
      stringArray0[5] = ".:-Y+/ ev7\"$;|O";
      stringArray0[6] = "@xjF0^9^1j#o";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 352.06;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3007.74544457627);
      doubleArray0[3] = 3339.4099;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1345.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[4][0];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      int int0 = (-781);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray3, (-781));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 0;
      int int0 = (-1434);
      intArray0[2] = (-1434);
      int int1 = 0;
      intArray0[3] = 0;
      intArray0[4] = (-4370);
      int int2 = 554;
      intArray0[5] = 554;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-4370);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 554;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1434);
      doubleArray0[7] = (double) (-1434);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.linearCombination((double) 0, (double) 0, (double) (-4370), (double) 0, (-1312.6), 323.956, (double) 0, (-4370.0));
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Integer>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 539;
      intArray0[1] = 134217729;
      intArray0[2] = (-798);
      intArray0[3] = 566;
      intArray0[4] = 46;
      intArray0[5] = (-1940);
      intArray0[6] = 440;
      intArray0[7] = 9999;
      intArray0[8] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1460.20405295236;
      doubleArray0[1] = 802.0;
      doubleArray0[2] = 1460.20405295236;
      doubleArray0[3] = 0.0;
      MathArrays.scaleInPlace(1460.20405295236, doubleArray0);
      int int0 = 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      double[][] doubleArray3 = new double[3][5];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray2;
//      try { 
        MathArrays.sortInPlace(doubleArray2, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-4339);
      intArray0[3] = 218;
      intArray0[4] = 520;
      intArray0[5] = 1518;
      intArray0[6] = (-1329);
      intArray0[7] = 97;
      intArray0[8] = 134217729;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, 0, (-4339), 218, 520, 1518, (-1329), 97, 134217729}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1409.7608372760894;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = 3.834E-20;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MathArrays.linearCombination(540.927082331081, 0.0, 0.0, 540.927082331081, (-2547.18292), 0.0);
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 540.927082331081;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-2547.18292);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray1[8] = doubleArray3;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2919.0;
      doubleArray0[1] = (-784.2884495852225);
      doubleArray0[2] = (-734.6713078829321);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-0.9703892);
      doubleArray0[5] = 507.24802993688;
      doubleArray0[6] = (-2871.5892676);
      doubleArray0[7] = (-461.0);
      doubleArray0[8] = (-1386.4133038142);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -784.288 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-806.103789763992);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 745.25526201551;
      doubleArray0[3] = 1010.19793758;
      doubleArray0[4] = (-1135.8422601871293);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= -1)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
