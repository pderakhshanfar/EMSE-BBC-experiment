/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 01:05:12 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-596.44337523);
      doubleArray0[1] = (-596.44337523);
      double double0 = new Double((-596.44337523));
      assertEquals((-596.44337523), double0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-596.44337523), (-596.44337523)}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (-596.443 >= -596.443)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 1;
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("").when(field0).getZero();
      double double0 = 0.0;
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, (double) 1, 0.0, 0.1428571343421936, (double) 1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.1428571343421936, double1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 1, 1);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // java.lang.String
//         //
//         verifyException("java.util.Arrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[3] = 1077.28F;
      floatArray0[4] = Float.POSITIVE_INFINITY;
      floatArray0[5] = 2725.4338F;
      floatArray0[6] = -0.0F;
      floatArray0[7] = 890.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, 1077.28F, Float.POSITIVE_INFINITY, 2725.4338F, -0.0F, 890.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2725.4338F;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = 730.0;
//      try { 
        MathArrays.normalizeArray(doubleArray0, (-2.6033824355191673E-8));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-633.7819116105846);
      doubleArray0[2] = 1998.95;
      doubleArray0[3] = 3459.08854901956;
      doubleArray0[4] = 3.629046862724605E7;
      doubleArray0[5] = (-1.7168146928204135);
      doubleArray0[6] = (-154.4016045);
      doubleArray0[7] = 3.629046862724705E7;
      doubleArray0[8] = (-1606.116349335789);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3458);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, (-633.7819116105846), 1998.95, 3459.08854901956, 3.629046862724605E7, (-1.7168146928204135), (-154.4016045), 3.629046862724705E7, (-1606.116349335789)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(3458, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.7553817452272217E-6;
      doubleArray0[1] = 671.31822106;
      doubleArray0[2] = 1716.0829664688592;
      doubleArray0[3] = 2474.0;
      doubleArray0[4] = (-1189.166);
      doubleArray0[5] = (-1896.05116076284);
      doubleArray0[6] = 1878.1126467590216;
      doubleArray0[7] = 154.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Integer>[][] fieldElementArray0 = MathArrays.buildArray(field0, 4, (-262));
      assertNotNull(fieldElementArray0);
      assertEquals(4, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-1367.1356091534767);
      doubleArray0[2] = (-2852.705);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 255.216;
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Integer> fieldElement0 = (FieldElement<Integer>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      FieldElement<Integer>[][] fieldElementArray0 = MathArrays.buildArray(field0, 0, 0);
      assertNotNull(fieldElementArray0);
      assertEquals(0, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-6.032174644509064E-23);
      doubleArray0[2] = (-6.032174644509064E-23);
      doubleArray0[3] = (-6.032174644509064E-23);
      doubleArray0[4] = (-6.032174644509064E-23);
      doubleArray0[5] = (-6.032174644509064E-23);
      doubleArray0[6] = (-0.2499999997677497);
      MathArrays.scaleInPlace((-6.032174644509064E-23), doubleArray0);
      assertArrayEquals(new double[] {(-8.096247817173889E-15), 3.638713094185805E-45, 3.638713094185805E-45, 3.638713094185805E-45, 3.638713094185805E-45, 3.638713094185805E-45, 1.5080436597262915E-23}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-8.096247817173889E-15), 3.638713094185805E-45, 3.638713094185805E-45, 3.638713094185805E-45, 3.638713094185805E-45, 3.638713094185805E-45, 1.5080436597262915E-23}, doubleArray0, 0.01);
      assertEquals(8.096247817173889E-15, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not decreasing (-0 < 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 919.20361753, 1.304E19, (-1336.7));
      assertEquals((-1.7430568E22), double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-534.8517725648);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-1.7430568E22);
      doubleArray0[3] = (-1.7430568E22);
      doubleArray0[4] = 745.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 919.20361753;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-534.8517725648), 1.304E19, (-1.7430568E22), (-1.7430568E22), 745.0, 0.0, 1.304E19, 0.0, 919.20361753}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1069.7035451296), 2.608E19, (-3.4861136E22), (-3.4861136E22), 1490.0, 0.0, 2.608E19, 0.0, 1838.40723506}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-534.8517725648), 1.304E19, (-1.7430568E22), (-1.7430568E22), 745.0, 0.0, 1.304E19, 0.0, 919.20361753}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1069.7035451296), 2.608E19, (-3.4861136E22), (-3.4861136E22), 1490.0, 0.0, 2.608E19, 0.0, 1838.40723506}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4.930110512710432E22, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double2 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-534.8517725648), 1.304E19, (-1.7430568E22), (-1.7430568E22), 745.0, 0.0, 1.304E19, 0.0, 919.20361753}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1069.7035451296), 2.608E19, (-3.4861136E22), (-3.4861136E22), 1490.0, 0.0, 2.608E19, 0.0, 1838.40723506}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.7430568E22, double2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-534.8517725648), 1.304E19, (-1.7430568E22), (-1.7430568E22), 745.0, 0.0, 1.304E19, 0.0, 919.20361753}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1069.7035451296), 2.608E19, (-3.4861136E22), (-3.4861136E22), 1490.0, 0.0, 2.608E19, 0.0, 1838.40723506}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1604.5553176944), 3.912E19, (-5.2291704E22), (-5.2291704E22), 2235.0, 0.0, 3.912E19, 0.0, 2757.61085259}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1.7430568E22;
      doubleArray3[1] = 4.930110512710432E22;
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
//      try { 
        MathArrays.normalizeArray((double[]) null, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2145756676;
      intArray0[1] = (-363);
      intArray0[2] = (-2145761702);
      intArray0[3] = (-704);
      intArray0[4] = 1957;
      intArray0[5] = 13;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2145756676;
      intArray1[1] = (-2145761702);
      intArray1[2] = (-363);
      intArray1[3] = (-363);
      intArray1[4] = 1957;
      intArray1[5] = (-704);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {2145756676, (-363), (-2145761702), (-704), 1957, 13}, intArray0);
      assertArrayEquals(new int[] {2145756676, (-2145761702), (-363), (-363), 1957, (-704)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-3443560), int0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-363);
      doubleArray0[1] = (double) 2145756676;
      doubleArray0[2] = (double) 2145756676;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) (-363);
      doubleArray0[5] = (double) 13;
      doubleArray0[6] = (double) 13;
      doubleArray0[7] = (double) 1957;
      doubleArray0[8] = (double) 2145756676;
      MathArrays.scaleInPlace((-363), doubleArray0);
      assertArrayEquals(new double[] {131769.0, (-7.78909673388E11), (-7.78909673388E11), (-4719.0), 131769.0, (-4719.0), (-4719.0), (-710391.0), (-7.78909673388E11)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      FieldElement<Integer>[][] fieldElementArray0 = MathArrays.buildArray(field0, 15, 15);
      assertNotNull(fieldElementArray0);
      assertEquals(15, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(17, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(17, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-146.4438894));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[] floatArray0 = new float[19];
      floatArray0[0] = 2155.512F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(19, floatArray0.length);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 2155.512F;
      floatArray1[2] = (-319.108F);
      floatArray1[3] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 2155.512F, (-319.108F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertEquals(19, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1167.884484);
      doubleArray0[1] = (double) 2155.512F;
      doubleArray0[2] = (double) 2155.512F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 2155.512F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][6];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-1167.884484), 0.0, 0.0, 2155.511962890625, 2155.511962890625, 0.0, 0.0, 2155.511962890625}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1050.0F;
      floatArray0[1] = 0.0F;
      floatArray0[4] = 1.0F;
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {1050.0F, 0.0F, 0.0F, Float.NEGATIVE_INFINITY, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1050.0F, 0.0F, 0.0F, Float.NEGATIVE_INFINITY, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = 2017.54;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0, 2017.54, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean2 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {1050.0F, 0.0F, 0.0F, Float.NEGATIVE_INFINITY, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4638.03571578);
      doubleArray0[1] = (-1129.7232635850064);
      doubleArray0[2] = (-102.275375855);
      doubleArray0[3] = (-275.6992);
      doubleArray0[4] = Double.NaN;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1129.7232635850064);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-4638.03571578), (-1129.7232635850064), (-102.275375855), (-275.6992), Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1129.7232635850064)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5239696.845454803, 1276274.652285158, 115542.87139529375, 311463.7999917754, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-4638.03571578), (-1129.7232635850064), (-102.275375855), (-275.6992), Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1129.7232635850064)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5239696.845454803, 1276274.652285158, 115542.87139529375, 311463.7999917754, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 13;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 13}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = MathArrays.scale((-2734.340582205981), doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, 0.3333333333332802);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 41780.30964426646;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {41780.30964426646}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {41780.30964426646}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.7455942739707851E9}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {41780.30964426646}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {41780.30964426646}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {41780.30964426646}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {41780.30964426646}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1908.8F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1908.8F)}, floatArray1, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {41780.30964426646}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {41780.30964426646}, doubleArray4, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray4.length);
      
      int int0 = (-1502);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-1502));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 506.77997094442;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 506.77997094442, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = (-928);
      intArray1[6] = 0;
      intArray1[7] = 0;
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray1, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1405;
      intArray0[1] = 429496730;
      intArray0[2] = 43;
      intArray0[3] = (-2146137262);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 429496730;
      intArray1[1] = (-2146137262);
      intArray1[2] = 43;
      intArray1[3] = 429496730;
      intArray1[4] = 1405;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertArrayEquals(new int[] {1405, 429496730, 43, (-2146137262)}, intArray0);
      assertArrayEquals(new int[] {429496730, (-2146137262), 43, 429496730, 1405}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2.469145652788423E9, double0, 0.01);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      double[] doubleArray1 = MathArrays.scale(783.24925234642, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(13, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, (double[]) null);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(13, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(13, doubleArray0.length);
      assertEquals(13, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1974);
      intArray0[1] = 579;
      intArray0[2] = 3525;
      int[] intArray1 = MathArrays.copyOf(intArray0, 579);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1974), 579, 3525}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(579, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = null;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      
//      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "hTF S";
      String string0 = "+TmjZ<^\\ub%N`8";
      stringArray0[1] = string0;
      stringArray0[2] = "INDEX_OUT_OF_RANGE";
      stringArray0[3] = "aHkP8";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2019.0);
      doubleArray0[1] = (-3189.28845267298);
      doubleArray0[2] = 0.19999954120254515;
      doubleArray0[3] = 3.26E18;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2019.0), (-3189.28845267298), 0.19999954120254515, 3.26E18}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-2019.0), (-3189.28845267298), 0.19999954120254515, 3.26E18}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3.26E18, double1, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.26E18;
      doubleArray0[1] = 314.0;
      doubleArray0[3] = 3.26E18;
      doubleArray0[4] = 0.19999954120254515;
      doubleArray0[5] = 314.0;
      doubleArray0[6] = 3.26E18;
      doubleArray0[7] = 3.26E18;
      doubleArray0[8] = (-840.1038208007812);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.26E18, 314.0, 0.0, 3.26E18, 0.19999954120254515, 314.0, 3.26E18, 3.26E18, (-840.1038208007812)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 35;
      intArray0[1] = 26;
      intArray0[2] = 35;
      intArray0[3] = 23;
      intArray0[4] = 134217729;
      intArray0[5] = 7;
      intArray0[6] = (-2951);
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 26;
      intArray1[1] = 35;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-269.8);
      doubleArray0[1] = (-5500.741342138534);
      doubleArray0[2] = (-2956.264373322671);
      doubleArray0[3] = 1876.3601136734;
      doubleArray0[4] = 286.899122631826;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-4.9E-324);
      doubleArray0[7] = (-2999.327);
      doubleArray0[8] = 1672.9654445677;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-269.8), (-5500.741342138534), (-2956.264373322671), 1876.3601136734, 286.899122631826, Double.NaN, (-4.9E-324), (-2999.327), 1672.9654445677}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-269.8), (-5500.741342138534), (-2956.264373322671), 1876.3601136734, 286.899122631826, Double.NaN, (-4.9E-324), (-2999.327), 1672.9654445677}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-269.8), (-5500.741342138534), (-2956.264373322671), 1876.3601136734, 286.899122631826, Double.NaN, (-4.9E-324), (-2999.327), 1672.9654445677}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, floatArray0.length);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-269.8), (-5500.741342138534), (-2956.264373322671), 1876.3601136734, 286.899122631826, Double.NaN, (-4.9E-324), (-2999.327), 1672.9654445677}, doubleArray0, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[9][6];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 647.415779;
      doubleArray1[1] = 2.75485455E7;
      doubleArray1[2] = 701.4584;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-483.9);
      doubleArray1[5] = (-1991.6417555);
      doubleArray0[4] = doubleArray1;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
      doubleArray0[8] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace(2000.1969696457945, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "WO";
      stringArray0[1] = "initial column {1} after final column {0}";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[3] = ";j{:W";
      stringArray0[4] = ")ay=fDxD&S<7rHhg^%v";
      stringArray0[5] = "CANNOT_FORMAT_INSTANCE_AS_COMPLEX";
      stringArray0[6] = "V?K?wH3_x>]%1+";
      stringArray0[7] = "/6%Y/69c.";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2019.0);
      doubleArray0[1] = 459.8943;
      doubleArray0[2] = 3.26E18;
      doubleArray0[3] = (-105.0);
      doubleArray0[4] = (-840.1038208007812);
      doubleArray0[5] = 0.19999954120254515;
      doubleArray0[6] = 314.0;
      doubleArray0[7] = 3.26E18;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2019.0), 459.8943, 3.26E18, (-105.0), (-840.1038208007812), 0.19999954120254515, 314.0, 3.26E18}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-2019.0), 459.8943, 3.26E18, (-105.0), (-840.1038208007812), 0.19999954120254515, 314.0, 3.26E18}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4.6103362133362903E18, double1, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double3 = MathArrays.linearCombination(4564.0, 0.0, 4564.0, 0.0, 0.0, 1817.921842);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2052.42306);
      doubleArray0[1] = (-3685.26369);
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (-2052.42306);
      doubleArray0[4] = (-1005.9);
      doubleArray0[5] = (-358.0);
      doubleArray0[6] = (-709.742301);
      doubleArray0[7] = (-1600.12255);
      doubleArray0[8] = Double.NaN;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2052.42306), (-3685.26369), 1.304E19, (-2052.42306), (-1005.9), (-358.0), (-709.742301), (-1600.12255), Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1600.12255));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2052.42306), (-3685.26369), 1.304E19, (-2052.42306), (-1005.9), (-358.0), (-709.742301), (-1600.12255), Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.5185033899125814E-13, 4.522142279957987E-13, (-1600.1225500000014), 2.5185033899125814E-13, 1.2343276633780683E-13, 4.3929744854294517E-14, 8.709161507047458E-14, 1.963490931762657E-13, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1175;
      intArray0[1] = (-1335);
      intArray0[2] = 13;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1175, (-1335), 13}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[4] = 18.271198374706252;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 18.271198374706252;
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2145550718);
      intArray0[1] = (-2243);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2145550718), (-2243)}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2243));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-886.0486F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3882.3F;
      floatArray0[6] = 899.93805F;
      floatArray0[7] = (-1555.7F);
      floatArray0[8] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-886.0486F), 0.0F, Float.NaN, 0.0F, 3882.3F, 899.93805F, (-1555.7F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 73;
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3519;
      intArray0[1] = 73;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 3519;
      doubleArray0[2] = (double) 73;
      doubleArray0[3] = (double) 3519;
      doubleArray0[4] = (double) 73;
      doubleArray0[5] = (double) 3519;
      doubleArray0[6] = (double) 3519;
      doubleArray0[7] = (double) 73;
      doubleArray0[8] = (double) 3519;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3519.0, 73.0, 3519.0, 73.0, 3519.0, 3519.0, 73.0, 3519.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(18, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathArrays.linearCombination(490.8584073464102, 490.8584073464102, 490.8584073464102, 490.8584073464102, 4602.710365856082, (-2855.901937), 4602.710365856082, 490.8584073464102);
      assertEquals((-1.0403726417512124E7), double0, 0.01);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "INCR%SING";
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2855.901937);
      doubleArray0[1] = (-2855.901937);
      doubleArray0[2] = 283.3334802788;
      doubleArray0[3] = 4602.710365856082;
      doubleArray0[4] = 4602.710365856082;
      doubleArray0[5] = 490.8584073464102;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4602.710365856082;
      doubleArray1[1] = (-2855.901937);
      doubleArray1[2] = 283.3334802788;
      doubleArray1[3] = 4602.710365856082;
      doubleArray1[4] = 490.8584073464102;
      doubleArray1[5] = (-1.0403726417512124E7);
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2855.901937), (-2855.901937), 283.3334802788, 4602.710365856082, 4602.710365856082, 490.8584073464102}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4602.710365856082, (-2855.901937), 283.3334802788, 4602.710365856082, 490.8584073464102, (-1.0403726417512124E7)}, doubleArray1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-5.088220793690646E9), double1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 957;
      intArray0[2] = 2;
      intArray0[3] = (-2040);
      intArray0[4] = (-784);
      intArray0[5] = 152;
      intArray0[6] = (-1243);
      intArray0[7] = (-1063);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {4, 957, 2, (-2040), (-784), 152, (-1243), (-1063)}, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {4, 957, 2, (-2040), (-784), 152, (-1243), (-1063)}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(8, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2145550718);
      intArray0[1] = (-2243);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2145550718), (-2243)}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2243));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4564);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-4564), 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-4564);
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-790);
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("").when(field0).getZero();
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, (double) (-790), 0.0, 0.1428571343421936, (double) (-790));
      assertEquals((-112.85713613033295), double0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-790), (-790));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1142;
      intArray0[1] = 2655;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {1142, 2655}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      double double0 = MathArrays.linearCombination((-487.50517), (double) 1142, (double) 2655, (-631.719), (double) 2655, (double) 1142, (double) 1142, (-296.6365643487));
      assertEquals(459306.1943737844, double0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 3268);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1142, 2655}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3268, intArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2655;
      floatArray0[1] = (float) 1142;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 1142;
      floatArray0[4] = (float) 1142;
      floatArray0[5] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2655.0F, 1142.0F, 0.0F, 1142.0F, 1142.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-296.6365643487);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 1142.0F;
      doubleArray0[3] = (double) 1142;
      doubleArray0[4] = (double) 1142;
      doubleArray0[5] = (-631.719);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-296.6365643487), 0.0, 1142.0, 1142.0, 1142.0, (-631.719)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(11, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = (double) 134217729;
      doubleArray0[3] = (double) 2028;
      doubleArray0[4] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 3.141592653589793, 1.34217729E8, 2028.0, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-1334));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1081.601463;
      doubleArray0[1] = 854.68276864;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1081.601463, 854.68276864}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 986);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-447.0);
      doubleArray1[1] = 1456.8775946904;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (-2639.83525466595);
      doubleArray1[4] = (-1.7976931348623157E308);
      doubleArray1[5] = 2.2860509143963117E-8;
      doubleArray1[6] = 0.0;
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1168.27F);
      floatArray0[1] = (-840.1038F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1168.27F), (-840.1038F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4564);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-4564), 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.814697265625E-6;
      doubleArray0[1] = (double) (-4564);
      doubleArray0[2] = (double) (-4564);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.814697265625E-6, (-4564.0), (-4564.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "INCREASING";
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.75;
      doubleArray0[1] = 4764.52;
      doubleArray0[2] = 259.6781740565867;
      doubleArray0[3] = 694.528025544396;
      doubleArray0[4] = 2279.37137;
      doubleArray0[5] = 1.3126904124857321;
      doubleArray0[6] = 954.7283066;
      doubleArray0[7] = (-643.1254732763);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.75, 4764.52, 259.6781740565867, 694.528025544396, 2279.37137, 1.3126904124857321, 954.7283066, (-643.1254732763)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.4E-45F);
      floatArray0[1] = -0.0F;
      floatArray0[2] = (-1692.314F);
      floatArray0[3] = -0.0F;
      floatArray0[4] = 2219.4F;
      floatArray0[5] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-1.4E-45F), -0.0F, (-1692.314F), -0.0F, 2219.4F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "INCREASING";
      stringArray0[3] = "INCREASING";
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-448.101406060494);
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = MathArrays.scale(0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-448.101406060494), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "INCREASING";
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 60.40267F;
      floatArray0[2] = 1504.5537F;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Integer integer0 = new Integer((-2146657835));
      assertNotNull(integer0);
      assertEquals((-2146657835), (int)integer0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.902267575263977;
      doubleArray0[1] = Double.NaN;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.902267575263977, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 60.40267F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 60.40267F, 1504.5537F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 60.40267F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.902267575263977, Double.NaN}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-822.8063054);
      doubleArray0[1] = 1.633123935319537E16;
      doubleArray0[2] = 780.5095350836121;
      doubleArray0[3] = 2069.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 840.1038208007812);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-822.8063054), 1.633123935319537E16, 780.5095350836121, 2069.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.2326409281986316E-11), 840.103820800677, 4.015059900930339E-11, 1.0643251057957886E-10}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 226;
      intArray0[1] = (-3399);
      intArray0[2] = (-1386);
      intArray0[3] = 1628967263;
      intArray0[4] = 3249;
      intArray0[5] = (-2144930474);
      intArray0[6] = (-2047);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {226, (-3399), (-1386), 1628967263, 3249, (-2144930474), (-2047)}, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-2047);
      doubleArray3[1] = (double) (-2144930474);
      doubleArray3[2] = (double) (-1386);
      doubleArray3[3] = (double) (-1386);
//      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = MathArrays.linearCombination(490.8584073464102, 490.8584073464102, 490.8584073464102, 490.8584073464102, 4602.710365856082, (-2855.901937), 4602.710365856082, 490.8584073464102);
      assertEquals((-1.0403726417512124E7), double0, 0.01);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "INCR%SING";
      int int0 = 134217729;
      Integer integer0 = new Integer(134217729);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(134217729, (int)integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4602.710365856082;
      doubleArray0[1] = (-2855.901937);
      double[] doubleArray1 = MathArrays.scale((-2855.901937), doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4602.710365856082, (-2855.901937)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.3144889449298363E7), 8156175.873760353}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-378.25313263983));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {4602.710365856082, (-2855.901937)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.3144889449298363E7), 8156175.873760353}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-996.6688881041116), 618.4157554642816}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {4602.710365856082, (-2855.901937)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.3144889449298363E7), 8156175.873760353}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-996.6688881041116), 618.4157554642816}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.3101102351683668E10, (-1.6258013478564623E10), 5.043907664671056E9}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      
//      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = MathArrays.linearCombination(490.8584073464102, 490.8584073464102, 490.8584073464102, 490.8584073464102, 4602.710365856082, (-2855.901937), 4602.710365856082, 490.8584073464102);
      assertEquals((-1.0403726417512124E7), double0, 0.01);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "INCR%SING";
      int int0 = 134217729;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 134217729;
      longArray0[1] = (long) 134217729;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {134217729L, 134217729L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.scaleInPlace(1071.2840702206602, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(0.15, (-444.71955876), (-444.71955876), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 2736L;
      longArray0[1] = 4503599627370496L;
      longArray0[2] = (-1223L);
      longArray0[3] = 4294967295L;
      longArray0[4] = 1998L;
      longArray0[5] = (-81L);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,223 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-269.8);
      doubleArray0[1] = (-5500.741342138534);
      doubleArray0[2] = (-2956.264373322671);
      doubleArray0[3] = 1876.3601136734;
      doubleArray0[4] = 286.899122631826;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-2956.264373322671);
      doubleArray0[7] = (-2999.327);
      doubleArray0[8] = 1672.9654445677;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-269.8), (-5500.741342138534), (-2956.264373322671), 1876.3601136734, 286.899122631826, Double.NaN, (-2956.264373322671), (-2999.327), 1672.9654445677}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-269.8), Double.NaN, 1672.9654445677, 1672.9654445677);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-269.8), (-5500.741342138534), (-2956.264373322671), 1876.3601136734, 286.899122631826, Double.NaN, (-2956.264373322671), (-2999.327), 1672.9654445677}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[18];
      floatArray0[0] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(18, floatArray0.length);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-269.8), (-5500.741342138534), (-2956.264373322671), 1876.3601136734, 286.899122631826, Double.NaN, (-2956.264373322671), (-2999.327), 1672.9654445677}, doubleArray0, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 3.141592653589793;
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = (-0.2499999701976776);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.141592653589793, (-0.2499999701976776)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      long[][] longArrayArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 428L;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = 1519.73;
      doubleArray0[6] = 463.47344;
      doubleArray0[7] = (double) 428L;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1519.73, 463.47344, 428.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3.834E-20;
      doubleArray2[1] = (double) 428L;
      doubleArray2[2] = 1110.0;
      doubleArray2[3] = (double) 428L;
      doubleArray2[4] = (double) 428L;
      doubleArray2[5] = 1454.56;
      doubleArray2[6] = (double) 0L;
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray1, doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[3];
      longArray1[0] = 1L;
      longArray1[1] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[0] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (-1370.3);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = 4397.3243699;
      doubleArray0[6] = (double) 0L;
      double[] doubleArray1 = MathArrays.scale(1L, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, (-1370.3), 1.0, 0.0, 1.0, 4397.3243699, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, (-1370.3), 1.0, 0.0, 1.0, 4397.3243699, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = 0L;
      long[][] longArray0 = new long[2][9];
      long[] longArray1 = new long[3];
      longArray1[0] = 1L;
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1110.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1L;
      double double0 = 0.9974949359893799;
      doubleArray0[4] = 0.9974949359893799;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4564.0;
      doubleArray1[1] = 4564.0;
      doubleArray1[3] = 4564.0;
      doubleArray1[4] = 4564.0;
      doubleArray1[5] = 4564.0;
      doubleArray1[6] = 4564.0;
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2028;
      intArray0[1] = 2028;
      intArray0[2] = 2028;
      intArray0[3] = 2028;
      intArray0[4] = 2028;
      intArray0[5] = 134217729;
      intArray0[6] = 134217729;
      intArray0[7] = 2028;
      intArray0[8] = 134217729;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {2028, 2028, 2028, 2028, 2028, 134217729, 134217729, 2028, 134217729}, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.4035928998300634E7;
      doubleArray0[1] = (double) 2028;
      doubleArray0[2] = (double) 2028;
      doubleArray0[3] = (double) 2028;
      doubleArray0[4] = (double) 2028;
      doubleArray0[5] = (-444.71955876);
      doubleArray0[6] = (double) 134217729;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 5 and 6 are not decreasing (-444.72 < 134,217,729)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 181.6477);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$OrderDirection");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$OrderDirection
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      float float0 = 60.40267F;
      floatArray0[1] = 60.40267F;
      floatArray0[2] = 1560.1339F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1560.1339F;
      double[] doubleArray1 = MathArrays.scale(60.40267F, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1560.1339111328125}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {94236.25661999267}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1560.1339F);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1560.1339111328125}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {94236.25661999267}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1560.1339111328125}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long[][] longArray0 = new long[2][9];
      long[] longArray1 = new long[3];
      longArray1[0] = 1L;
      longArray1[1] = 0L;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[0] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 368.218;
      doubleArray2[1] = 0.6816387176513672;
      doubleArray2[2] = 10.0;
      doubleArray2[3] = (-2278.620528);
      doubleArray2[4] = 4964.0;
      doubleArray2[5] = 1955.64484066629;
      doubleArray2[6] = (-248.14532);
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {368.218, 0.6816387176513672, 10.0, (-2278.620528), 4964.0, 1955.64484066629, (-248.14532)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2576.1;
      doubleArray0[1] = 4.116164446561962E-8;
      doubleArray0[2] = 139.64175673742;
      doubleArray0[3] = 766.6409379129;
      int int0 = 1008;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1008);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2576.1, 4.116164446561962E-8, 139.64175673742, 766.6409379129}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1008, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1110);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1110);
      doubleArray0[3] = (double) 4964;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-4564);
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (-531.8794907262524);
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (0 >= -1,110)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = MathArrays.linearCombination(490.8584073464102, 490.8584073464102, 0.375, 0.375, 4602.710365856082, (-2855.901937), 4602.710365856082, 0.375);
      assertEquals((-1.2902221316223513E7), double0, 0.01);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(134217729);
      assertNotNull(integer0);
      assertEquals(134217729, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(134217729, (int)integer1);
      assertEquals(3, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3219));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-3219), (int)integer2);
      
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, false);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2740.527F;
      floatArray0[1] = (-1168.27F);
      floatArray0[2] = (-1168.27F);
      floatArray0[3] = (-1168.27F);
      floatArray0[4] = (-1168.27F);
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2740.527F;
      floatArray1[1] = (-1168.27F);
      floatArray1[2] = 2740.527F;
      floatArray1[3] = 2740.527F;
      floatArray1[4] = 2740.527F;
      floatArray1[6] = 2740.527F;
      floatArray1[7] = (-1168.27F);
      floatArray1[8] = (-1168.27F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {2740.527F, (-1168.27F), (-1168.27F), (-1168.27F), (-1168.27F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2740.527F, (-1168.27F), 2740.527F, 2740.527F, 2740.527F, 0.0F, 2740.527F, (-1168.27F), (-1168.27F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-618.53);
      doubleArray0[0] = (-618.53);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-618.53);
      doubleArray1[1] = (-618.53);
      doubleArray1[2] = (-618.53);
      doubleArray1[3] = (-618.53);
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 118;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "y+=]7ze&K;W^Pnj";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[5] = "=eo5h0R:QA^`";
      stringArray0[6] = "Z/He_GuZ~$^p<!";
      stringArray0[7] = "'&}";
      stringArray0[8] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(0.25534194707870483, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, 118);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "INCREASING";
      stringArray0[3] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 3084.0046291273, 626.0, 626.0, 626.0, 0.0);
      assertEquals(391876.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3720.617778895645;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3720.617778895645, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.3842996656634364E7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[][] doubleArray2 = new double[7][1];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 3720.617778895645, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1.3842996656634364E7, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 3720.617778895645, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1.3842996656634364E7, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.3839276038855469E7, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3720.617778895645}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3720.617778895645}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3842996656634364E7, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3842996656634364E7, 0.0, 3720.617778895645}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray3.length);
      
      double double1 = MathArrays.linearCombination(320.04039457, 0.0, 3720.617778895645, 0.1111111111111111, (-0.16666666666666666), (-2515.221102));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(832.6054924328494, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (-2122.73F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-2122.73F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = 60.40267F;
      floatArray0[2] = 1560.1339F;
      floatArray0[3] = 60.40267F;
      floatArray0[4] = (-840.1038F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 60.40267F, 1560.1339F, 60.40267F, (-840.1038F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-840.1038F);
      doubleArray0[1] = (double) 1560.1339F;
      doubleArray0[2] = (double) (-840.1038F);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 60.40267F;
      floatArray0[2] = 1560.1339F;
      Integer integer0 = new Integer(134217729);
      assertNotNull(integer0);
      assertEquals(134217729, (int)integer0);
      
      Integer integer1 = new Integer(134217729);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(134217729, (int)integer1);
      
      Integer integer2 = new Integer(1051);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1051, (int)integer2);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer2;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      Integer integer3 = new Integer((-3148));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-3148), (int)integer3);
      
      integerArray0[5] = integer3;
      Integer integer4 = new Integer(8);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(8, (int)integer4);
      
      integerArray0[6] = integer4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = MathArrays.linearCombination(490.8584073464102, 490.8584073464102, 0.375, 0.375, 4602.710365856082, (-2855.901937), 4602.710365856082, 2.17333333333333325E18);
      assertEquals(1.000322386179387E22, double0, 0.01);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(134217729);
      assertNotNull(integer0);
      assertEquals(134217729, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(134217729, (int)integer1);
      assertEquals(3, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3219));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-3219), (int)integer2);
      
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, false);
      assertTrue(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertEquals(3, integerArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = 4602.710365856082;
      doubleArray0[2] = 2467.12861;
      doubleArray0[3] = (-2855.901937);
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection2, false, false);
      assertArrayEquals(new double[] {1.34217729E8, 4602.710365856082, 2467.12861, (-2855.901937)}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertTrue(boolean2);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 4602.710365856082, 2467.12861, (-2855.901937)}, doubleArray0, 0.01);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 428L;
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 0L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray1[7] = 0L;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 428L;
      doubleArray0[4] = (double) 428L;
      doubleArray0[5] = (-1076.5392363594);
      doubleArray0[6] = (double) 428L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = 135.5899;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 428.0, 428.0, (-1076.5392363594), 428.0, 0.0, 135.5899}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1076.5392363594);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1076.5392363594)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 428.0, 428.0, (-1076.5392363594), 428.0, 0.0, 135.5899}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertEquals(1, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1076.5392363594)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-1076.5392363594)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 428L;
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "b4?rQ8'5ek";
      stringArray0[6] = stringArray0[5];
      stringArray0[7] = "";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3084.0046291273;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3084.0046291273;
      double[] doubleArray2 = MathArrays.scale(3084.0046291273, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 3084.0046291273}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 9511084.552478617}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 3084.0046291273);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 3084.0046291273}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 9511084.552478617}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 3084.0046291273}, doubleArray3, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.convolve(doubleArray3, doubleArray0);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {3084.0046291273, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3084.0046291273}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 9511084.552478617}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 3084.0046291273}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 9511084.552478617, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertEquals(10, doubleArray4.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1668.3F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1734.7F;
      floatArray0[3] = (-1591.9491F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {1668.3F, (-1.0F), 1734.7F, (-1591.9491F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 321;
      intArray0[2] = 2144082966;
      intArray0[3] = (-3037);
      intArray0[4] = (-748);
      intArray0[5] = 14;
      intArray0[6] = (-1999);
      intArray0[7] = (-2168);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {4, 321, 2144082966, (-3037), (-748), 14, (-1999), (-2168)}, intArray0);
      assertArrayEquals(new int[] {4, 321, 2144082966, (-3037), (-748), 14, (-1999), (-2168)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1716.2261042696;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1716.2261042696}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2945432.040976408}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {1716.2261042696}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2945432.040976408}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1716.2261042696}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.scale((-630.486218), doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1716.2261042696}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2945432.040976408}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.8570543078912365E9)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-630.486218);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-630.486218);
      doubleArray3[3] = (-630.486218);
      doubleArray3[4] = 1716.2261042696;
      doubleArray3[5] = (-630.486218);
      doubleArray3[6] = 1716.2261042696;
//      try { 
        MathArrays.checkPositive(doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -630.486 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 0L;
      longArray1[1] = 428L;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 0L;
      longArray2[7] = 0L;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = 428L;
      longArray3[1] = 0L;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.checkNonNegative(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray3));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(8, longArray2.length);
      
      double[] doubleArray2 = MathArrays.scale(4409391.382669103, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4586);
      intArray0[2] = 6;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.valueOf("INCREASING");
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5.865827662008209E-8;
      doubleArray0[1] = 6.52E18;
      doubleArray0[2] = (-1237.0);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4564);
      intArray0[2] = 0;
      intArray0[3] = (-1110);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-4564);
      doubleArray0[1] = (double) (-1110);
      doubleArray0[2] = (double) (-1110);
      doubleArray0[3] = (double) (-1110);
      doubleArray0[4] = (double) (-4564);
      doubleArray0[5] = (double) (-1110);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-4564.0), (-1110.0), (-1110.0), (-1110.0), (-4564.0), (-1110.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "1jCJ";
      stringArray0[2] = "window size must be positive ({0})";
      stringArray0[3] = "&13@jP#22";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, stringArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean2);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = 60.40267F;
      floatArray0[2] = 1560.1339F;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 60.40267F;
      doubleArray0[2] = (double) 1560.1339F;
      doubleArray0[3] = (double) 428L;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 60.402671813964844, 1560.1339111328125, 428.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 60.402671813964844, 1560.1339111328125, 428.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 60.402671813964844, 1560.1339111328125, 428.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 60.402671813964844, 1560.1339111328125, 428.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[3][5];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
      assertArrayEquals(new double[] {(-1.0), 60.402671813964844, 428.0, 1560.1339111328125}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 60.402671813964844, 1560.1339111328125, 428.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      
//      try { 
        MathArrays.checkPositive(doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 428L;
      longArray2[2] = 428L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[7] = 0L;
      longArray0[2] = longArray3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "out of bounds significance level {0}, must be between {1} and {2}";
      stringArray0[1] = "";
      stringArray0[2] = "overflow: lcm({0}, {1}) is 2^31";
      stringArray0[3] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-189.801252369);
      doubleArray0[2] = (double) 0L;
      double[][] doubleArray1 = new double[0][0];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 0.0, (-189.801252369)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 2146461452;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146461452, 2146461452);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1110);
      floatArray0[1] = (float) 428L;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 1L;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-1110.0F), 428.0F, 0.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((double) 2233, (-522.3325), (double) 2233, 0.0, 3406.4439439243756, (-1868.952505714085));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-7532850.417072032), double1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 2233;
      intArray0[2] = (-828);
      intArray0[3] = (-828);
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1), 2233, (-828), (-828)}, intArray0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(4, intArray0.length);
      
      double double3 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double4 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double5 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4564);
      intArray0[2] = 0;
      intArray0[3] = (-1110);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[0] = 3.141592653589793;
      double double0 = MathArrays.linearCombination((-2365.63229), (-1.0), Double.NaN, 3.141592653589793, (-1.0), 524.45201);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.141592653589793, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3.141592653589793, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 428L;
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[7] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 428L;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "NEGATIVE_NUMBER_OF_TRIALS";
      stringArray0[1] = "5";
      stringArray0[3] = "d";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(3171.834837, (-0.3058015757857271), (-1531.6049113), Double.NaN, 3171.834837, 3171.834837, 876.8, 876.8);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = 490.8584073464102;
      double double1 = MathArrays.linearCombination(490.8584073464102, 3254.537986169076, (-2682.671253), 2021.1595687501801, (-2682.671253), 0.5850973129272461, 5204417.12484499, 8.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3.780917803474568E7, double1, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "NCREAING";
      stringArray0[1] = "8`!B7as938.H}X2";
      stringArray0[2] = "NCREAING";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      int int0 = 260;
      Integer integer0 = new Integer(260);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(260, (int)integer0);
      
      int int1 = (-1183);
      Integer integer1 = new Integer((-1183));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertEquals((-1183), (int)integer1);
      
      int int2 = 7;
      Integer integer2 = new Integer(7);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(7, (int)integer2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection1, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = MathArrays.linearCombination(490.8584073464102, 490.8584073464102, 0.375, 0.375, 4602.710365856082, (-2855.901937), 4602.710365856082, 2.17333333333333325E18);
      assertEquals(1.000322386179387E22, double0, 0.01);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(134217729);
      assertNotNull(integer0);
      assertEquals(134217729, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(134217729, (int)integer1);
      assertEquals(3, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3219));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-3219), (int)integer2);
      
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, false);
      assertTrue(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(431.678049522, 632.480998508303, 431.678049522, 1.0);
      assertEquals(273459.8418453132, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 431.678049522;
      doubleArray0[2] = 632.480998508303;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 431.678049522;
      doubleArray0[5] = 1912.0;
      doubleArray0[6] = (-3.356118100840571E-7);
      doubleArray0[7] = 595.281931;
      doubleArray0[8] = 431.678049522;
//      try { 
        MathArrays.convolve((double[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4564);
      intArray0[2] = 0;
      intArray0[3] = (-1110);
      intArray0[4] = 4964;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-4564), 0, 0, (-1110), 4964}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 0, 2.17333333333333325E18, 1999.123602, 1.34217729E8);
      assertEquals(2.6831782985073984E11, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NaN;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 0.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      float float0 = 60.40267F;
      floatArray0[1] = 60.40267F;
      floatArray0[2] = 1560.1339F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-840.1038F);
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 431.678049522;
      doubleArray0[1] = 1850.51015;
      doubleArray0[2] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {431.678049522, 1850.51015, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertArrayEquals(new double[] {431.678049522, 1850.51015, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (431.678 <= 1,850.51)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long long0 = 428L;
      long long1 = 0L;
      longArray0[1] = longArray1;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 3 while others have length 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(3.834E-20, (-642.9705084184831), (-1572.81112269457), (-1468.8), (-789.867), (-642.9705084184831));
      assertEquals(2818006.1635867665, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-3815);
      intArray0[1] = (-1142);
      intArray0[2] = 9;
      intArray0[3] = 1727;
      intArray0[4] = 8;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-3815), (-1142), 9, 1727, 8}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4564);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-4564);
      doubleArray0[3] = 889.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, (-4564.0), 889.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertArrayEquals(new double[] {0.0, 0.0, (-4564.0), 889.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2861.2422491216));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-4564.0), 889.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-3553.390374147206), 692.1481250256061}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[4];
      doubleArray2[0] = (Double) 0.0;
      doubleArray2[1] = (Double) 0.0;
      doubleArray2[2] = (Double) 0.0;
      doubleArray2[3] = (Double) 0.0;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection1, true);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean2);
      assertEquals(4, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1075.7);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1075.7)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1075.7)}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1075.7)}, doubleArray0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-828);
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1110);
      intArray1[1] = (-828);
      intArray1[2] = (-828);
      intArray1[3] = 4964;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-4564);
      intArray0[0] = (-4564);
      int int1 = (-3877);
      int int2 = 258;
      double double0 = MathArrays.linearCombination((-1.0), (double) (-1), (double) 258, (double) (-3877), (-1.0), 2722.8515727334216);
      assertEquals((-1002987.8515727334), double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-4564), 0, 0, 0, 0}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-630.486218);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 0.0, (-630.486218), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-630.486218), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, 0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, (-630.486218), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, 0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-62);
      intArray0[3] = 134217729;
      intArray0[4] = 2028;
      intArray0[5] = 2;
      intArray0[6] = (-1146);
      intArray0[7] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 2, (-62), 134217729, 2028, 2, (-1146), (-1)}, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2028;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (-1245.98);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-62);
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (2,028 >= 2)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1081.601463;
      doubleArray0[1] = 854.68276864;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1081.601463, 854.68276864}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {1081.601463, 854.68276864}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      int int0 = 2;
      intArray0[1] = 2;
      intArray0[2] = (-62);
      intArray0[3] = 134217729;
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(3, (int)integer0);
      
      Integer integer1 = new Integer((-2138932759));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2138932759), (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[1] = (Integer) 134217729;
      integerArray0[2] = (Integer) 2;
      integerArray0[3] = (Integer) 2;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) (int)integerArray0[0];
      doubleArray0[2] = (double) int0;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly decreasing (-2,138,932,759 <= 2)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = 60.40267F;
      floatArray0[2] = 1560.1339F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-840.1038F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 60.40267F, 1560.1339F, (-1.0F), (-840.1038F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "&13@jP#22";
      stringArray0[2] = "";
      stringArray0[3] = "window size must be positive ({0})";
      stringArray0[4] = "1jCJ";
      stringArray0[5] = ".Ww_9,A;3jBY%q";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, stringArray0.length);
      
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "INCREASING";
      stringArray0[2] = "INCREASING";
      stringArray0[3] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.valueOf("INCREASING");
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5.865827662008209E-8;
      doubleArray0[1] = 6.52E18;
      doubleArray0[2] = (-1237.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-630.486218);
      doubleArray0[5] = (-858.1130521348);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {5.865827662008209E-8, 6.52E18, (-1237.0), (-1.0), (-630.486218), (-858.1130521348)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1731655324016419E-7, 1.304E19, (-2474.0), (-2.0), (-1260.972436), (-1716.2261042696)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[][] doubleArray2 = new double[6][1];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-1237.0), 6.52E18, (-630.486218), (-1.0), 5.865827662008209E-8, (-858.1130521348)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-1237.0), 6.52E18, (-630.486218), (-1.0), 5.865827662008209E-8, (-858.1130521348)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1731655324016419E-7, (-1716.2261042696), (-2474.0), (-2.0), (-1260.972436), 1.304E19}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "INCREASING";
      stringArray0[2] = "INCREASING";
      stringArray0[3] = "INCREASING";
      stringArray0[4] = "INCREASING";
      stringArray0[5] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = (-4564);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-4564);
      doubleArray0[2] = (-1828.1334004);
      doubleArray0[3] = (double) (-4564);
      doubleArray0[4] = (-1828.1334004);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1505.420678812351;
      doubleArray0[7] = 1505.420678812351;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1505.420678812351;
      MathArrays.equals(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = ")r!";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray2 = MathArrays.scale(Double.NaN, doubleArray0);
//      try { 
        MathArrays.normalizeArray(doubleArray2, 0.0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[7][3];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.14285714285714285;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = 2.608E18;
      doubleArray1[3] = 1349.3;
      doubleArray0[2] = doubleArray1;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1729.7475237932956;
      doubleArray0[2] = (-630.486218);
      doubleArray0[3] = (-3.141592653589793);
      MathArrays.copyOf(doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-630.486218);
      doubleArray1[2] = (-168.482);
      doubleArray1[3] = (-630.486218);
      doubleArray1[4] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray1);
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 4964;
      intArray0[1] = (-1);
      intArray0[2] = 4964;
      intArray0[3] = 0;
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = (-1110);
      intArray1[2] = (-1);
      intArray1[3] = (-1110);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(12148, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 4964;
      doubleArray0[3] = (double) 4964;
      doubleArray0[4] = (double) (-1110);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1110);
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 60.40267F;
      floatArray0[2] = 1560.1339F;
      floatArray0[3] = (-1.0F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1477L);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-840.1038F);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 1L;
      doubleArray0[8] = (double) (-1477L);
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-630.486218);
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1729.7475237932956;
      doubleArray1[1] = 0.0;
      MathArrays.scale(1.304E19, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (1,729.748 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2146461452, 2146461452);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3720.617778895645;
      doubleArray0[1] = (-2861.508);
      doubleArray0[2] = 2709.13;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(169);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1075.7);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-828);
      intArray0[1] = 2233;
      intArray0[2] = (-3877);
      intArray0[3] = (-1);
      intArray0[4] = 258;
      MathArrays.linearCombination((-1075.7), (double) 2233, (double) 2233, 0.008333333333333333, 2053.998939, (double) 258);
      MathArrays.OrderDirection.values();
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1180.473);
      doubleArray0[1] = 1733.1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3.141592653589793);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      long[][] longArray0 = new long[6][7];
      long[] longArray1 = new long[1];
      longArray1[0] = 2546L;
      longArray0[0] = longArray1;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1180.473);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-1180.473);
      doubleArray1[6] = (double) 2546L;
      MathArrays.distanceInf(doubleArray0, doubleArray1);
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[5] = 0;
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 247L;
      long long0 = 2769L;
      longArray0[1] = 2769L;
      longArray0[2] = (-1978L);
      long long1 = 11L;
      longArray0[3] = 11L;
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1075.7);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-828);
      intArray0[1] = 2233;
      intArray0[2] = (-3877);
      intArray0[3] = 2233;
      intArray0[4] = 258;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-790);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-790), (-790));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[2] = 134217729;
      intArray0[4] = 2028;
      intArray0[5] = 2;
      intArray0[6] = (-1146);
      intArray0[7] = (-1);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (-1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][4];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 2028;
      doubleArray2[4] = (double) 134217729;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) (-62);
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1180.473);
      doubleArray0[1] = 1733.1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3.141592653589793);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      long[][] longArray0 = new long[6][7];
      long[] longArray1 = new long[1];
      longArray1[0] = 2546L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = 2546L;
      longArray2[1] = 2546L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = 2546L;
      longArray3[1] = 2546L;
      longArray3[2] = 2546L;
      longArray3[3] = 2546L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2546L);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-5469.634348460982), 8030.190685697791, 0.0, (-14.55633723680882)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1133.8);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1994.93);
      doubleArray0[3] = (-4396.890463381);
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3084.0046291273;
      doubleArray0[1] = 3600.640085454;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[][] doubleArray2 = new double[4][1];
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 3600.640085454;
      doubleArray3[1] = 0.0;
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 3084.0046291273;
      doubleArray4[1] = 3084.0046291273;
      doubleArray4[2] = 3600.640085454;
      doubleArray2[3] = doubleArray4;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MathArrays.linearCombination(0.0, 919.20361753, 1.304E19, 0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-534.8517725648);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3720.617778895645;
      doubleArray0[1] = (-2861.508);
      doubleArray0[2] = 2709.13;
      doubleArray0[3] = (-4570.325146);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[3][0];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1.0;
      doubleArray2[2] = doubleArray3;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1075.7);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-828);
      intArray0[1] = 2233;
      intArray0[2] = (-3877);
      intArray0[3] = (-1);
      intArray0[4] = 258;
      intArray0[5] = 1037;
      intArray0[6] = 503;
      intArray0[7] = 1828;
      intArray0[8] = 224;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-828), 2233, (-3877), (-1), 258, 1037, 503, 1828, 224}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[6];
      intArray2[0] = 224;
      intArray2[1] = 2;
      intArray2[2] = 258;
      intArray2[3] = 1037;
      intArray2[4] = 503;
      intArray2[5] = 2233;
      int int0 = MathArrays.distanceInf(intArray2, intArray1);
      assertEquals(4135, int0);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2099.854848;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 3.834E-20;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 2 and 3 are not increasing (2,099.855 > -1)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 431.678049522;
      doubleArray0[1] = 1850.51015;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-3984.6);
      doubleArray0[4] = 0.0;
      MathArrays.copyOf(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1133.8);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1994.93);
      doubleArray0[3] = (-4396.890463381);
      doubleArray0[4] = 3.32;
      doubleArray0[5] = (-2764.11);
      doubleArray0[6] = 5143.5182484191;
      doubleArray0[7] = 467.775709005325;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1994.93));
      assertArrayEquals(new double[] {(-483.90998194365795), 0.42680365315192975, (-851.4434117823793), (-1876.608912279892), 1.4169881284644066, (-1179.7322457137807), 2195.272378478887, 199.64838145920675}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2266.853456058149);
      doubleArray0[1] = 2170.919425693;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(169);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = 104.862;
      // Undeclared exception!
//      try { 
        MathArrays.scale(104.862, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[][] longArray0 = new long[2][6];
      long[] longArray1 = new long[8];
      longArray1[0] = (-1084L);
      longArray1[1] = 0L;
      longArray1[2] = (-2954L);
      longArray1[3] = 1L;
      longArray1[4] = (-1L);
      longArray1[5] = 262L;
      longArray1[6] = 1358L;
      longArray1[7] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 0L;
      longArray2[1] = (-1084L);
      longArray2[2] = 262L;
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 4 while others have length 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2689.6218997924;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-527.2);
      doubleArray0[4] = 3577.132963255;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 2516.9725308557763;
      doubleArray0[7] = (-1167.3759714);
      doubleArray0[8] = 30.91953378959;
      MathArrays.distance(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[5][8];
      long[] longArray1 = new long[3];
      longArray1[0] = 4503599627370495L;
      longArray1[1] = 713L;
      longArray1[2] = 785L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = 785L;
      longArray2[1] = (-274L);
      longArray2[2] = 100L;
      longArray2[3] = 4503599627370495L;
      longArray2[4] = 4503599627370495L;
      longArray2[5] = 785L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = (-274L);
      longArray3[1] = 785L;
      longArray3[2] = (-274L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = (-274L);
      longArray4[1] = 785L;
      longArray4[2] = 713L;
      longArray4[3] = 785L;
      longArray4[4] = 4503599627370495L;
      longArray4[5] = (-274L);
      longArray4[6] = 100L;
      longArray4[7] = 785L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[4] = longArray5;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 6 while others have length 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 70;
      intArray0[1] = (-3031);
      intArray0[2] = 0;
      intArray0[3] = 11;
      intArray0[4] = 1251;
      intArray0[5] = 4038;
      intArray0[6] = 575;
      intArray0[7] = (-329);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {70, (-3031), 0, 11, 1251, 4038, 575, (-329)}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 70;
      doubleArray0[2] = (double) 4038;
      doubleArray0[3] = (double) 11;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 4038;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 11;
      doubleArray0[8] = (double) 70;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 4900.0, 1.6305444E7, 121.0, 0.0, 1.6305444E7, 0.0, 121.0, 4900.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1081.601463;
      doubleArray0[1] = 854.68276864;
      MathArrays.checkPositive(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 3393;
      intArray0[1] = 909;
      intArray0[2] = 2;
      intArray0[3] = 132;
      intArray0[4] = 3153;
      intArray0[5] = 0;
      intArray0[6] = 2314;
      MathArrays.distance(intArray0, intArray0);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<String>) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "WO";
      stringArray0[1] = "N?F%";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[3] = ";j{:W";
      stringArray0[4] = ")ay=fDxD&S<7rHhg^%v";
      stringArray0[5] = "CANNOT_FORMAT_INSTANCE_AS_COMPLEX";
      stringArray0[0] = "V?K?wH3_x>]%1+";
      stringArray0[4] = "/6%Y/69c.";
      int int0 = (-1075);
      Field<String> field0 = null;
      int int1 = 415;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<String>) null, 415, (-1075));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-790);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-790), (-790));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 3084.0046291273;
      doubleArray0[0] = 3084.0046291273;
      double double1 = 3600.640085454;
      doubleArray0[1] = 3600.640085454;
      double double2 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 291.59;
      double double3 = 1054.584;
      doubleArray0[6] = 1054.584;
      doubleArray0[7] = 1505.420678812351;
      doubleArray0[8] = (-1828.1334004);
      MathArrays.equals(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = ")r!";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.scale(0.0, doubleArray0);
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long[][] longArray0 = new long[8][2];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 1L;
      longArray1[2] = (-370L);
      longArray1[3] = 607L;
      longArray1[4] = 1543L;
      longArray1[5] = 227L;
      longArray1[6] = 257L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = 1543L;
      longArray3[1] = 1575L;
      longArray3[2] = 257L;
      longArray3[3] = 607L;
      longArray3[4] = 1L;
      longArray3[5] = 1L;
      longArray3[6] = 0L;
      longArray3[7] = 257L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 607L;
      longArray4[1] = 257L;
      longArray4[2] = 227L;
      longArray4[3] = 0L;
      longArray4[4] = 607L;
      longArray4[5] = 1575L;
      longArray4[6] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      longArray5[0] = 1543L;
      longArray5[1] = 1543L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = (-370L);
      longArray6[1] = 1575L;
      longArray6[2] = 607L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      longArray7[0] = (-370L);
      longArray7[1] = 257L;
      longArray7[2] = 0L;
      longArray7[3] = (-2920L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[5];
      longArray8[0] = 0L;
      longArray8[1] = 257L;
      longArray8[2] = 1543L;
      longArray8[3] = 1L;
      longArray8[4] = 227L;
      longArray0[7] = longArray8;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -370 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 247L;
      long long0 = 2769L;
      longArray0[1] = 2769L;
      longArray0[2] = (-1978L);
      long long1 = 11L;
      longArray0[3] = 11L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,978 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 617.6;
      doubleArray0[1] = 3.32;
      doubleArray0[2] = 2941.633722;
      doubleArray0[3] = 3069.558742270674;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 374.0548358125447;
      doubleArray0[6] = 779.3799066;
      doubleArray0[7] = 0.0;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[7];
      longArray1[0] = 1967L;
      longArray1[1] = (-269L);
      longArray1[2] = 0L;
      longArray1[3] = 2132L;
      longArray1[4] = 4503599627370495L;
      longArray1[5] = 0L;
      longArray1[6] = 1023L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-596.44337523);
      doubleArray0[1] = 1473.6939;
      MathArrays.safeNorm(doubleArray0);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.checkOrder(doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-202.6);
      doubleArray0[3] = (-1442.688);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-408.88257);
      doubleArray0[2] = 2821.379854339;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 2483.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3027.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 1.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not decreasing (-408.883 < 2,821.38)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double double1 = -0.0;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double2 = 0.0;
      doubleArray0[5] = 0.0;
      double double3 = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2308);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2308));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^9h6D1F`*[KHFT";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1057.0472);
      doubleArray0[4] = 15.9944265;
      doubleArray0[5] = (-973.11737);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 15;
      intArray0[1] = 1968;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 217;
      intArray0[5] = 38;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 38);
      assertEquals(38, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4564);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1110);
      intArray0[4] = 4964;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1133.8);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1994.93);
      doubleArray0[3] = (-4396.890463381);
      doubleArray0[4] = 3.32;
      doubleArray0[5] = (-2764.11);
      doubleArray0[6] = 5143.5182484191;
      doubleArray0[7] = (-1133.8);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1994.93));
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(1.906640490184529E7, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1494.2146851892307), 1.3178820649049487, (-2629.0824677408295), (-5794.583083041429), 4.37536845548443, (-3642.770994424418), 6778.550450102848, (-1494.2146851892307)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-360.41468518923085), 0.3178820649049487, (-634.1524677408294), (-1397.6926196604288), 1.0553684554844296, (-878.6609944244178), 1635.0322016837486, (-360.41468518923085)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination((double) 258, (-522.3325), (double) 258, 0.4578534358405052, 3406.4439439243756, (-1868.952505714085));
      assertEquals((-6501125.603385584), double0, 0.01);
      
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 2233;
      intArray0[2] = (-828);
      intArray0[3] = (-828);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.distance(doubleArray0, doubleArray0);
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double3, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 919.20361753;
      double double2 = 1.304E19;
      MathArrays.linearCombination(0.0, 919.20361753, 1.304E19, (-1336.7));
      double double3 = 0.0;
      double[] doubleArray0 = new double[9];
      double double4 = (-534.8517725648);
      doubleArray0[0] = (-534.8517725648);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-1.7430568E22);
      doubleArray0[3] = (-1.7430568E22);
      doubleArray0[4] = 745.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 919.20361753;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.safeNorm(doubleArray1);
      MathArrays.distanceInf(doubleArray1, doubleArray0);
      MathArrays.ebeAdd(doubleArray1, doubleArray0);
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 3580.86597811;
      doubleArray0[4] = 2997.096719697257;
      doubleArray0[5] = 146.90536114983;
      doubleArray0[6] = (-901.8344465545468);
      doubleArray0[7] = 1679.63;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][7];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray0);
      double[] doubleArray4 = MathArrays.scale(1679.63, doubleArray3);
      assertArrayEquals(new double[] {(-4544244.57439924), 0.0, 0.0, 740239.9552442668, 8463470.810700001, 1.5102040689915314E7, 1.80435897684387E7, Double.NaN}, doubleArray4, 0.01);
      
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 3580.86597811;
      doubleArray5[1] = Double.NaN;
      double[] doubleArray6 = MathArrays.copyOf(doubleArray5);
      assertArrayEquals(new double[] {3580.86597811, Double.NaN}, doubleArray6, 0.01);
      assertNotSame(doubleArray5, doubleArray6);
      
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[4];
      intArray0[0] = 854;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 70;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 2028;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2028;
      floatArray0[1] = (float) 2028;
      floatArray0[2] = (float) 2028;
      floatArray0[3] = (float) 2028;
      floatArray0[4] = (float) 2028;
      MathArrays.equals(floatArray0, floatArray0);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Double>) null, 269);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1081.601463;
      doubleArray0[1] = 854.68276864;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1900344.359773876, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1426.2765578198143;
      doubleArray0[1] = (-3411.0);
      doubleArray0[2] = (-1418.1677583365);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-652.0218435192);
      doubleArray0[5] = 1716.440022486288;
      doubleArray0[6] = 0.0;
      double double0 = (-698.14836700144);
      doubleArray0[7] = (-698.14836700144);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.linearCombination(doubleArray1, doubleArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      MathArrays.equals(floatArray0, floatArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 644);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = (-4982.6F);
      floatArray0[0] = (-4982.6F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 1.34217729E8;
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[6][8];
      long[] longArray1 = new long[3];
      longArray1[0] = 1L;
      longArray1[1] = 0L;
      longArray1[2] = (-181L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 0L;
      longArray2[1] = (-181L);
      longArray2[2] = (-181L);
      longArray2[3] = (-181L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = (-181L);
      longArray3[1] = (-181L);
      longArray3[2] = (-181L);
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 1L;
      longArray3[6] = (-181L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      longArray5[0] = 1L;
      longArray5[1] = (-181L);
      longArray5[2] = 1L;
      longArray5[3] = (-181L);
      longArray5[4] = 0L;
      longArray5[5] = 1L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = (-181L);
      longArray0[5] = longArray6;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 4 while others have length 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
//      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 0L;
      longArray2[1] = 428L;
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = 0L;
      longArray3[1] = 428L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[6] = 428L;
      longArray3[7] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 428L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray4[5] = 428L;
      longArray4[6] = 0L;
      longArray0[3] = longArray4;
      MathArrays.checkNonNegative(longArray0);
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 3 while others have length 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1729.7475237932956;
      doubleArray0[2] = (-630.486218);
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3720.617778895645;
      doubleArray0[1] = (-2861.508);
      doubleArray0[2] = 2709.13;
      doubleArray0[3] = (-4570.325146);
      doubleArray0[4] = 3224.3063827446;
      doubleArray0[5] = (-1221.052821298305);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1622.23940937637);
      doubleArray0[8] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 417.82F;
      floatArray0[2] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-5239);
      intArray0[0] = (-5239);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-5239));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1349.3;
      doubleArray0[1] = (-46.607581097);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-658.0);
      doubleArray0[4] = (-208.5);
      doubleArray0[5] = 1.0E-5;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -46.608 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 267.06169;
      doubleArray0[2] = (-118.704344251);
      doubleArray0[3] = 921.7320233145543;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1180.473);
      doubleArray0[1] = 1733.1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3.141592653589793);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      long[][] longArray0 = new long[6][7];
      long[] longArray1 = new long[1];
      longArray1[0] = 2546L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = 2546L;
      longArray2[1] = 2546L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = 2546L;
      longArray3[1] = 2546L;
      longArray3[2] = 2546L;
      longArray3[3] = 2546L;
      longArray3[4] = (-2528L);
      longArray3[5] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = 2546L;
      longArray5[1] = 2546L;
      longArray5[2] = 0L;
      longArray5[3] = 100L;
      longArray5[4] = (-2528L);
      longArray5[5] = (-2528L);
      longArray5[6] = (-2528L);
      longArray5[7] = 0L;
      longArray5[8] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = 0L;
      longArray6[1] = 2546L;
      longArray6[2] = (-2528L);
      longArray6[3] = 100L;
      longArray6[4] = 2546L;
      longArray6[5] = 2546L;
      longArray0[5] = longArray6;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 2 while others have length 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
