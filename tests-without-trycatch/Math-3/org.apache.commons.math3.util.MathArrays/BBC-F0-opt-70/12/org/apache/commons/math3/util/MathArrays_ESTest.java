/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 01:05:21 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 522.3171827362602;
      doubleArray0[1] = 522.3171827362602;
      doubleArray0[2] = 177.22691;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 33.1622215906498;
      doubleArray0[5] = 2.17333333333333325E18;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 2465.088321055147;
      doubleArray0[8] = 3.834E-20;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1198.7998034334978);
      doubleArray0[1] = 3873.684131789;
      doubleArray0[2] = 6.52E18;
      doubleArray0[3] = (-1.9841269659586505E-4);
      doubleArray0[4] = 5929.4094092;
      doubleArray0[5] = (-3382.3238518669045);
      doubleArray0[6] = (-61.5);
      doubleArray0[7] = 1.304E19;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MathArrays.OrderDirection.values();
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-1088);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1088));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 917.574424;
      doubleArray0[1] = 0.16666666666666666;
      doubleArray0[2] = (-1842.00727906);
      doubleArray0[3] = (-43.2656275245439);
      int int0 = 215;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 215);
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 134217729, (-1508));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((FieldElement<Double>) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 242, 242);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MathArrays.OrderDirection.values();
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.buildArray(field0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2007.41596);
      doubleArray1[1] = (-2007.41596);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-2007.41596);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 0;
      MathArrays.scaleInPlace((-2007.41596), doubleArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1.2205317017689141);
      doubleArray1[1] = 89.77501128287086;
      doubleArray1[2] = 1753.1287841796875;
      doubleArray1[3] = 0.7316888570785522;
      doubleArray1[4] = 5.650007086920087E-9;
      doubleArray1[5] = 4.116164446561962E-8;
      doubleArray1[6] = 2.2860509143963117E-8;
      doubleArray1[7] = Double.POSITIVE_INFINITY;
      doubleArray1[8] = 1.34217729E8;
      MathArrays.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1.5341299599999998, (double) 0, (double) 0, 0.0, 1.5341299599999998, 0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.184154459111628E-8;
      doubleArray0[1] = (-3268.786962);
      doubleArray0[2] = 0.625;
      doubleArray0[3] = (-2403.2833492536106);
      doubleArray0[4] = (-1361.083235043114);
      doubleArray0[5] = (-855.027379512);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.304E19;
      MathArrays.copyOf(doubleArray0);
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2146803026;
      intArray0[1] = (-4934);
      intArray0[2] = 3121;
      intArray0[3] = 2145964922;
      intArray0[4] = 139;
      int[] intArray1 = new int[8];
      intArray1[0] = 3121;
      intArray1[1] = 2146803026;
      intArray1[2] = 2146803026;
      intArray1[3] = (-4934);
      doubleArray0[5] = (double) 2146803026;
      intArray1[5] = 2146803026;
      intArray1[6] = 23;
      intArray1[7] = 3121;
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double double0 = new Double((-45.2938101));
      Double double1 = new Double((-942.358103));
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) doubleArray0[0];
      doubleArray1[1] = (-45.2938101);
      doubleArray1[2] = (-45.2938101);
      doubleArray1[3] = (-942.358103);
      doubleArray1[4] = (-45.2938101);
      doubleArray1[5] = (-942.358103);
      doubleArray1[6] = (double) doubleArray0[0];
      MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-338.224F);
      floatArray0[2] = (-640.676F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1926.4467F);
      floatArray0[6] = (-961.0F);
      floatArray0[7] = 1.4E-45F;
      float[] floatArray1 = new float[8];
      floatArray1[0] = (-1926.4467F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1.4E-45F;
      floatArray1[3] = (-961.0F);
      floatArray1[4] = 0.0F;
      floatArray1[5] = (-338.224F);
      floatArray1[6] = (-1.0F);
      floatArray1[7] = (-3.4028235E38F);
      MathArrays.equals(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 477.474926194046;
      doubleArray1[1] = (-291.7145);
      doubleArray1[2] = (-1080.292);
      doubleArray1[3] = 6.52E18;
      doubleArray1[4] = (-3480.381357927793);
      doubleArray1[5] = 1.9987994582857286E-8;
      doubleArray1[6] = 4.3466666666666665E18;
      doubleArray1[7] = (-1712.41429);
      doubleArray1[8] = 3303.0;
      MathArrays.safeNorm(doubleArray1);
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      MathArrays.equals(floatArray0, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 4674.386F;
      floatArray0[2] = 437.291F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1597.283F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 3.4028235E38F;
      floatArray0[8] = 1940.5F;
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 437.291F;
      floatArray1[3] = 4674.386F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 3.4028235E38F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      int[] intArray0 = new int[1];
      intArray0[0] = 125;
      MathArrays.copyOf(intArray0, 125);
      MathArrays.equals(floatArray1, floatArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      float[] floatArray0 = new float[9];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.4E-45F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-239.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 624.88F;
      floatArray0[7] = 1.0F;
      floatArray0[8] = (-1.0F);
      MathArrays.equals((float[]) null, floatArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 2007.351035481;
      doubleArray0[1] = (-1116.5255569);
      doubleArray0[2] = 16.0;
      doubleArray0[3] = 0.70912673503341;
      doubleArray0[4] = 16.0;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 16.0;
      doubleArray1[1] = 16.0;
      doubleArray1[2] = 2618.7501873051124;
      doubleArray1[3] = 2618.7501873051124;
      doubleArray1[4] = 2618.7501873051124;
      doubleArray1[5] = 1410900.7884374622;
      doubleArray1[6] = (-1357.2);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2963;
      floatArray0[1] = (float) (-414);
      floatArray0[2] = (float) (-414);
      floatArray0[5] = (float) (-414);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2963;
      doubleArray0[1] = (double) 2963;
      doubleArray0[2] = (double) 2963.0F;
      double[] doubleArray1 = new double[0];
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 4538);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1541.825330750705;
      doubleArray0[2] = 719.6;
      doubleArray0[3] = (-2.5857668567479893E-8);
      doubleArray0[4] = 1467.3195503209;
      doubleArray0[5] = (-39.05438);
      doubleArray0[6] = (-3376.7657);
      doubleArray0[7] = (-1073.2);
      doubleArray0[8] = (-0.12502530217170715);
      double[][] doubleArray1 = new double[4][6];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[2];
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 800.938F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 606.0939F;
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      doubleArray0[1] = null;
      doubleArray0[1] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-419.837202);
      doubleArray0[2] = (-2079.1722240000004);
      doubleArray0[3] = (-1096.5023676456774);
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 0.3333333333332802;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
//      try { 
        MathArrays.normalizeArray(doubleArray0, (-1.7976931348623157E308));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1342.312204816166);
      doubleArray0[0] = double0;
      Double double1 = new Double(1342.312204816166);
      doubleArray0[1] = double1;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      MathArrays.ebeAdd(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = (-150);
      intArray0[2] = 1290;
      MathArrays.distance(intArray0, intArray0);
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[6];
      int int0 = (-1023);
      intArray0[0] = (-1023);
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = (-1727);
      intArray0[2] = (-1727);
      int int3 = 381;
      intArray0[3] = 381;
      int int4 = 266;
      intArray0[4] = 266;
      int int5 = 1804;
      intArray0[5] = 1804;
      MathArrays.copyOf(intArray0);
      double[] doubleArray2 = MathArrays.scale(381, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[3];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-0.09088450866185192);
      doubleArray0[1] = (-468.034134814028);
      doubleArray0[2] = (-1860.831180287);
      doubleArray0[3] = 78.44;
      doubleArray0[4] = 0.04168701738764507;
      doubleArray0[5] = (-520.45);
      doubleArray0[6] = 1.0977993619215528E7;
      doubleArray0[7] = 141.52404966617195;
      doubleArray0[8] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[0][6];
      MathArrays.checkRectangular(longArray0);
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.7976931348623157E308;
      doubleArray2[2] = (-1860.831180287);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double(1342.312204816166);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1342.312204816166;
      doubleArray0[1] = 1342.312204816166;
      doubleArray0[2] = 1342.312204816166;
      doubleArray0[3] = 1342.312204816166;
      doubleArray0[4] = 1342.312204816166;
      doubleArray0[5] = 1342.312204816166;
      double[] doubleArray1 = new double[0];
      MathArrays.equals(doubleArray0, doubleArray1);
      MathArrays.copyOf(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.26E18;
      doubleArray0[1] = 3.26E18;
      doubleArray0[2] = 3.26E18;
      doubleArray0[3] = 3.26E18;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Double double0 = new Double(1342.312204816166);
      Double double1 = new Double(1342.312204816166);
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      Double double2 = new Double(1.1456339191225166E13);
      doubleArray0[1] = double2;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      doubleArray0[7] = double0;
      doubleArray0[8] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) doubleArray0[6];
      doubleArray1[1] = (double) doubleArray0[4];
      MathArrays.scale((-104.7), doubleArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(347.22927071082);
      doubleArray0[0] = double0;
      Double double1 = new Double(2963);
      doubleArray0[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, (-1748.4), 0.0, 0.0, 60.38281967394822, 0.0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = 3.834E-20;
      doubleArray1[6] = 3.834E-20;
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract(doubleArray1, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Double double0 = new Double((-425.680121978888));
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double1 = new Double(1.34217729E8);
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      Double double2 = new Double(1.401298464324817E-45);
      doubleArray0[4] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = (double) 1.4E-45F;
      doubleArray1[2] = (double) doubleArray0[3];
      doubleArray1[3] = (double) 1.4E-45F;
      doubleArray1[4] = (double) doubleArray0[0];
      doubleArray1[5] = (-425.680121978888);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = Float.POSITIVE_INFINITY;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 1942.7413F;
      floatArray0[8] = 0.0F;
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1942.7413F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1.0F;
      floatArray1[4] = 1942.7413F;
      floatArray1[5] = 1.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = -0.0F;
      MathArrays.equals(floatArray0, floatArray1);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      MathArrays.checkPositive(doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1607);
      intArray0[1] = 1198;
      intArray0[2] = 746;
      intArray0[3] = (-826);
      intArray0[4] = 164;
      intArray0[5] = 1431655765;
      int int0 = 2956;
      intArray0[6] = 2956;
      intArray0[7] = 2942;
      intArray0[8] = 2945;
      int[] intArray1 = new int[7];
      intArray1[0] = 1198;
      intArray1[1] = 1198;
      intArray1[2] = 291;
      intArray1[3] = (-826);
      intArray1[4] = 2942;
      intArray1[5] = (-826);
      intArray1[6] = 746;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1372.5226F;
      floatArray0[2] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1372.5226F;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) (-1.0F);
      doubleArray1[4] = (double) 1372.5226F;
      doubleArray1[5] = (double) (-1.0F);
      doubleArray1[6] = (double) 0.0F;
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Double double0 = new Double(3952.35);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[8][4];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = null;
      doubleArray0[7] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2915;
      intArray0[1] = 1025;
      intArray0[2] = 934;
      intArray0[3] = 5;
      intArray0[4] = (-138);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1476.6042F);
      MathArrays.equals(floatArray0, floatArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 229);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Double double0 = new Double(347.031564504);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[6];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection1, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int[] intArray0 = new int[1];
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.copyOf(intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 987;
      MathArrays.distance(intArray0, intArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 987;
      floatArray0[1] = (float) 987;
      floatArray0[2] = (float) 987;
      floatArray0[3] = (float) 987;
      floatArray0[4] = (float) 987;
      floatArray0[5] = (float) 987;
      floatArray0[6] = (float) 987;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 987;
      intArray1[1] = 987;
      intArray1[2] = 987;
      intArray1[3] = 987;
      intArray1[4] = 987;
      intArray1[5] = 987;
      intArray1[6] = 987;
      intArray1[7] = 987;
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1059.7588));
      doubleArray0[0] = double0;
      Double double1 = new Double(579.66F);
      doubleArray0[1] = double1;
      Double double2 = new Double((-1772.0));
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      doubleArray0[3] = double3;
      Double double4 = new Double((-426.74854321551595));
      doubleArray0[4] = double4;
      Double double5 = new Double((-1059.7588));
      doubleArray0[5] = double5;
      Double double6 = new Double(2168.414330849);
      doubleArray0[6] = double6;
      Double double7 = new Double((-2846.27310337902));
      doubleArray0[7] = double7;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 5.865827662008209E-8;
      doubleArray1[1] = (double) 579.66F;
      doubleArray1[2] = (double) 579.66F;
      doubleArray1[3] = (-1059.7588);
      doubleArray1[4] = (-451.3543601536069);
      doubleArray1[5] = (double) doubleArray0[0];
      doubleArray1[6] = (double) doubleArray0[6];
      doubleArray1[7] = (double) doubleArray0[3];
      doubleArray1[8] = (double) doubleArray0[6];
      MathArrays.safeNorm(doubleArray1);
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 2 and 3 are not increasing (579.66 > -1,059.759)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      MathArrays.safeNorm(doubleArray0);
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2, 2146088272);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1445.6);
      doubleArray0[1] = (-426.74854321551595);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[1] = 3592;
      intArray0[2] = 2717;
      intArray0[3] = 27;
      int[] intArray1 = new int[9];
      intArray1[0] = 366;
      intArray1[2] = 3592;
      intArray1[3] = 3592;
      intArray1[4] = 3592;
      intArray1[6] = 3592;
      intArray1[7] = 3592;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(5148.909593302255, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double double0 = new Double(0.125);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double0;
      Double double1 = new Double((-1.0));
      doubleArray1[1] = double1;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      double[] doubleArray2 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Double double0 = new Double((-0.017105309156988602));
      Double double1 = new Double((-0.017105309156988602));
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1545.01F;
      floatArray0[3] = (-2270.3953F);
      floatArray0[4] = 0.0F;
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-2270.3953F);
      floatArray1[1] = 1545.01F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 158;
      int[] intArray1 = new int[7];
      intArray1[0] = 77;
      intArray1[1] = 158;
      intArray1[2] = 158;
      intArray1[3] = 158;
      intArray1[4] = 158;
      intArray1[5] = 158;
      intArray1[6] = 158;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(81, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2146064292), (-2146064292));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 897.61612352;
      doubleArray0[1] = 897.61612352;
      doubleArray0[2] = 897.61612352;
      doubleArray0[3] = 897.61612352;
      MathArrays.scaleInPlace(897.61612352, doubleArray0);
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, 2314.6849742);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[7];
      floatArray1[0] = (-2734.0542F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-1567.9F);
      floatArray1[3] = 983.61F;
      floatArray1[4] = 2954.339F;
      floatArray1[5] = 66.8578F;
      floatArray1[6] = (-1621.44F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-2846.27310337902);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2846.27310337902));
      MathArrays.safeNorm(doubleArray1);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 2845.2736301988684;
      doubleArray2[6] = 2845.2736301988684;
      doubleArray2[7] = 2845.2736301988684;
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1648.3839);
      doubleArray0[1] = (-1648.3839);
      doubleArray0[2] = (-1648.3839);
      doubleArray0[3] = (-1648.3839);
      MathArrays.scaleInPlace((-1648.3839), doubleArray0);
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {5434338.963558421, 5434338.963558421, 5434338.963558421, 5434338.963558421}, doubleArray2, 0.01);
      
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-1469.9992880960451);
      doubleArray3[1] = (-1469.9992880960451);
      doubleArray3[2] = (-1648.3839);
      doubleArray3[3] = (-1648.3839);
      double double0 = MathArrays.distance(doubleArray3, doubleArray0);
      assertEquals(5437457.349672615, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(3952.35);
      doubleArray0[0] = double0;
      long[][] longArray0 = new long[2][1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray1 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace(3127.0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MathArrays.OrderDirection.values();
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.scaleInPlace(4.455505956692757, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale(4.455505956692757, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.087;
      doubleArray2[1] = 4.455505956692757;
      doubleArray2[2] = 0.087;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 4.455505956692757;
      doubleArray2[5] = (double) (-1647.5815F);
      doubleArray2[6] = 0.087;
//      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1648.3839);
      doubleArray0[1] = (-1648.3839);
      doubleArray0[2] = (-1648.3839);
      doubleArray0[3] = (-1648.3839);
      MathArrays.scaleInPlace((-1648.3839), doubleArray0);
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray2);
      long[][] longArray1 = new long[8][4];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.366272509098053;
      doubleArray0[1] = (-267.1764838645295);
      doubleArray0[2] = 1700.557858365;
      doubleArray0[3] = 1.1456339191225166E13;
      doubleArray0[4] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 7.848361555046424E-8;
      doubleArray0[1] = 1630.45;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 56.158026154638726;
      doubleArray0[4] = 886.7394262863846;
      doubleArray0[5] = (-369.247089861);
      doubleArray0[6] = (-4.503599627370496E15);
      doubleArray0[7] = 0.16666666666745392;
      doubleArray0[8] = (-2206.0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2206.0);
      doubleArray1[1] = (-4.503599627370496E15);
      doubleArray1[2] = (-369.247089861);
      MathArrays.equals(doubleArray0, doubleArray1);
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      MathArrays.checkPositive(doubleArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1647.5815F);
      floatArray0[1] = 4115.0F;
      float[] floatArray1 = new float[0];
      MathArrays.equals(floatArray1, floatArray0);
      MathArrays.scaleInPlace(1272.598041929, doubleArray0);
      Double double0 = new Double(4115.0F);
      Double double1 = new Double((-1647.5815F));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) 4.8791408927557853E-17;
      doubleArray1[1] = (Double) 4.8791408927557853E-17;
      doubleArray1[2] = double1;
      doubleArray1[3] = double0;
      doubleArray1[4] = double0;
      doubleArray1[5] = double0;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {4.8791408927557853E-17}, doubleArray0, 0.01);
      assertEquals(4.8791408927557853E-17, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MathArrays.linearCombination((-3770.0), 0.0, (-3770.0), 2191.9757642, 4.9E-324, (-3770.0), (-4416.34436295), 0.0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1879048191);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 395;
      intArray0[4] = (-894);
      intArray0[5] = 2142450641;
      intArray0[6] = 3;
      intArray0[7] = 47;
      MathArrays.distance1(intArray0, intArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = (-1114);
      intArray1[3] = 2142450641;
      intArray1[4] = 1;
      intArray1[5] = 0;
      intArray1[6] = 395;
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double double0 = new Double((-0.017105309156988602));
      Double double1 = new Double((-0.017105309156988602));
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      doubleArray0[1] = double1;
      Double double2 = new Double((-425.680121978888));
      doubleArray0[6] = double2;
      doubleArray0[2] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      float[] floatArray0 = new float[4];
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.4E-45F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 3.4028235E38F;
      doubleArray1[1] = (double) doubleArray0[3];
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 1.4E-45F;
      doubleArray1[4] = (double) doubleArray0[6];
      doubleArray1[5] = (double) 3.4028235E38F;
      MathArrays.safeNorm(doubleArray1);
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[8];
      longArray1[0] = (-564L);
      longArray1[1] = 824L;
      longArray1[2] = 0L;
      longArray1[3] = (-37L);
      longArray1[4] = 1557L;
      longArray1[5] = 2323L;
      longArray1[6] = (-2323L);
      longArray1[7] = 1649L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = 1649L;
      longArray2[1] = 1557L;
      longArray2[2] = 0L;
      longArray2[3] = 2323L;
      longArray2[4] = 1557L;
      longArray2[5] = 824L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = (-2323L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = 0L;
      longArray4[1] = 1557L;
      longArray4[2] = 2323L;
      longArray4[3] = 2323L;
      longArray4[4] = (-2323L);
      longArray0[3] = longArray4;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -564 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(3952.35);
      doubleArray0[0] = double0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2972.3479;
      doubleArray1[1] = 3952.35;
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = 2972.3479;
      doubleArray1[5] = (double) doubleArray0[0];
      doubleArray1[6] = 3952.35;
      doubleArray1[7] = 2972.3479;
      doubleArray1[8] = (double) doubleArray0[0];
      double[] doubleArray2 = MathArrays.scale(2972.3479, doubleArray1);
      MathArrays.distance1(doubleArray2, doubleArray1);
      MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 8.521467343502824E7;
      doubleArray3[1] = 3.834E-20;
      doubleArray3[2] = 1.1456339191225166E13;
      doubleArray3[2] = 8.521467343502824E7;
      doubleArray3[4] = 2972.3479;
      doubleArray3[5] = (double) doubleArray0[0];
      doubleArray3[6] = (-2322.61);
      MathArrays.equalsIncludingNaN(doubleArray3, doubleArray3);
      MathArrays.scaleInPlace((-70.0), doubleArray1);
      double double1 = MathArrays.linearCombination(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-208064.353), (-276664.5), (-276664.5), (-2.6838E-18), (-208064.353), (-276664.5), (-276664.5), (-208064.353), (-276664.5)}, doubleArray1, 0.01);
      assertEquals((-2.1765592976964273E13), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.scaleInPlace(1.0F, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 1.0F;
      doubleArray2[1] = (double) 1.0F;
      doubleArray2[2] = (double) 1.0F;
      doubleArray2[3] = (double) 1.0F;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray2, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = new Double(347.031564504);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 347.031564504;
      doubleArray1[1] = (double) doubleArray0[1];
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = (double) doubleArray0[0];
      doubleArray1[4] = 347.031564504;
      long[][] longArray0 = new long[0][2];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {120430.90676209393, 120430.90676209393, 120430.90676209393, 120430.90676209393, 120430.90676209393, 0.0}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 196;
      intArray0[2] = (-2576);
      intArray0[3] = (-1768);
      intArray0[4] = 3;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double double0 = new Double(347.031564504);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = new Double((-0.017105309156988602));
      Double double1 = new Double((-0.017105309156988602));
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      Double double0 = new Double(606.4070703048785);
      Double double1 = new Double((-425.680121978888));
      Double double2 = new Double(3.834E-20);
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = double1;
      doubleArray1[1] = double0;
      doubleArray1[2] = (Double) 3.834E-20;
      doubleArray1[3] = double1;
      doubleArray1[4] = (Double) 3.834E-20;
      doubleArray1[5] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.safeNorm(doubleArray0);
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 3619);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale(1.0, doubleArray0);
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      MathArrays.scaleInPlace(4074.3927484, doubleArray0);
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double double0 = new Double((-0.017105309156988602));
      Double double1 = new Double((-0.017105309156988602));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) doubleArray0[2];
      doubleArray1[1] = 3.145894820876798E-6;
      doubleArray1[2] = (double) doubleArray0[3];
      doubleArray1[3] = (-0.017105309156988602);
      doubleArray1[4] = (-1151.34114);
      doubleArray1[5] = (double) doubleArray0[1];
      doubleArray1[6] = 67.448532515386;
      doubleArray1[7] = (double) doubleArray0[1];
      doubleArray1[8] = (double) doubleArray0[2];
//      try { 
        MathArrays.checkPositive(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -0.017 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = new Double((-0.017105309156988602));
      Double double1 = new Double((-0.017105309156988602));
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      double double2 = MathArrays.linearCombination((-555.1230811), (-555.1230811), 6216.8235, (double) doubleArray0[0], 457.65924164, (-515.0565));
      assertEquals(72334.92729026261, double2, 0.01);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) doubleArray0[3];
      doubleArray1[1] = 6216.8235;
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = (-555.1230811);
      doubleArray1[4] = (-515.0565);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(5, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2396.362053456;
      doubleArray0[1] = 199.0;
      Double double0 = new Double((-1491.4135311));
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      Double double1 = new Double(0.087);
      doubleArray1[2] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) doubleArray1[1];
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, (-3.940510424527919E-20));
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray4 = new double[2][3];
      doubleArray4[0] = doubleArray3;
      doubleArray4[1] = doubleArray3;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double((-0.017105309156988602));
      Double double1 = new Double((-0.017105309156988602));
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      doubleArray0[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-4.503599627370496E15);
      doubleArray1[1] = (-369.247089861);
      doubleArray1[2] = (double) doubleArray0[1];
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double double1 = new Double((-425.680121978888));
      Double double2 = new Double((-720.0));
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      doubleArray0[4] = double2;
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) doubleArray0[7];
      doubleArray1[1] = (-1723.0225504);
      doubleArray1[2] = (-1305.54);
      double double3 = MathArrays.safeNorm(doubleArray1);
      assertEquals(2161.7681191068855, double3, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.linearCombination(79.275911937706, 2189.0, 2189.0, 2189.0);
      Double[] doubleArray1 = new Double[2];
      Double double0 = new Double(2189.0);
      doubleArray1[0] = double0;
      Double double1 = new Double((-1226.62));
      doubleArray1[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 3.834E-20;
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "}D&`;]*;BigTUQB";
      stringArray0[1] = "#BTOhi0w`1d";
      stringArray0[2] = "";
      stringArray0[3] = "TOO_MANY_REGRESSORS";
      stringArray0[4] = "R4uT+}MH[A~|";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 21;
      intArray0[1] = 1110;
      intArray0[2] = 15;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.OrderDirection.values();
      // Undeclared exception!
//      try { 
        MathArrays.scale(0.0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(3952.35);
      doubleArray0[0] = double0;
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = (-1397L);
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 7.848361555046424E-8;
      doubleArray0[1] = 1630.45;
      doubleArray0[2] = 7.848361555046424E-8;
      doubleArray0[3] = 56.158026154638726;
      doubleArray0[4] = 886.7394262863846;
      int[] intArray0 = new int[1];
      intArray0[0] = 334;
      MathArrays.distance(intArray0, intArray0);
      long[][] longArray0 = new long[6][7];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 334;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = (long) 334;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = (long) 334;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      longArray5[0] = (long) 334;
      longArray5[1] = (long) 334;
      longArray5[2] = (long) 334;
      longArray5[3] = (long) 334;
      longArray5[4] = (long) 334;
      longArray5[5] = (long) 334;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = (long) 334;
      longArray0[5] = longArray6;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 0 while others have length 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale(1.34217729E8, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray2, doubleArray1);
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace((-4814.5345), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 7.848361555046424E-8;
      doubleArray0[1] = 1630.45;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 56.158026154638726;
      doubleArray0[4] = 886.7394262863846;
      doubleArray0[5] = (-369.247089861);
      doubleArray0[6] = (-4.503599627370496E15);
      doubleArray0[7] = 0.16666666666745392;
      doubleArray0[8] = (-2206.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 116;
      intArray0[1] = 1200;
      intArray0[2] = 2842;
      intArray0[3] = 0;
      intArray0[4] = (-2147483647);
      intArray0[5] = 17;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-2147483647));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Double double0 = new Double(1840.6277994);
      Double double1 = new Double((-996.15127759));
      Double double2 = new Double(1.0);
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      floatArray0[4] = 4913.966F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 3188.25F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2511.82667);
      doubleArray1[1] = 2535.13170509;
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[9];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 2238;
      intArray0[2] = (-118);
      intArray0[3] = (-771);
      intArray0[4] = 1071;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.distance1(intArray1, intArray1);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination((double) 2238, 1630.45, 0.0, 0.0, (double) 0, 0.0, 1.0, (double) 1);
      MathArrays.linearCombination(2371.34166544671, (double) (-771), 56.158026154638726, (double) 1071, 2396.362053456, 0.0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1008.6189711150976;
      doubleArray1[1] = (double) 0;
      MathArrays.distanceInf(doubleArray0, doubleArray1);
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2925.64393284;
      doubleArray0[1] = (-1041.614217);
      doubleArray0[0] = 0.0;
      doubleArray0[3] = 103.0;
      doubleArray0[4] = 2321.00736179;
      doubleArray0[5] = 4658.18128917;
      doubleArray0[6] = 1995.72467;
      doubleArray0[8] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 151;
      intArray0[1] = 529;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {151, 529, 0, 0, 0}, intArray1);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int[] intArray2 = MathArrays.copyOf(intArray0, 122);
      assertNotSame(intArray0, intArray1);
      assertEquals(122, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      Double double1 = new Double((-1.0));
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 1;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = (long) 1;
      longArray2[1] = (long) 529;
      longArray2[2] = (long) 1;
      longArray2[3] = (long) 1;
      longArray2[4] = (long) 1;
      longArray2[5] = (long) 1;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(13, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Double double0 = new Double((-0.017105309156988602));
      Double double1 = new Double((-0.017105309156988602));
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      doubleArray0[1] = double1;
      Double double2 = new Double((-425.680121978888));
      doubleArray0[6] = double2;
      doubleArray0[0] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.4E-45F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1.4E-45F;
      doubleArray1[1] = (double) doubleArray0[2];
      doubleArray1[2] = (-425.680121978888);
      MathArrays.scale((double) doubleArray0[2], doubleArray1);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 1.4E-45F;
      doubleArray2[1] = (double) doubleArray0[6];
      doubleArray2[2] = (double) 0.0F;
      doubleArray2[3] = (double) 0.0F;
      doubleArray2[4] = (double) doubleArray0[4];
//      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Double double0 = new Double(347.031564504);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 347.031564504;
      doubleArray1[1] = (double) doubleArray0[1];
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = (double) doubleArray0[0];
      doubleArray1[4] = 347.031564504;
      doubleArray1[5] = 347.031564504;
      MathArrays.checkPositive(doubleArray1);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 198, 198);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.linearCombination(79.275911937706, 2189.0, 2189.0, 2189.0);
      MathArrays.OrderDirection.values();
      Double double0 = new Double(Double.NaN);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double double1 = new Double(4965255.971231638);
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = double0;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scale(0.1256551444530487, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("z?2la|{rN)6u;");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.z?2la|{rN)6u;
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = new Double(347.031564504);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 347.031564504;
      MathArrays.distance1(doubleArray1, doubleArray1);
      double[] doubleArray2 = MathArrays.scale(27.0, doubleArray1);
      double double1 = new Double((double) doubleArray0[0]);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      MathArrays.equalsIncludingNaN(doubleArray3, (double[]) null);
      MathArrays.scaleInPlace(2203.9078, doubleArray2);
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd(doubleArray2, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 1840.6277994;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      MathArrays.linearCombination(7.877917738262007E-9, 1.304E19, 0.0, 1663.0, 1.304E19, 1840.6277994);
      int[] intArray0 = new int[9];
      intArray0[0] = (-4449);
      intArray0[1] = (-1);
      intArray0[2] = 2;
      intArray0[3] = 3513;
      intArray0[4] = (-1252);
      intArray0[5] = (-1);
      intArray0[6] = 1733;
      intArray0[7] = 13;
      intArray0[8] = 301;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MathArrays.linearCombination(1054.9807591581, (-1532483.3758724174), 0.9985313415527344, 1054.9807591581, (-2633.887354867871), (-2633.887354867871), 1227.0, 0.9489846229553223);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = (-1614);
      intArray0[2] = 0;
      intArray0[3] = (-2146692676);
      intArray0[4] = (-1103);
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1054.9807591581;
      doubleArray0[1] = (double) (-1103);
      doubleArray0[2] = (-1.6098008948414328E9);
      doubleArray0[3] = (double) 2;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 2);
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 0;
      MathArrays.equals(doubleArray3, doubleArray3);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true);
      double double0 = MathArrays.linearCombination((double) (-2146692676), 991.0673217773438, Double.NaN, 0.9808930158615112, (-333.89570762002), 0.9489846229553223, 38.49004947, (double) (-1103));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 3130.5889479501, 3130.5889479501);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1892);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1892);
      floatArray0[3] = (-20.9F);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      boolean boolean0 = true;
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double double0 = new Double((-1127.3F));
      Double double1 = new Double((-3.9986783938944604E-8));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double double2 = new Double((-7.877917738262007E-9));
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = double1;
      doubleArray1[1] = double0;
      doubleArray1[2] = double1;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double3, 0.01);
      
      double[] doubleArray2 = MathArrays.scale((-7.877917738262007E-9), doubleArray0);
      assertArrayEquals(new double[] {-0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = 347.031564504;
      Double double1 = new Double(347.031564504);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Double double0 = new Double((-0.017105309156988602));
      Double double1 = new Double((-0.017105309156988602));
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      doubleArray0[1] = double1;
      Double double2 = new Double((-425.680121978888));
      doubleArray0[6] = double2;
      doubleArray0[0] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.4E-45F;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) doubleArray0[3];
      doubleArray1[1] = (double) doubleArray0[2];
      doubleArray1[2] = (double) 1.4E-45F;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 1.4E-45F;
      doubleArray2[1] = (-0.017105309156988602);
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2396.362053456;
      doubleArray0[1] = 199.0;
      Double double0 = new Double((-1491.4135311));
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      Double double1 = new Double(0.087);
      doubleArray1[2] = double1;
      Double double2 = new Double(2738.830043390258);
      doubleArray1[3] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2404.610590354259, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1508.78F);
      floatArray0[1] = 991.0673F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1127.3F);
      Double double0 = new Double(1258.9497);
      Double double1 = new Double((-7.877917738262007E-9));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      Double double2 = new Double((-1127.3F));
      doubleArray0[5] = double2;
      doubleArray0[6] = double1;
      doubleArray0[7] = double0;
      doubleArray0[8] = double1;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 991.0673F;
      doubleArray1[1] = 1258.9497;
      doubleArray1[2] = (double) doubleArray0[6];
      doubleArray1[3] = (double) doubleArray0[5];
      doubleArray1[4] = (double) doubleArray0[1];
      double double3 = MathArrays.safeNorm(doubleArray1);
      assertEquals(2328.7182162389227, double3, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1767L;
      longArray0[1] = 1126L;
      longArray0[2] = (-1148L);
      longArray0[3] = 0L;
      longArray0[4] = (-249L);
      longArray0[5] = 9193070505571053912L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,148 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 3.834E-20;
      doubleArray0[0] = 3.834E-20;
      MathArrays.checkPositive(doubleArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1647.5815F);
      float float0 = 4115.0F;
      floatArray0[1] = 4115.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.POSITIVE_INFINITY;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      MathArrays.checkPositive(doubleArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1647.5815F);
      floatArray0[1] = 4115.0F;
      float[] floatArray1 = new float[0];
      MathArrays.equals(floatArray1, floatArray0);
      MathArrays.scaleInPlace(1272.598041929, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale((-1647.5815F), doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      MathArrays.scaleInPlace(4074.3927484, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1.0F);
      MathArrays.equals(floatArray0, floatArray0);
      double double0 = 2.800552834259E-8;
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-3607.565494);
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) (-1.0F);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (double) 0.0F;
      MathArrays.distance1(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[0];
      MathArrays.scale(0.0, doubleArray2);
      MathArrays.distance1(doubleArray2, doubleArray0);
//      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MathArrays.linearCombination((-2199.496160011523), 596.634565, (-2777.48859449), 79.275911937706);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      int int0 = (-720);
      int[] intArray0 = new int[9];
      intArray0[0] = 8;
      intArray0[1] = 8;
      intArray0[2] = 8;
      intArray0[3] = (-720);
      intArray0[4] = 8;
      intArray0[5] = (-2574);
      intArray0[6] = (-720);
      intArray0[7] = 134217729;
      intArray0[8] = (-2574);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1532483.3758724174);
      doubleArray0[1] = 606.4070703048785;
      doubleArray0[2] = (double) (-720);
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) (-5662);
      doubleArray0[5] = (-2199.496160011523);
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (606.407 >= -720)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1508.78F);
      floatArray0[1] = 991.0673F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1127.3F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale((-1.0F), doubleArray0);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertTrue(boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false);
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-2714L);
      longArray0[2] = 3204L;
      longArray0[3] = 0L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,714 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-333.89570762002));
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.34217729E8;
      doubleArray1[1] = (double) doubleArray0[1];
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-333.89570762002);
      doubleArray1[4] = (double) doubleArray0[0];
      doubleArray1[5] = (-6874.0);
      doubleArray1[6] = (double) doubleArray0[2];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 5 and 6 are not decreasing (-6,874 < 1)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[4];
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (0 <= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "}D&`;]*;BigTUQB";
      stringArray0[1] = "#BTOhi0w`1d";
      stringArray0[2] = "";
      stringArray0[3] = "TOO_MANY_REGRESSORS";
      stringArray0[4] = "R4uT+}MH[A~|";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Double double0 = new Double((-0.017105309156988602));
      Double double1 = new Double((-0.017105309156988602));
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      doubleArray0[1] = double1;
      Double double2 = new Double((-425.680121978888));
      doubleArray0[6] = double2;
      doubleArray0[0] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.4E-45F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1.4E-45F;
      doubleArray1[1] = (double) doubleArray0[2];
      doubleArray1[2] = (-425.680121978888);
      doubleArray1[3] = (double) doubleArray0[4];
      double[] doubleArray2 = MathArrays.scale((double) doubleArray0[2], doubleArray1);
      assertArrayEquals(new double[] {(-2.396964345348936E-47), 2.925916013561581E-4, 7.281390088433498, 2.925916013561581E-4}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-333.89570762002));
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.98041713F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1127.3F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale((-174.98), doubleArray0);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 0.98041713F;
      MathArrays.distance1(doubleArray1, doubleArray2);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) (-1127.3F);
      MathArrays.equalsIncludingNaN(doubleArray3, doubleArray4);
//      try { 
        MathArrays.normalizeArray(doubleArray1, (-1.0F));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Double double0 = new Double((-333.89570762002));
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-0.017105309156988602);
      doubleArray0[1] = 1630.45;
      doubleArray0[2] = 1630.45;
      doubleArray0[3] = 1630.45;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1833.4040449;
      doubleArray0[1] = 1630.45;
      doubleArray0[2] = 1054.9807591581;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1025.219311913792;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 606.4070703048785;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      int[] intArray0 = new int[5];
      intArray0[0] = (-5662);
      intArray0[1] = (-2574);
      intArray0[2] = (-720);
      intArray0[3] = 8;
      intArray0[4] = (-1636);
      MathArrays.distance(intArray0, intArray0);
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (1,833.404 >= 1,630.45)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1833.4040449;
      doubleArray0[1] = 1630.45;
      doubleArray0[2] = 1056.2724019158125;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1025.219311913792;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 606.4070703048785;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1833.4040449;
      doubleArray2[1] = 1025.219311913792;
      doubleArray2[2] = 1025.219311913792;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
//      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.366272509098053;
      doubleArray0[1] = (-267.1764838645295);
      doubleArray0[2] = 0.366272509098053;
      doubleArray0[3] = 1.1456339191225166E13;
      doubleArray0[4] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.1456339191225166E13;
      doubleArray1[1] = 1.1456339191225166E13;
      doubleArray1[2] = 2122.9759656544;
      doubleArray1[3] = 1.1456339191225166E13;
      doubleArray1[4] = Double.NaN;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1.1456339191225166E13);
      assertArrayEquals(new double[] {3.818779730172502E12, 3.818779730172502E12, 707.6586551744213, 3.818779730172502E12, Double.NaN}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {0.366272509098053, (-267.1764838645295), 0.366272509098053, 1.1456339191225166E13, Double.NaN}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2925.64393284;
      doubleArray0[1] = (-1041.614217);
      doubleArray0[0] = 0.0;
      doubleArray0[3] = 103.0;
      doubleArray0[4] = 2321.00736179;
      doubleArray0[5] = 4658.18128917;
      doubleArray0[6] = 1995.72467;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 151;
      intArray0[1] = 529;
      intArray0[2] = 1;
      intArray0[3] = 987;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1.0);
      double[][] doubleArray3 = new double[4][1];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray2;
      doubleArray3[3] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1508.78F);
      floatArray0[1] = 991.0673F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1127.3F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale((-1.0F), doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
//      try { 
        MathArrays.normalizeArray(doubleArray1, 1.0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 3130.5889479501;
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 3130.5889479501, 3130.5889479501);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1892);
      intArray0[2] = 0;
      intArray0[3] = (-890);
      int int0 = (-1);
      intArray0[4] = (-1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 9800587.161027316;
      doubleArray0[2] = (double) (-890);
      doubleArray0[3] = 9800587.161027316;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 3130.5889479501, 3130.5889479501);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1892);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 9800587.161027316;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1892);
      doubleArray0[3] = (double) (-1892);
      doubleArray0[4] = (double) (-1892);
      doubleArray0[5] = (double) (-1892);
      doubleArray0[6] = (double) (-1892);
      doubleArray0[7] = (double) 0;
      double[][] doubleArray1 = new double[4][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {9800587.161027316, (-1892.0), (-1892.0), 0.0, (-1892.0), (-1892.0), (-1892.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 1840.6277994;
      doubleArray0[3] = (-0.017105309156988602);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1630.45;
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 1840.6277994, (-0.017105309156988602), Double.NaN, Double.NaN, 1630.45, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.checkOrder(doubleArray0);
      MathArrays.scaleInPlace((-2061.1063176), doubleArray0);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1127.3F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      float[] floatArray1 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      MathArrays.scaleInPlace(2.800552834259E-8, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale((-4814.5345), doubleArray0);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.scaleInPlace(0.0F, doubleArray2);
      assertArrayEquals(new double[] {-0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace(0.0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-425.680121978888);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 4696.58903993;
      doubleArray0[4] = (-3648.8210569139);
      doubleArray0[5] = (-2061.1063176);
      doubleArray0[6] = 2292.97133357;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MathArrays.linearCombination((-2200.7881477998058), 596.634565, (-2777.48859449), 79.275911937706);
      double[] doubleArray0 = new double[2];
      long[] longArray0 = new long[2];
      longArray0[0] = (-2714L);
      longArray0[1] = 906L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,714 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.34217729E8;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-669.7329849);
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-889.4);
      doubleArray1[5] = 1.34217729E8;
      doubleArray1[6] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.34217729E8;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2925.64393284;
      doubleArray0[1] = (-1041.614217);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 103.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 103.0, 2925.64393284, 0.0, (-1041.614217)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2925.64393284;
      doubleArray0[1] = (-1041.614217);
      doubleArray0[0] = 0.0;
      doubleArray0[3] = 103.0;
      doubleArray0[4] = 2321.00736179;
      doubleArray0[5] = 4658.18128917;
      doubleArray0[6] = 1995.72467;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 151;
      intArray0[1] = 529;
      intArray0[2] = 1;
      intArray0[3] = 987;
      intArray0[4] = 2677;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly decreasing (-1,041.614 <= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1508.78F);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1508.78F);
      doubleArray0[1] = (double) (-1508.78F);
      doubleArray0[2] = (double) (-1508.78F);
      doubleArray0[3] = 79.275911937706;
      doubleArray0[4] = (double) (-1508.78F);
      doubleArray0[5] = (double) (-1508.78F);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.convolve(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("<t++&");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.<t++&
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-834.4);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-255.23279312787);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-5.80928771584E8), 0.0, (-1.6626828589404806E7), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-834.4);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-255.23279312787);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1135.61623044;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-255.23279312787);
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathArrays.linearCombination((-2199.496160011523), 596.634565, (-2777.48859449), 79.275911937706);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1532483.3758724174);
      doubleArray0[0] = 596.634565;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-1532483.3758724174);
      doubleArray3[1] = 596.634565;
      doubleArray3[2] = (-2777.48859449);
      doubleArray3[3] = (-1532483.3758724174);
      doubleArray3[4] = (-1532483.3758724174);
      doubleArray3[5] = (-2199.496160011523);
//      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2925.64393284;
      doubleArray0[1] = (-1041.614217);
      doubleArray0[2] = 0.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[3][4];
      long[] longArray1 = new long[3];
      longArray1[0] = 2138L;
      longArray1[1] = (-1168L);
      longArray1[2] = (-1168L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = 1093L;
      longArray2[1] = 0L;
      longArray2[2] = 2138L;
      longArray2[3] = (-1168L);
      longArray2[4] = 2138L;
      longArray2[5] = 1L;
      longArray2[6] = 2138L;
      longArray2[7] = 1093L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 1L;
      longArray3[3] = 1L;
      longArray3[4] = 2138L;
      longArray0[2] = longArray3;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 8 while others have length 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-314L);
      longArray0[3] = 2147483647L;
      longArray0[4] = 0L;
      longArray0[5] = (-1073741824L);
      Double double0 = new Double(3.4439717236742845E-8);
      Double double1 = new Double(254.0366);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1840.6277994;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 696.1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][8];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1840.6277994, 696.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[7];
      floatArray0[4] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 50.32190039692552;
      doubleArray0[0] = 50.32190039692552;
      double double1 = (-2061.1063176);
      doubleArray0[1] = 50.32190039692552;
      doubleArray0[2] = 1.304E19;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (50.322 >= 50.322)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1434.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-655.163078899322);
      doubleArray0[3] = 606.342;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 181);
      assertEquals(181, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.OrderDirection.values();
      int int0 = (-789);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-789));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Double double0 = new Double(347.031564504);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-1301.22);
      MathArrays.safeNorm(doubleArray1);
      int[] intArray0 = new int[6];
      intArray0[0] = (-264);
      intArray0[1] = (-2139442976);
      intArray0[2] = (-2009);
      intArray0[3] = 19;
      intArray0[4] = (-30);
      intArray0[5] = 200;
      int[] intArray1 = new int[0];
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double double1 = new Double(1.0);
      Double double2 = new Double((-425.680121978888));
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-425.680121978888);
      doubleArray1[1] = 1.0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-425.680121978888), 1.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Double>) null, 2898, 2898);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1508.78F);
      floatArray0[1] = 991.0673F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1127.3F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale((-1.0F), doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray2);
      MathArrays.copyOf(doubleArray1);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2975.81458;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1947.1989);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray1);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double double1 = (-834.4);
      doubleArray0[1] = (-834.4);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-255.23279312787);
      double double2 = (-4868.16083820465);
      doubleArray0[4] = (-4868.16083820465);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1135.61623044;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1754.04606764;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      double double3 = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1754.04606764;
      doubleArray1[4] = (-255.23279312787);
      doubleArray1[5] = (-834.4);
      doubleArray1[6] = 1754.04606764;
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, Double.NaN, 136.404, 3.141592653589793);
      double double1 = MathArrays.linearCombination(2522.8705969935, 0.0, 3.141592653589793, Double.NaN, 9349.65758849825, 933.62, 956.0, 956.0);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "}D&`;]*;BigTUQB";
      stringArray0[1] = "#BTOhi0w`1d";
      stringArray0[2] = "";
      stringArray0[3] = "TOO_MANY_REGRESSORS";
      stringArray0[4] = "R4uT+}MH[A~|";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 1653.8, (-365.0), 4623.8978004, 1653.8, 4623.8978004, (-2753.218053669));
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 13;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 13);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      float float0 = 3.4028235E38F;
      floatArray0[1] = 3.4028235E38F;
      float float1 = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[5];
      int int0 = 24;
      intArray0[0] = 24;
      intArray0[1] = 0;
      intArray0[2] = 1696;
      int int1 = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      MathArrays.copyOf(intArray0);
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2090.0, 2090.0, (-706.5723), 1.0E-5, 482.41879478578346, 2323.56, 1.0E-5, 2090.0);
      assertEquals(5489029.028646732, double0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-367.3286F);
      floatArray0[1] = 3167.36F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 2849.0F;
      floatArray0[4] = (-3278.6626F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1277.0F);
      floatArray0[7] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = (-2988.879);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[0];
      doubleArray1[3] = doubleArray2;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[][] longArray0 = new long[4][9];
      long[] longArray1 = new long[8];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = (-314L);
      longArray1[3] = 2147483647L;
      longArray1[4] = 0L;
      longArray1[5] = (-1073741824L);
      longArray1[6] = 2147483647L;
      longArray1[7] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = (-314L);
      longArray2[3] = 0L;
      longArray2[4] = (-1073741824L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = (-314L);
      longArray3[1] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = 2147483647L;
      longArray4[1] = 2147483647L;
      longArray4[2] = 0L;
      longArray4[3] = 1L;
      longArray4[4] = 2031L;
      longArray4[5] = 0L;
      longArray4[6] = 2147483647L;
      longArray4[7] = 0L;
      longArray4[8] = 0L;
      longArray0[3] = longArray4;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -314 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2403.9F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2277.3228F;
      floatArray0[4] = 2947.791F;
      floatArray0[5] = 298.02994F;
      floatArray0[6] = (-1.0F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 2947.791F;
      MathArrays.distance1(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[8][7];
      long[] longArray1 = new long[1];
      longArray1[0] = (-3018L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = (-3018L);
      longArray3[1] = (-3018L);
      longArray3[2] = (-3018L);
      longArray3[3] = (-3018L);
      longArray3[4] = (-3018L);
      longArray3[5] = (-3018L);
      longArray3[6] = (-3018L);
      longArray3[7] = (-3018L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = (-3018L);
      longArray4[1] = (-3018L);
      longArray4[2] = (-3018L);
      longArray4[3] = (-3018L);
      longArray4[4] = (-1168L);
      longArray4[5] = (-3018L);
      longArray4[6] = (-3018L);
      longArray4[7] = (-3018L);
      longArray4[8] = (-3018L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = (-1168L);
      longArray5[1] = (-1168L);
      longArray5[2] = (-1168L);
      longArray5[3] = (-3018L);
      longArray5[4] = (-3018L);
      longArray5[5] = (-1168L);
      longArray5[6] = (-3018L);
      longArray5[7] = (-3018L);
      longArray5[8] = (-1168L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = (-3018L);
      longArray6[1] = (-3018L);
      longArray6[2] = (-3018L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      longArray7[0] = (-1168L);
      longArray7[1] = (-3018L);
      longArray7[2] = (-1168L);
      longArray7[3] = (-1168L);
      longArray7[4] = (-1168L);
      longArray7[5] = (-3018L);
      longArray7[6] = (-1168L);
      longArray7[7] = (-3018L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[1];
      longArray8[0] = 1093L;
      longArray0[7] = longArray8;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 0 while others have length 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2925.64393284;
      doubleArray0[1] = (-1041.614217);
      doubleArray0[0] = 0.0;
      MathArrays.linearCombination(2925.64393284, (-1041.614217), 1723.0225504, (-1041.614217), (-1.7976931348623157E308), 3952.35);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1041.614217), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 3130.5889479501, 3130.5889479501);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1889);
      intArray0[3] = 0;
      intArray0[3] = (-874);
      Double double0 = new Double((-874));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 3130.5889479501, 3130.5889479501);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1892);
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = (-890);
      intArray0[4] = (-1);
      MathArrays.distanceInf(intArray0, intArray0);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 190, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[][] longArray0 = new long[1][4];
      long[] longArray1 = new long[3];
      long long0 = (-3010L);
      longArray1[0] = (-3010L);
      longArray1[1] = 156L;
      long long1 = 1L;
      longArray1[2] = 1L;
      longArray0[0] = longArray1;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -3,010 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 1258.9497;
      doubleArray0[0] = 1258.9497;
      double double1 = (-39.05438);
      doubleArray0[1] = (-39.05438);
      double double2 = -0.0;
      doubleArray0[2] = -0.0;
      double double3 = (-388.0);
      doubleArray0[3] = (-388.0);
      double double4 = 0.0;
      doubleArray0[4] = 0.0;
      double double5 = 0.0;
      doubleArray0[5] = 0.0;
      double double6 = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-388.0), 0.0, 1258.9497, 1258.9497);
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (1,258.95 >= -39.054)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2523.92);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.34217729E8;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.34217729E8;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-2523.92);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      int[] intArray0 = new int[1];
      intArray0[0] = 252;
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 111;
      intArray0[4] = 1153;
      intArray0[5] = (-146);
      intArray0[6] = (-6166);
      intArray0[7] = (-1004);
      intArray0[8] = 166;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1153;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2013.913;
      doubleArray0[2] = (-539.3645501096726);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long[][] longArray0 = new long[5][8];
      long[] longArray1 = new long[5];
      long long0 = (-1917L);
      longArray1[0] = (-1917L);
      longArray1[1] = (-1L);
      longArray1[2] = (-1955L);
      longArray1[3] = (-1972L);
      longArray1[4] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = (-1955L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = (-1972L);
      longArray4[1] = (-1955L);
      longArray4[2] = (-1L);
      longArray4[3] = 0L;
      longArray4[4] = (-1972L);
      long long1 = 0L;
      longArray4[5] = 0L;
      longArray4[6] = (-1L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      longArray5[0] = (-1917L);
      longArray5[1] = (-1972L);
      longArray0[4] = longArray5;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 1 while others have length 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2131.4F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-275.32867F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 1.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-901.31);
      doubleArray0[1] = 2189.0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-275.32867F);
      doubleArray0[4] = (double) (-275.32867F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (2,189 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3670.181945710875;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 745.645250995;
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[5] = (-1703.9477191046);
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-2846.27310337902);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.normalizeArray(doubleArray0, (-2846.27310337902));
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Object>) null, (-2144704116));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(3952.35);
      doubleArray0[0] = double0;
      long[][] longArray0 = new long[2][1];
      MathArrays.checkNonNegative(longArray0);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Integer>) null, (-1313), (-2146064292));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MathArrays.OrderDirection.values();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double double0 = (-2199.496160011523);
      double double1 = 596.634565;
      double double2 = (-2777.48859449);
      MathArrays.linearCombination((-2199.496160011523), 596.634565, (-2777.48859449), 79.275911937706);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1532483.3758724174);
      doubleArray0[1] = 596.634565;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.convolve(doubleArray0, doubleArray1);
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("<t++&");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.<t++&
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-4536);
      intArray0[5] = 0;
      intArray0[6] = 965;
      intArray0[7] = 1094;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1840.6277994;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 696.1;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1619.963986;
      doubleArray0[6] = 2316.5452179908;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = 1.0;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1840.6277994, 0.0, 696.1, 0.0, 1619.963986, 2316.5452179908, Double.NaN, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-237.9216385);
      doubleArray0[2] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1833.4040449;
      doubleArray0[1] = 1630.45;
      doubleArray0[2] = 1054.9807591581;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1025.219311913792;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 606.4070703048785;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2925.64393284;
      doubleArray0[1] = (-1041.614217);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 103.0;
      doubleArray0[4] = 2321.00736179;
      doubleArray0[5] = 4658.18128917;
      doubleArray0[6] = 1995.72467;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 151;
      intArray0[1] = 529;
      intArray0[2] = 1;
      intArray0[3] = 987;
      intArray0[4] = 2677;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1351.0970249, (-2792.69), 1351.0970249, (-977.529632), 0.0, (-977.529632), (-1.0), 1351.0970249);
      assertEquals((-5095283.6250396725), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 2971.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-5.0F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 3288.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 5128;
      intArray0[1] = 0;
      intArray0[2] = (-908);
      intArray0[3] = 2022;
      intArray0[4] = 2307;
      intArray0[5] = 1868;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2181.0;
      doubleArray0[2] = 3337.530691757448;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = (-2150.1721839);
      doubleArray0[5] = 100.0;
      doubleArray0[6] = 5908.1063793;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }
}
