/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 15:24:01 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Pair<Object, Integer> pair0 = new Pair<Object, Integer>(class0, integer0);
      assertNotNull(pair0);
      
      Field<Pair<Object, Integer>> field0 = (Field<Pair<Object, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      int int0 = 34;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 34);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // org.apache.commons.math3.util.Pair
//         //
//         verifyException("java.util.Arrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Integer>> field0 = (Field<Pair<Object, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<Object, Integer>[] pairArray0 = MathArrays.buildArray(field0, 34);
      assertEquals(34, pairArray0.length);
      assertNotNull(pairArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 34;
      doubleArray0[1] = (double) 34;
      doubleArray0[2] = (double) 34;
      doubleArray0[3] = (double) 34;
      doubleArray0[4] = (double) 34;
      doubleArray0[5] = (double) 34;
      doubleArray0[6] = (double) 34;
      doubleArray0[7] = (double) 34;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 34;
      doubleArray1[1] = (double) 34;
      doubleArray1[2] = 4191.910205367662;
      doubleArray1[3] = (double) 34;
      doubleArray1[4] = (double) 34;
      doubleArray1[5] = (double) 34;
      doubleArray1[6] = (double) 34;
      doubleArray1[7] = (double) 34;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(4157.910205367662, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {34.0, 34.0, 4191.910205367662, 34.0, 34.0, 34.0, 34.0, 34.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      Field<Object> field1 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field1, (-1), 54);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-783.408551372768);
      doubleArray0[1] = (-701.6124542659);
      doubleArray0[2] = 1585.28960905;
      doubleArray0[3] = 1.8014398509481984E16;
      doubleArray0[4] = 3682.4342925;
      doubleArray0[5] = (-505.025);
      doubleArray0[6] = 1.5874010519681994;
      doubleArray0[7] = 23.405391;
      doubleArray0[8] = 1762371.3871101676;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-783.408551372768), (-701.6124542659), 1585.28960905, 1.8014398509481984E16, 3682.4342925, (-505.025), 1.5874010519681994, 23.405391, 1762371.3871101676}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3.2451855365842673E32, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-783.408551372768), (-701.6124542659), 1585.28960905, 1.8014398509481984E16, 3682.4342925, (-505.025), 1.5874010519681994, 23.405391, 1762371.3871101676}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = 1273;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1273);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1273, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1273);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1273, doubleArray1.length);
      assertEquals(1273, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1273, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      double double1 = 938.67;
      doubleArray0[0] = 938.67;
      double double2 = 159.540137;
      doubleArray0[3] = 159.540137;
      double double3 = 4372.613343779147;
      doubleArray0[4] = 4372.613343779147;
      doubleArray0[5] = (-1295.214274195547);
      double double4 = 1.34217729E8;
      doubleArray0[6] = 1.34217729E8;
      int int0 = 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {938.67, 0.0, 0.0, 159.540137, 4372.613343779147, (-1295.214274195547), 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray2 = null;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 161.613760637941;
      doubleArray2[1] = (-1215.17240037);
      doubleArray2[2] = (-1833.3);
      doubleArray2[3] = 649.15924564063;
      doubleArray2[4] = 1.44888888888888883E18;
      doubleArray2[5] = (-1295.474);
      doubleArray2[6] = (-1262.8400468546301);
      doubleArray2[7] = 193.38;
      doubleArray2[8] = 6.52E18;
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertEquals(6.6790477623944038E18, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {161.613760637941, (-1215.17240037), (-1833.3), 649.15924564063, 1.44888888888888883E18, (-1295.474), (-1262.8400468546301), 193.38, 6.52E18}, doubleArray2, 0.01);
      assertEquals(9, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.17333333333333325E18;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 935.227;
      doubleArray0[3] = 2575.53828427699;
      doubleArray0[4] = 2205.3;
      doubleArray0[5] = (-3908.8);
      doubleArray0[6] = 2116.1847361;
      doubleArray0[7] = 3.0;
      doubleArray0[8] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {2.17333333333333325E18, 1.304E19, 935.227, 2575.53828427699, 2205.3, (-3908.8), 2116.1847361, 3.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (2,173,333,333,333,333,250 <= 13,040,000,000,000,000,000)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 649.0;
      doubleArray0[1] = 1585.6907338028277;
      doubleArray0[2] = 56.625540787;
      doubleArray0[3] = (-3.86);
      doubleArray0[4] = 2499.8639007793;
      doubleArray0[5] = 554.81921878;
      doubleArray0[6] = 2749.26925100796;
      doubleArray0[7] = 2237.948101559941;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2404.627695675141;
      doubleArray0[2] = (-706.1466740940717);
      doubleArray0[3] = 0.0;
      double[][] doubleArray1 = new double[9][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Integer>> field0 = (Field<Pair<Object, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<Object, Integer>[] pairArray0 = MathArrays.buildArray(field0, 0);
      assertEquals(0, pairArray0.length);
      assertNotNull(pairArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 4191.910205367662;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(4191.910205367662, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4191.910205367662, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 230.8657094;
      doubleArray1[1] = 2709.82531;
      doubleArray1[2] = (-0.25);
      doubleArray1[3] = 1719.8039;
      doubleArray1[4] = (-2575.4597072);
      doubleArray1[5] = 1719.8039;
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = (-653.3369789139813);
//      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2691.434047527);
      doubleArray0[1] = (-4.9E-324);
      doubleArray0[2] = (-4.9E-324);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-3442.111068159);
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 1.34217729E8;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {(-2691.434047527), (-4.9E-324), (-4.9E-324), 1.0, (-3442.111068159), 1.304E19, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.34217729E8;
      doubleArray1[1] = (-2691.434047527);
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = (-3442.111068159);
//      try { 
        MathArrays.checkPositive(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,691.434 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(14, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Integer>) null, 18, 18);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 988.7781F;
      floatArray0[2] = 1040.389F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-456.5781F);
      floatArray0[6] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 988.7781F, 1040.389F, 0.0F, 0.0F, (-456.5781F), 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertEquals(17, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-789.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1489.7F);
      floatArray0[5] = (-226.46F);
      floatArray0[6] = (-760.5F);
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-789.0F), 0.0F, (-1.0F), 0.0F, (-1489.7F), (-226.46F), (-760.5F), 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-789.0F), 0.0F, (-1.0F), 0.0F, (-1489.7F), (-226.46F), (-760.5F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 284;
      intArray0[1] = 5;
      intArray0[2] = (-2146788893);
      intArray0[3] = 2200;
      intArray0[4] = 2939;
      intArray0[6] = (-2146788893);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {284, 5, (-2146788893), 2200, 2939, 0, (-2146788893)}, intArray0);
      assertEquals(7, intArray0.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {284, 5, (-2146788893), 2200, 2939, 0, (-2146788893)}, intArray0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 159.1;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.0, 159.1}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1376.1968F);
      floatArray0[1] = -0.0F;
      floatArray0[2] = 329.2243F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1376.1968F), -0.0F, 329.2243F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = -0.0F;
      floatArray1[1] = (-1376.1968F);
      floatArray1[2] = -0.0F;
      boolean boolean1 = MathArrays.equals(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1376.1968F), -0.0F, 329.2243F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {-0.0F, (-1376.1968F), -0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.scaleInPlace((-1758.496903303), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, Float.NaN}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1015.7668818365713;
      doubleArray0[1] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1015.7668818365713, double0, 0.01);
      assertArrayEquals(new double[] {1015.7668818365713, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long[] longArray0 = new long[18];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(18, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.041666666666666664;
      doubleArray0[1] = (-1627.105805992);
      doubleArray0[2] = 10.0;
      doubleArray0[3] = (-0.25);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1627.105805992);
      doubleArray1[1] = 0.041666666666666664;
      doubleArray1[2] = (-0.25);
      doubleArray1[3] = (-0.25);
      doubleArray1[4] = 10.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(1627.1474726586666, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.041666666666666664, (-1627.105805992), 10.0, (-0.25)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1627.105805992), 0.041666666666666664, (-0.25), (-0.25), 10.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.041666666666666664, (-1627.105805992), 10.0, (-0.25)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 127;
      intArray0[1] = 1704;
      intArray0[2] = 2146347684;
      intArray0[3] = 322;
      intArray0[4] = 956;
      intArray0[5] = 2144343854;
      intArray0[6] = (-442);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1704;
      intArray1[1] = (-442);
      intArray1[2] = 956;
      intArray1[3] = 956;
      intArray1[4] = (-442);
      intArray1[6] = 956;
      intArray1[7] = 322;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-4269561), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {127, 1704, 2146347684, 322, 956, 2144343854, (-442)}, intArray0);
      assertArrayEquals(new int[] {1704, (-442), 956, 956, (-442), 0, 956, 322}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      
      int int1 = MathArrays.distanceInf(intArray1, intArray1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1704, (-442), 956, 956, (-442), 0, 956, 322}, intArray1);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-2089.7326537010217);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 79.494780627;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 79.494780627, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(0.0, 79.494780627, 0.0, (-1274.22266882186), 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-10);
      doubleArray0[1] = (double) (-10);
      doubleArray0[2] = (double) (-10);
      doubleArray0[3] = (double) (-10);
      doubleArray0[4] = (double) (-10);
      doubleArray0[5] = (double) (-10);
      doubleArray0[6] = 7.691317200522015E-302;
      double[][] doubleArray1 = new double[4][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-10.0), (-10.0), (-10.0), (-10.0), (-10.0), (-10.0), 7.691317200522015E-302}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-10);
      floatArray0[1] = (float) (-10);
      floatArray0[2] = (float) (-10);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-10);
      floatArray1[1] = (-3483.0835F);
      floatArray1[2] = (float) (-10);
      floatArray1[3] = (float) (-10);
      floatArray1[4] = (float) (-10);
      floatArray1[5] = (float) (-10);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-10.0F), (-3483.0835F), (-10.0F), (-10.0F), (-10.0F), (-10.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-10.0F), (-10.0F), (-10.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2.8153022839871134);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2.8153022839871134));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, (-2.8153022839871134));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Double double0 = new Double(2071.9106502);
      assertEquals(2071.9106502, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(6959144.0);
      assertEquals(6959144.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2093.0199835973;
      doubleArray1[1] = 2093.0199835973;
      doubleArray1[2] = 2565.56698961057;
      doubleArray1[3] = (double) doubleArray0[1];
      doubleArray1[4] = 2093.0199835973;
      doubleArray1[5] = 2071.9106502;
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {2093.0199835973, 2093.0199835973, 2565.56698961057, 2071.9106502, 2093.0199835973, 2071.9106502}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 5.041914939880371);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {2093.0199835973, 2093.0199835973, 2565.56698961057, 2071.9106502, 2093.0199835973, 2071.9106502}, doubleArray1, 0.01);
      assertEquals(11, doubleArray3.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double((-207.3880142456));
      assertEquals((-207.3880142456), (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 508.185538749842;
      doubleArray1[1] = 508.185538749842;
      doubleArray1[2] = 508.185538749842;
      doubleArray1[3] = 508.185538749842;
      doubleArray1[4] = 508.185538749842;
      doubleArray0[6] = doubleArray1;
//      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 392;
      intArray0[1] = (-1295);
      intArray0[2] = (-155);
      intArray0[3] = 709;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {392, (-1295), (-155), 709}, intArray0);
      assertArrayEquals(new int[] {392, (-1295), (-155), 709}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2638);
      doubleArray0[1] = (double) (-2638);
      doubleArray0[1] = (double) (-10);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2638.0189536847533, double0, 0.01);
      assertArrayEquals(new double[] {(-2638.0), (-10.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer((-10));
      assertEquals((-10), (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2638.0), (-10.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6959044.0, 100.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) (-10);
      floatArray0[2] = (float) 10;
      floatArray0[3] = (float) (-2638);
      floatArray0[4] = (float) (-10);
      floatArray0[5] = (float) 10;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {10.0F, (-10.0F), 10.0F, (-2638.0F), (-10.0F), 10.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 183;
      intArray0[1] = 166;
      intArray0[2] = 2442;
      intArray0[3] = 64;
      intArray0[4] = 83;
      intArray0[5] = 167;
      intArray0[6] = 2142049731;
      intArray0[7] = 134217729;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {183, 166, 2442, 64, 83, 167, 2142049731, 134217729}, intArray0);
      assertArrayEquals(new int[] {183, 166, 2442, 64, 83, 167, 2142049731, 134217729}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2142049731;
      doubleArray0[1] = 3403.035;
      doubleArray0[2] = (double) 2142049731;
      doubleArray0[3] = (double) 2142049731;
      doubleArray0[4] = (double) 2442;
      doubleArray0[5] = (double) 64;
      doubleArray0[6] = (double) 2142049731;
      doubleArray0[7] = (double) 183;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2.142049731E9, 3403.035, 2.142049731E9, 2.142049731E9, 2442.0, 64.0, 2.142049731E9, 183.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.142049731E9, 3403.035, 2.142049731E9, 2.142049731E9, 2442.0, 64.0, 2.142049731E9, 183.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 134217729;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 183;
      floatArray1[1] = (float) 166;
      floatArray1[2] = (float) 166;
      floatArray1[3] = (float) 64;
      floatArray1[4] = 1000.261F;
      floatArray1[5] = (float) 167;
      floatArray1[6] = (-1299.0F);
      floatArray1[7] = (float) 134217729;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.34217728E8F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {183.0F, 166.0F, 166.0F, 64.0F, 1000.261F, 167.0F, (-1299.0F), 1.34217728E8F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 457.6533204733111;
      doubleArray0[1] = (-131.3543);
      doubleArray0[3] = 166.16251742656;
      doubleArray0[4] = 457.6533204733111;
      MathArrays.scaleInPlace(209446.5617402472, doubleArray0);
      assertArrayEquals(new double[] {9.58539144421425E7, (-2.7511706504796952E7), 0.0, 3.48021679650969E7, 9.58539144421425E7}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {9.58539144421425E7, (-2.7511706504796952E7), 0.0, 3.48021679650969E7, 9.58539144421425E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.187972913881574E15, 7.568939948060869E14, 0.0, 1.2111908950708168E15, 9.187972913881574E15}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace(1.25, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.7976931348623157E308;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray2[1] = 1.7976931348623157E308;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
//      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 457.6533204733111;
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 457.6533204733111, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-2064.74), 0.0, 0.0, (-2064.74), 1.7976931348623157E308, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double0 = (-1295.214274195547);
      double[] doubleArray1 = MathArrays.scale((-1295.214274195547), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.7976931348623157E308;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination((-1704.59196483629), 1.7976931348623157E308, (-909.641), 4559.3636, (-1704.59196483629), 11.0224);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.scale(2093.0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long[] longArray0 = new long[1];
      Double double0 = new Double((-1476.0104766434));
      assertEquals((-1476.0104766434), (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2709.82531;
      doubleArray0[1] = 1.7976931348623157E308;
      Double double0 = new Double(835.235224);
      assertEquals(835.235224, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale((-3.0), doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      MathArrays.checkPositive(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-4545);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-3);
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2353.33325694);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, (-2353.33325694)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      float float0 = 1581.8412F;
      floatArray0[0] = 1581.8412F;
      float float1 = (-743.4449F);
      floatArray0[1] = (-743.4449F);
      float float2 = 5019.6753F;
      floatArray0[2] = 5019.6753F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-3630.3008F);
      floatArray0[5] = 1987.0753F;
      floatArray0[6] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1581.8412F, (-743.4449F), 5019.6753F, 0.0F, (-3630.3008F), 1987.0753F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1481;
      intArray0[1] = 6;
      intArray0[2] = (-1011);
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1011);
      intArray1[1] = 1773;
      intArray1[2] = 6;
      intArray1[3] = (-1);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(5276, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1481, 6, (-1011)}, intArray0);
      assertArrayEquals(new int[] {(-1011), 1773, 6, (-1)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1011);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 0.0F;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = 2048.654;
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = (double) 0.0F;
      doubleArray1[6] = 0.0;
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2709.82531;
      doubleArray0[1] = 1.7976931348623157E308;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      int int0 = 2120805102;
      intArray1[1] = 2120805102;
      intArray1[2] = 2;
      intArray1[3] = 11;
      intArray1[4] = 8;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2.8153022839871134);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5.630604567974227)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5.630604567974227)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2743.26, 2743.26, 2743.26, (-3756.736121708), (-1.0), (-1.0));
      assertEquals((-2780227.5056366883), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2743.26;
      doubleArray0[1] = 2743.26;
      doubleArray0[2] = 2743.26;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-3756.736121708);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-3756.736121708);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-3756.736121708));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2743.26, 2743.26, 2743.26, (-1.0), (-3756.736121708), 1.34217729E8, (-1.0), (-3756.736121708)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.07678306855046885), (-0.07678306855046885), (-0.07678306855046885), 2.7989716086141612E-5, 0.10514997745715968, (-3756.7161284366957), 2.7989716086141612E-5, 0.10514997745715968}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals((-5.042179086783949E11), double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2743.26, 2743.26, 2743.26, (-1.0), (-3756.736121708), 1.34217729E8, (-1.0), (-3756.736121708)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.07678306855046885), (-0.07678306855046885), (-0.07678306855046885), 2.7989716086141612E-5, 0.10514997745715968, (-3756.7161284366957), 2.7989716086141612E-5, 0.10514997745715968}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathArrays.linearCombination((double) 0.0F, 1.34217729E8, (double) 0.0F, (double) 0.0F, (-872.0428509549897), 0.5463024377822876);
      assertEquals((-476.399135327327), double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 79.494780627;
      doubleArray0[3] = 0.5463024377822876;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 1.304E19;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-476.399135327327));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 79.494780627, 0.5463024377822876, 1.34217729E8, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, (-2.904236560839612E-15), (-1.9958436271780203E-17), (-4.903467027648724E-9), (-476.3991353224235)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Double double1 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      double double2 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(226956.13613595278, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 79.494780627, 0.5463024377822876, 1.34217729E8, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, (-2.904236560839612E-15), (-1.9958436271780203E-17), (-4.903467027648724E-9), (-476.3991353224235)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 508.185538749842;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 508.185538749842;
      doubleArray1[1] = -0.0;
      doubleArray1[2] = 508.185538749842;
      doubleArray1[3] = 508.185538749842;
      doubleArray1[4] = -0.0;
      doubleArray1[5] = -0.0;
      doubleArray1[6] = -0.0;
      doubleArray1[7] = 2890.1951072884985;
      doubleArray1[8] = -0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 508.185538749842, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {508.185538749842, -0.0, 508.185538749842, 508.185538749842, -0.0, -0.0, -0.0, 2890.1951072884985, -0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 508.185538749842, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {508.185538749842, -0.0, 508.185538749842, 508.185538749842, -0.0, -0.0, -0.0, 2890.1951072884985, -0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[2];
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2.8153022839871134);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2.8153022839871134));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Double double0 = new Double(835.235224);
      assertEquals(835.235224, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray2 = MathArrays.scale((-2116.6377889), doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5958.975201463603}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      MathArrays.checkPositive(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5958.975201463603}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2093.0199835973;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2093.0199835973;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2093.0199835973}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2093.0199835973}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2093.0199835973}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1874;
      intArray0[1] = 746;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, intArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2709.82531;
      doubleArray0[1] = 1.7976931348623157E308;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7343153.210716597, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.32;
      Double double0 = new Double(3.32);
      assertEquals(3.32, (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer0 = new Integer(1929);
      assertEquals(1929, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray1 = MathArrays.scale((-131.3543), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.32, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-436.096276), -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-4);
      intArray0[1] = 1929;
      intArray0[2] = (-4);
      intArray0[3] = (-4);
      intArray0[4] = (-4);
      intArray0[5] = 1929;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-4), 1929, (-4), (-4), (-4), 1929, 0}, intArray0);
      assertArrayEquals(new int[] {(-4), 1929, (-4), (-4), (-4), 1929, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3.32;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (-131.3543);
      doubleArray2[3] = (double) (-4);
      doubleArray2[4] = (double) (-4);
      doubleArray2[5] = (double) (-4);
      doubleArray2[6] = (-131.3543);
//      try { 
        MathArrays.convolve(doubleArray2, (double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2743.26, 2743.26, 2743.26, (-3756.736121708), (-1.0), (-1.0));
      assertEquals((-2780227.5056366883), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[3][5];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-131.3543);
      doubleArray0[3] = 166.16251742656;
      doubleArray0[4] = 3.32;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(211.86311412329863, double0, 0.01);
      assertArrayEquals(new double[] {3.32, (-131.3543), 0.0, 166.16251742656, 3.32}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Integer integer0 = new Integer((-298));
      assertEquals((-298), (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.32;
      doubleArray1[1] = (double) 10;
      doubleArray1[2] = 1933.29;
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      MathArrays.scaleInPlace(1.7976931348623157E308, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 311;
      intArray0[1] = (-2638);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2984);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(2667969.988772982, 55.0, (double) 0, (double) 0, 2312.6201171875, 1.7976931348623157E308);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 167.6736085;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double(167.6736085);
      assertEquals(167.6736085, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-2450.9369277));
      assertEquals((-2450.9369277), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(167.6736085);
      assertEquals(167.6736085, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double((-1426.701358641));
      assertEquals((-1426.701358641), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2709.82531;
      double double0 = MathArrays.linearCombination(489.8553, 487730.43412899994, 1.0, 2709.82531, 487730.43412899994, 4035.0, 1.0, 489.8553);
      assertEquals(2.2069128395205164E9, double0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1309.0;
      doubleArray1[1] = 2.2069128395205164E9;
      doubleArray1[2] = (-1226.5537);
      doubleArray1[3] = (-1326.7588453);
      doubleArray1[4] = 2709.82531;
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2709.82531;
      doubleArray0[1] = 1.7976931348623157E308;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3.6725170580355583E-9;
      doubleArray0[2] = 1.86285714285714278E18;
      doubleArray0[3] = 928.8442204951;
      doubleArray0[4] = 2709.82531;
      doubleArray0[5] = (-713.0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 3.6725170580355583E-9, 1.86285714285714278E18, 928.8442204951, 2709.82531, (-713.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {Double.NaN, 3.6725170580355583E-9, 1.86285714285714278E18, 928.8442204951, 2709.82531, (-713.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 3.6725170580355583E-9, 1.86285714285714278E18, 928.8442204951, 2709.82531, (-713.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-3062);
      intArray0[1] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 74);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3062), 2}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(74, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 1773.3665551177166, 580.94522, (-1453.9478671), 0.0, 1773.3665551177166, (-153.88112732386), 1309.0);
      assertEquals((-1046094.4591878729), double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 580.94522;
      doubleArray0[1] = (-1453.9478671);
      doubleArray0[2] = (-153.88112732386);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1453.9478671);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1309.0;
      doubleArray1[2] = (-1453.9478671);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1326.7588453);
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(249555.57210556374, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {580.94522, (-1453.9478671), (-153.88112732386), 0.0, (-1453.9478671)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1309.0, (-1453.9478671), 0.0, (-1326.7588453)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {580.94522, (-1453.9478671), (-153.88112732386), 0.0, (-1453.9478671)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(580.94522, (-1046094.4591878729), (-1587.74554), 6959162.435252813, (-1046094.4591878729), 1309.0, 249555.57210556374, (-153.88112732386));
      assertEquals((-1.3064842234284351E10), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2709.82531;
      doubleArray0[1] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 5102.405708);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7.691317200522015E-302, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 5102.405708;
      doubleArray2[1] = (-3.43338934259355E-8);
      doubleArray2[2] = (-2127.02496932853);
      doubleArray2[3] = 1.7976931348623157E308;
      doubleArray2[4] = 2709.82531;
      doubleArray2[5] = 5102.405708;
      doubleArray2[6] = 2709.82531;
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {5102.405708, (-3.43338934259355E-8), (-2127.02496932853), 1.7976931348623157E308, 2709.82531, 5102.405708, 2709.82531}, doubleArray2, 0.01);
      assertEquals(7, doubleArray2.length);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray2);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5102.405708, (-3.43338934259355E-8), (-2127.02496932853), 1.7976931348623157E308, 2709.82531, 5102.405708, 2709.82531}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray0, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2707.82531, Double.NEGATIVE_INFINITY}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {2.0, Double.POSITIVE_INFINITY}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray4.length);
      assertEquals(2, doubleArray3.length);
      assertNotNull(doubleArray4);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 2, 2}, intArray0);
      assertArrayEquals(new int[] {2, 2, 2}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7.691317200522015E-302, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-131.3543);
      doubleArray0[2] = (-131.3543);
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3.32, (-131.3543), (-131.3543), 6.283185307179586, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Double double0 = new Double(6.283185307179586);
      assertEquals(6.283185307179586, (double)double0, 0.01);
      assertNotNull(double0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-131.3543);
      doubleArray1[1] = (Double) Double.POSITIVE_INFINITY;
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) Double.POSITIVE_INFINITY;
      doubleArray1[4] = double0;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Double double0 = new Double(86);
      assertEquals(86.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1887.0));
      assertEquals((-1887.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(7.925926950223057);
      assertEquals(7.925926950223057, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double((-2193.0));
      assertEquals((-2193.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(2706.202939709057);
      assertEquals(2706.202939709057, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      Double double5 = new Double((-414.10780060493));
      assertEquals((-414.10780060493), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotNull(double5);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = double4;
      doubleArray1[1] = double0;
      doubleArray1[2] = double2;
      doubleArray1[3] = double2;
      doubleArray1[4] = double3;
      doubleArray1[5] = double4;
      doubleArray1[6] = double4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, doubleArray1.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 395);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.32;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.32);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.32, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.32, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3.32, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.32, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.32, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {3.32, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {3.32, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.64, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2598.5584670550743);
      doubleArray3[1] = 3.32;
      doubleArray3[2] = 3.32;
//      try { 
        MathArrays.ebeSubtract(doubleArray3, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Double double0 = new Double(4108.9564915);
      assertEquals(4108.9564915, (double)double0, 0.01);
      assertNotNull(double0);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2743.26, 2743.26, 2743.26, (-3756.736121708), (-1.0), (-1.0));
      assertEquals((-2780227.5056366883), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 12;
      intArray0[1] = (-4915);
      intArray0[2] = (-1991);
      intArray0[3] = (-2146615276);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {12, (-4915), (-1991), (-2146615276)}, intArray0);
      assertArrayEquals(new int[] {12, (-4915), (-1991), (-2146615276)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      
      double[][] doubleArray2 = new double[2][9];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2627.36351;
//      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = (-10);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, (-10));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = (-2130303777);
      Double double0 = new Double(4108.9564915);
      assertEquals(4108.9564915, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(7.925926950223057);
      assertEquals(7.925926950223057, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      double double4 = (-20.0);
      Double double5 = new Double((-20.0));
      assertEquals((-20.0), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      Double double6 = new Double((-2609.42956333777));
      assertEquals((-2609.42956333777), (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotNull(double6);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double1;
      doubleArray1[1] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2130303777));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2.8153022839871134);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2.8153022839871134));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[3];
      doubleArray2[0] = (Double) (-2.8153022839871134);
      Double double0 = new Double(2382.06271);
      assertEquals(2382.06271, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[1] = double0;
      doubleArray2[2] = (Double) (-2.8153022839871134);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double((-1714.4270162));
      assertEquals((-1714.4270162), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1714.4270162));
      assertEquals((-1714.4270162), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-788));
      assertEquals((-788.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(2973.81);
      assertEquals(2973.81, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(2973.81);
      assertEquals(2973.81, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      Double double5 = new Double(0.19999954120254515);
      assertEquals(0.19999954120254515, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = double3;
      doubleArray0[2] = double1;
      doubleArray0[3] = double2;
      doubleArray0[4] = double2;
      doubleArray0[5] = double1;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      Field<Double> field1 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field1, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[1];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double double0 = (-2598.5584670550743);
      Double double1 = new Double((-2598.5584670550743));
      assertEquals((-2598.5584670550743), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      int int0 = 246;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2253, 2253);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 167.6736085;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double(167.6736085);
      assertEquals(167.6736085, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-2450.9369277));
      assertEquals((-2450.9369277), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2944);
      intArray0[1] = 397;
      intArray0[2] = 127;
      intArray0[3] = 400;
      intArray0[4] = 134217729;
      intArray0[5] = 400;
      intArray0[6] = 398;
      intArray0[7] = 2;
      intArray0[8] = (-591);
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {(-2944), 397, 127, 400, 134217729, 400, 398, 2, (-591)}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      MathArrays.scaleInPlace(1.7976931348623157E308, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 626.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 4397.203F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2831.707F;
      floatArray0[5] = 1672.8F;
      floatArray0[6] = (-1172.2087F);
      floatArray0[7] = (-1.4E-45F);
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {626.0F, 1.0F, 4397.203F, 0.0F, 2831.707F, 1672.8F, (-1172.2087F), (-1.4E-45F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(20.0);
      assertEquals(20.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(547.143848562897);
      assertEquals(547.143848562897, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) Double.POSITIVE_INFINITY;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, doubleArray1.length);
      
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      MathArrays.scaleInPlace(1.7976931348623157E308, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 311;
      intArray0[1] = (-2638);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2984);
      Integer integer0 = new Integer(311);
      assertEquals(311, (int)integer0);
      assertNotNull(integer0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-2984);
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = (-2638);
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2143266160;
      intArray0[1] = 2134107032;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2143266160, 2134107032}, intArray0);
      assertArrayEquals(new int[] {2143266160, 2134107032}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2143266160;
      doubleArray0[1] = (double) 2134107032;
      doubleArray0[2] = (double) 2134107032;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1.3702415480664844E19, double0, 0.01);
      assertArrayEquals(new double[] {2.14326616E9, 2.134107032E9, 2.134107032E9}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.14326616E9, 2.134107032E9, 2.134107032E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.14326616E9, 2.134107032E9, 2.134107032E9}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double1 = new Double(2143266160);
      assertEquals(2.14326616E9, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2134107032;
      intArray2[1] = 2134107032;
      doubleArray0[2] = (double) 2134107032;
      intArray2[3] = (-363);
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray2, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-698.377);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-3053.1401598325);
      doubleArray0[3] = (-414.10780060493);
      doubleArray0[4] = 900.074338532;
      doubleArray0[5] = (-3442.111068159);
      doubleArray0[6] = 1633.3921723741;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-698.377), Double.NaN, (-3053.1401598325), (-414.10780060493), 900.074338532, (-3442.111068159), 1633.3921723741}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {487730.43412899994, Double.NaN, 9321664.835582023, 171485.27052185245, 810133.8148838172, 1.1848128605542691E7, 2667969.988772982}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = new double[1][6];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1171;
      double[] doubleArray3 = MathArrays.scale((-414.10780060493), doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4.90640247812564E9), (-3.860174123039188E9), (-2.0197297736524785E8), (-7.101338821194576E7), (-3.3548273227721906E8), (-1.1048271841307392E9), Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray3);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 1171, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("ZHzyLe`a");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.ZHzyLe`a
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.32;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.32;
      doubleArray1[1] = 1687.32994414741;
      doubleArray1[2] = 2709.82531;
      doubleArray1[3] = (-1.5707963267948966);
      doubleArray1[4] = 2709.82531;
      doubleArray1[5] = 2709.82531;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.32, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.32, 1687.32994414741, 2709.82531, (-1.5707963267948966), 2709.82531, 2709.82531}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not increasing (3.32 > 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-131.3543);
      doubleArray0[2] = 166.16251742656;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3.32, (-131.3543), 166.16251742656, 6.283185307179586, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[][] longArray0 = new long[1][0];
      long[] longArray1 = new long[7];
      longArray1[0] = (-615L);
      longArray1[1] = (-5351L);
      longArray1[2] = 0L;
      longArray1[3] = (-1749L);
      longArray1[4] = 1L;
      longArray1[5] = (-2527L);
      longArray1[6] = (-1L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {3.32, (-131.3543), 166.16251742656, 6.283185307179586, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.32, (-131.3543), 166.16251742656, 6.283185307179586, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {3.32, (-131.3543), 166.16251742656, 6.283185307179586, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-2527L);
      floatArray0[1] = (float) (-1749L);
      floatArray0[2] = (float) (-5351L);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-2527.0F), (-1749.0F), (-5351.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.32, (-131.3543), 166.16251742656, 6.283185307179586, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {(-2527.0F), (-1749.0F), (-5351.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.32;
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 20.022628859543065;
      doubleArray0[3] = 3.32;
      doubleArray0[4] = 20.022628859543065;
      doubleArray0[5] = (-1548.6266365);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 20.022628859543065, 3.32, 20.022628859543065, (-1548.6266365)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 20.022628859543065, 3.32, 20.022628859543065, (-1548.6266365)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 20.022628859543065, 3.32, 20.022628859543065, (-1548.6266365)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 20.022628859543065, 3.32, 20.022628859543065, (-1548.6266365)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 20.022628859543065, 3.32, 20.022628859543065, (-1548.6266365)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 20.022628859543065, 3.32, 20.022628859543065, (-1548.6266365)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not decreasing (0 < 20.023)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.scale(857, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-698.377);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-3053.1401598325);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 900.074338532;
      doubleArray0[5] = (-3442.111068159);
      doubleArray0[6] = 1633.3921723741;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-698.377), Double.NaN, (-3053.1401598325), Double.NaN, 900.074338532, (-3442.111068159), 1633.3921723741}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {487730.43412899994, Double.NaN, 9321664.835582023, Double.NaN, 810133.8148838172, 1.1848128605542691E7, 2667969.988772982}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = new double[1][6];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), 900.074338532, 1633.3921723741, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), 900.074338532, 1633.3921723741, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 810133.8148838172, 2667969.988772982, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 1171;
      intArray0[1] = 1171;
      double[] doubleArray3 = MathArrays.scale((-414.10780060493), doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), 900.074338532, 1633.3921723741, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.90640247812564E9), (-3.860174123039188E9), (-2.0197297736524785E8), (-3.3548273227721906E8), (-1.1048271841307392E9), Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 810133.8148838172, 2667969.988772982, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray3);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), 900.074338532, 1633.3921723741, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 810133.8148838172, 2667969.988772982, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray1, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), 900.074338532, 1633.3921723741, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.90640247812564E9), (-3.860174123039188E9), (-2.0197297736524785E8), (-3.3548273227721906E8), (-1.1048271841307392E9), Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-4.894554349520097E9), (-3.8508524582036057E9), (-2.0148524693111885E8), (-3.346725984623352E8), (-1.1021592141419663E9), Double.NaN, Double.NaN}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 810133.8148838172, 2667969.988772982, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray4.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray4);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), 900.074338532, 1633.3921723741, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 810133.8148838172, 2667969.988772982, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray5 = MathArrays.normalizeArray(doubleArray1, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), 900.074338532, 1633.3921723741, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, Double.NaN}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 810133.8148838172, 2667969.988772982, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray5.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray5);
      
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), 900.074338532, 1633.3921723741, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray6 = MathArrays.convolve(doubleArray1, doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray6);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray6);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray5);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), 900.074338532, 1633.3921723741, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.90640247812564E9), (-3.860174123039188E9), (-2.0197297736524785E8), (-3.3548273227721906E8), (-1.1048271841307392E9), Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-4.894554349520097E9), (-3.8508524582036057E9), (-2.0148524693111885E8), (-3.346725984623352E8), (-1.1021592141419663E9), Double.NaN, Double.NaN}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 810133.8148838172, 2667969.988772982, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray4.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(13, doubleArray6.length);
      assertNotNull(doubleArray6);
      
      double[] doubleArray7 = MathArrays.ebeSubtract(doubleArray1, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray6));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray6));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray6));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray7);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray6);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray7);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray7);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray7, doubleArray6);
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray1);
      assertNotSame(doubleArray7, doubleArray0);
      assertNotSame(doubleArray7, doubleArray4);
      assertNotSame(doubleArray7, doubleArray3);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), 900.074338532, 1633.3921723741, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.90640247812564E9), (-3.860174123039188E9), (-2.0197297736524785E8), (-3.3548273227721906E8), (-1.1048271841307392E9), Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 810133.8148838172, 2667969.988772982, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4.918250606731183E9, 3.86949578787477E9, 2.0246070779937685E8, 3.362928660921029E8, 1.107495154119512E9, Double.NaN, Double.NaN}, doubleArray7, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray7.length);
      assertNotNull(doubleArray7);
      
      int int2 = 257;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 257);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.227956486585809;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.227956486585809);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.227956486585809, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.227956486585809, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 167.6736085;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double(167.6736085);
      assertEquals(167.6736085, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-2450.9369277));
      assertEquals((-2450.9369277), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = (Double) 167.6736085;
      doubleArray1[3] = double0;
      Double double2 = new Double(167.6736085);
      assertEquals(167.6736085, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray1[4] = double2;
      doubleArray1[5] = (Double) 167.6736085;
      doubleArray1[6] = (Double) 167.6736085;
      doubleArray1[7] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 508.185538749842;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (508.186 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Double double0 = new Double(4105.9849753286);
      assertEquals(4105.9849753286, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(7.925926950223057);
      assertEquals(7.925926950223057, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double((-20.0));
      assertEquals((-20.0), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      
      Double double5 = new Double((-2609.42956333777));
      assertEquals((-2609.42956333777), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double1;
      doubleArray1[1] = (Double) 0.0;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 86;
      double double6 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double6, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 86}, intArray0);
      assertEquals(4, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 86;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 86;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {86.0F, 0.0F, 86.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      Double[] doubleArray1 = new Double[6];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray1[1] = double1;
      Double double2 = new Double((-2735.215375107));
      assertEquals((-2735.215375107), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray1[2] = double2;
      Double double3 = new Double(2450.9369277);
      assertEquals(2450.9369277, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray1[3] = double3;
      Double double4 = new Double(2450.9369277);
      assertEquals(2450.9369277, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray1[4] = double4;
      Double double5 = new Double(0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      doubleArray1[5] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, doubleArray1.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 857);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Double double0 = new Double((-2598.5584670550743));
      assertEquals((-2598.5584670550743), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 246, 246);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 508.185538749842;
      doubleArray0[2] = -0.0;
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 508.185538749842;
      doubleArray0[3] = 724.1332503;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = -0.0;
      doubleArray1[2] = 0.0;
      Double[] doubleArray2 = new Double[5];
      Double double0 = new Double(508.185538749842);
      assertEquals(508.185538749842, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[0] = double0;
//      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-131.3543);
      doubleArray0[2] = 166.16251742656;
      Double double0 = new Double(2812.05369637);
      assertEquals(2812.05369637, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2276L);
      assertEquals(2276.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-124L));
      assertEquals((-124.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(488428.8111289999);
      assertEquals(488428.8111289999, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(11.0224);
      assertEquals(11.0224, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-131.3543);
      doubleArray1[1] = (Double) (-131.3543);
      doubleArray1[2] = double4;
      doubleArray1[3] = (Double) 166.16251742656;
      doubleArray1[4] = (Double) 3.32;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2143266160;
      intArray0[1] = 2134107032;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2143266160, 2134107032}, intArray0);
      assertArrayEquals(new int[] {2143266160, 2134107032}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2143266160;
      doubleArray0[1] = (double) 2134107032;
      doubleArray0[2] = (double) 2134107032;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1.3702415480664844E19, double0, 0.01);
      assertArrayEquals(new double[] {2.14326616E9, 2.134107032E9, 2.134107032E9}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.14326616E9, 2.134107032E9, 2.134107032E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.14326616E9, 2.134107032E9, 2.134107032E9}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.14326616E9, 2.134107032E9, 2.134107032E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.14326616E9, 2.134107032E9, 2.134107032E9}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2143266160;
      intArray2[1] = 2134107032;
      intArray2[2] = 2134107032;
      intArray2[3] = (-363);
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray2, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2.8153022839871134);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2.8153022839871134));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Double>) null, (-1330), 200);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2.8153022839871134);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2.8153022839871134));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.8153022839871134)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Double>) null, (-943), (-943));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2743.26, 2743.26, 2743.26, (-3756.736121708), (-1.0), (-1.0));
      assertEquals((-2780227.5056366883), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      Double double1 = new Double((-2780227.5056366883));
      assertEquals((-2780227.5056366883), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = double1;
      doubleArray1[1] = double1;
      doubleArray1[2] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = (-2684);
      intArray1[2] = 495;
      intArray1[3] = (-654);
      intArray1[4] = 1597;
      intArray1[5] = 217;
      intArray1[6] = (-2143499447);
      intArray1[7] = 1968860108;
      intArray1[8] = 837;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(0, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1), (-2684), 495, (-654), 1597, 217, (-2143499447), 1968860108, 837}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(9, intArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = 0;
      Double double0 = new Double(4108.9564915);
      assertEquals(4108.9564915, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(7.925926950223057);
      assertEquals(7.925926950223057, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0);
      assertEquals(0.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double((-20.0));
      assertEquals((-20.0), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      Double double5 = new Double((-2609.42956333777));
      assertEquals((-2609.42956333777), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double1;
      doubleArray1[1] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, doubleArray1.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 86);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-131.3543);
      doubleArray0[2] = 166.16251742656;
      long[] longArray0 = new long[3];
      longArray0[0] = 86L;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 86L;
      doubleArray1[1] = 3.32;
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2627.36351;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1295.214274195547);
      doubleArray0[3] = 4372.613343779147;
      doubleArray0[4] = 4372.613343779147;
      doubleArray0[5] = (-1295.214274195547);
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 47);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2627.36351, 0.0, (-1295.214274195547), 4372.613343779147, 4372.613343779147, (-1295.214274195547), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(47, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {2627.36351, 0.0, (-1295.214274195547), 4372.613343779147, 4372.613343779147, (-1295.214274195547), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(47, doubleArray1.length);
      
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 2 and 3 are not decreasing (-1,295.214 < 4,372.613)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {3.32, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3.32, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {3.32, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(624.1180833, 0.0, 0.0, 4295.081972693059, 2709.82531, 0.0, 3.32, (-688.628));
      assertEquals((-2286.24496), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3.32, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-53);
      intArray0[1] = (-1846);
      intArray0[2] = 1968860108;
      intArray0[3] = (-1);
      intArray0[4] = 3;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-53), (-1846), 1968860108, (-1), 3}, intArray0);
      assertArrayEquals(new int[] {(-53), (-1846), 1968860108, (-1), 3}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 3;
      intArray2[1] = (-1846);
      intArray2[2] = (-1846);
      intArray2[3] = (-1846);
      intArray2[4] = 3;
      intArray2[5] = (-1);
      double double3 = MathArrays.distance(intArray1, intArray2);
      assertEquals(1.9688619540008652E9, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {(-53), (-1846), 1968860108, (-1), 3}, intArray0);
      assertArrayEquals(new int[] {(-53), (-1846), 1968860108, (-1), 3}, intArray1);
      assertArrayEquals(new int[] {3, (-1846), (-1846), (-1846), 3, (-1)}, intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(6, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 134217729;
      intArray0[1] = 468;
      intArray0[2] = 0;
      intArray0[3] = (-2559);
      intArray0[4] = 86;
      intArray0[5] = (-2207);
      intArray0[6] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {134217729, 468, 0, (-2559), 86, (-2207), 0}, intArray0);
      assertArrayEquals(new int[] {134217729, 468, 0, (-2559), 86, (-2207), 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-2514.1694899));
      assertEquals((-2514.1694899), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-558.1957));
      assertEquals((-558.1957), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-20.0));
      assertEquals((-20.0), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-13.050290607681));
      assertEquals((-13.050290607681), (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-698.377);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-3053.1401598325);
      doubleArray0[3] = (-414.10780060493);
      doubleArray0[4] = 900.074338532;
      doubleArray0[5] = (-3442.111068159);
      doubleArray0[6] = 1633.3921723741;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-698.377), Double.NaN, (-3053.1401598325), (-414.10780060493), 900.074338532, (-3442.111068159), 1633.3921723741}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {487730.43412899994, Double.NaN, 9321664.835582023, 171485.27052185245, 810133.8148838172, 1.1848128605542691E7, 2667969.988772982}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = new double[1][6];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1171;
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray3);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray1, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1844686494474532E7, 9318611.695422191, 487032.05712899996, 171071.16272124753, 811033.8892223493, 2669603.380945356, Double.NaN}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray4.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray4);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray5 = MathArrays.normalizeArray(doubleArray1, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray5);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray5.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray5);
      
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray6 = MathArrays.ebeMultiply(doubleArray1, doubleArray4);
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray6);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray6);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray6);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1844686494474532E7, 9318611.695422191, 487032.05712899996, 171071.16272124753, 811033.8892223493, 2669603.380945356, Double.NaN}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {1.4033736887886889E14, 8.686497495766042E13, 2.3754035665826706E11, 2.9336184617740974E10, 6.57045978675761E11, 7.122421702289096E12, Double.NaN}, doubleArray6, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray4.length);
      assertEquals(7, doubleArray6.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray6);
      
      double[] doubleArray7 = MathArrays.ebeSubtract(doubleArray1, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray6));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray6));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray6));
      assertNotSame(doubleArray3, doubleArray7);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray6);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray7);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray3);
      assertNotSame(doubleArray7, doubleArray0);
      assertNotSame(doubleArray7, doubleArray4);
      assertNotSame(doubleArray7, doubleArray1);
      assertNotSame(doubleArray7, doubleArray6);
      assertNotSame(doubleArray1, doubleArray7);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray6);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.185157071661085E7, 9324717.975741856, 488428.8111289999, 171899.37832245737, 809233.7405452852, 2666336.5966006075, Double.NaN}, doubleArray7, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray7.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray7);
      
      MathArrays.checkPositive(doubleArray7);
      assertFalse(doubleArray3.equals((Object)doubleArray7));
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray6));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray6));
      assertFalse(doubleArray0.equals((Object)doubleArray7));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray1.equals((Object)doubleArray7));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray6));
      assertNotSame(doubleArray3, doubleArray7);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray6);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray7);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray3);
      assertNotSame(doubleArray7, doubleArray0);
      assertNotSame(doubleArray7, doubleArray4);
      assertNotSame(doubleArray7, doubleArray1);
      assertNotSame(doubleArray7, doubleArray6);
      assertNotSame(doubleArray1, doubleArray7);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray6);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.185157071661085E7, 9324717.975741856, 488428.8111289999, 171899.37832245737, 809233.7405452852, 2666336.5966006075, Double.NaN}, doubleArray7, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray7.length);
      assertEquals(7, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination(1.34217729E8, 1507.7052394, 516.084336, Double.NaN, (-1.0), Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-698.377);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-3053.1401598325);
      doubleArray0[3] = (-414.10780060493);
      doubleArray0[4] = 900.074338532;
      doubleArray0[5] = (-3442.111068159);
      doubleArray0[6] = 1633.3921723741;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-698.377), Double.NaN, (-3053.1401598325), (-414.10780060493), 900.074338532, (-3442.111068159), 1633.3921723741}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {487730.43412899994, Double.NaN, 9321664.835582023, 171485.27052185245, 810133.8148838172, 1.1848128605542691E7, 2667969.988772982}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = new double[1][6];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1171;
      double[] doubleArray3 = MathArrays.scale((-414.10780060493), doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4.90640247812564E9), (-3.860174123039188E9), (-2.0197297736524785E8), (-7.101338821194576E7), (-3.3548273227721906E8), (-1.1048271841307392E9), Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray3);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray1, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4.90640247812564E9), (-3.860174123039188E9), (-2.0197297736524785E8), (-7.101338821194576E7), (-3.3548273227721906E8), (-1.1048271841307392E9), Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.894554349520097E9), (-3.8508524582036057E9), (-2.0148524693111885E8), (-7.084190294142391E7), (-3.346725984623352E8), (-1.1021592141419663E9), Double.NaN}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray4.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray4);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray5 = MathArrays.normalizeArray(doubleArray1, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray5.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray5);
      
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray6 = MathArrays.ebeMultiply(doubleArray1, doubleArray4);
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray6);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray6);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4.90640247812564E9), (-3.860174123039188E9), (-2.0197297736524785E8), (-7.101338821194576E7), (-3.3548273227721906E8), (-1.1048271841307392E9), Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.894554349520097E9), (-3.8508524582036057E9), (-2.0148524693111885E8), (-7.084190294142391E7), (-3.346725984623352E8), (-1.1021592141419663E9), Double.NaN}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {(-5.7991309399932456E16), (-3.5896355946651144E16), (-9.827048695630334E13), (-1.2148342890192895E13), (-2.711295889293716E14), (-2.9405277061803805E15), Double.NaN}, doubleArray6, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray4.length);
      assertEquals(7, doubleArray6.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray6);
      
      double[] doubleArray7 = MathArrays.ebeSubtract(doubleArray1, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray6));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray6));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray6));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray6);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray7);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray0, doubleArray7);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray7, doubleArray0);
      assertNotSame(doubleArray7, doubleArray3);
      assertNotSame(doubleArray7, doubleArray6);
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray1);
      assertNotSame(doubleArray7, doubleArray4);
      assertNotSame(doubleArray1, doubleArray7);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4.90640247812564E9), (-3.860174123039188E9), (-2.0197297736524785E8), (-7.101338821194576E7), (-3.3548273227721906E8), (-1.1048271841307392E9), Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.918250606731183E9, 3.86949578787477E9, 2.0246070779937685E8, 7.11848734824676E7, 3.362928660921029E8, 1.107495154119512E9, Double.NaN}, doubleArray7, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray7.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray7);
      
      double[] doubleArray8 = new double[9];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray0));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = (double) 1171;
      doubleArray8[1] = Double.NaN;
      doubleArray8[2] = (-3053.1401598325);
      doubleArray8[3] = 0.19999999999923582;
      doubleArray8[4] = (-1323.1444306168025);
      doubleArray8[5] = (-3053.1401598325);
      doubleArray8[6] = (-414.10780060493);
      doubleArray8[7] = (-3053.1401598325);
      doubleArray8[8] = (double) 1171;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray8);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray7));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray6));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray8));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray7));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray8));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray6));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray0));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertNotSame(doubleArray0, doubleArray7);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray8);
      assertNotSame(doubleArray1, doubleArray7);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray8);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray8, doubleArray5);
      assertNotSame(doubleArray8, doubleArray1);
      assertNotSame(doubleArray8, doubleArray7);
      assertNotSame(doubleArray8, doubleArray0);
      assertNotSame(doubleArray8, doubleArray6);
      assertNotSame(doubleArray8, doubleArray3);
      assertNotSame(doubleArray8, doubleArray4);
      assertArrayEquals(new double[] {(-3442.111068159), (-3053.1401598325), (-698.377), (-414.10780060493), 900.074338532, 1633.3921723741, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1848128605542691E7, 9321664.835582023, 487730.43412899994, 171485.27052185245, 810133.8148838172, 2667969.988772982, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1171.0, Double.NaN, (-3053.1401598325), 0.19999999999923582, (-1323.1444306168025), (-3053.1401598325), (-414.10780060493), (-3053.1401598325), 1171.0}, doubleArray8, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(9, doubleArray8.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1696.26776365);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, (-1696.26776365)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1696.26776365)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.scaleInPlace(1.7976931348623157E308, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = 594.264;
      double double2 = MathArrays.linearCombination((-561.394512594059), 594.264, (-282.24047423809), 1.7976931348623157E308);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-926.2451F);
      floatArray0[1] = 3568.7507F;
      floatArray0[2] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-926.2451F), 3568.7507F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double double4 = 2245.0;
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      MathArrays.scaleInPlace(1.7976931348623157E308, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 311;
      intArray0[1] = (-2638);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2984);
      Integer integer0 = new Integer(311);
      assertEquals(311, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (-2638);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) (int)integer0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 311;
      doubleArray1[8] = (double) 0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination((-2068.748454241178), 0.0, 6.283185307179586, 689.6912861, 2709.82531, (double) 0, 1551.98, 4295.081972693059);
      assertEquals(6670214.778135487, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, 2.85040095144011776E17);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(2450.9369277, 0.04168701738764507, 2627.36351, (-1.0), 1.34217729E8, 0.003, 2627.36351, 2627.36351);
      assertEquals(7303167.009419842, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 938.67;
      doubleArray0[3] = 159.540137;
      doubleArray0[4] = 4372.613343779147;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 938.67, 159.540137, 4372.613343779147, 0.0, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 938.67, 159.540137, 4372.613343779147, 0.0, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      double double0 = MathArrays.linearCombination(0.0, 171485.27052185245, 159.540137, (double) 0, 2920.78807393208, 0.04168701738764507, (-3098.440153868648), 1.0);
      assertEquals((-2976.681210645015), double0, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 134217729;
      intArray0[2] = 0;
      intArray0[4] = 86;
      intArray0[5] = (-2207);
      intArray0[6] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {134217729, 0, 0, 0, 86, (-2207), 0}, intArray0);
      assertArrayEquals(new int[] {134217729, 0, 0, 0, 86, (-2207), 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[1] = double0;
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[2] = double1;
      Double double2 = new Double((-558.1957));
      assertEquals((-558.1957), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[3] = double2;
      Double double3 = new Double((-20.0));
      assertEquals((-20.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[4] = double3;
      Double double4 = new Double(0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[5] = double4;
      Double double5 = new Double((-13.050290607681));
      assertEquals((-13.050290607681), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      
      doubleArray0[6] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.Double", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-131.3543);
      doubleArray0[2] = 166.16251742656;
      long[] longArray0 = new long[2];
      longArray0[0] = 86L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {86L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int int0 = 0;
      int int1 = 233;
      int int2 = (-1860);
      int int3 = (-2940);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2940);
      int int4 = (-1143);
      intArray0[1] = (-1143);
      intArray0[2] = 233;
      intArray0[3] = (-2940);
      intArray0[4] = (-1860);
      intArray0[5] = 0;
      int int5 = (-4018);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-4018));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      MathArrays.scaleInPlace(1.7976931348623157E308, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 311;
      intArray0[1] = (-2638);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2984);
      Integer integer0 = new Integer(311);
      assertEquals(311, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (-2638);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) (int)integer0;
      doubleArray1[5] = (double) 0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 6.283185307179586;
      doubleArray2[1] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {6.283185307179586, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray2.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {311, (-2638), 0, 0, 0, (-2984)}, intArray0);
      assertArrayEquals(new int[] {311, (-2638), 0, 0, 0, (-2984)}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2709.82531;
      doubleArray0[1] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7343153.210716597, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7343153.210716597, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int int0 = 2500;
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd(doubleArray1, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 508.185538749842;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 724.1332503;
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) 508.185538749842;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 508.185538749842;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[1] = 508.185538749842;
      doubleArray2[2] = (double) doubleArray1[2];
      doubleArray2[3] = 724.1332503;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray2);
      assertEquals(508.185538749842, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {-0.0, 508.185538749842, 0.0, 724.1332503}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 508.185538749842, 508.185538749842, 724.1332503}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 0;
      double double1 = MathArrays.safeNorm(doubleArray3);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(2, doubleArray3.length);
      
      double double2 = MathArrays.linearCombination(0.9974949359893799, (-306.8536), 2709.82531, 3.32, 1.304E19, 2709.82531, 0.0, (-306.8536));
      assertEquals(3.53361220424E22, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3606.667287652);
      int[] intArray0 = new int[2];
      intArray0[0] = 86;
      intArray0[1] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {86, 0}, intArray0);
      assertArrayEquals(new int[] {86, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      Double double0 = new Double(4108.9564915);
      assertEquals(4108.9564915, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-3606.667287652));
      assertEquals((-3606.667287652), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(7.925926950223057);
      assertEquals(7.925926950223057, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double((-414.10780060493));
      assertEquals((-414.10780060493), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      Double double5 = new Double((-20.0));
      assertEquals((-20.0), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      Double double6 = new Double((-2609.42956333777));
      assertEquals((-2609.42956333777), (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotNull(double6);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double4;
      doubleArray1[1] = (Double) (-3606.667287652);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 857;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 857}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2709.82531;
      doubleArray0[1] = 1.7976931348623157E308;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 892);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(892, intArray1.length);
      assertNotNull(intArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2817.222685794039;
      doubleArray0[1] = 626.946623832132;
      doubleArray0[2] = (-808.4);
      doubleArray0[3] = (-913.99426735661);
      doubleArray0[4] = 93.1983919753;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-1321.49578354);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2817.222685794039, 626.946623832132, (-808.4), (-913.99426735661), 93.1983919753, Double.NaN, (-1321.49578354)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2500;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2500);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 134217729;
      intArray0[1] = 468;
      intArray0[2] = 0;
      intArray0[3] = (-2559);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = 516.084336;
      doubleArray0[2] = (double) 468;
      doubleArray0[3] = (double) 468;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 134217729;
      doubleArray0[7] = (double) (-2559);
      doubleArray0[8] = (double) 468;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.34217729E8, 516.084336, 468.0, 468.0, 0.0, 0.0, 1.34217729E8, (-2559.0), 468.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2559);
      doubleArray1[1] = (double) 134217729;
      doubleArray1[2] = (double) (-2559);
      doubleArray1[3] = (double) (-2559);
      doubleArray1[4] = (double) 134217729;
      doubleArray1[5] = (double) 468;
      doubleArray1[6] = (-899.02780879738);
      doubleArray1[7] = (double) 468;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2559.0), 1.34217729E8, (-2559.0), (-2559.0), 1.34217729E8, 468.0, (-899.02780879738), 468.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 516.084336, 468.0, 468.0, 0.0, 0.0, 1.34217729E8, (-2559.0), 468.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.scaleInPlace((-2559), doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {6548481.0, (-3.43463168511E11), 6548481.0, 6548481.0, (-3.43463168511E11), (-1197612.0), 2300612.1627124953, (-1197612.0)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-2168.4669861);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2.0;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.32;
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 20.022628859543065;
      doubleArray0[3] = 3.32;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = (-1548.6266365);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 20.022628859543065, 3.32, 1.34217729E8, (-1548.6266365)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 20.022628859543065, 3.32, 1.34217729E8, (-1548.6266365)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 20.022628859543065, 3.32, 1.34217729E8, (-1548.6266365)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 20.022628859543065, 3.32, 1.34217729E8, (-1548.6266365)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = 0.0;
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2940);
      intArray0[1] = 0;
      intArray0[2] = (-2940);
      intArray0[3] = 233;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1551);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2940), 0, (-2940), 233}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1551, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = 0L;
      longArray0[4] = 0L;
      long long1 = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2244L);
      long long2 = (-1199L);
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = new Double(77.82349045);
      assertEquals(77.82349045, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-3570.7), 0.0, 77.82349045, 1077.6476869618293);
      assertEquals(83866.30447473851, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      MathArrays.scaleInPlace(1.7976931348623157E308, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2984);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-2984)}, intArray0);
      assertEquals(6, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 167.6736085;
      doubleArray0[1] = (-2450.9369277);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2450.9369277);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {167.6736085, (-2450.9369277), 0.0, (-2450.9369277), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3470.201447483192, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {167.6736085, (-2450.9369277), 0.0, (-2450.9369277), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(167.6736085, (-116.6268679384), 167.6736085, (-2450.9369277));
      assertEquals((-430512.6866686471), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 508.185538749842;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 724.1332503;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 2627.36351;
      double double1 = 0.0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2627.36351;
      doubleArray1[1] = 0.0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {2627.36351, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6903039.013679521, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long[][] longArray0 = new long[7][7];
      long[] longArray1 = new long[6];
      longArray1[0] = 2009L;
      longArray1[1] = 0L;
      longArray1[2] = 2147483647L;
      longArray1[3] = 1955L;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2009L;
      doubleArray0[1] = (double) 2009L;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 1955L;
      doubleArray0[5] = (double) 1955L;
      doubleArray0[6] = (double) 1955L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 2009L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2009.0, 2009.0, Double.POSITIVE_INFINITY, 0.0, 1955.0, 1955.0, 1955.0, 0.0, 2009.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(7, longArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {2009.0, 2009.0, Double.POSITIVE_INFINITY, 0.0, 1955.0, 1955.0, 1955.0, 0.0, 2009.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2009.0, 2009.0, Double.POSITIVE_INFINITY, 0.0, 1955.0, 1955.0, 1955.0, 0.0, 2009.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2009.0, 2009.0, Double.POSITIVE_INFINITY, 0.0, 1955.0, 1955.0, 1955.0, 0.0, 2009.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-131.3543);
      doubleArray0[2] = 166.16251742656;
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[3];
      longArray1[0] = 86L;
      longArray1[1] = 2276L;
      longArray1[2] = 4503599627370495L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-124L);
      longArray2[1] = 86L;
      longArray2[2] = 86L;
      longArray2[3] = 2009L;
      longArray0[1] = longArray2;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -124 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1536));
      assertEquals((-1536), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-1536));
      assertEquals((-1536), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = Integer.getInteger("0^E\"j!RA>", (-1116));
      assertEquals((-1116), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[0] = integer2;
      Integer integer3 = new Integer(6);
      assertEquals(6, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      assertEquals((-1536), (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertEquals(6, integerArray0.length);
      assertNotNull(integer4);
      
      integerArray0[5] = integer4;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3606.667287652);
      doubleArray0[1] = (-1696.26776365);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-3606.667287652), (-1696.26776365)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-3606.667287652), (-1696.26776365)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.scaleInPlace(1.7976931348623157E308, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 508.185538749842;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 724.1332503;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2709.82531;
      doubleArray0[1] = 1.7976931348623157E308;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {2709.82531, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 508.185538749842;
      doubleArray0[2] = 0.0;
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 508.185538749842;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertEquals(3, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {-0.0, 508.185538749842, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2336);
      intArray0[1] = 218;
      intArray0[2] = (-2117);
      intArray0[3] = 43;
      intArray0[4] = 2090;
      intArray0[5] = 3141;
      intArray0[6] = 1266;
      intArray0[7] = (-1949);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2117);
      intArray1[1] = (-1949);
      intArray1[2] = (-1949);
      intArray1[3] = 43;
      intArray1[4] = (-1949);
      intArray1[5] = 218;
      intArray1[6] = 1266;
      intArray1[7] = 9;
      intArray1[8] = 2090;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(4039, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2336), 218, (-2117), 43, 2090, 3141, 1266, (-1949)}, intArray0);
      assertArrayEquals(new int[] {(-2117), (-1949), (-1949), 43, (-1949), 218, 1266, 9, 2090}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 508.185538749842;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 724.1332503;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2389.6312852702777;
      doubleArray0[4] = 1.34217729E8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 3.32, 2389.6312852702777, 1.34217729E8}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 3.834E-20;
      doubleArray2[2] = 1.34217729E8;
      doubleArray2[3] = 938.67;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray0, doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2.8153022839871134);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2.8153022839871134));
      MathArrays.safeNorm(doubleArray1);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(418);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1488);
      integerArray0[2] = integer2;
//      try { 
        Integer.decode("too many regressors ({0}) specified, only {1} in the model");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"too many regressors ({0}) specified, only {1} in the model\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      int int0 = 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[10];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 0;
      double double1 = (-1.0);
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 614.1732456963562;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 0.0;
      doubleArray1[3] = doubleArray2;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 10 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 134217729;
      intArray0[1] = 468;
      intArray0[2] = 0;
      intArray0[3] = (-2559);
      intArray0[4] = 86;
      intArray0[5] = (-2207);
      intArray0[6] = 0;
      MathArrays.copyOf(intArray0);
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-2514.1694899));
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double((-558.1957));
      doubleArray0[3] = double3;
      Double double4 = new Double((-20.0));
      doubleArray0[4] = double4;
      Double double5 = new Double(0);
      doubleArray0[5] = double5;
      Double double6 = new Double((-13.050290607681));
      doubleArray0[6] = double6;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double double7 = MathArrays.linearCombination((-1869.954746565), 0.0, (-242.4), (double) doubleArray0[1], (-926.953931833494), (double) doubleArray0[4], (-20.0), 1.7976931348623157E308);
      assertEquals(Double.NEGATIVE_INFINITY, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2709.82531;
      doubleArray0[1] = 1.7976931348623157E308;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2136);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 0;
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 2709.82531;
      Double double0 = new Double(456.9);
      doubleArray1[1] = double0;
      doubleArray1[2] = (Double) 2709.82531;
      doubleArray1[3] = (Double) 2709.82531;
      doubleArray1[4] = (Double) 1.7976931348623157E308;
      doubleArray1[5] = (Double) 2709.82531;
      doubleArray1[6] = (Double) 2709.82531;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) doubleArray1[4];
      doubleArray2[1] = (double) doubleArray1[2];
      doubleArray2[2] = (double) doubleArray1[3];
      doubleArray2[3] = (-1302.052);
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) doubleArray1[1];
      doubleArray2[6] = (double) doubleArray1[6];
      doubleArray2[7] = (double) 0;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray2, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1302.052);
      doubleArray0[2] = (-864.291747);
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1302.052);
      doubleArray1[1] = (-864.291747);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-864.291747);
      long long0 = (-2527L);
      long long1 = (-1L);
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2627.36351;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1896.43739;
      doubleArray0[6] = (-2197.0632034);
      doubleArray0[7] = 1.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 15 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1228.1290780831);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[3][3];
      long[] longArray1 = new long[8];
      longArray1[0] = 0L;
      longArray1[1] = (-848L);
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = (-2771L);
      longArray1[5] = 0L;
      longArray1[6] = (-1132L);
      longArray1[7] = (-104L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = (-848L);
      longArray2[1] = 0L;
      longArray2[2] = (-1132L);
      longArray2[3] = (-104L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = (-104L);
      longArray3[1] = (-1132L);
      longArray3[2] = 332L;
      longArray3[3] = 0L;
      longArray3[4] = (-1132L);
      longArray3[5] = 2147483647L;
      longArray3[6] = 0L;
      longArray0[2] = longArray3;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 4 while others have length 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2089.7326537010217);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 79.494780627;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(0.0, 79.494780627, (-2089.7326537010217), (-1274.22266882186), 0.0, 0.0, 0.0, 0.0);
      assertEquals(2662784.7191231037, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1957.2;
      doubleArray0[1] = 1341.5868083246917;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 2771.0736421268602;
      doubleArray0[4] = 683.583;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 683.583;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 683.583;
      doubleArray1[7] = (-1.0);
//      try { 
        MathArrays.checkPositive(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-698.377);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-3053.1401598325);
      doubleArray0[3] = (-414.10780060493);
      doubleArray0[4] = 900.074338532;
      doubleArray0[5] = (-3442.111068159);
      doubleArray0[6] = 1633.3921723741;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[][] doubleArray2 = new double[1][6];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      MathArrays.checkPositive(doubleArray1);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1171;
      intArray0[2] = 0;
      intArray0[3] = (-1199);
      intArray0[4] = (-1622);
      intArray0[5] = (-723);
      intArray0[6] = (-1502);
      MathArrays.copyOf(intArray0);
      MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-723));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-959.773039369672);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3058.48);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1272.15);
      doubleArray0[7] = 7829.15765822;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 72);
      MathArrays.linearCombination((-1272.15), 2929.9, 508.68232624812, 1.34217729E8, 0.0, 0.0);
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 72 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3606.667287652);
      doubleArray0[1] = (-1696.26776365);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(1.7976931348623157E308, doubleArray0);
      MathArrays.linearCombination((-561.394512594059), 594.264, (-282.24047423809), 1.7976931348623157E308);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-889.0F);
      floatArray0[1] = 3568.542F;
      floatArray0[2] = (-3980.0F);
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 4548;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, 4548, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1288.2);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = 1341.611;
      doubleArray0[5] = (-2789.6926);
      doubleArray0[6] = (-835.0);
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1302.052);
      double double0 = (-864.291747);
      doubleArray0[2] = (-864.291747);
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1302.052);
      doubleArray1[1] = (-864.291747);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-864.291747);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-864.291747);
//      try { 
        MathArrays.checkPositive(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,302.052 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 508.185538749842;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 724.1332503;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (-0 <= 508.186)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1124.69777;
      doubleArray0[1] = (-180.797505584646);
      doubleArray0[2] = 508.2357375;
      doubleArray0[3] = (-2624.486918150504);
      doubleArray0[4] = 20.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[][] doubleArray2 = new double[6][6];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1124.69777;
      doubleArray3[1] = (-2624.486918150504);
      doubleArray3[2] = (-350.55653);
      doubleArray2[3] = doubleArray3;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long[][] longArray0 = new long[7][7];
      long[] longArray1 = new long[6];
      longArray1[0] = 2009L;
      longArray1[1] = 0L;
      longArray1[2] = 2147483647L;
      longArray1[3] = 1955L;
      longArray1[4] = 86L;
      longArray1[5] = (-124L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = 1955L;
      longArray2[1] = 2147483647L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = 2009L;
      longArray3[1] = 0L;
      longArray3[2] = (-124L);
      longArray3[3] = 86L;
      longArray3[4] = 1955L;
      longArray3[5] = 2147483647L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = 2147483647L;
      longArray4[1] = 86L;
      longArray4[2] = 2009L;
      longArray4[3] = 0L;
      longArray4[4] = (-124L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[4] = longArray5;
      long[] longArray6 = new long[4];
      longArray6[0] = 2147483647L;
      longArray6[1] = 2276L;
      longArray6[2] = (-124L);
      longArray6[3] = 4503599627370495L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      longArray7[0] = 2147483647L;
      longArray7[1] = 1955L;
      longArray7[2] = 1955L;
      longArray7[3] = 4503599627370495L;
      longArray7[4] = 1955L;
      longArray7[5] = 4503599627370495L;
      longArray7[6] = 4503599627370495L;
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -124 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2743.26, 2743.26, 2743.26, (-3756.736121708), (-1.0), (-1.0));
      assertEquals((-2780227.5056366883), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4709.31994518;
      doubleArray0[1] = 2743.26;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 2743.26;
      doubleArray0[4] = 4709.31994518;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-2780227.5056366883);
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = MathArrays.scale(4709.31994518, doubleArray0);
      assertArrayEquals(new double[] {2.217769434607016E7, 1.2918889032814488E7, (-4709.31994518), 1.2918889032814488E7, 2.217769434607016E7, (-4709.31994518), (-1.3092980844432898E10), (-4709.31994518)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1077.6476869618293, 1077.6476869618293, 77.82349045, 77.82349045);
      assertEquals(1167381.0328800022, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-686.93), 1167381.0328800022, 1077.6476869618293, (-1275.723947256229), 1077.6476869618293, (-2687.390564220535), (-1275.723947256229), 4295.081972693059);
      assertEquals((-8.116592330307107E8), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
//      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1599.24;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-2168.4669861);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2.0;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (1,599.24 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2956;
      int int0 = (-1260);
      intArray0[1] = (-1260);
      int int1 = (-94);
      intArray0[2] = (-94);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-94));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3329.185);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2522.58);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-685.6712);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 61.0;
      doubleArray0[8] = (-927.422337676);
      double[][] doubleArray1 = new double[8][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3329.185), Double.NaN, (-685.6712), 0.0, (-927.422337676), (-2522.58), 0.0, 61.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2389.6312852702777;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = (-1548.6266365);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not increasing (3.32 > 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2244L);
      longArray0[3] = (-1199L);
      longArray0[4] = 2118L;
      longArray0[5] = 4496L;
      longArray0[6] = 0L;
      longArray0[7] = (-1532L);
      longArray0[8] = 0L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,244 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2294.113515996746);
      doubleArray0[1] = 965.33719622509;
      doubleArray0[2] = 2049.600707;
      doubleArray0[3] = (-2792.1645399);
      doubleArray0[4] = 1192.013306;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 104;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = (-990);
      intArray0[5] = (-3203);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 938.67;
      doubleArray0[3] = 159.540137;
      doubleArray0[4] = 4372.613343779147;
      doubleArray0[5] = (-1295.214274195547);
      doubleArray0[6] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      MathArrays.equals(floatArray0, floatArray0);
      double[][] doubleArray2 = new double[9][8];
      doubleArray2[0] = doubleArray1;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 0.0F;
      doubleArray3[1] = 159.540137;
      doubleArray3[2] = (double) 0.0F;
      doubleArray3[3] = 2335.84301125;
      doubleArray3[4] = 159.540137;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 938.67;
      doubleArray2[1] = doubleArray3;
      doubleArray2[2] = doubleArray0;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 1.34217729E8;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = 4372.613343779147;
      doubleArray4[3] = 159.540137;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray2[3] = doubleArray4;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray1;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 2335.84301125;
      doubleArray5[3] = 4372.613343779147;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (double) 0.0F;
      doubleArray5[6] = (double) 0.0F;
      doubleArray5[7] = 1.34217729E8;
      doubleArray5[8] = (double) 0.0F;
      doubleArray2[8] = doubleArray5;
//      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[4];
      longArray1[0] = 0L;
      longArray1[1] = 1040L;
      longArray1[2] = 1L;
      longArray1[3] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 1L;
      longArray2[1] = 1040L;
      longArray2[2] = 1L;
      longArray2[3] = 1040L;
      longArray2[4] = 1040L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = 1L;
      longArray3[1] = 1L;
      longArray3[2] = 1L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 1040L;
      longArray3[6] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = 1040L;
      longArray0[3] = longArray4;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 5 while others have length 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 167.6736085;
      doubleArray0[1] = (-2450.9369277);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 395.2589979;
      doubleArray0[6] = (-2361.1682644284);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (167.674 >= -2,450.937)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 911.923945096454;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      MathArrays.scaleInPlace(1.7976931348623157E308, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 311;
      intArray0[1] = (-2638);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2984);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (-2638);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 311;
      doubleArray1[8] = (double) 0;
      MathArrays.distance1(doubleArray1, doubleArray1);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination(0.0, (-1.0), 0.0, 0.0);
      double[][] doubleArray2 = new double[1][1];
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 0;
      doubleArray2[0] = doubleArray3;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[9][2];
      doubleArray0[0] = null;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      double double0 = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray0[2] = doubleArray2;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
      doubleArray0[8] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2671.669080332);
      doubleArray0[1] = 3064.39708922;
      MathArrays.copyOf(doubleArray0, 332);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<String>) null, 332);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Field<Pair<Object, Integer>> field0 = (Field<Pair<Object, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2709.82531;
      doubleArray0[1] = 1.7976931348623157E308;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2136);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 0;
      intArray0[4] = (-2346);
      intArray0[5] = 0;
      intArray0[6] = 2196;
      intArray0[7] = (-4949);
      intArray0[8] = 112;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1);
      assertArrayEquals(new int[] {0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = (-131.3543);
      doubleArray0[2] = 166.16251742656;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[1][0];
      long[] longArray1 = new long[7];
      longArray1[0] = (-615L);
      longArray1[1] = (-5351L);
      longArray1[2] = 0L;
      longArray1[3] = (-1749L);
      longArray1[4] = 1L;
      longArray1[5] = (-2527L);
      longArray1[6] = (-1L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-2527L);
      floatArray0[1] = (float) (-5351L);
      floatArray0[2] = (-5614.0F);
      floatArray0[3] = (float) (-2527L);
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) 0L;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2.8153022839871134);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2.8153022839871134));
      Double double0 = new Double((-2.8153022839871134));
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2019.1);
      doubleArray0[1] = (-3128.976906575486);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1993.190645;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2564.7601;
      doubleArray0[6] = 0.0;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[1];
      int int0 = (-1393);
      intArray0[0] = (-1393);
      int int1 = 1;
      MathArrays.copyOf(intArray0, 1);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,019.1 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
