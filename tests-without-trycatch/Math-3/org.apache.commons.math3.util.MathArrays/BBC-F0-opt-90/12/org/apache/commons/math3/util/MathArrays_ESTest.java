/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:06:00 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Object> fieldElement0 = (FieldElement<Object>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 2146243045;
      int int1 = 105;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146243045, 105);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.17333333333333325E18;
      doubleArray0[1] = 1968.923798;
      doubleArray0[2] = 640.9358959;
      doubleArray0[3] = 3863.38811;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 520.336237901;
      doubleArray0[6] = (-996.0);
      doubleArray0[7] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {2.17333333333333325E18, 1968.923798, 640.9358959, 3863.38811, 0.0, 520.336237901, (-996.0), 1.304E19}, doubleArray0, 0.01);
      assertEquals(1.321987056584813E19, double0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1248.720088073;
      doubleArray1[1] = 747.3707554042;
      doubleArray1[2] = (-1744.0);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (-361.8);
      doubleArray1[6] = 0.7249995199969751;
      doubleArray1[7] = (-1087.7);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1248.720088073, 747.3707554042, (-1744.0), 1.0, (-1.0), (-361.8), 0.7249995199969751, (-1087.7)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(16, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 226);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1248.720088073, 747.3707554042, (-1744.0), 1.0, (-1.0), (-361.8), 0.7249995199969751, (-1087.7)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(226, doubleArray2.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Object>[][] fieldElementArray0 = MathArrays.buildArray(field0, 15, (-2812));
      assertNotNull(fieldElementArray0);
      assertEquals(15, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1266.278479333;
      doubleArray0[3] = 3772.93175;
      doubleArray0[4] = 3736.06;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3.834E-20;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Object> fieldElement0 = (FieldElement<Object>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      FieldElement<Object>[][] fieldElementArray0 = MathArrays.buildArray(field0, 0, 15);
      assertNotNull(fieldElementArray0);
      assertEquals(0, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1853.115182958101;
      doubleArray0[2] = 0.9985313415527344;
      doubleArray0[3] = (-1224.5136949275);
      double double0 = 1.0;
      doubleArray0[4] = 1.0;
      double double1 = (-115.49);
      doubleArray0[5] = (-115.49);
      doubleArray0[6] = Double.NaN;
      double double2 = 3.4028234663852886E38;
      doubleArray0[7] = 3.4028234663852886E38;
      double double3 = 1.1730463525082348E-7;
      doubleArray0[8] = 1.1730463525082348E-7;
      double double4 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1853.115182958101, 0.9985313415527344, (-1224.5136949275), 1.0, (-115.49), Double.NaN, 3.4028234663852886E38, 1.1730463525082348E-7}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not increasing (13,040,000,000,000,000,000 > 1,853.115)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.4E-45F);
      floatArray0[3] = (-21.0F);
      floatArray0[4] = Float.NaN;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-472.421F);
      floatArray1[1] = (-21.0F);
      floatArray1[2] = 0.5F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-21.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.4E-45F), (-21.0F), Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-472.421F), (-21.0F), 0.5F, 0.0F, (-21.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      FieldElement<Object>[][] fieldElementArray0 = MathArrays.buildArray(field0, 15, 15);
      assertNotNull(fieldElementArray0);
      assertEquals(15, fieldElementArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) 15;
      doubleArray0[3] = (double) 15;
      doubleArray0[4] = (double) 15;
      doubleArray0[5] = (double) 15;
      doubleArray0[6] = (double) 15;
      doubleArray0[7] = (double) 15;
      doubleArray0[8] = (double) 15;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0}, doubleArray0, 0.01);
      assertEquals(45.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2271.020380816;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (-2247.969567579668);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-4012.561);
      doubleArray0[5] = 1480.4986;
      doubleArray0[6] = 3.834E-20;
      Double double0 = new Double((-4012.561));
      assertNotNull(double0);
      assertEquals((-4012.561), (double)double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2271.020380816, 3.0, (-2247.969567579668), Double.NaN, (-4012.561), 1480.4986, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5157533.570081649, 9.0, 5053367.176764319, Double.NaN, 1.6100645778721001E7, 2191876.1046019597, 1.4699556E-39}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2271.020380816, 3.0, (-2247.969567579668), Double.NaN, (-4012.561), 1480.4986, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5157533.570081649, 9.0, 5053367.176764319, Double.NaN, 1.6100645778721001E7, 2191876.1046019597, 1.4699556E-39}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("").when(field0).getZero();
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2271.020380816, 3.0, (-2247.969567579668), Double.NaN, (-4012.561), 1480.4986, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2271.020380816, 3.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-210.211906358);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.9166666666666666;
      doubleArray0[3] = 1980.1958011731476;
      doubleArray0[4] = 1367.45754533369;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 210.52;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 124.9357404026009;
      double[][] doubleArray1 = new double[4][2];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[3] = null;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2271.020380816;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (-2247.969567579668);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-4012.561);
      doubleArray0[5] = 1480.4986;
      doubleArray0[6] = 3.834E-20;
      double double0 = new Double((-4012.561));
      assertEquals((-4012.561), double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2271.020380816, 3.0, (-2247.969567579668), Double.NaN, (-4012.561), 1480.4986, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5157533.570081649, 9.0, 5053367.176764319, Double.NaN, 1.6100645778721001E7, 2191876.1046019597, 1.4699556E-39}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {2271.020380816, 3.0, (-2247.969567579668), Double.NaN, (-4012.561), 1480.4986, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5157533.570081649, 9.0, 5053367.176764319, Double.NaN, 1.6100645778721001E7, 2191876.1046019597, 1.4699556E-39}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2271.020380816, 3.0, (-2247.969567579668), Double.NaN, (-4012.561), 1480.4986, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2271.020380816, 3.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      Object[] objectArray0 = MathArrays.buildArray(field0, 2);
      assertNotNull(objectArray0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2271.020380816, 3.0, (-2247.969567579668), Double.NaN, (-4012.561), 1480.4986, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5157533.570081649, 9.0, 5053367.176764319, Double.NaN, 1.6100645778721001E7, 2191876.1046019597, 1.4699556E-39}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-5575.449597890625);
      doubleArray0[1] = (-7423.282255728785);
      doubleArray0[2] = (-1372.74696955614);
      doubleArray0[3] = 211.040275976;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = (-221.74929250038);
      doubleArray0[7] = (-960.128);
      doubleArray0[8] = (-1919.2853790619613);
//      try { 
        MathArrays.normalizeArray(doubleArray0, (-2141.4052451243565));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, -\u221E at index 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2271.020380816;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (-2247.969567579668);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-4012.561);
      doubleArray0[5] = 1480.4986;
      doubleArray0[6] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {2271.020380816, 3.0, (-2247.969567579668), Double.NaN, (-4012.561), 1480.4986, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2271.020380816, 3.0, (-2247.969567579668), Double.NaN, (-4012.561), 1480.4986, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5157533.570081649, 9.0, 5053367.176764319, Double.NaN, 1.6100645778721001E7, 2191876.1046019597, 1.4699556E-39}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {2271.020380816, 3.0, (-2247.969567579668), Double.NaN, (-4012.561), 1480.4986, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5157533.570081649, 9.0, 5053367.176764319, Double.NaN, 1.6100645778721001E7, 2191876.1046019597, 1.4699556E-39}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][0];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, Float.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-635.4836687);
      doubleArray0[1] = 973.0;
      doubleArray0[2] = 1252.499;
      doubleArray0[3] = 1.63E18;
      doubleArray0[4] = (-3920.7464015295413);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 512.11;
      doubleArray0[7] = (-796.0);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-635.4836687), 973.0, 1252.499, 1.63E18, (-3920.7464015295413), 1.0, 512.11, (-796.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-635.4836687), 973.0, 1252.499, 1.63E18, (-3920.7464015295413), 1.0, 512.11, (-796.0)}, doubleArray0, 0.01);
      assertEquals(1.63E18, double1, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.608E18;
      doubleArray0[1] = 2.608E18;
      doubleArray0[2] = 2.608E18;
      doubleArray0[3] = 2.608E18;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.608E18);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.608E18, 2.608E18, 2.608E18, 2.608E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.52E17, 6.52E17, 6.52E17, 6.52E17}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.608E18, 2.608E18, 2.608E18, 2.608E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.52E17, 6.52E17, 6.52E17, 6.52E17}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.956E18, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 207;
      intArray0[1] = (-1);
      intArray0[2] = 226;
      intArray0[3] = 1240;
      intArray0[4] = 14;
      intArray0[5] = (-1890);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 14;
      intArray1[1] = (-1890);
      intArray1[2] = 149;
      intArray1[3] = 1240;
      intArray1[4] = 226;
      intArray1[5] = 1240;
      intArray1[6] = (-1890);
      intArray1[7] = (-1);
      intArray1[8] = (-1890);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {207, (-1), 226, 1240, 14, (-1890)}, intArray0);
      assertArrayEquals(new int[] {14, (-1890), 149, 1240, 226, 1240, (-1890), (-1), (-1890)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3667.879905340413, double0, 0.01);
      assertEquals(6, intArray0.length);
      assertEquals(9, intArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 207;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {207.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {207.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {208.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      String[] stringArray0 = new String[14];
      stringArray0[0] = "0K70yRFJ->,e";
      stringArray0[1] = "PZ b0@5;K7S3\"gA'g";
      stringArray0[2] = "iO|!=QVRO<vXm%1C$#X";
      stringArray0[3] = "";
      stringArray0[4] = "Y8L";
      stringArray0[5] = "^?\"$pRN<',&";
      stringArray0[6] = "otThJBD<C6Pa1=";
      stringArray0[7] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(14, stringArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = (-1);
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[0] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2606.86F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1269.4291F);
      floatArray0[3] = 1327.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-2606.86F), (-1.0F), (-1269.4291F), 1327.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) (-1.0F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(1.4142135623730951, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[][] longArray0 = new long[9][3];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1148L);
      longArray2[1] = 100L;
      longArray2[2] = 1952L;
      longArray2[3] = 1597L;
      longArray2[4] = (-262L);
      longArray2[5] = 2934L;
      longArray2[6] = (-593L);
      longArray2[7] = (-2017L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1597L;
      longArray3[1] = 1L;
      longArray3[2] = (-2017L);
      longArray3[3] = 100L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 100L;
      longArray4[1] = 100L;
      longArray4[2] = (-1148L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 2934L;
      longArray5[1] = 1597L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = 1L;
      longArray6[1] = 100L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = 1L;
      longArray7[1] = 1L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[7];
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray6));
      
      longArray8[0] = 2934L;
      longArray8[1] = 1952L;
      longArray8[2] = 2972L;
      longArray8[3] = 100L;
      longArray8[4] = 2056L;
      longArray8[5] = (-1148L);
      longArray8[6] = (-623L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[6];
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray3));
      
      longArray9[0] = 100L;
      longArray9[1] = 100L;
      longArray9[2] = (-623L);
      longArray9[3] = 1L;
      longArray9[4] = 2972L;
      longArray9[5] = (-261L);
      longArray0[8] = longArray9;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,148 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 2386.2650895820843;
      doubleArray0[2] = (-1016.49583861);
      doubleArray0[3] = 0.24740394949913025;
      doubleArray0[4] = (-1116.0);
      doubleArray0[5] = 9.313225746154785E-10;
      doubleArray0[6] = 6.52E18;
      doubleArray0[7] = 69.1651357247;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 2386.2650895820843, (-1016.49583861), 0.24740394949913025, (-1116.0), 9.313225746154785E-10, 6.52E18, 69.1651357247}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 2386.2650895820843, (-1016.49583861), 0.24740394949913025, (-1116.0), 9.313225746154785E-10, 6.52E18, 69.1651357247}, doubleArray0, 0.01);
      assertEquals(1.4579163213298629E19, double1, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-1600.118267308);
      doubleArray0[2] = (-14.206785212889072);
      doubleArray0[3] = 1130.56;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 2677.453950132126;
      doubleArray0[6] = 0.333333333;
      doubleArray0[7] = 0.06666666666666667;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1130.56);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.304E19, (-1600.118267308), (-14.206785212889072), 1130.56, Double.NaN, 2677.453950132126, 0.333333333, 0.06666666666666667}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1130.5599999999997, (-1.3872927210795493E-13), (-1.2317195621383332E-15), 9.801885840490795E-14, Double.NaN, 2.321336148666699E-13, 2.8899795472122693E-17, 5.779959100204498E-18}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1169));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 203.447946;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.2599210498948732;
      doubleArray0[3] = (-1018.94290199217);
      doubleArray0[4] = 0.75;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1018.94290199217));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {203.447946, Double.NaN, 1.2599210498948732, (-1018.94290199217), 0.75}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {254.83178128322473, Double.NaN, 1.5781330395979578, (-1276.292240082694), 0.939423767701339}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 5.669184079525E-24;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 8.0E298;
      doubleArray3[5] = 2305.032174;
      double[] doubleArray4 = MathArrays.ebeMultiply(doubleArray3, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {0.0, 0.0, 5.669184079525E-24, 0.0, 8.0E298, 2305.032174}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 3.213964812753972E-47, 0.0, Double.POSITIVE_INFINITY, 5313173.323175166}, doubleArray4, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray4.length);
      
//      try { 
        MathArrays.normalizeArray(doubleArray2, 5474.37);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.9285714285714286;
      doubleArray0[1] = 887.67533;
      doubleArray0[2] = 0.2516492297311288;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 5.0;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.9285714285714286, 887.67533, 0.2516492297311288, 1.304E19, 5.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4108.8779);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4108.8779);
      doubleArray1[1] = (-4108.8779);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4108.8779), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4108.8779), (-4108.8779)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4108.8779, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-4108.8779);
      doubleArray2[1] = 4108.8779;
      doubleArray2[2] = 4108.8779;
      doubleArray2[3] = 4108.8779;
      doubleArray2[4] = (-4108.8779);
      doubleArray2[5] = 0.07692307692307693;
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-4108.8779), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4108.8779), 4108.8779, 4108.8779, 4108.8779, (-4108.8779), 0.07692307692307693}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.6882877597108413E7, (-1.6882877597108413E7), (-1.6882877597108413E7), (-1.6882877597108413E7), 1.6882877597108413E7, (-316.0675307692308), 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      
      MathArrays.scaleInPlace((-1304.0), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {5357976.7816, -0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray1, 1362);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {(-4108.8779), (-4108.8779)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(1362, doubleArray4.length);
      
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (double) 1362;
      doubleArray5[1] = 4108.8779;
      doubleArray5[2] = (-4108.8779);
      doubleArray5[3] = 4108.8779;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray2, doubleArray5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-2835.4885F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {1.0F, (-2835.4885F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-0.5016465F);
      doubleArray0[1] = (double) (-3.4028235E38F);
      doubleArray0[2] = (double) (-0.5016465F);
      doubleArray0[3] = (double) (-0.5016465F);
      doubleArray0[4] = (double) -0.0F;
      doubleArray0[5] = (double) (-3.4028235E38F);
      doubleArray0[6] = (double) (-3.4028235E38F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-0.5016465187072754), (-3.4028234663852886E38), (-0.5016465187072754), (-0.5016465187072754), -0.0, (-3.4028234663852886E38), (-3.4028234663852886E38), 0.0}, doubleArray0, 0.01);
      assertEquals(5.8938631329669654E38, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = (-2146910682);
      intArray0[2] = 5589;
      intArray0[3] = (-2043791661);
      intArray0[4] = 35;
      intArray0[5] = (-102);
      intArray0[6] = 1;
      intArray0[7] = (-2146978722);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {4, (-2146910682), 5589, (-2043791661), 35, (-102), 1, (-2146978722)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3099.44);
      doubleArray0[2] = (double) (-2043791661);
      doubleArray0[3] = 272.3;
      doubleArray0[4] = (double) 5589;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 9606528.3136, 4.1770843535731389E18, 74147.29000000001, 3.1236921E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-3099.44), (-2.043791661E9), 272.3, 5589.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 9606528.3136, 4.1770843535731389E18, 74147.29000000001, 3.1236921E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-3099.44), (-2.043791661E9), 272.3, 5589.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-8.537090169126356E27), double1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 9606528.3136, 1.266921925153968E13, 4.1770843535714514E18, (-1.1130835841209202E12), (-2.284550311251071E13), 3043769.4, 3.1236921E7}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, (-3099.44), (-2.043791661E9), 272.3, 5589.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[8][9];
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 35;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = (double) (-2146910682);
      doubleArray4[3] = (-3193.64221562);
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = 272.3;
      doubleArray4[6] = (double) 5589;
      doubleArray4[7] = (double) (-102);
      doubleArray3[0] = doubleArray4;
      doubleArray3[1] = doubleArray0;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray0;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 38.0285086;
      doubleArray5[1] = (double) (-2146978722);
      doubleArray5[2] = 272.3;
      doubleArray5[3] = (double) 5589;
      doubleArray3[5] = doubleArray5;
      doubleArray3[6] = doubleArray1;
      doubleArray3[7] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3268.7801532);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1097.364323;
      doubleArray1[4] = (-1273.463163858);
      doubleArray1[5] = 2157.4;
      doubleArray1[6] = 1434.55026676;
      doubleArray1[7] = (-1236.049219767992);
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
//      try { 
        MathArrays.convolve(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(19, doubleArray2.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3725.0;
      doubleArray2[1] = 5282204.542985079;
      doubleArray2[2] = 2135.9461;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (-1.0);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3725.0, 5282204.542985079, 2135.9461, 1.0, (-1.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3725.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(394);
      assertNotNull(integer0);
      assertEquals(394, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(394, (int)integer1);
      assertEquals(8, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(394, (int)integer2);
      assertEquals(8, integerArray0.length);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-1), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(394, (int)integer4);
      assertEquals(8, integerArray0.length);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1254));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals((-1254), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-4338));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals((-4338), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-3385));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertNotNull(integer7);
      assertEquals((-3385), (int)integer7);
      
      integerArray0[7] = integer7;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 44;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 44;
      intArray1[1] = 44;
      intArray1[2] = 44;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {44}, intArray0);
      assertArrayEquals(new int[] {44, 44, 44}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(3, intArray1.length);
      
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 44;
      intArray2[1] = 44;
      intArray2[2] = 44;
      intArray2[3] = 44;
      intArray2[4] = 44;
      intArray2[5] = 44;
      intArray2[6] = 44;
      intArray2[7] = 44;
      intArray2[8] = 44;
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 44;
      intArray3[1] = 44;
      intArray3[2] = 44;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray2, intArray3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-6.032174644509064E-23);
      Double double0 = new Double((-6.032174644509064E-23));
      assertNotNull(double0);
      assertEquals((-6.032174644509064E-23), (double)double0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[0] = (-12.501151241703175);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 6.123233995736766E-17;
      doubleArray1[3] = (-6.032174644509064E-23);
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 6.123233995736766E-17, (-6.032174644509064E-23), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6.123233995739737E-17, double1, 0.01);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 155;
      intArray0[1] = 2145989316;
      intArray0[2] = 218;
      intArray0[3] = 3424;
      intArray0[4] = 1217;
      intArray0[5] = 2097;
      intArray0[6] = 57;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {155, 2145989316, 218, 3424, 1217, 2097, 57}, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 6.123233995736766E-17, (-6.032174644509064E-23), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray1.length);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(double2, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 6.123233995736766E-17, (-6.032174644509064E-23), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(6.123233995739737E-17, double2, 0.01);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1664.338669);
      doubleArray0[1] = 4929.29735976532;
      doubleArray0[2] = (-2004.715094694947);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = (-2391.477177028692);
      doubleArray0[6] = (-1517.37124115);
      doubleArray0[7] = (-3292.26414613);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1664.338669), 4929.29735976532, (-2004.715094694947), 3.834E-20, 1.7976931348623157E308, (-2391.477177028692), (-1517.37124115), (-3292.26414613)}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 75;
      intArray0[1] = 6;
      intArray0[2] = 626;
      intArray0[3] = 228;
      intArray0[4] = (-2138146761);
      intArray0[5] = 1250;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 75;
      intArray1[1] = 75;
      intArray1[2] = 1250;
      intArray1[3] = (-2402);
      intArray1[4] = 228;
      intArray1[5] = 6;
      intArray1[6] = 4938;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {75, 6, 626, 228, (-2138146761), 1250}, intArray0);
      assertArrayEquals(new int[] {75, 75, 1250, (-2402), 228, 6, 4938}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2138146989, int0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, (int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-180.41297697406), 0.0, 3.834E-20);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2512.0F);
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (-5687.9F);
      floatArray0[3] = (-3.4028235E38F);
      floatArray0[4] = (-1913.0F);
      floatArray0[5] = Float.POSITIVE_INFINITY;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-2512.0F), Float.NaN, (-5687.9F), (-3.4028235E38F), (-1913.0F), Float.POSITIVE_INFINITY, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 177.7F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {177.7F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2126634292;
      intArray0[2] = (-1073741823);
      intArray0[3] = 313;
      intArray0[4] = 2059;
      intArray0[5] = 127;
      intArray0[6] = (-71);
      intArray0[7] = (-2544);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2544);
      intArray1[1] = (-1073741823);
      intArray1[2] = 2059;
      intArray1[3] = 2059;
      intArray1[4] = 2059;
      intArray1[5] = 313;
      intArray1[6] = 127;
      intArray1[7] = (-1073741823);
      intArray1[8] = (-1073741823);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 2126634292, (-1073741823), 313, 2059, 127, (-71), (-2544)}, intArray0);
      assertArrayEquals(new int[] {(-2544), (-1073741823), 2059, 2059, 2059, 313, 127, (-1073741823), (-1073741823)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-1052888280), int0);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-2544));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.123233995736766E-17;
      doubleArray0[1] = (-6.032174644509064E-23);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {6.123233995736766E-17, (-6.032174644509064E-23)}, doubleArray0, 0.01);
      assertEquals(3.749399456658283E-33, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.1428571343421936;
      doubleArray1[1] = 3.749399456658283E-33;
      doubleArray1[2] = 6.123233995736766E-17;
      doubleArray1[3] = (-6.032174644509064E-23);
      doubleArray1[4] = (-6.032174644509064E-23);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 3.749399456658283E-33);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.1428571343421936, 3.749399456658283E-33, 6.123233995736766E-17, (-6.032174644509064E-23), (-6.032174644509064E-23)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.7493994566582814E-33, 9.840597986457941E-65, 1.607091610952611E-48, (-1.5831923577869284E-54), (-1.5831923577869284E-54)}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3.4028235E38F);
      floatArray0[1] = -0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-3.4028235E38F), -0.0F, 0.0F, Float.NaN}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-1524.04313505554);
      doubleArray3[1] = (double) -0.0F;
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.1428571343421936, 3.749399456658283E-33, 6.123233995736766E-17, (-6.032174644509064E-23), (-6.032174644509064E-23)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.7493994566582814E-33, 9.840597986457941E-65, 1.607091610952611E-48, (-1.5831923577869284E-54), (-1.5831923577869284E-54)}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3.7493994566582814E-33, double1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {6.123233995736766E-17, (-6.032174644509064E-23)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      
      double[] doubleArray5 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {6.123233995736766E-17, (-6.032174644509064E-23)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.123233995736766E-17, (-6.032174644509064E-23)}, doubleArray5, 0.01);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray5.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1459.923169632);
      doubleArray0[1] = 2343.95013;
      doubleArray0[2] = 263.378757353;
      doubleArray0[3] = (-2475.658916);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1.159262120095121;
      doubleArray0[6] = (-1623.4616995159245);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1459.923169632), 2343.95013, 263.378757353, (-2475.658916), (-1.0), 1.159262120095121, (-1623.4616995159245)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = MathArrays.linearCombination(39.0195737, Double.NaN, Double.NaN, 434.2076494, 3167.0, Double.NaN, (-7.877917738262007E-9), (-4211.3878829491));
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertEquals(19, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2274.2F);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-2274.2F);
      floatArray1[2] = (-420.867F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2274.2F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-2274.2F), (-420.867F), 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 177.7F;
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.3588967849295828;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.3588967849295828}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2146029659), (-2146029659));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double double1 = new Integer(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = 0L;
      longArray0[0] = 0L;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%%6{";
      stringArray0[1] = "%%6{";
      stringArray0[2] = "$,{NH`~2Sw9C-kRZ[S";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "$,{NH`~2Sw9C-kRZ[S";
      stringArray0[1] = "$,{NH`~2Sw9C-kRZ[S";
      stringArray0[2] = "$,{NH`~2Sw9C-kRZ[S";
      stringArray0[3] = "$,{NH`~2Sw9C-kRZ[S";
      stringArray0[4] = "$,{NH`~2Sw9C-kRZ[S";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 455.06406;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 6063.3583657;
      doubleArray0[3] = 455.06406;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {455.06406, 0.0, 6063.3583657, 455.06406}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 55);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(7.652417746664117, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 7.652417746664117;
      doubleArray2[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 7.652417746664117, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace(297.66582065, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
//      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%%6{";
      stringArray0[1] = "$,{NH`~2Sw9C-kRZ[S";
      stringArray0[2] = "unable to perform Q.R decomposition on the {0}x{1} jacobian matrix";
      stringArray0[3] = "";
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3.5997360512765566E-9);
      doubleArray1[1] = 3.749399456658283E-33;
      doubleArray1[2] = (-8.36709916356);
      doubleArray1[3] = 611.1251550922;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3.5997360512765566E-9), 3.749399456658283E-33, (-8.36709916356), 611.1251550922}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection1);
      
//      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%%6{";
      stringArray0[1] = "$,{NH`~2Sw9C-kRZ[S";
      stringArray0[2] = "unable to perform Q.R decomposition on the {0}x{1} jacobian matrix";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NON_REAL_FINITE_ORDINATE";
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "NON_REAL_FINITE_ORDINATE";
      stringArray1[1] = "INVALID_BINARY_DIGIT";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray1, mathArrays_OrderDirection1, false);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stringArray1, stringArray0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertEquals(2, stringArray1.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NON_REAL_FINITE_ORDINATE";
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1779.0;
      doubleArray2[1] = 2652.435448307638;
      doubleArray2[2] = (-997.75);
      doubleArray2[3] = 547.1;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.6299605249474366;
      doubleArray1[1] = 0.6299605249474366;
      doubleArray1[2] = 0.6299605249474366;
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.4040560194794216E10;
      doubleArray0[1] = 3380.4071;
      doubleArray0[2] = 1835.94344616537;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.4040560194794216E10, 3380.4071, 1835.94344616537}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.7794853447952413E20, 1.625337607409195E14, 8.827422929070519E13, 1.2412472521231769E7, 3370688.337517575}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2.4040560194794216E10;
      doubleArray2[1] = 2.4040560194794216E10;
      doubleArray2[2] = 3380.4071;
      doubleArray2[3] = 2.4040560194794216E10;
      doubleArray2[4] = 2.4040560194794216E10;
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2, 102);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {2.4040560194794216E10, 2.4040560194794216E10, 3380.4071, 2.4040560194794216E10, 2.4040560194794216E10}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(5, doubleArray2.length);
      assertEquals(102, doubleArray3.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 102;
      longArray0[1] = (long) 102;
      longArray0[2] = (long) 102;
      longArray0[3] = (long) 102;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {102L, 102L, 102L, 102L}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray3, doubleArray3);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {2.4040560194794216E10, 2.4040560194794216E10, 3380.4071, 2.4040560194794216E10, 2.4040560194794216E10}, doubleArray2, 0.01);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(102, doubleArray4.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(102, doubleArray3.length);
      
      double double0 = MathArrays.distance(doubleArray4, doubleArray3);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {2.4040560194794216E10, 2.4040560194794216E10, 3380.4071, 2.4040560194794216E10, 2.4040560194794216E10}, doubleArray2, 0.01);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(4.8081120389588554E10, double0, 0.01);
      assertEquals(102, doubleArray4.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(102, doubleArray3.length);
      
      double double1 = MathArrays.distanceInf(doubleArray4, doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {2.4040560194794216E10, 2.4040560194794216E10, 3380.4071, 2.4040560194794216E10, 2.4040560194794216E10}, doubleArray2, 0.01);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(0.0, double1, 0.01);
      assertEquals(102, doubleArray4.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(102, doubleArray3.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 102;
      intArray0[1] = 102;
      intArray0[2] = 1256;
      intArray0[3] = (-1055);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {102, 102, 1256, (-1055)}, intArray0);
      assertArrayEquals(new int[] {102, 102, 1256, (-1055)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection0);
      
      double double1 = MathArrays.linearCombination(0.0, 1.449536999882564E7, -0.0, (-80.0), 1.449536999882564E7, -0.0, (-80.0), 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[6][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      MathArrays.scaleInPlace(3.834E-20, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2462.440959493186;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2462.440959493186;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection0);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 2462.440959493186);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2462.440959493186, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2462.440959493186, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<String>) null, 1, (-1786));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Field<Pair<String, String>> field0 = (Field<Pair<String, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      Field<String> field1 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field1, 207, (-2146029697));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[9];
      intArray0[0] = 2126221433;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 4492;
      intArray0[4] = 405;
      intArray0[5] = 986;
      intArray0[6] = 357913257;
      intArray0[7] = (-2134419407);
      intArray0[8] = 307;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {2126221433, 0, 1, 4492, 405, 986, 357913257, (-2134419407), 307}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, intArray0.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2126221433;
      intArray1[1] = 405;
      intArray1[2] = 307;
      intArray1[3] = (-1);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = null;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray1 = new long[4];
      longArray1[0] = (-4647L);
      long long0 = (-2897L);
      longArray1[1] = (-2897L);
      longArray1[2] = (-4647L);
      longArray1[1] = (-3415L);
//      try { 
        MathArrays.checkNonNegative(longArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -4,647 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2462.440959493186;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2462.440959493186;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection0);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 2462.440959493186);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2462.440959493186, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2462.440959493186, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      
//      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (-380.23999995561076);
      doubleArray0[1] = (-380.23999995561076);
      doubleArray0[2] = (-690.19);
      doubleArray0[3] = (-258.1918);
      doubleArray0[4] = (-258.1918);
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[][] longArray0 = new long[2][2];
      long[] longArray1 = new long[2];
      longArray1[0] = 1L;
      longArray1[1] = (-1889L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 4398046511103L;
      longArray2[1] = (-2148L);
      longArray2[2] = 3617L;
      longArray2[3] = (-180L);
      longArray2[4] = 1L;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.scaleInPlace(4398046511103L, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 177.7F;
      doubleArray0[1] = (double) 177.7F;
      doubleArray0[2] = (double) 177.7F;
      doubleArray0[3] = (double) 177.7F;
      doubleArray0[4] = (double) 177.7F;
      doubleArray0[5] = (double) 177.7F;
      doubleArray0[6] = (double) 177.7F;
      doubleArray0[7] = (double) 177.7F;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {177.6999969482422, 177.6999969482422, 177.6999969482422, 177.6999969482422, 177.6999969482422, 177.6999969482422, 177.6999969482422, 177.6999969482422}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(177.6999969482422, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {177.6999969482422, 177.6999969482422, 177.6999969482422, 177.6999969482422, 177.6999969482422, 177.6999969482422, 177.6999969482422, 177.6999969482422}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {31577.288915405283, 31577.288915405283, 31577.288915405283, 31577.288915405283, 31577.288915405283, 31577.288915405283, 31577.288915405283, 31577.288915405283}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {177.6999969482422, 177.6999969482422, 177.6999969482422, 177.6999969482422, 177.6999969482422, 177.6999969482422, 177.6999969482422, 177.6999969482422}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {31577.288915405283, 31577.288915405283, 31577.288915405283, 31577.288915405283, 31577.288915405283, 31577.288915405283, 31577.288915405283, 31577.288915405283}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, String>> field0 = (Field<Pair<String, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.scale(0.0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.123233995736766E-17;
      doubleArray0[1] = (-6.032174644509064E-23);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {6.123233995736766E-17, (-6.032174644509064E-23)}, doubleArray0, 0.01);
      assertEquals(3.749399456658283E-33, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.1428571343421936;
      doubleArray1[1] = 3.749399456658283E-33;
      doubleArray1[2] = 6.123233995736766E-17;
      doubleArray1[3] = (-6.032174644509064E-23);
      doubleArray1[4] = (-6.032174644509064E-23);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 3.749399456658283E-33);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.1428571343421936, 3.749399456658283E-33, 6.123233995736766E-17, (-6.032174644509064E-23), (-6.032174644509064E-23)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.7493994566582814E-33, 9.840597986457941E-65, 1.607091610952611E-48, (-1.5831923577869284E-54), (-1.5831923577869284E-54)}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3.4028235E38F);
      floatArray0[1] = -0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-3.4028235E38F), -0.0F, 0.0F, Float.NaN}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1524.04313505554);
      doubleArray3[1] = (double) -0.0F;
      doubleArray3[2] = (double) 0.0F;
      doubleArray3[3] = (double) -0.0F;
      doubleArray3[4] = (double) Float.NaN;
      doubleArray3[5] = (double) (-3.4028235E38F);
      doubleArray3[6] = (-6.032174644509064E-23);
      doubleArray3[7] = (double) 0.0F;
      doubleArray3[8] = (double) Float.NaN;
      double double1 = MathArrays.safeNorm(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1524.04313505554), -0.0, 0.0, -0.0, Double.NaN, (-3.4028234663852886E38), (-6.032174644509064E-23), 0.0, Double.NaN}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(9, doubleArray3.length);
      
      long[][] longArray0 = new long[5][4];
      long[] longArray1 = new long[6];
      longArray1[0] = (-2148L);
      longArray1[1] = 3617L;
      longArray1[2] = 1L;
      longArray1[3] = 1L;
      longArray1[4] = (-1889L);
      longArray1[5] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1L;
      longArray2[1] = (-2148L);
      longArray2[2] = 1L;
      longArray2[3] = (-1889L);
      longArray2[4] = (-2148L);
      longArray2[5] = 3617L;
      longArray2[6] = (-1073741824L);
      longArray2[7] = (-1889L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1889L);
      longArray3[1] = 1L;
      longArray3[2] = 1L;
      longArray3[3] = (-2148L);
      longArray3[4] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1L;
      longArray4[1] = 1L;
      longArray4[2] = 1L;
      longArray4[3] = (-2148L);
      longArray4[4] = 1L;
      longArray4[5] = (-1889L);
      longArray4[6] = (-2148L);
      longArray4[7] = (-1073741824L);
      longArray4[8] = (-2148L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 1L;
      longArray5[1] = (-1889L);
      longArray5[2] = 1L;
      longArray5[3] = (-2148L);
      longArray5[4] = 1L;
      longArray5[5] = 1L;
      longArray5[6] = 1L;
      longArray5[7] = 3617L;
      longArray0[4] = longArray5;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 8 while others have length 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-228);
      int int1 = 1;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-228), 1);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 263.378757353;
      Double double0 = new Double((-8150.395892832293));
      assertNotNull(double0);
      assertEquals((-8150.395892832293), (double)double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {263.378757353, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {69368.36982481046, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1753.1641F;
      floatArray0[1] = 1753.1641F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1753.1641F;
      floatArray0[4] = 1753.1641F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1753.1641F, 1753.1641F, 0.0F, 1753.1641F, 1753.1641F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 1753.1641F;
      doubleArray2[3] = (double) 0.0F;
      doubleArray2[4] = 3075.0;
      doubleArray2[5] = (double) 1753.1641F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {263.378757353, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1753.1640625, 0.0, 3075.0, 1753.1640625}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 221, 221);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.19999954104423523;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.19999954104423523}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 134217729;
      intArray0[1] = 2146427480;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {134217729, 2146427480}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {134217729, 2146427480}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.19999954104423523}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.19999954104423523}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.19999954104423523}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.19999954104423523}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2146427480;
      floatArray0[1] = 1012.2F;
      floatArray0[2] = (float) 2146427480;
      floatArray0[3] = (float) 134217729;
      floatArray0[4] = (float) 2146427480;
      floatArray0[5] = (float) 134217729;
      floatArray0[6] = (float) 134217729;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {2.14642752E9F, 1012.2F, 2.14642752E9F, 1.34217728E8F, 2.14642752E9F, 1.34217728E8F, 1.34217728E8F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.19999954104423523}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.19999954104423523}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(boolean2);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-4769.12F);
      floatArray0[1] = (-2814.7695F);
      floatArray0[2] = 3134.0215F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-826.6856F);
      floatArray0[6] = (-277.0F);
      floatArray0[7] = (-1.4E-45F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-4769.12F), (-2814.7695F), 3134.0215F, 0.0F, 0.0F, (-826.6856F), (-277.0F), (-1.4E-45F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination(0.0, 363.0135014047505, 363.0135014047505, 0.0, 0.6931470632553101, 0.0, 0.6931470632553101, 3.834E-20);
      assertEquals(double1, double0, 0.01);
      assertEquals(2.6575258405208586E-20, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, (double[]) null);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      String string0 = "cannot format a {0} instance as a complex number";
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("cannot format a {0} instance as a complex number");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.cannot format a {0} instance as a complex number
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[3] = 0.0;
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%%6{";
      double double0 = MathArrays.linearCombination((double) 0L, 0.25, Double.NaN, (-1919.0));
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[14];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[7] = (float) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(14, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[5] = doubleArray2;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(6, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 181;
      intArray0[2] = 133;
      intArray0[3] = (-1514);
      intArray0[4] = 1809;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {1, 181, 133, (-1514), 1809}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1753.1641F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1753.1641F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2146972602;
      intArray0[1] = 2409;
      intArray0[2] = 1899017204;
      intArray0[3] = 2146611906;
      intArray0[4] = 110;
      intArray0[5] = (-2693);
      intArray0[6] = 2147483499;
      intArray0[7] = 1960;
      intArray0[8] = 1322;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {2146972602, 2409, 1899017204, 2146611906, 110, (-2693), 2147483499, 1960, 1322}, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 2409;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {2409.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1753.1641F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray0.length);
      
      MathArrays.scaleInPlace((-2002.793490682801), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 262.34807475364806;
      doubleArray0[1] = 262.34807475364806;
      doubleArray0[2] = 100.0;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {262.34807475364806, 262.34807475364806, 100.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {262.34807475364806, 262.34807475364806, 100.0}, doubleArray0, 0.01);
      assertEquals(384.25645687989606, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-3248.418255793), 3803.8203, 1490.0, 240.579548100759, 1632.171212, 240.579548100759, 232.84813, 1302.8666555);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.1301898700627316E7), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray2, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 263.378757353;
      doubleArray0[1] = 0.013887133004293483;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(1138.02034892, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {299730.3853409771, 15.80383994704452, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 263.378757353;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.013887133004293483;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.013887133004293483;
      doubleArray3[3] = 1138.02034892;
      doubleArray3[4] = 1138.02034892;
      doubleArray3[5] = 1138.02034892;
//      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      double double0 = MathArrays.linearCombination((-1919.0), 1.34217729E8, (-109.750820593), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%%6{";
      stringArray0[1] = "$,{NH`~2Sw9C-kRZ[S";
      stringArray0[2] = "unable to perform Q.R decomposition on the {0}x{1} jacobian matrix";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-885);
      intArray1[3] = 134217729;
      intArray1[4] = (-885);
      intArray1[5] = 134217729;
      intArray1[6] = 0;
      intArray1[7] = (-885);
      intArray1[8] = 32760;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, (-885), 134217729, (-885), 134217729, 0, (-885), 32760}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(134218614, int0);
      assertEquals(4, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 263.378757353;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {263.378757353, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {263.378757353, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-146.151597657), 0.0, (-665.54487), (-2159.832), 1.0, 3.834E-20, (-146.151597657), 2423.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1083339.7865389287, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[1];
      longArray1[0] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.scaleInPlace(1669.050743, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = new Double((-20.0));
      assertEquals((-20.0), double0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1669.050743;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (-1329.9748618);
      doubleArray1[3] = 4910.7;
      doubleArray1[4] = (-1329.9748618);
      doubleArray1[5] = (-20.0);
      doubleArray1[6] = (-20.0);
      doubleArray1[7] = (-20.0);
      doubleArray1[8] = (-1039.09779709);
//      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 2462.440959493186;
      doubleArray0[0] = 2462.440959493186;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2462.440959493186}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4924.881918986372}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2462.440959493186;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection0);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 2462.440959493186);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {2462.440959493186, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2462.440959493186, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long[][] longArray0 = new long[5][4];
      long[] longArray1 = new long[6];
      longArray1[0] = 5L;
      longArray1[3] = 1728L;
      longArray1[3] = 442L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1054.846297150027;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3132.967);
      doubleArray0[3] = (-6072.27518998232);
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection0);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.449536999882564E7);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1054.846297150027, 0.0, (-3132.967), (-6072.27518998232), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1876030.0199070885), -0.0, 5571939.873380728, 1.0799460145352E7, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Name is null
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 263.378757353;
      doubleArray0[1] = 0.013887133004293483;
      doubleArray0[2] = 100.0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-862.0F);
      floatArray0[1] = (-862.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-862.0F), (-862.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(263.378757353, 1607.50715, Double.NaN, (double) (-862.0F), (-1328.0616839739), 0.013887133004293483);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1714;
      intArray0[1] = 1714;
      intArray0[2] = 1714;
      intArray0[3] = 1714;
      intArray0[4] = 1714;
      intArray0[5] = 1714;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1714, 1714, 1714, 1714, 1714, 1714}, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1714;
      floatArray1[1] = (-862.0F);
      floatArray1[2] = (float) 0;
      floatArray1[3] = (-4172.43F);
      floatArray1[4] = (-862.0F);
      floatArray1[5] = (float) 1714;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {1714.0F, (-862.0F), 0.0F, (-4172.43F), (-862.0F), 1714.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-862.0F), (-862.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertEquals(6, floatArray1.length);
      assertEquals(2, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 100.0}, doubleArray0, 0.01);
      assertFalse(boolean2);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1714);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 100.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1714, doubleArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 4398046511103L;
      longArray0[1] = (long) 1714;
      longArray0[2] = (long) 1714;
      longArray0[3] = (long) 1714;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 1714;
      longArray0[6] = (long) 1714;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {4398046511103L, 1714L, 1714L, 1714L, 0L, 1714L, 1714L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (double) 0;
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3691.4192F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-3691.4192F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.5F;
      floatArray0[2] = 1289.9753F;
      floatArray0[3] = 1757.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.5F, 1289.9753F, 1757.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">mljaI^WE%HZu-\"";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "7";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 10000L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {10000L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 10000L;
      floatArray0[1] = (float) 10000L;
      floatArray0[2] = (float) 10000L;
      floatArray0[3] = (float) 10000L;
      floatArray0[4] = (-1452.4476F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {10000.0F, 10000.0F, 10000.0F, 10000.0F, (-1452.4476F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1054.846297150027;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3132.967);
      doubleArray0[3] = (-6072.27518998232);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-3132.967), 0.0, 0.0, 1054.846297150027, (-6072.27518998232)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-3132.967), 0.0, 0.0, 1054.846297150027, (-6072.27518998232)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[2] = 1728L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1728L;
      doubleArray0[1] = (double) (-468.4F);
      doubleArray0[2] = (double) 1728L;
      doubleArray0[3] = (double) 1728L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1728.0, (-468.3999938964844), 1728.0, 1728.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[13];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) (-468.4F);
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1728.0, (-468.3999938964844), 1728.0, 1728.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1728.0, (-468.3999938964844), 1728.0, 1728.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(16, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1054.846297150027;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3132.967);
      doubleArray0[3] = (-6072.27518998232);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-3132.967), 0.0, 0.0, 1054.846297150027, (-6072.27518998232)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-3132.967), 0.0, 0.0, 1054.846297150027, (-6072.27518998232)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1418;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 263.378757353;
      doubleArray0[1] = 0.013887133004293483;
      doubleArray0[2] = 100.0;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 100.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 100.0}, doubleArray0, 0.01);
      assertEquals(281.72392517793537, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.scaleInPlace(550.362153140462, doubleArray0);
      assertArrayEquals(new double[] {144953.69998825638, 7.642952421190935, 55036.2153140462}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1446.0F);
      floatArray0[2] = (-862.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1446.0F), (-862.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      double double1 = MathArrays.linearCombination(545.69426462648, 100.0, 7.642952421190935, 100.0, 100.0, 144953.69998825638);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.4550703720530406E7, double1, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(1.304E19, 0.3333333134651184, 1.304E19, 7.642952421190935);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0401076597991493E20, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4323.4262541);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-4323.4262541)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-4323.4262541)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-4323.4262541)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1126;
      intArray0[1] = 2147268921;
      intArray0[2] = (-1601);
      intArray0[3] = 203;
      intArray0[4] = (-657);
      intArray0[5] = 80;
      intArray0[6] = 5;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {1126, 2147268921, (-1601), 203, (-657), 80, 5, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1126;
//      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 177.7F;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-468.4F);
      floatArray1[1] = 177.7F;
      floatArray1[2] = 177.7F;
      floatArray1[3] = 177.7F;
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      intArray0[1] = 1714;
      intArray0[2] = 5;
      intArray0[3] = 22;
      intArray0[4] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {5, 1714, 5, 22, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {177.7F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 177.7F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 177.7F;
      doubleArray0[3] = (double) (-468.4F);
      doubleArray0[4] = (double) 177.7F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (177.7 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4323.4262541);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-4323.4262541)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-4323.4262541)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, (-4323.4262541)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1126;
      intArray0[1] = 2147268921;
      intArray0[2] = (-1601);
      intArray0[3] = 203;
      intArray0[4] = (-657);
      boolean boolean3 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, (-4323.4262541)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean3);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean4 = MathArrays.equals(doubleArray0, doubleArray1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, (-4323.4262541)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean4);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-4323.4262541)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 263.378757353;
      doubleArray0[1] = 0.013887133004293483;
      doubleArray0[2] = 100.0;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 100.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1714;
      intArray0[2] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 1714, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1714;
      floatArray0[1] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1714.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 100.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      
      long[][] longArray0 = new long[9][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 1714;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 1714;
      longArray3[1] = 3761L;
      longArray3[2] = (long) 0;
      longArray3[3] = (long) 1714;
      longArray3[4] = (long) 0;
      longArray3[5] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 0;
      longArray4[2] = (long) 1714;
      longArray4[3] = (long) 1714;
      longArray4[4] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 3761L;
      longArray5[1] = (long) 0;
      longArray5[2] = (long) 1714;
      longArray5[3] = (long) 1714;
      longArray5[4] = (long) 1714;
      longArray5[5] = (long) 0;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = (long) 0;
      longArray6[1] = (long) 1714;
      longArray6[2] = (long) 1714;
      longArray6[3] = (long) 0;
      longArray6[4] = (long) 0;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[3];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray7[0] = (long) 1714;
      longArray7[1] = 1687L;
      longArray7[2] = 3761L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[5];
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray5));
      
      longArray8[0] = 1687L;
      longArray8[1] = (long) 0;
      longArray8[2] = (-2644281811660520851L);
      longArray8[3] = (long) 1714;
      longArray8[4] = (long) 0;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[0];
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray3));
      
      longArray0[8] = longArray9;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,644,281,811,660,520,851 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1054.846297150027;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3132.967);
      doubleArray0[3] = (-6072.27518998232);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1054.846297150027, 0.0, 0.0, (-3132.967), (-6072.27518998232), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1054.846297150027, 0.0, 0.0, (-3132.967), (-6072.27518998232), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(2243.2345831, 0.0, 1054.846297150027, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = (Integer) int0;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer((-1559));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-1559), (int)integer3);
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer((-1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals((-1), (int)integer4);
      
      Integer integer5 = new Integer((-1));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals((-1), (int)integer5);
      
      integerArray0[6] = integer5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 263.378757353;
      doubleArray0[1] = 0.013887133004293483;
      doubleArray0[2] = 100.0;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 100.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 100.0}, doubleArray0, 0.01);
      assertEquals(281.72392517793537, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.scaleInPlace(550.362153140462, doubleArray0);
      assertArrayEquals(new double[] {144953.69998825638, 7.642952421190935, 55036.2153140462}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1446.0F);
      floatArray0[2] = (-862.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1446.0F), (-862.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      double double1 = MathArrays.linearCombination(545.69426462648, 100.0, 7.642952421190935, 100.0, 100.0, 144953.69998825638);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.4550703720530406E7, double1, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.101157514028544E10, 58.414721712588374, 3.0289849960940537E9}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {144953.69998825638, 7.642952421190935, 55036.2153140462}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      long[][] longArray0 = new long[1][8];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 0;
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 39, (-20.0), 1.304E19, (-146.151597657), 0.0, 1.304E19, (-20.0), (-146.151597657));
      assertEquals((-1.90581683344728E21), double0, 0.01);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-146.151597657);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 39;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-146.151597657), 0.0, 39.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-885));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 2146898199;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146898199);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 263.378757353;
      doubleArray0[1] = 0.013887133004293483;
      doubleArray0[2] = 100.0;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 100.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 100.0}, doubleArray0, 0.01);
      assertEquals(281.72392517793537, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.scaleInPlace(550.362153140462, doubleArray0);
      assertArrayEquals(new double[] {144953.69998825638, 7.642952421190935, 55036.2153140462}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1446.0F);
      floatArray0[2] = (-862.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1446.0F), (-862.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      double double1 = MathArrays.linearCombination(545.69426462648, 100.0, 7.642952421190935, 100.0, 100.0, 144953.69998825638);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.4550703720530406E7, double1, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2113);
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, (-2113)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(3, intArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) (-2113);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, integerArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, false);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {144953.69998825638, 7.642952421190935, 55036.2153140462}, doubleArray0, 0.01);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean2);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 263.378757353;
      doubleArray0[1] = 0.013887133004293483;
      doubleArray0[2] = 100.0;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 100.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 100.0}, doubleArray0, 0.01);
      assertEquals(281.72392517793537, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.scaleInPlace(550.362153140462, doubleArray0);
      assertArrayEquals(new double[] {144953.69998825638, 7.642952421190935, 55036.2153140462}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1446.0F);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DECREASING";
      stringArray0[1] = ">mljaI^WE%HZu-\"";
      stringArray0[2] = "7";
      stringArray0[3] = ">mljaI^WE%HZu-\"";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double double1 = new Integer(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, double1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4323.4262541);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-4323.4262541)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-4323.4262541)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-4323.4262541)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1126;
      intArray0[1] = 2147268921;
      intArray0[2] = (-1601);
      intArray0[3] = 203;
      intArray0[4] = (-657);
      intArray0[5] = 80;
      intArray0[6] = 5;
      intArray0[7] = 0;
      intArray0[8] = 1714;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1126, 2147268921, (-1601), 203, (-657), 80, 5, 0, 1714}, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      
      boolean boolean3 = MathArrays.equals((float[]) null, (float[]) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (0 <= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2000.6416343);
      doubleArray0[1] = (-24.056417);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2000.6416343), (-24.056417)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4002566.9488945752, 96256.53884456461, 578.7111988778889}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = (-3964);
      intArray0[2] = 2151;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, (-3964), 2151, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int1);
      assertEquals(7, intArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2000.6416343), (-24.056417)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4002566.9488945752, 96256.53884456461, 578.7111988778889}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale((-2000.6416343), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2000.6416343), (-24.056417)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4002566.9488945752, 48128.269422282305}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.34217729E8;
      doubleArray3[1] = (-24.056417);
      doubleArray3[2] = (-2000.6416343);
      doubleArray3[3] = (double) 2151;
      doubleArray3[4] = (double) (-3964);
//      try { 
        MathArrays.linearCombination(doubleArray3, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection0);
      
//      try { 
        MathArrays.normalizeArray(doubleArray1, 1121.4349855430698);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[][] longArray0 = new long[5][4];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 629.51;
      doubleArray0[1] = 228.0;
      doubleArray0[2] = 877.4811645057356;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-414.206);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1192);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {629.51, 228.0, 877.4811645057356, (-1.0), (-414.206)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1192, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-228);
      floatArray0[0] = (float) (-228);
      floatArray0[2] = (float) (-228);
      floatArray0[3] = (float) (-228);
      floatArray0[4] = (float) (-228);
      floatArray0[5] = (float) (-228);
      floatArray0[6] = (-745.8F);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-228.0F), 0.0F, (-228.0F), (-228.0F), (-228.0F), (-228.0F), (-745.8F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-228.0F);
      doubleArray0[1] = (double) (-228.0F);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-228.0), (-228.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-228.0), (-228.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-228.0), (-228.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-228.0), (-228.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(322.44069222106566, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-228);
      doubleArray2[1] = (double) (-228.0F);
      doubleArray2[2] = (double) (-228.0F);
      doubleArray2[3] = (double) (-228.0F);
      doubleArray2[4] = (double) (-745.8F);
      doubleArray2[5] = (double) (-745.8F);
      doubleArray2[6] = (double) (-228.0F);
      doubleArray2[7] = (double) (-745.8F);
      doubleArray2[8] = (double) (-228.0F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-228.0), (-228.0), (-228.0), (-228.0), (-745.7999877929688), (-745.7999877929688), (-228.0), (-745.7999877929688), (-228.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean1);
      assertEquals(9, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2000.6416343);
      doubleArray0[1] = (-24.056417);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-2000.6416343), (-24.056417)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 3851L;
      longArray0[3] = 3851L;
      longArray0[4] = 3851L;
      longArray0[5] = 3851L;
      longArray0[6] = (-1067L);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,067 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1753.1641F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1753.1641F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2146972621;
      intArray0[1] = 2409;
      intArray0[2] = 1899017204;
      intArray0[3] = 2146611906;
      intArray0[4] = 110;
      intArray0[5] = (-2693);
      intArray0[6] = 2147483499;
      intArray0[7] = 1960;
      intArray0[8] = 1322;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {2146972621, 2409, 1899017204, 2146611906, 110, (-2693), 2147483499, 1960, 1322}, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 2409;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {2409.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1753.1641F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray0.length);
      
      MathArrays.scaleInPlace((-2002.793490682801), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1322;
      intArray1[1] = 134217729;
      intArray1[2] = 22;
      intArray1[3] = 2147483499;
      intArray1[4] = (-2362);
      intArray1[5] = 2146972621;
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      int[] intArray0 = new int[8];
      intArray0[0] = 78;
      intArray0[1] = (-239);
      intArray0[2] = (-2146836089);
      intArray0[3] = (-64);
      intArray0[4] = 2078;
      intArray0[5] = (-1);
      intArray0[6] = (-843);
      intArray0[7] = (-69);
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1123;
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 263.378757353;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {263.378757353, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {263.378757353, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {263.378757353, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {263.378757353, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection0);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1121.4349855430698);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {263.378757353, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {263.378757353, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1121.4349855430698, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("m~+Q9mxG~!4|T>+q");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.m~+Q9mxG~!4|T>+q
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1616.974052;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3474.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-1931.3144841);
      doubleArray0[5] = 2.0;
      doubleArray0[6] = 1569.71141633938;
      doubleArray0[7] = 994.0739;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1616.974052, 0.0, 3474.0, Double.NaN, (-1931.3144841), 2.0, 1569.71141633938, 994.0739}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1616.974052, 0.0, 3474.0, Double.NaN, (-1931.3144841), 2.0, 1569.71141633938, 994.0739}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1616.974052, 0.0, 3474.0, Double.NaN, (-1931.3144841), 2.0, 1569.71141633938, 994.0739}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1616.974052, 0.0, 3474.0, Double.NaN, (-1931.3144841), 2.0, 1569.71141633938, 994.0739}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
//      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/Z";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[2] = "dimension ({0})";
      stringArray0[3] = "tc-Qz*S75:C!A5P";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double double0 = MathArrays.linearCombination((-2445.367577504), (-2445.367577504), (-2445.367577504), (-1.0));
      assertEquals(5982267.956685286, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2445.367577504);
      doubleArray0[1] = (-1.0);
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-2445.367577504), (-1.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 353;
      intArray0[1] = (-254);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {353, (-254)}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2445.367577504), (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2445.367577504), (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination((double) (-254), (double) 353, (-2445.367577504), 0.0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-89662.0), double2, 0.01);
      
      double[][] doubleArray2 = new double[5][4];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2445.367577504), (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray2.length);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double double3 = MathArrays.linearCombination((-1.0), (-1.0), (-1.0), (-2264.903243858423));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(2265.903243858423, double3, 0.01);
      
      long[][] longArray1 = new long[0][2];
      MathArrays.checkRectangular(longArray1);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 177.7F;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-468.4F);
      floatArray1[1] = 177.7F;
      floatArray1[2] = 177.7F;
      floatArray1[3] = 177.7F;
      floatArray1[4] = 3.4028235E38F;
      floatArray1[5] = 177.7F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {177.7F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-468.4F), 177.7F, 177.7F, 177.7F, 3.4028235E38F, 177.7F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 177.7F;
      doubleArray0[3] = (-3140.621492841508);
      doubleArray0[4] = (double) 3.4028235E38F;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 177.6999969482422, (-3140.621492841508), 3.4028234663852886E38}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2759.91;
      doubleArray0[1] = 753.94656818649;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-862.0F);
      floatArray0[1] = (-862.0F);
      floatArray0[2] = (-862.0F);
      floatArray0[3] = (-862.0F);
      floatArray0[4] = 3327.848F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-862.0F), (-862.0F), (-862.0F), (-862.0F), 3327.848F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      double double0 = MathArrays.linearCombination((-67.255184), 0.0, 932.559, (-1555.08), (-767.754609), 1.34217729E8);
      assertEquals((-1.0304773025311267E11), double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2113);
      int[] intArray1 = MathArrays.copyOf(intArray0, 4);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2113)}, intArray0);
      assertArrayEquals(new int[] {(-2113), 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 263.378757353;
      doubleArray0[1] = 0.013887133004293483;
      doubleArray0[2] = 100.0;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 100.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {263.378757353, 0.013887133004293483, 100.0}, doubleArray0, 0.01);
      assertEquals(281.72392517793537, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.scaleInPlace(550.362153140462, doubleArray0);
      assertArrayEquals(new double[] {144953.69998825638, 7.642952421190935, 55036.2153140462}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1446.0F);
      floatArray0[2] = (-862.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1446.0F), (-862.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      double double1 = MathArrays.linearCombination(545.69426462648, 100.0, 7.642952421190935, 100.0, 100.0, 144953.69998825638);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.4550703720530406E7, double1, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2113);
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, (-2113)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {144953.69998825638, 7.642952421190935, 55036.2153140462}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-67.255184);
      doubleArray0[1] = 1057.87;
      double double0 = 100.0;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -67.255 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/Z";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[2] = "dimension ({0})";
      stringArray0[3] = "tc-Qz*S75:C!A5P";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double double0 = MathArrays.linearCombination((-2445.367577504), (-2445.367577504), (-2445.367577504), (-1.0));
      assertEquals(5982267.956685286, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2445.367577504);
      doubleArray0[1] = (-1.0);
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-2445.367577504), (-1.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 353;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {353, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2445.367577504), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2445.367577504), (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination((double) 0, (double) 353, (-2445.367577504), 0.0);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double[][] doubleArray2 = new double[5][4];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2445.367577504), (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray2.length);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double double3 = MathArrays.linearCombination((-1.0), (-1.0), (-1.0), (-2264.903243858423));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(2265.903243858423, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/Z";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[2] = "dimension ({0})";
      stringArray0[3] = "tc-Qz*S75:C!A5P";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double double0 = MathArrays.linearCombination((-2445.367577504), (-2445.367577504), (-2445.367577504), (-1.0));
      assertEquals(5982267.956685286, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2445.367577504);
      doubleArray0[1] = (-1.0);
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-2445.367577504), (-1.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      int int0 = 353;
      intArray0[0] = 353;
      intArray0[1] = (-254);
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {353, (-254)}, intArray0);
      assertEquals(0, int1);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2445.367577504), (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2445.367577504), (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(0.5, (-4.068233003401932E-9), (-2445.367577504), 46.936);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-114775.77261772979), double2, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3667.1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.4804686;
      double[][] doubleArray1 = new double[7][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.4804686;
      doubleArray2[1] = 1.4804686;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-3667.1);
      doubleArray2[4] = 1.4804686;
      doubleArray2[5] = (-3667.1);
      doubleArray2[6] = (-3667.1);
      doubleArray2[7] = (-3667.1);
      doubleArray1[6] = doubleArray2;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1054.846297150027;
      doubleArray0[1] = 1714.0;
      doubleArray0[2] = 0.0;
      double[][] doubleArray1 = new double[6][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 1054.846297150027, 1714.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = (-3909.00487889425);
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, (-3909.00487889425));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-900);
      int int0 = (-385);
      intArray0[1] = (-385);
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-900), (-385)}, intArray0);
      assertEquals(0, int1);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 177.7F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-2080.18F);
      floatArray0[7] = 507.107F;
      floatArray0[8] = 1567.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {177.7F, 0.0F, 1.0F, 0.0F, 3.4028235E38F, 0.0F, (-2080.18F), 507.107F, 1567.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 263.378757353;
      doubleArray0[1] = 0.0;
      double double0 = 100.0;
      doubleArray0[2] = 100.0;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1054.846297150027;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3132.967);
      doubleArray0[3] = (-6072.27518998232);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(2243.2345831, 0.0, 1054.846297150027, -0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-3328.6549);
      doubleArray0[2] = (-4226.729511248224);
      doubleArray0[3] = 287.9;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 1412.118656443;
      doubleArray0[7] = (-808.95415);
      MathArrays.copyOf(doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-3328.6549);
      doubleArray1[1] = (-4226.729511248224);
      doubleArray1[2] = 287.9;
      doubleArray1[3] = 1412.118656443;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 0.0;
//      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2728.842337512638;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      int int0 = (-2147220198);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-2147220198));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 5233.0;
      doubleArray0[0] = 5233.0;
      double double1 = 2930.884;
      doubleArray0[1] = 2930.884;
      doubleArray0[2] = 0.0;
      double double2 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double1 = (-4323.4262541);
      doubleArray0[2] = (-4323.4262541);
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2759.91;
      doubleArray0[1] = 753.94656818649;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 391.825975003679;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 39;
      intArray0[2] = (-1934);
      intArray0[3] = 134217729;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 134217729;
      intArray0[7] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 677;
      intArray0[1] = 83;
      intArray0[2] = 335;
      intArray0[3] = (-1533);
      intArray0[4] = (-3275);
      intArray0[5] = 1013;
      intArray0[6] = (-322);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) 677;
      floatArray0[2] = (float) (-3275);
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) (-1533);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3275);
      doubleArray0[1] = (double) 677;
      doubleArray0[2] = (double) (-322);
      doubleArray0[3] = (double) 83;
      doubleArray0[4] = (double) 677;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-20.0);
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = 4650.5009;
      doubleArray0[6] = (-20.0);
      doubleArray0[7] = (-20.0);
      MathArrays.scaleInPlace((-20.0), doubleArray0);
      assertArrayEquals(new double[] {400.0, 400.0, -0.0, 400.0, 400.0, (-93010.018), 400.0, 400.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3340;
      intArray0[1] = (-2281);
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1601;
      intArray0[5] = (-146);
      intArray0[6] = (-498);
      int[] intArray1 = MathArrays.copyOf(intArray0, 1601);
      assertEquals(1601, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-3667.1);
      doubleArray0[0] = (-3667.1);
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      double double2 = 1.4804686;
      doubleArray0[2] = 1.4804686;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (-3,667.1 <= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-832));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1559));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1));
      integerArray0[6] = integer6;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4323.4262541);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[9];
      intArray0[0] = 1126;
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.linearCombination(0.0, 0.0, 545.69426462648, Double.NaN, 0.0, 1217.8516);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-2113));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2759.91;
      doubleArray0[1] = 753.94656818649;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 391.825975003679;
      double double0 = (-880.95);
      double[] doubleArray1 = MathArrays.scale((-880.95), doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[6][1];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 391.825975003679;
      doubleArray3[1] = 391.825975003679;
      doubleArray3[2] = 2759.91;
      doubleArray2[2] = doubleArray3;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-1237.28);
      doubleArray2[5] = doubleArray4;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 722.1008081827755;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 1.304E19;
      MathArrays.scale(1.304E19, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-2551);
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1125.015758658781);
      doubleArray0[6] = (-234.2787381);
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (134,217,729 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-67.255184);
      doubleArray0[1] = 1057.87;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2282.878062752733);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      MathArrays.linearCombination((-940.456), 1.34217729E8, 0.0, 0.0, 0.0, (-2282.878062752733), 1057.87, 1057.87);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[4][1];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray2;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
//      try { 
        MathArrays.checkOrder(doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0.5 >= 0.5)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.scale(0.0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.linearCombination(1258.0, (-1056.48087975), (-1056.48087975), (-1056.48087975), 1258.0, 1.0);
      Field<Integer> field0 = null;
      int int0 = (-6220);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Integer>) null, (-6220));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1863.65);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[1];
      longArray1[0] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkNonNegative(longArray0);
      double double0 = MathArrays.linearCombination((-1863.65), (-20.0), (-1329.9748618), 0.0, (double) 0L, (-2665.6160590024), (-146.151597657), 0.0);
      assertEquals(37273.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F";
      stringArray0[1] = "_*";
      stringArray0[2] = "";
      stringArray0[3] = "crossover rate ({0})";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1383.133);
      doubleArray0[1] = 0.0;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not decreasing (-1,383.133 < 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">mljaI^WE%HZu-\"";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "7";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      long[] longArray0 = new long[9];
      longArray0[0] = 10000L;
      longArray0[1] = 1340L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 4503599627370496L;
      longArray0[5] = 0L;
      longArray0[6] = 9007199254740990L;
      longArray0[7] = 0L;
      longArray0[8] = 61L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      int int0 = 2147460979;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Pair<String, String>>) null, 2147460979, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-228);
      int int1 = 1;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-228), 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1616.974052;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3474.0;
      double double0 = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-1931.3144841);
      doubleArray0[5] = 2.0;
      doubleArray0[6] = 1569.71141633938;
      doubleArray0[7] = 994.0739;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray0);
      String string0 = "u?8GtXy?`c";
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("u?8GtXy?`c");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.u?8GtXy?`c
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      long[][] longArray0 = new long[5][5];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = (-354L);
      longArray1[2] = 3195L;
      longArray1[3] = (-1L);
      longArray1[4] = (-433L);
      longArray1[5] = (-1073741824L);
      longArray1[6] = 0L;
      longArray1[7] = 0L;
      longArray1[8] = 402L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = 402L;
      longArray2[1] = (-354L);
      longArray2[2] = 0L;
      longArray2[3] = (-433L);
      longArray2[4] = 0L;
      longArray2[5] = (-433L);
      longArray2[6] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = 0L;
      longArray3[1] = 1L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = (-354L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      longArray5[0] = (-433L);
      longArray5[1] = 3195L;
      longArray0[4] = longArray5;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -354 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2817);
      intArray0[2] = (-1023);
      intArray0[3] = (-1195);
      intArray0[4] = 1;
      intArray0[5] = (-2751);
      intArray0[6] = (-1);
      intArray0[7] = (-1071);
      intArray0[8] = 67;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1195);
      doubleArray0[1] = (double) (-1023);
      doubleArray0[2] = (double) (-2751);
      doubleArray0[3] = (double) (-2817);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 67;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) (-1071);
      doubleArray1[3] = (double) (-1071);
      doubleArray1[4] = (double) (-2817);
      doubleArray1[5] = (double) (-1195);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(11, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 539.513;
      doubleArray0[2] = 1321.3;
      doubleArray0[3] = (-213.3);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray1);
      long[][] longArray0 = new long[7][3];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 848L;
      longArray1[2] = (-4070L);
      longArray1[3] = (-2268L);
      longArray1[4] = 0L;
      longArray1[5] = 2147483647L;
      longArray1[6] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = (-2268L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 2147483647L;
      longArray3[1] = 0L;
      longArray3[2] = (-2268L);
      longArray3[3] = (-2268L);
      longArray3[4] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 0L;
      longArray4[1] = 848L;
      longArray4[2] = (-4070L);
      longArray4[3] = 848L;
      longArray4[4] = (-2268L);
      longArray4[5] = 0L;
      longArray4[6] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      longArray6[0] = (-4070L);
      longArray6[1] = (-4070L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      longArray7[0] = 0L;
      longArray7[1] = 0L;
      longArray7[2] = (-2268L);
      longArray7[3] = (-4070L);
      longArray7[4] = 0L;
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 1 while others have length 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3315.27569);
      doubleArray0[3] = 1121.4349855430698;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      long[] longArray0 = new long[6];
      longArray0[0] = 3851L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1264L;
      longArray0[4] = 0L;
      longArray0[5] = (-1067L);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,067 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2000.6416343);
      doubleArray0[1] = (-24.056417);
      MathArrays.convolve(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-3964);
      intArray0[2] = 2151;
      intArray0[3] = 1490;
      intArray0[4] = (-4000);
      intArray0[5] = (-366);
      intArray0[6] = (-431);
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[6][5];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      long[][] longArray0 = new long[6][3];
      long[] longArray1 = new long[3];
      longArray1[0] = (-4652L);
      longArray1[1] = (-631L);
      longArray1[2] = 1225L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = (-4652L);
      longArray2[1] = 1225L;
      longArray2[2] = (-4652L);
      longArray2[3] = 1225L;
      longArray2[4] = 2591L;
      longArray2[5] = (-631L);
      longArray2[6] = 1225L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (-631L);
      longArray3[1] = 1225L;
      longArray3[2] = (-631L);
      longArray3[3] = 2591L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      longArray5[0] = 2591L;
      longArray5[1] = (-631L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = 2591L;
      longArray0[5] = longArray6;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 7 while others have length 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
