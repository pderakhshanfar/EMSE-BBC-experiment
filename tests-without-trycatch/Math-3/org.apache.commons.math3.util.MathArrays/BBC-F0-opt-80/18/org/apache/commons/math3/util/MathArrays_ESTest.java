/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:24:34 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(638);
      assertEquals(638, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(integer0).when(field0).getZero();
      int[] intArray0 = new int[9];
      intArray0[0] = 779;
      intArray0[1] = 779;
      intArray0[2] = 779;
      intArray0[3] = 779;
      intArray0[4] = 779;
      intArray0[5] = 779;
      intArray0[6] = 779;
      intArray0[7] = 779;
      intArray0[8] = 779;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {779, 779, 779, 779, 779, 779, 779, 779, 779}, intArray0);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 779);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Object[][] objectArray0 = MathArrays.buildArray(field0, 8388607, (-860));
      assertNotNull(objectArray0);
      assertEquals(8388607, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0[0], mathArrays_OrderDirection0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1073741824;
      doubleArray1[1] = (double) 1073741824;
      doubleArray1[2] = (double) 1073741824;
      doubleArray1[3] = (double) 1073741824;
      doubleArray1[4] = (double) (-2159);
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.073741824E9, 1.073741824E9, 1.073741824E9, 1.073741824E9, (-2159.0)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.buildArray(field0, 1073741824, (-2159));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 973.2093;
      doubleArray0[1] = (-773.5);
      doubleArray0[2] = 1025.0;
      doubleArray0[3] = (-87.837239924);
      doubleArray0[4] = 3152.5;
      doubleArray0[5] = 2.85040095144011776E17;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-87.837239924), 1025.0, (-773.5), 973.2093, 3152.5, 2.85040095144011776E17}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.scaleInPlace(8.124785583970729E34, doubleArray0);
      assertArrayEquals(new double[] {(-7.136587406702934E36), 8.327905223569997E37, (-6.284521649201359E37), 7.907116890826244E37, 2.561338655346772E38, 2.315889655879712E52}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.315889655879712E52, double0, 0.01);
      assertArrayEquals(new double[] {(-7.136587406702934E36), 8.327905223569997E37, (-6.284521649201359E37), 7.907116890826244E37, 2.561338655346772E38, 2.315889655879712E52}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-7.136587406702934E36), 8.327905223569997E37, (-6.284521649201359E37), 7.907116890826244E37, 2.561338655346772E38, 2.315889655879712E52}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 247;
      intArray0[1] = 2129;
      intArray0[2] = 134217729;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {247, 2129, 134217729}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[1];
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-358.732718);
      doubleArray0[1] = 404.455761398644;
      doubleArray0[2] = 518.4;
      doubleArray0[3] = 0.9375;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 2.1241500521184878E37;
//      try { 
        MathArrays.normalizeArray(doubleArray0, 404.455761398644);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, -\u221E at index 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.9166666666666666, 0.0, 0.0, 0.0, 0.9166666666666666, 0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-0.25);
      doubleArray0[1] = (-0.25);
      double[] doubleArray1 = MathArrays.scale((-0.25), doubleArray0);
      assertArrayEquals(new double[] {(-0.25), (-0.25)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0625, 0.0625}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals((-0.03125), double0, 0.01);
      assertArrayEquals(new double[] {(-0.25), (-0.25)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0625, 0.0625}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 358.97767145;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1054.4716757);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1581.6;
      doubleArray0[5] = 0.01745329052209854;
      doubleArray0[6] = (-2052.69898);
      doubleArray0[7] = 3.141592653589793;
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2174.443F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2369.0F);
      floatArray0[0] = 0.0F;
      floatArray0[4] = 842.3F;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-2369.0F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = 775.53F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2174.443F;
      floatArray1[5] = (-2369.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2369.0F), 0.0F, 842.3F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2369.0F), 0.0F, 775.53F, 0.0F, 2174.443F, (-2369.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0}, intArray2);
      assertNotNull(intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      
      int[] intArray3 = MathArrays.copyOf(intArray1, 0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {}, intArray3);
      assertNotNull(intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray3.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3778);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(3778, doubleArray1.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-305.7567172878);
      doubleArray2[1] = (double) 3778;
      doubleArray2[2] = 791235.156196;
      doubleArray2[3] = (double) 3778;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray1, doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[2];
      long long0 = (-1L);
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-21L);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -21 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long[][] longArray0 = new long[3][1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2089.1856);
      doubleArray0[1] = (-2071.8556926876745);
      doubleArray0[2] = 1793.7459050570417;
      doubleArray0[3] = 6.52E18;
      doubleArray0[4] = 3.26E18;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 791235.156196;
      doubleArray0[7] = 1068.398360722819;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7.2895816066493143E18, double0, 0.01);
      assertArrayEquals(new double[] {(-2089.1856), (-2071.8556926876745), 1793.7459050570417, 6.52E18, 3.26E18, (-1.0), 791235.156196, 1068.398360722819}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 1199.0142F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 1199.01416015625}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[][] longArray0 = new long[6][8];
      long[] longArray1 = new long[2];
      longArray1[0] = (-1390L);
      longArray1[1] = (-1059L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1059L);
      longArray2[1] = (-1390L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1390L);
      longArray3[1] = (-1390L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-1390L);
      longArray4[1] = (-1059L);
      longArray4[2] = (-1059L);
      longArray4[3] = (-1390L);
      longArray4[4] = (-1059L);
      longArray4[5] = (-1390L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (-1059L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = (-1059L);
      longArray6[1] = (-1059L);
      longArray6[2] = (-1390L);
      longArray6[3] = (-1059L);
      longArray6[4] = (-1059L);
      longArray6[5] = (-1390L);
      longArray0[5] = longArray6;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 6 while others have length 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1255.6113438248;
      doubleArray0[1] = 838.7041551090912;
      doubleArray0[2] = 1948.788528904863;
      doubleArray0[3] = 0.3153223395347595;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 838.7041551090912;
      doubleArray2[1] = 1255.6113438248;
      doubleArray2[2] = 1255.6113438248;
      doubleArray2[3] = 0.3153223395347595;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = null;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2808.334F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-915.0F);
      floatArray0[7] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {2808.334F, (-1.0F), Float.NaN, Float.NEGATIVE_INFINITY, 0.0F, 0.0F, (-915.0F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, floatArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 543.1F;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 543.1F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 543.1F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {543.1F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("Nvy,)?");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.Nvy,)?
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2147483645;
      intArray0[1] = 119;
      intArray0[2] = 13;
      intArray0[3] = (-3745);
      intArray0[4] = (-2486);
      intArray0[5] = 98;
      intArray0[6] = 20;
      intArray0[7] = 5;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2147483645, 119, 13, (-3745), (-2486), 98, 20, 5}, intArray0);
      assertEquals(8, intArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1515.2F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-3593.3552F);
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-1515.2F), 0.0F, 1.0F, 0.0F, 0.0F, (-1.0F), 0.0F, (-3593.3552F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2253.6387F);
      floatArray0[1] = Float.POSITIVE_INFINITY;
      floatArray0[2] = (-163.18F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-2253.6387F), Float.POSITIVE_INFINITY, (-163.18F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-163.18F);
      floatArray1[1] = (-432.0F);
      floatArray1[2] = Float.POSITIVE_INFINITY;
      floatArray1[3] = Float.POSITIVE_INFINITY;
      floatArray1[4] = (-2253.6387F);
      floatArray1[5] = (-2253.6387F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-2253.6387F), Float.POSITIVE_INFINITY, (-163.18F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-163.18F), (-432.0F), Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, (-2253.6387F), (-2253.6387F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      int int0 = (-2146871131);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<String>) null, (-2146871131));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1368);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-2938);
      intArray0[3] = (-1232);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1368), Integer.MAX_VALUE, (-2938), (-1232)}, intArray0);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2938);
      intArray1[1] = 18;
      intArray1[2] = 174;
      intArray1[3] = (-2938);
      intArray1[4] = (-1232);
      intArray1[5] = Integer.MAX_VALUE;
      int int1 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-2147477279), int1);
      assertArrayEquals(new int[] {(-1368), Integer.MAX_VALUE, (-2938), (-1232)}, intArray0);
      assertArrayEquals(new int[] {(-2938), 18, 174, (-2938), (-1232), Integer.MAX_VALUE}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("~L:`Hp?2CU&;y");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.~L:`Hp?2CU&;y
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 331.35F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = Float.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 331.35F, (-1.0F), Float.NaN}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3778);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(3778, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 5.742614F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {5.742614F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2390);
      intArray0[1] = 142;
      intArray0[2] = 3765;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2390);
      intArray1[1] = 142;
      intArray1[2] = (-2390);
      intArray1[3] = 142;
      intArray1[4] = 3765;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(6155.0, double0, 0.01);
      assertArrayEquals(new int[] {(-2390), 142, 3765}, intArray0);
      assertArrayEquals(new int[] {(-2390), 142, (-2390), 142, 3765}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(5, intArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2390);
      doubleArray0[1] = (double) 3765;
      doubleArray0[2] = (double) 142;
      doubleArray0[3] = (double) (-2390);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2390.0), 3765.0, 142.0, (-2390.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2055);
      intArray0[1] = 3771;
      intArray0[2] = 4432;
      intArray0[3] = 134217729;
      int int0 = 0;
      intArray0[4] = 0;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2055);
      intArray1[1] = 4432;
      intArray1[2] = 134217729;
      intArray1[3] = 134217729;
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = 2141.5796F;
      floatArray0[2] = (-458.08945F);
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-458.08945F);
      floatArray1[1] = (-458.08945F);
      floatArray1[2] = (-458.08945F);
      floatArray1[3] = 3852.0F;
      floatArray1[4] = 2141.5796F;
      floatArray1[6] = (-458.08945F);
      floatArray1[7] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 2141.5796F, (-458.08945F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-458.08945F), (-458.08945F), (-458.08945F), 3852.0F, 2141.5796F, 0.0F, (-458.08945F), (-1.0F), 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[7];
      String string0 = "";
//      try { 
        Integer.decode("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length string
//         //
//         verifyException("java.lang.Integer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = new Double(0.366272509098053);
      assertEquals(0.366272509098053, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2145833955;
      intArray0[1] = 2145833955;
      intArray0[2] = 2145833955;
      intArray0[3] = 2145833955;
      intArray0[4] = 2145833955;
      intArray0[5] = 2145833955;
      intArray0[6] = 2145833955;
      intArray0[7] = 2145833955;
      intArray0[8] = 129;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1300.747689913413);
      assertEquals(1300.747689913413, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double[][] doubleArray1 = new double[19][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(12, doubleArray0.length);
      assertEquals(23, doubleArray2.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 12
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long[][] longArray0 = new long[3][1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      int int0 = 2145833955;
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace(2145833955, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double1 = MathArrays.linearCombination((-2171.6145), 0.0, 0.0, 1310.31840419, (-3568.4), 5436.0);
      assertEquals((-1.9397822400000002E7), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-798.55321321);
      doubleArray0[1] = (-298.531);
      doubleArray0[2] = 3.32;
      doubleArray0[3] = 120.0683864171;
      doubleArray0[4] = 86.4278;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 86.4278;
      doubleArray1[1] = (-798.55321321);
      doubleArray1[2] = 86.4278;
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 347.41;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(347.41, double0, 0.01);
      assertArrayEquals(new double[] {347.41}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {347.41}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {120693.70810000002}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {347.41}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {347.41}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {120693.70810000002}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1262.2F);
      floatArray0[1] = 378.772F;
      floatArray0[2] = (-1461.4974F);
      floatArray0[3] = 458.08F;
      floatArray0[4] = 0.0F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1262.2F);
      floatArray1[1] = (-1262.2F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-1461.4974F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-1262.2F), 378.772F, (-1461.4974F), 458.08F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1262.2F), (-1262.2F), 0.0F, (-1461.4974F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(120346.29810000001, double1, 0.01);
      assertArrayEquals(new double[] {347.41}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {120693.70810000002}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(1416.356395, 1423.45516, 1423.45516, (-1466.32), (-1941.207), 1423.45516);
      assertEquals((-2834342.072127572), double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = new Double(1.34217729E8);
      assertEquals(1.34217729E8, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = MathArrays.linearCombination(1.34217729E8, 648.629, 1826.995012, (-269.5071979144), (-1549.878206541), 1852.2442786);
      assertEquals(8.705414820219412E10, double1, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-269.5071979144);
      doubleArray0[1] = (-269.5071979144);
      doubleArray0[2] = 8.705414820219412E10;
      doubleArray0[3] = 8.705414820219412E10;
      doubleArray0[4] = (-269.5071979144);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-269.5071979144), (-269.5071979144), 8.705414820219412E10, 8.705414820219412E10, (-269.5071979144)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathArrays.linearCombination(86.4278, 86.4278, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 53;
      intArray0[1] = 62;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {53, 62}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 86.4278;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {53.0, 86.4278}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {53.0, 86.4278}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 53);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2826);
      doubleArray0[1] = (double) (-2826);
      doubleArray0[2] = (double) (-2826);
      doubleArray0[3] = (double) (-2826);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1674.9);
      assertArrayEquals(new double[] {(-2826.0), (-2826.0), (-2826.0), (-2826.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {418.725, 418.725, 418.725, 418.725}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2399.4238;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[][] doubleArray2 = new double[6][5];
      doubleArray2[0] = null;
      doubleArray2[1] = null;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = null;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.scaleInPlace(954.83753, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("DECREASvING");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASvING
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 2399.4238;
      doubleArray0[0] = 2399.4238;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.scale(2399.4238, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = 2399.4238;
      doubleArray4[1] = 2399.4238;
      doubleArray4[2] = 2399.4238;
      doubleArray4[3] = 2399.4238;
      doubleArray4[4] = 2399.4238;
//      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1415.32159));
      assertEquals((-1415.32159), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1415.32159));
      assertEquals((-1415.32159), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.997844754509471E-9);
      assertEquals(1.997844754509471E-9, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals((-1415.32159), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(172.151185610035);
      assertEquals(172.151185610035, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[4]);
      assertEquals(172.151185610035, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[5]);
      assertEquals(172.151185610035, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(1.997844754509471E-9);
      assertEquals(1.997844754509471E-9, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      
      doubleArray0[7] = double7;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      double double8 = MathArrays.linearCombination(1.997844754509471E-9, (double) doubleArray0[5], (double) doubleArray0[1], (double) doubleArray0[3]);
      assertEquals(2003135.2031204721, double8, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 4678.201F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2758.008F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 4678.201F;
      floatArray0[5] = (-417.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {4678.201F, 0.0F, 2758.008F, 0.0F, 4678.201F, (-417.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2213.310011667318);
      doubleArray0[1] = (-2213.310011667318);
      MathArrays.scaleInPlace((-2213.310011667318), doubleArray0);
      assertArrayEquals(new double[] {4898741.207746784, 4898741.207746784}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {4898741.207746784, 4898741.207746784}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (4,898,741.208 <= 4,898,741.208)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathArrays.linearCombination(530.91, 530.91, 783.64883860231, 530.91, (-1954.4), (-2094.466), (-2094.466), 530.91);
      assertEquals(3679363.8393423525, double0, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[][] longArray0 = new long[3][1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, (-2362.377008293));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2602.46, Double.NaN, 3400050.0607553245, Double.NaN, Double.NaN, (-244.5745785));
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-244.5745785);
      doubleArray0[1] = (-455.14121);
      doubleArray0[2] = 2602.46;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 2602.46;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2602.46);
      assertArrayEquals(new double[] {(-244.5745785), (-455.14121), 2602.46, Double.NaN, 2602.46, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-141.2800680462806), (-262.915228204989), 1503.3276481256346, Double.NaN, 1503.3276481256346, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3505.0);
      doubleArray0[1] = (-3505.0);
      doubleArray0[2] = (-3505.0);
      doubleArray0[3] = (-4870.9844691438);
      double[] doubleArray1 = MathArrays.scale((-4870.9844691438), doubleArray0);
      assertArrayEquals(new double[] {(-3505.0), (-3505.0), (-3505.0), (-4870.9844691438)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.7072800564349018E7, 1.7072800564349018E7, 1.7072800564349018E7, 2.3726489698640108E7}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3505.0), (-3505.0), (-3505.0), (-4870.9844691438)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.7072800564349018E7, 1.7072800564349018E7, 1.7072800564349018E7, 2.3726489698640108E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4870.984469143799), (-4870.984469143799), (-4870.984469143799), (-4870.9844691438)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(2.3731360683109254E7, double0, 0.01);
      assertArrayEquals(new double[] {(-3505.0), (-3505.0), (-3505.0), (-4870.9844691438)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.7072800564349018E7, 1.7072800564349018E7, 1.7072800564349018E7, 2.3726489698640108E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {(-3505.0), (-3505.0), (-3505.0), (-4870.9844691438)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.7072800564349018E7, 1.7072800564349018E7, 1.7072800564349018E7, 2.3726489698640108E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4870.984469143799), (-4870.984469143799), (-4870.984469143799), (-4870.9844691438)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray0, 3778);
      assertArrayEquals(new double[] {(-3505.0), (-3505.0), (-3505.0), (-4870.9844691438)}, doubleArray0, 0.01);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(3778, doubleArray4.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray4, doubleArray4);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = MathArrays.linearCombination(86.4278, 86.4278, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 53;
      intArray0[1] = 62;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {53, 62}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 53;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 62;
      doubleArray1[1] = (double) 62;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 62;
//      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-1415.32159), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double double0 = MathArrays.distanceInf(doubleArray2, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray0, 3778);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(3778, doubleArray4.length);
      
//      try { 
        MathArrays.convolve(doubleArray4, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2399.4238;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[9];
      doubleArray2[0] = (Double) 2399.4238;
      double double0 = MathArrays.linearCombination((double) doubleArray2[0], 100.0, 100.0, 1.9868161777724352E-8, (-3591.814821676), 1.9868161777724352E-8);
      assertEquals(239942.37993062407, double0, 0.01);
      assertEquals(9, doubleArray2.length);
      
      double[] doubleArray3 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals(doubleArray1, doubleArray1);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide(doubleArray1, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, 1.44888888888888883E18, 930.2782011842156, 930.2782011842156, (-2217.035), (-155.836), (-1821.41), 930.2782011842156);
      assertEquals(1.889351111111111E37, double0, 0.01);
      
      Double double1 = new Double(1.44888888888888883E18);
      assertEquals(1.44888888888888883E18, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.44888888888888883E18;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-155.836);
      doubleArray0[3] = (-155.836);
      doubleArray0[5] = (-2217.035);
      doubleArray0[6] = 1.889351111111111E37;
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {1.44888888888888883E18, 3.834E-20, (-155.836), (-155.836), 0.0, (-2217.035), 1.889351111111111E37}, doubleArray0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double3 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {1.44888888888888883E18, 3.834E-20, (-155.836), (-155.836), 0.0, (-2217.035), 1.889351111111111E37}, doubleArray0, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 156);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Double double0 = new Double(1923.6);
      assertEquals(1923.6, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = double0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1470.0105F;
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 1470.0105F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 3093.957877;
      doubleArray0[3] = 0.9285714285714286;
      doubleArray0[4] = (-4084.7208642036353);
      doubleArray0[5] = 1519.0168295;
      doubleArray0[6] = 192.80625543478888;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 1.34217729E8;
      Double double0 = new Double((-3362.021755107217));
      assertEquals((-3362.021755107217), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[1] = double0;
      doubleArray1[2] = (Double) 3093.957877;
      Double double1 = new Double((-1191.901));
      assertEquals((-1191.901), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[4] = double1;
      doubleArray1[5] = (Double) 2.0;
      doubleArray1[6] = (Double) (-4084.7208642036353);
      doubleArray1[7] = (Double) 192.80625543478888;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1444.388F;
      floatArray0[1] = (-3321.1335F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1574.9174F;
      floatArray0[4] = 437.24F;
      floatArray0[5] = 465.567F;
      floatArray0[6] = (-628.82715F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1444.388F;
      floatArray0[1] = (-3321.1335F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1574.9174F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1444.388F, (-3321.1335F), (-1.0F), 1574.9174F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.normalizeArray(doubleArray0, 1444.388F);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[5][2];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[0][0];
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2399.4238;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[9];
      doubleArray2[0] = (Double) 2399.4238;
      doubleArray2[1] = (Double) 2399.4238;
      doubleArray2[2] = (Double) 2399.4238;
      doubleArray2[3] = (Double) 2399.4238;
      doubleArray2[4] = (Double) 2399.4238;
      doubleArray2[5] = (Double) 2399.4238;
      doubleArray2[6] = (Double) 2399.4238;
      doubleArray2[7] = (Double) 2399.4238;
      doubleArray2[8] = (Double) 2399.4238;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(9, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(0.0, 2399.4238, (double) doubleArray2[7], (-3168.26));
      assertEquals((-7601998.448588001), double0, 0.01);
      assertEquals(9, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      double double0 = MathArrays.linearCombination((-2704.7), (-1760.0), 0.167, 6.283185307179586);
      assertEquals(4760273.049291946, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
//      try { 
        MathArrays.convolve(doubleArray1, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3505.0);
      doubleArray1[1] = (-3505.0);
      doubleArray1[2] = (-4870.9844691438);
      doubleArray1[3] = (-3505.0);
      doubleArray1[4] = (-3505.0);
      doubleArray1[5] = (-4870.9844691438);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3505.0), (-3505.0), (-4870.9844691438), (-3505.0), (-3505.0), (-4870.9844691438)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 53.0;
      doubleArray1[1] = (-1748.16327916409);
      doubleArray1[2] = (-1748.16327916409);
      doubleArray1[3] = 2812.0;
      doubleArray1[4] = (-1748.16327916409);
      doubleArray1[5] = 2812.0;
      doubleArray1[6] = 3093.957877;
      doubleArray1[7] = 53.0;
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(2000.0, 1118.0, 1024.3900972022432, 6.64, 6.64, (-3591.814821676));
      assertEquals(2218952.299829494, double0, 0.01);
      
      Double double1 = new Double(2218952.299829494);
      assertEquals(2218952.299829494, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1118.0);
      assertEquals(1118.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(6.52E18);
      assertEquals(6.52E18, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      Double double4 = new Double(2000.0);
      assertEquals(2000.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double1;
      doubleArray0[1] = double3;
      doubleArray0[2] = double3;
      doubleArray0[4] = double4;
      doubleArray0[5] = double2;
      doubleArray0[6] = double1;
      doubleArray0[7] = double4;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      double double5 = MathArrays.linearCombination((-2397.62126), (-1418.365010716664), (-1939.8582019811), 0.9985313415527344);
      assertEquals(3398765.0949215554, double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 164.92079;
      doubleArray0[3] = (-2291.53266);
      double double0 = MathArrays.linearCombination(1557.28, 1315.910253, 164.92079, 0.0, 1557.28, (-2291.53266));
      assertEquals((-1519317.2619729596), double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 164.92079, (-2291.53266), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 2812.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2812.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3927);
      intArray0[1] = 621;
      intArray0[2] = (-595);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-3927), 621, (-595)}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2812.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5624.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 621;
      doubleArray3[1] = 3093.957877;
      doubleArray3[2] = (double) 621;
      doubleArray3[3] = (double) (-3927);
      doubleArray3[4] = (double) 621;
//      try { 
        MathArrays.ebeMultiply(doubleArray3, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = MathArrays.linearCombination(86.4278, 86.4278, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2399.4238;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double double0 = new Double(986.598477487152);
      assertEquals(986.598477487152, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1939.8582019811));
      assertEquals((-1939.8582019811), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray2 = new Double[2];
      Double double2 = new Double(986.598477487152);
      assertEquals(986.598477487152, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray2[0] = double2;
      doubleArray2[1] = double0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, doubleArray2.length);
      
      double double3 = MathArrays.linearCombination((-2397.62126), 2399.4238, 3.834E-20, (-1635.0));
      assertEquals((-5752909.514629988), double3, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2399.4238}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(5.041914939880371, 2.0, 2.0, 6.64, 5.041914939880371, (-0.12502530217170715));
      assertEquals(22.733462940878155, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-1158.0674), 0.0, 0.0, (-2779.9356696698237), 223.0, (-2779.9356696698237), (-2880.35127011194), (-3380.406992500751));
      assertEquals(9116833.92000845, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Integer>[] fieldElementArray0 = MathArrays.buildArray(field0, 2481);
      assertNotNull(fieldElementArray0);
      assertEquals(2481, fieldElementArray0.length);
      
      boolean boolean2 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, doubleArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "B|[_(:IiLZil3iT.AO&";
      stringArray0[1] = "rX";
      stringArray0[2] = "lower bound ({0}) must be strictly less than upper bound ({1})";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[4] = "";
      stringArray0[5] = "EmB<U+]wGbx#X";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean3 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[0] = (-2318.50479532212);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3451.6;
      doubleArray0[5] = 1.304E19;
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2318.50479532212), 0.0, 0.0, 0.0, 3451.6, 1.304E19, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long[][] longArray0 = new long[3][1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      double double0 = MathArrays.linearCombination(1.304E19, 1.44888888888888883E18, 930.2782011842156, 930.2782011842156, (-2217.035), (-155.836), (-1821.41), 930.2782011842156);
      assertEquals(1.889351111111111E37, double0, 0.01);
      
      Double double1 = new Double((-912.237));
      assertEquals((-912.237), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1.44888888888888883E18);
      assertEquals(1.44888888888888883E18, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double3, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[][] longArray1 = new long[7][7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = new long[8];
      longArray2[0] = (-1813L);
      longArray2[1] = (-4406L);
      longArray2[2] = 1053L;
      longArray2[3] = (-695L);
      longArray2[4] = 237L;
      longArray2[5] = 1073741824L;
      longArray2[6] = (-3183605296591799669L);
      longArray2[7] = 2592L;
      longArray1[0] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray1[1] = longArray3;
      long[] longArray4 = new long[0];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray1[2] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = 1053L;
      longArray5[1] = 1053L;
      longArray5[2] = 237L;
      longArray1[3] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = 2592L;
      longArray6[1] = (-4406L);
      longArray6[2] = (-1813L);
      longArray6[3] = 237L;
      longArray6[4] = 1073741824L;
      longArray6[5] = 2592L;
      longArray6[6] = (-835L);
      longArray1[4] = longArray6;
      long[] longArray7 = new long[9];
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray7[0] = (-1813L);
      longArray7[1] = (-4406L);
      longArray7[2] = (-1095L);
      longArray7[3] = 2592L;
      longArray7[4] = (-835L);
      longArray7[5] = 237L;
      longArray7[6] = 237L;
      longArray7[7] = (-3183605296591799669L);
      longArray7[8] = 1053L;
      longArray1[5] = longArray7;
      long[] longArray8 = new long[3];
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray6));
      
      longArray8[0] = (-1813L);
      longArray8[1] = 2592L;
      longArray8[2] = (-1813L);
      longArray1[6] = longArray8;
//      try { 
        MathArrays.checkRectangular(longArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 0 while others have length 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathArrays.linearCombination(86.4278, 86.4278, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 53;
      intArray0[1] = 62;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {53, 62}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Double[] doubleArray0 = new Double[8];
      Double double2 = new Double(5888.66);
      assertEquals(5888.66, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[0] = double2;
      Double double3 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[1] = double3;
      Double double4 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[2] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      assertEquals(Double.NaN, (double)double5, 0.01);
      assertNotNull(double5);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[3] = double5;
      Double double6 = new Double(0.0);
      assertEquals(0.0, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      
      doubleArray0[4] = double6;
      Double double7 = new Double(53);
      assertEquals(53.0, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      
      doubleArray0[5] = double7;
      Double double8 = new Double(0.0);
      assertEquals(0.0, (double)double8, 0.01);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertEquals((double)double8, (double)double1, 0.01);
      assertEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      
      doubleArray0[6] = double8;
      Double double9 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double9, 0.01);
      assertNotNull(double9);
      assertEquals((double)double9, (double)double3, 0.01);
      assertNotEquals((double)double9, (double)double1, 0.01);
      assertEquals((double)double9, (double)double4, 0.01);
      assertNotEquals((double)double9, (double)double2, 0.01);
      assertEquals((double)double9, (double)double5, 0.01);
      assertNotEquals((double)double9, (double)double8, 0.01);
      assertNotEquals((double)double9, (double)double6, 0.01);
      assertEquals((double)double9, (double)double0, 0.01);
      assertNotEquals((double)double9, (double)double7, 0.01);
      
      doubleArray0[7] = double9;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(2000.0, 1118.0, 1024.3900972022432, 6.64, (-1661.9461), (-3591.814821676));
      assertEquals(8212204.585052046, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.64;
      doubleArray0[1] = (-1661.9461);
      doubleArray0[2] = 1118.0;
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long[][] longArray0 = new long[3][1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-677.4034801474236);
      doubleArray0[1] = 930.2782011842156;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1429);
      assertArrayEquals(new double[] {(-677.4034801474236), 930.2782011842156, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(1429, doubleArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1429;
      floatArray0[1] = 4287.85F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1429.0F, 4287.85F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double double0 = MathArrays.linearCombination((-677.4034801474236), (-228.032158679769), 3.601151469864011E7, (double) 0.0F, 42.0, (-5491.920121874), 930.2782011842156, (-677.4034801474236));
      assertEquals((-706364.5582309756), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(3451.6, 86.4278, 86.4278, (-5491.920121874), (double) 4287.85F, (double) 1429.0F);
      assertEquals(5950997.41012148, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 164.92079;
      doubleArray0[3] = (-2291.53266);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) (-2291.53266);
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 2 and 3 are not increasing (164.921 > -2,291.533)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2399.4238;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 17;
      intArray0[1] = 5;
      intArray0[2] = (-4125);
      intArray0[3] = 125;
      intArray0[4] = (-1887);
      intArray0[5] = 2;
      intArray0[6] = (-1073741823);
      int[] intArray1 = MathArrays.copyOf(intArray0, 274);
      assertArrayEquals(new int[] {17, 5, (-4125), 125, (-1887), 2, (-1073741823)}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(274, intArray1.length);
      assertEquals(7, intArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(5754835.14820644, double0, 0.01);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 6.64, 1.0, (-2895.63763381332), 1.0, 1024.3900972022432);
      assertEquals((-1871.2475366110768), double0, 0.01);
      
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination(1168.0, (-372.5219083), 223.0, 1.0, 1168.0, 1.0, (-1871.2475366110768), (-372.5219083));
      assertEquals(263366.11434563244, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (-1871.2475366110768);
      doubleArray1[2] = 6.64;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-372.5219083);
      doubleArray1[5] = 1.0;
//      try { 
        MathArrays.checkPositive(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,871.248 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2399.4238;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2399.4238, double0, 0.01);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 6.64, 1.0, (-2895.63763381332), 1.0, 1024.3900972022432);
      assertEquals((-1871.2475366110768), double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination(1168.0, (-372.5219083), 223.0, 1.0, 1168.0, 1.0, (-1871.2475366110768), (-372.5219083));
      assertEquals(263366.11434563244, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Double double2 = new Double((-50.763769892948));
      assertEquals((-50.763769892948), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double double4 = new Double(1168.0);
      assertEquals(1168.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      Double double5 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      Double double6 = new Double(1676.06682927);
      assertEquals(1676.06682927, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      
      double double7 = MathArrays.linearCombination(1.0, 1024.3900972022432, 1.34217729E8, (-626.69397914722));
      assertEquals((-8.411344163472313E10), double7, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      
      double double8 = MathArrays.linearCombination(2863.1374670574673, 263366.11434563244, (-50.763769892948), 223.0, 1.44888888888888883E18, (-2895.63763381332), 1.883511811213715E-8, 3.834E-20);
      assertEquals((-4.1954571938798785E21), double8, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double7, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, (-2550));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long[][] longArray0 = new long[3][1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      double double0 = 1.304E19;
      Double double1 = new Double((-2120.03));
      assertEquals((-2120.03), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1.44888888888888883E18);
      assertEquals(1.44888888888888883E18, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double((-1821.41));
      assertEquals((-1821.41), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      double double4 = 0.008336750013465571;
      Double double5 = new Double((-1821.41));
      assertEquals((-1821.41), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      
      Double double6 = new Double(0.008336750013465571);
      assertEquals(0.008336750013465571, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      
      Double double7 = new Double((-1442.259912054));
      assertEquals((-1442.259912054), (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      
      double double8 = (-2.6033824355191673E-8);
      Double double9 = new Double((-2.6033824355191673E-8));
      assertEquals((-2.6033824355191673E-8), (double)double9, 0.01);
      assertNotNull(double9);
      assertNotEquals((double)double9, (double)double3, 0.01);
      assertNotEquals((double)double9, (double)double1, 0.01);
      assertNotEquals((double)double9, (double)double0, 0.01);
      assertEquals((double)double9, (double)double6, 0.01);
      assertNotEquals((double)double9, (double)double5, 0.01);
      assertEquals((double)double9, (double)double4, 0.01);
      assertNotEquals((double)double9, (double)double7, 0.01);
      assertNotEquals((double)double9, (double)double2, 0.01);
      assertEquals((double)double9, (double)double8, 0.01);
      
      Double double10 = new Double(930.2782011842156);
      assertEquals(930.2782011842156, (double)double10, 0.01);
      assertNotNull(double10);
      assertNotEquals((double)double10, (double)double6, 0.01);
      assertNotEquals((double)double10, (double)double7, 0.01);
      assertNotEquals((double)double10, (double)double8, 0.01);
      assertNotEquals((double)double10, (double)double4, 0.01);
      assertNotEquals((double)double10, (double)double1, 0.01);
      assertNotEquals((double)double10, (double)double2, 0.01);
      assertNotEquals((double)double10, (double)double0, 0.01);
      assertNotEquals((double)double10, (double)double9, 0.01);
      assertNotEquals((double)double10, (double)double5, 0.01);
      assertNotEquals((double)double10, (double)double3, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.scale(531.98025297, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathArrays.linearCombination(86.4278, 86.4278, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 53;
      intArray0[1] = 62;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {53, 62}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2399.4238;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[4][6];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-632);
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = (-632);
      intArray1[4] = (-632);
      intArray1[5] = 0;
      intArray1[6] = 2257;
      intArray1[7] = 0;
      intArray1[8] = 2958;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(632, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-632), 0, 0, (-632), (-632), 0, 2257, 0, 2958}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(9, intArray1.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4798.8476}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      
      double[] doubleArray4 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply(doubleArray1, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-1415.32159), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double double0 = MathArrays.distanceInf(doubleArray2, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      Double double1 = new Double((-5190.38203943));
      assertEquals((-5190.38203943), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(2837.183);
      assertEquals(2837.183, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double((-0.5));
      assertEquals((-0.5), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double double4 = new Double(1.7827257129423813E-8);
      assertEquals(1.7827257129423813E-8, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      Double double5 = new Double(2837.183);
      assertEquals(2837.183, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      
      Double double6 = new Double(2725.068539);
      assertEquals(2725.068539, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray3 = new Double[2];
      doubleArray3[0] = double1;
      doubleArray3[1] = double2;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, doubleArray3.length);
      
      double double7 = MathArrays.linearCombination((-1442.259912054), 0.0, (-1442.259912054), 1.7827257129423813E-8);
      assertEquals((-2.5711538299646833E-5), double7, 0.01);
      assertEquals(double7, double0, 0.01);
      
      long[][] longArray0 = new long[7][1];
      long[] longArray1 = new long[3];
      longArray1[0] = 2637L;
      longArray1[1] = 697L;
      longArray1[2] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 2637L;
      longArray2[2] = 2637L;
      longArray2[3] = 697L;
      longArray2[4] = 0L;
      longArray2[5] = 697L;
      longArray2[6] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 697L;
      longArray3[1] = 697L;
      longArray3[2] = 2637L;
      longArray3[3] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 697L;
      longArray4[3] = 697L;
      longArray4[4] = 697L;
      longArray4[5] = 0L;
      longArray4[6] = 0L;
      longArray4[7] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 697L;
      longArray5[1] = 697L;
      longArray5[2] = 2637L;
      longArray5[3] = 2637L;
      longArray5[4] = (-1813L);
      longArray5[5] = 2637L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[9];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = 2637L;
      longArray6[1] = 0L;
      longArray6[2] = 2637L;
      longArray6[3] = 2637L;
      longArray6[4] = 697L;
      longArray6[5] = 2637L;
      longArray6[6] = 0L;
      longArray6[7] = (-4681L);
      longArray6[8] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      
      longArray7[0] = (-1813L);
      longArray7[1] = 2637L;
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,813 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathArrays.linearCombination(86.4278, 86.4278, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 86.4278;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 86.4278}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 86.4278}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(0, intArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, integerArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = Double.NaN;
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 86.4278}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 86.4278}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      boolean boolean3 = MathArrays.equals(doubleArray0, doubleArray2);
      assertFalse(boolean3);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 86.4278}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 0;
      double double2 = MathArrays.safeNorm(doubleArray3);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = MathArrays.linearCombination(86.4278, 86.4278, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 53;
      intArray0[1] = 62;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {53, 62}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 86.4278;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {53.0, 86.4278}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {53.0, 86.4278}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {53, 62}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {53, 62}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(2, intArray0.length);
      
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int2);
      assertArrayEquals(new int[] {53, 62}, intArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 62;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 53;
      longArray0[4] = (-2130L);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 53;
      longArray0[8] = (long) 62;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,130 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      int int0 = 2;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2, 2);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = (-20.0);
      doubleArray0[3] = (-20.0);
      doubleArray0[4] = (-20.0);
      MathArrays.scaleInPlace((-20.0), doubleArray0);
      assertArrayEquals(new double[] {400.0, 400.0, 400.0, 400.0, 400.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[][] longArray0 = new long[5][1];
      long[] longArray1 = new long[3];
      longArray1[0] = 4503599627370496L;
      longArray1[1] = (-830L);
      longArray1[2] = (-212L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-830L);
      longArray2[1] = (-212L);
      longArray2[2] = 4503599627370496L;
      longArray2[3] = 122L;
      longArray2[4] = (-212L);
      longArray2[5] = 4503599627370496L;
      longArray2[6] = 4503599627370496L;
      longArray0[1] = longArray1;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-212L);
      longArray3[1] = 122L;
      longArray3[2] = (-830L);
      longArray3[3] = (-830L);
      longArray3[4] = 122L;
      longArray3[5] = 4503599627370496L;
      longArray3[6] = 4503599627370496L;
      longArray3[7] = (-212L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 9007199254740990L;
      longArray4[1] = 122L;
      longArray4[2] = 4503599627370496L;
      longArray4[3] = 4503599627370496L;
      longArray4[4] = 122L;
      longArray4[5] = 4503599627370496L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 122L;
      longArray5[1] = (-830L);
      longArray5[2] = (-830L);
      longArray5[3] = 9007199254740990L;
      longArray5[4] = 9007199254740990L;
      longArray5[5] = 0L;
      longArray5[6] = 9007199254740990L;
      longArray5[7] = 4503599627370496L;
      longArray0[4] = longArray5;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 8 while others have length 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(1557.28);
      assertEquals(1557.28, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2837.183));
      assertEquals((-2837.183), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = (double) doubleArray0[0];
      doubleArray1[2] = (-2837.183);
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(4303.990677194596, double2, 0.01);
      assertArrayEquals(new double[] {(-2837.183), 1557.28, (-2837.183)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 954.83753;
      doubleArray0[2] = 954.83753;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (-532.0332);
      doubleArray0[5] = 2994.931673657014;
      doubleArray0[1] = -0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertEquals(19, doubleArray0.length);
      
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[][] longArray0 = new long[3][1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      double double0 = MathArrays.linearCombination(1.304E19, 1.44888888888888883E18, 930.2782011842156, 1462.456217711, (-2217.035), (-155.836), (-1821.41), 1462.456217711);
      assertEquals(1.889351111111111E37, double0, 0.01);
      
      Double double1 = new Double((-912.237));
      assertEquals((-912.237), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(2318.50479532212);
      assertEquals(2318.50479532212, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(1462.456217711);
      assertEquals(1462.456217711, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      Double double4 = new Double(1.44888888888888883E18);
      assertEquals(1.44888888888888883E18, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      Double double5 = new Double(809.0840871358);
      assertEquals(809.0840871358, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      Double double6 = new Double(1462.456217711);
      assertEquals(1462.456217711, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      
      Double double7 = new Double(0.008336750013465571);
      assertEquals(0.008336750013465571, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      
      Double double8 = new Double(930.2782011842156);
      assertEquals(930.2782011842156, (double)double8, 0.01);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("OxQn\"6Gug s`< WYLca");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.OxQn\"6Gug s`< WYLca
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 6.64, 1.0, (-2895.63763381332), 1.0, 1024.3900972022432);
      assertEquals((-1871.2475366110768), double0, 0.01);
      
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination(1168.0, (-372.5219083), 223.0, (-2601.7011451), 1168.0, (-2601.7011451), (-1871.2475366110768), (-372.5219083));
      assertEquals((-3356991.1784884674), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (-1871.2475366110768);
      doubleArray1[2] = 6.64;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-372.5219083);
      doubleArray1[5] = 1.0;
//      try { 
        MathArrays.checkPositive(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,871.248 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 3093.957877;
      doubleArray0[0] = 3093.957877;
      double double1 = 2812.0;
      doubleArray0[1] = 2812.0;
      double double2 = (-1748.16327916409);
      doubleArray0[2] = (-1748.16327916409);
      double double3 = 53.0;
      doubleArray0[3] = 53.0;
      doubleArray0[4] = (-356.0932);
      double double4 = 711.51021;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 711.51021;
      doubleArray1[1] = (-1748.16327916409);
      doubleArray1[2] = (-1748.16327916409);
      doubleArray1[3] = 711.51021;
      doubleArray1[4] = 3093.957877;
      doubleArray1[5] = 53.0;
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = (-1748.16327916409);
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3093.957877;
      doubleArray0[0] = 2812.0;
      doubleArray0[2] = (-1748.16327916409);
      doubleArray0[3] = 53.0;
      doubleArray0[4] = (-356.0932);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2812.0, 0.0, (-1748.16327916409), 53.0, (-356.0932), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2812.0, 0.0, (-1748.16327916409), 53.0, (-356.0932), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {2812.0, 0.0, (-1748.16327916409), 53.0, (-356.0932), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathArrays.linearCombination(86.4278, 86.4278, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 53;
      int int0 = 57;
      intArray0[1] = 57;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {53, 57}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 86.4278;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {53.0, 86.4278}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {53.0, 86.4278}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[0];
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1557.28);
      assertEquals(1557.28, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2837.183));
      assertEquals((-2837.183), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-3234.29217009423));
      assertEquals((-3234.29217009423), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1442.259912054));
      assertEquals((-1442.259912054), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.008336750013465571);
      assertEquals(0.008336750013465571, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0.008336750013465571);
      assertEquals(0.008336750013465571, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(1557.28);
      assertEquals(1557.28, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[0]);
      assertEquals(1557.28, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[7] = double7;
      Double double8 = new Double((-1939.8582019811));
      assertEquals((-1939.8582019811), (double)double8, 0.01);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      
      doubleArray0[8] = double8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      double double9 = MathArrays.linearCombination((double) doubleArray0[4], 3.1660099222737955E-7, (-3234.29217009423), (double) doubleArray0[6]);
      assertEquals((-5036698.51064434), double9, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3505.0);
      doubleArray0[1] = (-4870.9844691438);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-3505.0), (-4870.9844691438)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3505.0), (-4870.9844691438)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-3505.0), (-4870.9844691438)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3505.0), (-4870.9844691438)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-3505.0), (-4870.9844691438)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3505.0), (-4870.9844691438)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-760.5951295153297), (-3380.406992500751), Double.NEGATIVE_INFINITY, (-2968.505997624), 838.263334223, (-3505.0), 237.1559548185872, (-3380.406992500751));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
//      try { 
        MathArrays.checkPositive(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -3,505 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 711.51021;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {711.51021}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(711.51021, Double.NEGATIVE_INFINITY, 0.0, (-1330.3434916), 0.0, (-2968.505997624), (-3380.406992500751), 1540.24374626);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {711.51021}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(1.34217729E8, doubleArray0);
      assertArrayEquals(new double[] {711.51021}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.549728454651309E10}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-992.0944);
      doubleArray0[3] = 357.18378256;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-267.27268);
      doubleArray0[6] = (-267.27268);
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-992.0944);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3.32;
      doubleArray1[3] = 357.18378256;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-3578.9103753);
      doubleArray1[6] = 357.18378256;
      doubleArray1[7] = (-992.0944);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(985366.0017847576, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-992.0944), 357.18378256, 0.0, (-267.27268), (-267.27268), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-992.0944), 0.0, 3.32, 357.18378256, 0.0, (-3578.9103753), 357.18378256, (-992.0944)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = (-289L);
      longArray1[2] = 0L;
      longArray0[0] = longArray1;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-992.0944), 357.18378256, 0.0, (-267.27268), (-267.27268), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-992.0944), 0.0, 3.32, 357.18378256, 0.0, (-3578.9103753), 357.18378256, (-992.0944)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2399.4238;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[9];
      doubleArray2[0] = (Double) 2399.4238;
      double double0 = MathArrays.linearCombination(5.0614674548127384E-8, 5.0614674548127384E-8, 3125.9644211, 2399.4238, Double.POSITIVE_INFINITY, 2399.4238);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = 5.0614674548127384E-8;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = 100.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray3);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 5.0614674548127384E-8, Double.POSITIVE_INFINITY, 100.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(4, doubleArray3.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray3);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 5.0614674548127384E-8, Double.POSITIVE_INFINITY, 100.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      
      boolean boolean2 = MathArrays.equals(doubleArray3, doubleArray3);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 5.0614674548127384E-8, Double.POSITIVE_INFINITY, 100.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(4, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(5.041914939880371, 2.0, 2.0, 6.64, 5.041914939880371, (-0.12502530217170715));
      assertEquals(22.733462940878155, double0, 0.01);
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination((-1158.0674), 0.0, 0.0, (-2779.9356696698237), 223.0, (-2779.9356696698237), (-2880.35127011194), (-3380.406992500751));
      assertEquals(9116833.92000845, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, doubleArray1.length);
      
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2481);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(2000.0, 1118.0, 1024.3900972022432, 6.64, (-1661.9461), (-3591.814821676));
      assertEquals(8212204.585052046, double0, 0.01);
      
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination((-2895.63763381332), 1.304E19, 1.0, 1.304E19, 1024.3900972022432, (-1811.36066145274), 223.0, 3109.0);
      assertEquals((-3.7746074744925693E22), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.linearCombination(6.64, (-2895.63763381332), (-2895.63763381332), (-1415.32159), (-0.33333333333333287), 1024.3900972022432);
      assertEquals(4078689.9626982515, double0, 0.01);
      
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-1415.32159), (-1661.9461), 6.64, 1019.90085387483, (-241.8386), (-2937.4413994882), (-0.33333333333333287), (-1661.9461));
      assertEquals(3069901.036083628, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<FieldElement<Integer>>) null, 1110);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathArrays.linearCombination(86.4278, 86.4278, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 53;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 164.92079;
      doubleArray0[2] = 164.92079;
      doubleArray0[3] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (double) 62;
      doubleArray0[8] = 2836.10077526273;
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 164.92079, 164.92079, Double.NaN, 0.0, 0.0, Double.NaN, 62.0, 2836.10077526273}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3093.957877;
      doubleArray0[1] = 2812.0;
      doubleArray0[2] = (-1748.16327916409);
      doubleArray0[3] = 53.0;
      doubleArray0[4] = (-356.0932);
      doubleArray0[5] = (-683.198);
      doubleArray0[6] = (-2069.94567);
      doubleArray0[7] = 711.51021;
      doubleArray0[8] = 1.375;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3093.957877, 2812.0, (-1748.16327916409), 53.0, (-356.0932), (-683.198), (-2069.94567), 711.51021, 1.375}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3093.957877, 2812.0, (-1748.16327916409), 53.0, (-356.0932), (-683.198), (-2069.94567), 711.51021, 1.375}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.232106058824666E-4, 3.5561877667140827E-4, (-5.720289471348264E-4), 0.018867924528301886, (-0.002808253569571112), (-0.0014637045190413322), (-4.831044671814985E-4), 0.0014054612090527835, 0.7272727272727273}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3.0, double0, 0.01);
      assertArrayEquals(new double[] {3093.957877, 2812.0, (-1748.16327916409), 53.0, (-356.0932), (-683.198), (-2069.94567), 711.51021, 1.375}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = (-3505.0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null).when(field0).getZero();
      int int0 = 2;
      Object[][] objectArray0 = MathArrays.buildArray(field0, 2, 2);
      assertNotNull(objectArray0);
      assertEquals(2, objectArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf(" {`kXr");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection. {`kXr
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 106;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[4] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {106, 134217729, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 106;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 106.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2450.1686;
      doubleArray2[1] = (double) 0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3284.5386F);
      floatArray0[1] = (float) 134217729;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 106;
      floatArray0[4] = (float) 0;
      floatArray0[5] = 1050.0F;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-3284.5386F), 1.34217728E8F, 0.0F, 106.0F, 0.0F, 1050.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      Double[] doubleArray3 = new Double[3];
      doubleArray3[0] = (Double) 106.0;
      doubleArray3[1] = (Double) 0.0;
      doubleArray3[2] = (Double) 106.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(1.304E19, 1.304E19, 1.304E19, (-1821.41), 1557.28, 1557.28, 1557.28, (-1821.41));
      assertEquals(1.7004159999999998E38, double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      Double double1 = new Double(1557.28);
      assertEquals(1557.28, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[0] = double1;
      Double double2 = new Double((-2837.183));
      assertEquals((-2837.183), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[1] = double2;
      Double double3 = new Double((-3234.29217009423));
      assertEquals((-3234.29217009423), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[2] = double3;
      Double double4 = new Double((-1442.259912054));
      assertEquals((-1442.259912054), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[3] = double4;
      Double double5 = new Double(0.008336750013465571);
      assertEquals(0.008336750013465571, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      doubleArray0[4] = double5;
      Double double6 = new Double(0.008336750013465571);
      assertEquals(0.008336750013465571, (double)double6, 0.01);
      assertNotNull(double6);
      assertEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      
      doubleArray0[5] = double6;
      Double double7 = new Double(1557.28);
      assertEquals(1557.28, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      
      doubleArray0[6] = double7;
      Double double8 = new Double(1776.74168);
      assertEquals(1776.74168, (double)double8, 0.01);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      
      doubleArray0[7] = double8;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-1415.32159), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double double0 = MathArrays.distanceInf(doubleArray2, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-1220);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1220), (-1220));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 954.83753;
      doubleArray0[2] = 349.363670178;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (-532.0332);
      doubleArray0[5] = 2994.931673657014;
      doubleArray0[6] = -0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 954.83753, 349.363670178, 1.34217729E8, (-532.0332), 2994.931673657014, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 954.83753, 349.363670178, 1.34217729E8, (-532.0332), 2994.931673657014, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[5][3];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray0;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray2;
//      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 13
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2399.4238;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[4][6];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-632);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, (-632)}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {1.151446914401288E7}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray4 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.3145749917106176E13}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray4.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray3, doubleArray0);
      assertEquals(1.1512069720212879E7, double0, 0.01);
      assertArrayEquals(new double[] {1.151446914401288E7}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[0] = (-2318.50479532212);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3451.6;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = (-1557.28);
      doubleArray0[7] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.8441344853345161E19, double0, 0.01);
      assertArrayEquals(new double[] {(-2318.50479532212), 0.0, 0.0, 0.0, 3451.6, 1.304E19, (-1557.28), 1.304E19}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.scaleInPlace((-1459.3556775009), doubleArray0);
      assertArrayEquals(new double[] {3383523.136366398, -0.0, -0.0, -0.0, (-5037112.056462106), (-1.9029998034611736E22), 2272625.4094586014, (-1.9029998034611736E22)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7.24281650394653E44, double1, 0.01);
      assertArrayEquals(new double[] {3383523.136366398, -0.0, -0.0, -0.0, (-5037112.056462106), (-1.9029998034611736E22), 2272625.4094586014, (-1.9029998034611736E22)}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7.24281650394653E44, double2, 0.01);
      assertArrayEquals(new double[] {3383523.136366398, -0.0, -0.0, -0.0, (-5037112.056462106), (-1.9029998034611736E22), 2272625.4094586014, (-1.9029998034611736E22)}, doubleArray0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3383523.136366398, -0.0, -0.0, -0.0, (-5037112.056462106), (-1.9029998034611736E22), 2272625.4094586014, (-1.9029998034611736E22)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[0] = (-2318.50479532212);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3451.6;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = (-1557.28);
      doubleArray0[7] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.8441344853345161E19, double0, 0.01);
      assertArrayEquals(new double[] {(-2318.50479532212), 0.0, 0.0, 0.0, 3451.6, 1.304E19, (-1557.28), 1.304E19}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.scaleInPlace((-1459.3556775009), doubleArray0);
      assertArrayEquals(new double[] {3383523.136366398, -0.0, -0.0, -0.0, (-5037112.056462106), (-1.9029998034611736E22), 2272625.4094586014, (-1.9029998034611736E22)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7.24281650394653E44, double1, 0.01);
      assertArrayEquals(new double[] {3383523.136366398, -0.0, -0.0, -0.0, (-5037112.056462106), (-1.9029998034611736E22), 2272625.4094586014, (-1.9029998034611736E22)}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3383523.136366398, -0.0, -0.0, -0.0, (-5037112.056462106), (-1.9029998034611736E22), 2272625.4094586014, (-1.9029998034611736E22)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3383523.136366398, -0.0, -0.0, -0.0, (-5037112.056462106), (-1.9029998034611736E22), 2272625.4094586014, (-1.9029998034611736E22)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      double double2 = MathArrays.safeNorm(doubleArray2);
      assertEquals(Double.NaN, double2, 0.01);
      assertArrayEquals(new double[] {3383523.136366398, -0.0, -0.0, -0.0, (-5037112.056462106), (-1.9029998034611736E22), 2272625.4094586014, (-1.9029998034611736E22)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 954.83753;
      doubleArray0[2] = 349.363670178;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (-532.0332);
      doubleArray0[5] = 2994.931673657014;
      doubleArray0[6] = -0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, 954.83753, 349.363670178, 1.34217729E8, (-532.0332), 2994.931673657014, -0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[][] doubleArray1 = new double[2][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {954.83753, (-532.0332), -0.0, 2994.931673657014, 349.363670178, 1.0, 1.34217729E8}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2146557810;
      intArray0[1] = (-143);
      intArray0[2] = 167;
      intArray0[3] = (-811);
      intArray0[4] = (-471);
      intArray0[5] = 227;
      intArray0[6] = 3527;
      intArray0[7] = 3;
      intArray0[8] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0, 3);
      assertArrayEquals(new int[] {2146557810, (-143), 167}, intArray1);
      assertArrayEquals(new int[] {2146557810, (-143), 167, (-811), (-471), 227, 3527, 3, (-1)}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray1.length);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = (-463);
      intArray0[2] = (-684);
      intArray0[3] = (-37);
      intArray0[4] = 94;
      intArray0[5] = (-1);
      intArray0[6] = 18;
      intArray0[7] = (-1678);
      int int0 = new Integer(3);
      assertEquals(3, int0);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, intArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (-925);
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-925);
      intArray1[1] = (-925);
      intArray1[2] = (-925);
      intArray1[3] = (-925);
      intArray1[4] = (-925);
      intArray1[5] = 9;
      intArray1[6] = (-925);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-925)}, intArray0);
      assertArrayEquals(new int[] {(-925), (-925), (-925), (-925), (-925), 9, (-925)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(7, intArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray1, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathArrays.linearCombination(86.4278, 86.4278, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 53;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 62;
      doubleArray0[4] = (double) 53;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 1.304E19;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 62.0, 53.0, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 954.83753;
      doubleArray0[2] = 349.363670178;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (-532.0332);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = -0.0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 349.363670178;
      doubleArray1[1] = 1.34217729E8;
      doubleArray1[2] = 954.83753;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly increasing (134,217,729 >= 954.838)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathArrays.linearCombination(86.4278, 86.4278, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 53;
      intArray0[1] = 62;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {53, 62}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      intArray0[1] = 53;
      doubleArray0[1] = 86.4278;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0, 86.4278}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 86.4278}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {53, 53}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {53, 53}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(2, intArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 53;
      integerArray0[1] = (Integer) 53;
      integerArray0[2] = (Integer) 53;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 53;
      intArray0[1] = 974;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {53, 974}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {53, 974}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {53, 974}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(2, intArray0.length);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 53;
      integerArray0[1] = (Integer) 53;
      integerArray0[2] = (Integer) 53;
      integerArray0[3] = (Integer) 53;
      integerArray0[4] = (Integer) 974;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 106;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {106, 134217729, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathArrays.linearCombination(711.51021, 711.51021, 711.51021, 2.0, 711.51021, 0.0);
      assertEquals(507669.79935424414, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 711.51021;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {711.51021}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, Double.NEGATIVE_INFINITY, 0.0, (-1330.3434916), 0.0, (-2968.505997624), (-3380.406992500751), 1540.24374626);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {711.51021}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = MathArrays.linearCombination(86.4278, 86.4278, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 53;
      intArray0[1] = 62;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {53, 62}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 86.4278;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {53.0, 86.4278}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {53.0, 86.4278}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {53, 62}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {53, 62}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 7;
      intArray1[1] = 2;
      intArray1[2] = 53;
      intArray1[3] = 1;
      intArray1[4] = 1140;
      intArray1[5] = 77;
      int int2 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(106, int2);
      assertArrayEquals(new int[] {53, 62}, intArray0);
      assertArrayEquals(new int[] {7, 2, 53, 1, 1140, 77}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(1.304E19, 1.304E19, 1.304E19, (-1821.41), 1557.28, 1557.28, 1557.28, (-1821.41));
      assertEquals(1.7004159999999998E38, double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      Double double1 = new Double(1557.28);
      assertEquals(1557.28, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[0] = double1;
      Double double2 = new Double((-2837.183));
      assertEquals((-2837.183), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[1] = double2;
      Double double3 = new Double((-3234.29217009423));
      assertEquals((-3234.29217009423), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[2] = double3;
      Double double4 = new Double((-1442.259912054));
      assertEquals((-1442.259912054), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[3] = double4;
      Double double5 = new Double(0.008336750013465571);
      assertEquals(0.008336750013465571, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray0[4] = double5;
      Double double6 = new Double(0.008336750013465571);
      assertEquals(0.008336750013465571, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      
      doubleArray0[5] = double6;
      Double double7 = new Double(1557.28);
      assertEquals(1557.28, (double)double7, 0.01);
      assertNotNull(double7);
      assertEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      
      doubleArray0[6] = double7;
      Double double8 = new Double(1776.74168);
      assertEquals(1776.74168, (double)double8, 0.01);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      
      doubleArray0[7] = double8;
      Double double9 = new Double((-1939.8582019811));
      assertEquals((-1939.8582019811), (double)double9, 0.01);
      assertNotNull(double9);
      assertNotEquals((double)double9, (double)double1, 0.01);
      assertNotEquals((double)double9, (double)double0, 0.01);
      assertNotEquals((double)double9, (double)double8, 0.01);
      assertNotEquals((double)double9, (double)double5, 0.01);
      assertNotEquals((double)double9, (double)double7, 0.01);
      assertNotEquals((double)double9, (double)double6, 0.01);
      assertNotEquals((double)double9, (double)double4, 0.01);
      assertNotEquals((double)double9, (double)double2, 0.01);
      assertNotEquals((double)double9, (double)double3, 0.01);
      
      doubleArray0[8] = double9;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 14.101419448852539;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 14.101419448852539}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = (-2958L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 954.83753;
      doubleArray0[2] = 349.363670178;
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathArrays.linearCombination(711.51021, 711.51021, 711.51021, 2.0, 711.51021, 0.0);
      assertEquals(507669.79935424414, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 711.51021;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {711.51021}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[2];
      long long0 = (-1L);
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2804.01868);
      doubleArray0[2] = (-1248.40809698);
      doubleArray0[3] = (-976.00108662558);
      doubleArray0[4] = (-87.42360945);
      doubleArray0[5] = 604.4133214417;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly decreasing (-2,804.019 <= -1,248.408)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2399.4238;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[4][6];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1121);
      intArray0[3] = (-632);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, (-1121), (-632)}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {1.151446914401288E7}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {2399.4238}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5757234.57200644}, doubleArray1, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0, 134217729);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 236.8;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1779.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2475.75F);
      floatArray0[3] = (-1580.833F);
      floatArray0[4] = (-1059.9421F);
      floatArray0[5] = (-2444.0F);
      floatArray0[6] = 3.4028235E38F;
      floatArray0[7] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1779.0F), 0.0F, (-2475.75F), (-1580.833F), (-1059.9421F), (-2444.0F), 3.4028235E38F, 1.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {236.8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {236.8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[0][6];
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
      assertArrayEquals(new double[] {236.8, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = (-20.0);
      doubleArray0[3] = (-20.0);
      doubleArray0[4] = (-20.0);
      MathArrays.scaleInPlace((-20.0), doubleArray0);
      assertArrayEquals(new double[] {400.0, 400.0, 400.0, 400.0, 400.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[][] longArray0 = new long[5][1];
      long[] longArray1 = new long[3];
      longArray1[0] = 4503599627370496L;
      longArray1[1] = (-830L);
      longArray1[2] = (-212L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-830L);
      longArray2[1] = (-212L);
      longArray2[2] = 4503599627370496L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 4503599627370496L);
      assertArrayEquals(new double[] {400.0, 400.0, 400.0, 400.0, 400.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.007199254740992E14, 9.007199254740992E14, 9.007199254740992E14, 9.007199254740992E14, 9.007199254740992E14}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(4.0564819207303343E30, double0, 0.01);
      assertArrayEquals(new double[] {400.0, 400.0, 400.0, 400.0, 400.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.007199254740992E14, 9.007199254740992E14, 9.007199254740992E14, 9.007199254740992E14, 9.007199254740992E14}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(4.0564819207303343E30, double1, 0.01);
      assertArrayEquals(new double[] {400.0, 400.0, 400.0, 400.0, 400.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.007199254740992E14, 9.007199254740992E14, 9.007199254740992E14, 9.007199254740992E14, 9.007199254740992E14}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2138816638;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-947));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1841.276514124574);
      doubleArray0[1] = (-30.773247123);
      doubleArray0[2] = (-1063.0783);
      doubleArray0[3] = 416.51423376;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4694865.773060806, double0, 0.01);
      assertArrayEquals(new double[] {(-1841.276514124574), (-30.773247123), (-1063.0783), 416.51423376}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2288;
      intArray0[1] = (-3181);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {2288, (-3181)}, intArray0);
      assertArrayEquals(new int[] {2288, (-3181)}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 465.1391005921078;
      doubleArray0[0] = 465.1391005921078;
      doubleArray0[1] = 3.32;
      doubleArray0[2] = (-120.0683864171);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {465.1391005921078, 3.32, (-120.0683864171)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {930.2782011842156, 6.64, (-240.1367728342)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[7][8];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {(-120.0683864171), 3.32, 465.1391005921078}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      
      MathArrays.checkOrder(doubleArray1);
      assertArrayEquals(new double[] {(-120.0683864171), 3.32, 465.1391005921078}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-240.1367728342), 6.64, 930.2782011842156}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-236);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-236));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4482.428449677;
      doubleArray0[1] = (-2837.183);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-136.5972365320097);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {4482.428449677, (-2837.183), 0.0, 0.0, (-136.5972365320097)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2051);
      int int1 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2051), 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 489.818303813;
      doubleArray0[3] = 442.41985729444;
      doubleArray0[4] = (-724.6334);
      doubleArray0[5] = (-1969.0);
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.7976931348623157E308, 0.0, 489.818303813, 442.41985729444, (-724.6334), (-1969.0), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
//      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2932.20596572;
      doubleArray0[1] = 895.204243779;
      doubleArray0[2] = (-1757.0550117358675);
      doubleArray0[3] = 100.0;
      double[][] doubleArray1 = new double[8][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1757.0550117358675), 100.0, 895.204243779, 2932.20596572}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 223;
      intArray0[1] = 241;
      intArray0[2] = 230;
      intArray0[3] = 3887;
      intArray0[4] = 293;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.linearCombination((-506.1), (double) 230, (double) 230, (double) 3887, (double) 223, (-321.38080993686), (double) 293, (double) 230);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 223;
      doubleArray0[1] = (-321.38080993686);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 293;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = (double) 3887;
      doubleArray0[6] = (-321.38080993686);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 230;
      doubleArray2[1] = (double) 293;
      MathArrays.ebeAdd(doubleArray2, doubleArray2);
//      try { 
        MathArrays.checkOrder(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (446 >= -642.762)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 522;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1296;
      intArray0[5] = (-171);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = (-2958L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 0L;
      longArray2[6] = (-2958L);
      longArray2[7] = 0L;
      longArray2[8] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = (-2958L);
      longArray3[4] = (-2958L);
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray3[7] = (-2958L);
      longArray0[2] = longArray3;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,958 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2895.63763381332);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-3505.0);
      doubleArray0[0] = (-3505.0);
      doubleArray0[1] = (-4870.9844691438);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection.values();
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 2, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2218);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1500;
      intArray0[4] = 0;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(Double.NaN);
      doubleArray0[0] = double0;
      Double double1 = new Double(Double.NaN);
      doubleArray0[1] = double1;
      Double double2 = new Double(Double.NaN);
      doubleArray0[2] = double2;
      Double double3 = new Double(Double.NaN);
      doubleArray0[3] = double3;
      Double double4 = new Double(Double.NaN);
      doubleArray0[4] = double4;
      Double double5 = new Double(-0.0);
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[4]);
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[2]);
      doubleArray0[7] = double7;
      Double double8 = new Double(0.0);
      doubleArray0[8] = double8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-734.8611531351454), 3.834E-20, (-2110.1950438791), 1826.995012, 3.834E-20, 1416.356395);
      assertEquals((-3855315.819514237), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MathArrays.linearCombination(86.4278, 86.4278, Double.NaN, Double.NaN);
      int[] intArray0 = new int[2];
      intArray0[0] = 53;
      intArray0[1] = 62;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 86.4278;
      MathArrays.checkOrder(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int1 == int0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 53;
      integerArray0[1] = (Integer) 53;
      integerArray0[2] = (Integer) 62;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1695.961, 3.834E-20, 3.834E-20, 0.0);
      assertEquals(6.502314474E-17, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2341.768968141);
      doubleArray0[1] = 2390.8544405;
      doubleArray0[2] = 1460.6187935716598;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.32;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[][] doubleArray2 = new double[5][5];
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 1460.6187935716598;
      doubleArray3[1] = 2390.8544405;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-2341.768968141);
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray0;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 3.32;
      doubleArray4[1] = 1460.6187935716598;
      doubleArray4[2] = 0.0;
      doubleArray2[2] = doubleArray4;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-2497.5652159412);
      doubleArray0[3] = (-1835.354676543511);
      doubleArray0[4] = 2298.8959586736;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2298.8959586736;
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = (-1835.354676543511);
      doubleArray1[5] = 1.304E19;
      doubleArray1[6] = 2298.8959586736;
      doubleArray1[7] = 1.304E19;
      doubleArray1[8] = 1.304E19;
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1357.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-1.4E-45F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1357.0F;
      doubleArray0[1] = (double) (-1.4E-45F);
      doubleArray0[2] = (double) (-1.4E-45F);
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1);
      assertArrayEquals(new double[] {1357.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1357.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathArrays.linearCombination(86.4278, 86.4278, Double.NaN, Double.NaN);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2318.50479532212);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 3451.6;
      double double0 = new Double(Double.NaN);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2437.7693824712264);
      doubleArray1[1] = Double.NaN;
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.scale(Double.NaN, doubleArray1);
      MathArrays.scaleInPlace(0.0, doubleArray1);
      assertArrayEquals(new double[] {-0.0, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 106;
      intArray0[0] = 106;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 106;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      MathArrays.normalizeArray(doubleArray0, 0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2450.1686;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 106;
      doubleArray1[6] = (double) 134217729;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = (-20.0);
      doubleArray0[3] = (-20.0);
      doubleArray0[4] = (-20.0);
      MathArrays.scaleInPlace((-20.0), doubleArray0);
      long[][] longArray0 = new long[5][1];
      long[] longArray1 = new long[3];
      longArray1[0] = 4503599627370496L;
      longArray1[1] = (-830L);
      longArray1[2] = (-212L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = (-830L);
      longArray2[1] = (-212L);
      longArray2[2] = 4503599627370496L;
      longArray2[3] = 122L;
      longArray2[4] = (-212L);
      longArray2[5] = 4503599627370496L;
      longArray2[6] = 4503599627370496L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = (-212L);
      longArray3[1] = 122L;
      longArray3[2] = (-830L);
      longArray3[3] = (-830L);
      longArray3[4] = 122L;
      longArray3[5] = 4503599627370496L;
      longArray3[6] = 4503599627370496L;
      longArray3[7] = (-212L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = 9007199254740990L;
      longArray4[1] = 122L;
      longArray4[2] = 4503599627370496L;
      longArray4[3] = 4503599627370496L;
      longArray4[4] = 122L;
      longArray4[5] = 4503599627370496L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = 122L;
      longArray5[1] = (-830L);
      longArray5[2] = (-830L);
      longArray5[3] = 9007199254740990L;
      longArray5[4] = 9007199254740990L;
      longArray5[5] = 0L;
      longArray5[6] = 9007199254740990L;
      longArray5[7] = 4503599627370496L;
      longArray0[4] = longArray5;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 7 while others have length 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-992.0944);
      doubleArray0[3] = 357.18378256;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-267.27268);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-992.0944);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3.32;
      doubleArray1[3] = 357.18378256;
      doubleArray1[4] = (-992.0944);
      doubleArray1[5] = (-3578.9103753);
      doubleArray1[6] = 357.18378256;
      doubleArray1[7] = (-992.0944);
      MathArrays.linearCombination(doubleArray0, doubleArray1);
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = (-289L);
      longArray1[2] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = (-289L);
      longArray2[3] = (-289L);
      longArray2[4] = 0L;
      longArray2[5] = (-289L);
      longArray2[6] = (-289L);
      longArray2[7] = 0L;
      longArray2[8] = (-289L);
      longArray0[1] = longArray2;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 9 while others have length 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3358.9);
      doubleArray0[1] = 4.9E-324;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 86.4278;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3360.0117521539773, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2318.50479532212);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3451.6;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = (-1557.28);
      doubleArray0[7] = 1.0;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace((-1459.3556775009), doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2318.50479532212);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3451.6;
      double double0 = 1.304E19;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = (-1557.28);
      doubleArray0[7] = 1.0;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace((-1459.3556775009), doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 164.92079;
      doubleArray0[3] = (-2291.53266);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 956.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = (-1.0);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double double0 = MathArrays.linearCombination(711.51021, 711.51021, 711.51021, 2.0, 711.51021, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 711.51021;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathArrays.linearCombination(0.0, Double.NEGATIVE_INFINITY, 0.0, (-1330.3434916), 0.0, (-2968.505997624), (-3400.232724977), 1540.24374626);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 236.8;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-427.953552920327);
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1552.06);
      doubleArray1[1] = (-427.953552920327);
      doubleArray1[2] = (-427.953552920327);
      doubleArray1[3] = (-427.953552920327);
//      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.copyOf(doubleArray0);
      int int0 = (-1752);
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-1752));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double double0 = 0.0;
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      long[] longArray0 = new long[2];
      long long0 = (-1L);
      longArray0[0] = (-1L);
      long long1 = 1L;
      longArray0[1] = 1L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Field<Pair<Integer, String>> field0 = (Field<Pair<Integer, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1599;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 1599);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1245.8194;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 598.2136;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1024.3515;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3.834E-20;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3620.1651382;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-521.46638479);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Object>) null, 197, 438);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = (-3069.9419018);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-891.23437435);
      doubleArray0[4] = 3622.2908152910295;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1780.655738949261;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0, 1.0, Double.NaN, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 1.304E19;
      double[] doubleArray1 = MathArrays.scale(1.304E19, doubleArray0);
      double[] doubleArray2 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray2, doubleArray1);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      int int0 = 311;
      intArray0[1] = 311;
      int int1 = (-1386);
      intArray0[2] = (-1386);
      intArray0[3] = 0;
      int int2 = 75;
      intArray0[4] = 75;
      MathArrays.distance(intArray0, intArray0);
      double[][] doubleArray3 = new double[2][7];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray2;
//      try { 
        MathArrays.sortInPlace(doubleArray2, doubleArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-1415.32159), doubleArray0);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      double double0 = MathArrays.distanceInf(doubleArray2, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray0, 3778);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertEquals(3778, doubleArray4.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 3778;
      floatArray0[1] = (float) (-1220);
      floatArray0[2] = (float) 3778;
      floatArray0[3] = 4287.85F;
      floatArray0[4] = (float) 3778;
      floatArray0[5] = (float) 3778;
      floatArray0[6] = (float) (-1220);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 164.92079;
      doubleArray0[3] = (-2291.53266);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) (-2291.53266);
      doubleArray1[3] = (Double) 0.0;
      int int0 = 149;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<FieldElement<Integer>>) null, 149);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Object>) null, (-1185), (-1185));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-1415.32159), doubleArray0);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      MathArrays.distanceInf(doubleArray2, doubleArray1);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-1220);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1220), (-1220));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1557.28);
      doubleArray0[0] = double0;
      Double double1 = new Double((-2837.183));
      doubleArray0[1] = double1;
      Double double2 = new Double((-3234.29217009423));
      doubleArray0[2] = double2;
      Double double3 = new Double((-1442.259912054));
      doubleArray0[3] = double3;
      Double double4 = new Double(0.008336750013465571);
      doubleArray0[4] = double4;
      Double double5 = new Double(0.008336750013465571);
      doubleArray0[5] = double5;
      Double double6 = new Double(1557.28);
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[0]);
      doubleArray0[7] = double7;
      Double double8 = new Double((-1939.8582019811));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.linearCombination((double) doubleArray0[4], 3.1660099222737955E-7, (-3234.29217009423), (double) doubleArray0[6]);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2837.183);
      doubleArray1[1] = (-923.60304);
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      MathArrays.OrderDirection.values();
      // Undeclared exception!
//      try { 
        MathArrays.OrderDirection.valueOf("&n/tO7");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.&n/tO7
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }
}
