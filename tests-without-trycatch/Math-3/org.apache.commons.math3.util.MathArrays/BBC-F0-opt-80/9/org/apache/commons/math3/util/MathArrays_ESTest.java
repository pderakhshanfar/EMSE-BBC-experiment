/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 15:24:18 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 764.091;
      double double1 = 0.0039926532297097144;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (0 <= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "N-8_";
      stringArray0[2] = "";
      stringArray0[3] = "the Poisson mean must be positive ({0})";
      stringArray0[4] = "n";
      stringArray0[5] = ";]/@'";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$2";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 885.9;
      doubleArray0[1] = 5460760.333985692;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1903.70059959;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 2878465.598910743;
      doubleArray0[6] = 1628.531623466;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = 1167.172;
//      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to an infinite value
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (-1218.2361);
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.3040000000000002E19, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-1218.2361)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.304E19;
      doubleArray2[1] = 1.3040000000000002E19;
      doubleArray2[2] = 1.3040000000000002E19;
      doubleArray2[3] = 1.3040000000000002E19;
      doubleArray2[4] = 1.304E19;
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2.9158326426597265E19, double1, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1.3040000000000002E19, 1.3040000000000002E19, 1.3040000000000002E19, 1.304E19}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[11];
      floatArray0[0] = (-1655.63F);
      floatArray0[1] = (-1.4E-45F);
      floatArray0[2] = 1290.1484F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-165.65526F);
      floatArray0[7] = (-926.325F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(11, floatArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1655.63F);
      floatArray1[1] = (-1655.63F);
      floatArray1[2] = (-1.4E-45F);
      floatArray1[3] = 1290.1484F;
      floatArray1[4] = (-926.325F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(11, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-1655.63F), (-1655.63F), (-1.4E-45F), 1290.1484F, (-926.325F)}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-926.325F);
      doubleArray0[1] = (double) 1290.1484F;
      doubleArray0[2] = (double) (-1.4E-45F);
      doubleArray0[3] = (double) 1290.1484F;
      doubleArray0[4] = (-1250.685736);
      doubleArray0[5] = (double) (-1.4E-45F);
      doubleArray0[6] = (double) (-1.4E-45F);
      doubleArray0[7] = (double) (-1655.63F);
      doubleArray0[8] = (double) (-1655.63F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(3351.638442042656, double0, 0.01);
      assertArrayEquals(new double[] {(-926.3250122070312), 1290.1484375, (-1.401298464324817E-45), 1290.1484375, (-1250.685736), (-1.401298464324817E-45), (-1.401298464324817E-45), (-1655.6300048828125), (-1655.6300048828125)}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "element {0} is not positive: {1}";
      stringArray0[1] = "#crz!gj #M0uZ;Jv";
      stringArray0[2] = "non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[5] = "K";
      stringArray0[6] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 168;
      intArray0[1] = 0;
      intArray0[2] = (-338);
      intArray0[3] = 3009;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {168, 0, (-338), 3009}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-338);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(114244.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-338.0)}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {168, 0, (-338), 3009}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      int[] intArray2 = MathArrays.copyOf(intArray0, 3009);
      assertEquals(4, intArray0.length);
      assertEquals(3009, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {168, 0, (-338), 3009}, intArray0);
      
      double[] doubleArray1 = MathArrays.scale(2022.984, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-338.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-683768.592)}, doubleArray1, 0.01);
      
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 0;
      intArray3[1] = 168;
      intArray3[2] = 168;
      intArray3[3] = 168;
      intArray3[4] = (-338);
      int int0 = MathArrays.distance1(intArray3, intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(3009, intArray2.length);
      assertEquals(5, intArray3.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertEquals(4021, int0);
      assertArrayEquals(new int[] {168, 0, (-338), 3009}, intArray0);
      assertArrayEquals(new int[] {0, 168, 168, 168, (-338)}, intArray3);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double double2 = MathArrays.distance(intArray2, intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(3009, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray3));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {168, 0, (-338), 3009}, intArray0);
      
      double double3 = MathArrays.linearCombination(114244.0, 35.87263, (double) 168, 0.0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(4098232.7417200003, double3, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, (-338.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-683768.592)}, doubleArray1, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(168);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(168, (int)integer0);
      
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, (Integer) 168);
      assertNotNull(pair0);
      assertFalse(integer0.equals((Object)int0));
      
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
      assertNotNull(pair1);
      assertFalse(integer0.equals((Object)int0));
      
      Field<Pair<Object, Integer>> field0 = (Field<Pair<Object, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 4686);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = -0.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = -0.0;
      doubleArray1[3] = (-761.87);
//      try { 
        MathArrays.normalizeArray(doubleArray1, -0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3302.6051792);
      doubleArray0[1] = 1117.89;
      doubleArray0[2] = 1105.8929899102;
      doubleArray0[3] = 226.0296072643;
      doubleArray0[4] = 2.6475163664466164E13;
      doubleArray0[5] = 1467.1515820596;
      doubleArray0[6] = (-3169.319226310264);
      doubleArray0[7] = 539.0;
      doubleArray0[8] = (-2176.52264074);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1494.1254284);
      doubleArray0[1] = (-1505.027670767);
      doubleArray0[2] = (-16.3729565);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.8307188599677033E-8;
      doubleArray0[5] = 554.7292841617457;
      doubleArray0[6] = 583.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(5145401.7379769785, double0, 0.01);
      assertArrayEquals(new double[] {(-1494.1254284), (-1505.027670767), (-16.3729565), (-1.0), 1.8307188599677033E-8, 554.7292841617457, 583.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1505.027670767);
      doubleArray1[1] = 298.0;
      doubleArray1[2] = 5145401.7379769785;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-16.3729565);
      doubleArray1[5] = (-1505.027670767);
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5145402.186852468, double1, 0.01);
      assertArrayEquals(new double[] {(-1505.027670767), 298.0, 5145401.7379769785, (-1.0), (-16.3729565), (-1505.027670767)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-3010.055341534), 596.0, 1.0290803475953957E7, (-2.0), (-32.745913), (-3010.055341534)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1505.027670767), 298.0, 5145401.7379769785, (-1.0), (-16.3729565), (-1505.027670767)}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace((-3106.758715684891), doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {9351515.667004615, (-1851628.194548195), (-3.1971043390320328E10), 6213.517431369782, 101733.65061580918, 9351515.667004615}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1505.027670767), 298.0, 5145401.7379769785, (-1.0), (-16.3729565), (-1505.027670767)}, doubleArray1, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {(-1494.1254284), (-1505.027670767), (-16.3729565), (-1.0), 1.8307188599677033E-8, 554.7292841617457, 583.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1494.1254284), (-1505.027670767), (-16.3729565), (-1.0), 1.8307188599677033E-8, 554.7292841617457, 583.0}, doubleArray3, 0.01);
      
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (-3106.758715684891);
      doubleArray4[1] = 554.7292841617457;
      doubleArray4[2] = 5145401.7379769785;
      doubleArray4[3] = (-3106.758715684891);
      doubleArray4[4] = 1.8307188599677033E-8;
      doubleArray4[5] = 5145401.7379769785;
      double double2 = MathArrays.linearCombination(doubleArray2, doubleArray4);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray4.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals((-1.6445577501988496E17), double2, 0.01);
      assertArrayEquals(new double[] {9351515.667004615, (-1851628.194548195), (-3.1971043390320328E10), 6213.517431369782, 101733.65061580918, 9351515.667004615}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-3106.758715684891), 554.7292841617457, 5145401.7379769785, (-3106.758715684891), 1.8307188599677033E-8, 5145401.7379769785}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {(-1505.027670767), 298.0, 5145401.7379769785, (-1.0), (-16.3729565), (-1505.027670767)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1415.4;
      doubleArray0[2] = 1.4699556E-39;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1415.4003532569857, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 1415.4, 1.4699556E-39}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2144487186));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1974.157887;
      doubleArray0[1] = 0.125;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1974.157887, 0.125}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1974.157887, 0.125}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-695.4517148090233), (-695.4517148090233), 0.0, 0.0, (-1660.7402134460995));
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[7][2];
      long[] longArray1 = new long[3];
      longArray1[0] = 1709L;
      longArray1[1] = (-1261L);
      longArray1[2] = 3638L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 3638L;
      longArray2[1] = 1L;
      longArray2[2] = (-1261L);
      longArray2[3] = 3638L;
      longArray2[4] = 3638L;
      longArray2[5] = 1389L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 1327L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = (-1261L);
      longArray5[1] = 1709L;
      longArray5[2] = 1389L;
      longArray5[3] = 1709L;
      longArray5[4] = 3638L;
      longArray5[5] = (-2170L);
      longArray5[6] = 1327L;
      longArray5[7] = (-1261L);
      longArray5[8] = 1709L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[9];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = 1L;
      longArray6[1] = 3638L;
      longArray6[2] = 1709L;
      longArray6[3] = (-1261L);
      longArray6[4] = 1389L;
      longArray6[5] = 3638L;
      longArray6[6] = (-2272L);
      longArray6[7] = 1389L;
      longArray6[8] = 3638L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = 1L;
      longArray7[1] = 1709L;
      longArray7[2] = 3638L;
      longArray7[3] = (-2044L);
      longArray7[4] = (-2272L);
      longArray7[5] = (-1284L);
      longArray7[6] = (-1261L);
      longArray7[7] = 1L;
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 6 while others have length 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1802.0F);
      floatArray0[2] = 1.4E-45F;
      floatArray0[3] = 5096.292F;
      floatArray0[4] = (-2656.1934F);
      floatArray0[5] = (-1684.0F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1802.0F), 0.0F, 1.4E-45F, 5096.292F, (-2656.1934F), (-1684.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      
      long[][] longArray0 = new long[3][6];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 550L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-421L);
      longArray2[1] = 550L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 550L;
      longArray2[6] = 550L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray0[2] = longArray3;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 7 while others have length 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1271.0);
      doubleArray0[1] = (-1993.856746398);
      doubleArray0[2] = (-1269.548);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (-3130.2);
      doubleArray0[5] = (-1271.0);
      doubleArray0[6] = (-3743.0152001959423);
      doubleArray0[7] = (-697.38898006371);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {(-1271.0), (-1993.856746398), (-1269.548), Double.POSITIVE_INFINITY, (-3130.2), (-1271.0), (-3743.0152001959423), (-697.38898006371)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-697.38898006371);
      doubleArray1[2] = (-1271.0);
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-697.38898006371), (-1271.0)}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[7][9];
      long[] longArray1 = new long[5];
      longArray1[0] = (-425L);
      longArray1[1] = 1L;
      longArray1[2] = 80L;
      longArray1[3] = 2935890503282001226L;
      longArray1[4] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 2935890503282001226L;
      longArray3[1] = 1L;
      longArray3[2] = 80L;
      longArray3[3] = 80L;
      longArray3[4] = 1L;
      longArray3[5] = 1L;
      longArray3[6] = 2935890503282001226L;
      longArray3[7] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 80L;
      longArray4[1] = (-1567L);
      longArray4[2] = 80L;
      longArray4[3] = 80L;
      longArray4[4] = 1L;
      longArray4[5] = 2935890503282001226L;
      longArray4[6] = 80L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (-425L);
      longArray5[1] = 80L;
      longArray5[2] = (-425L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 80L;
      longArray6[1] = 80L;
      longArray6[2] = 2935890503282001226L;
      longArray6[3] = (-1L);
      longArray6[4] = 2935890503282001226L;
      longArray6[5] = 80L;
      longArray6[6] = 2935890503282001226L;
      longArray6[7] = (-425L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = 80L;
      longArray7[1] = 80L;
      longArray7[2] = (-425L);
      longArray7[3] = 1L;
      longArray0[6] = longArray7;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 0 while others have length 5
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-73.1965339);
      doubleArray0[1] = (double) (-1271.0F);
      doubleArray0[2] = 3.26E18;
      doubleArray0[3] = (double) (-1271.0F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3.26E18, double0, 0.01);
      assertArrayEquals(new double[] {(-73.1965339), (-1271.0), 3.26E18, (-1271.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-2144487186));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long[][] longArray0 = new long[2][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[2];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1007.9F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2286.8F;
      floatArray0[3] = 1001.12616F;
      floatArray0[4] = 0.0F;
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {1007.9F, 0.0F, 2286.8F, 1001.12616F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UAXK+]zj]hrWxlJ`39";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null, 575);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "YdE";
      stringArray0[1] = "";
      stringArray0[2] = "invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}";
      stringArray0[3] = "cannot normalize a zero norm vector";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "ILL_CONDITIONED_OPERATOR";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-522.0654F);
      floatArray0[1] = 529.313F;
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-522.0654F), 529.313F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 518.98826;
      doubleArray0[1] = (-3637.87);
      doubleArray0[2] = 1842.93087193;
      doubleArray0[3] = 5232.861612584632;
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = 405.348494477;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {518.98826, (-3637.87), 1842.93087193, 5232.861612584632, (-3.141592653589793), 405.348494477, 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(5232.861612584632);
      assertNotNull(double0);
      assertEquals(5232.861612584632, (double)double0, 0.01);
      
      int int0 = 75;
      Integer integer0 = new Integer(75);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(75, (int)integer0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int1 = 2145466036;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2145466036, 2145466036);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2147483647);
      intArray0[1] = 16;
      intArray0[2] = 28;
      intArray0[3] = (-1302);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 28;
      intArray1[1] = 0;
      intArray1[2] = 16;
      intArray1[3] = (-3501);
      intArray1[4] = (-2147483647);
      intArray1[5] = 28;
      intArray1[6] = (-1302);
      intArray1[7] = 28;
      intArray1[8] = (-2147483647);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-2147481448), int0);
      assertArrayEquals(new int[] {(-2147483647), 16, 28, (-1302)}, intArray0);
      assertArrayEquals(new int[] {28, 0, 16, (-3501), (-2147483647), 28, (-1302), 28, (-2147483647)}, intArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray1, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1232.569765;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-246.933697491267);
      doubleArray0[3] = 2.17333333333333325E18;
      doubleArray0[4] = 0.7249995199969751;
      doubleArray0[5] = 1362.3785921426;
      doubleArray0[6] = 130.41648712435;
      doubleArray0[7] = (-141.70094489);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.321987056584813E19, double0, 0.01);
      assertArrayEquals(new double[] {1232.569765, 1.304E19, (-246.933697491267), 2.17333333333333325E18, 0.7249995199969751, 1362.3785921426, 130.41648712435, (-141.70094489)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 18;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {0, 18}, intArray0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1299;
      intArray0[1] = (-728);
      intArray0[2] = 215;
      intArray0[3] = 107;
      intArray0[4] = (-2264);
      intArray0[5] = 10;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1299, (-728), 215, 107, (-2264), 10}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "|KH8i!F&E}5KE";
      stringArray0[2] = "|KH8i!F&E}5KE";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[6][3];
      doubleArray0[2] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
//      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[] longArray0 = new long[1];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 6.283185307179586;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(6.283185307179586, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 6.283185307179586, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 521.26141;
      doubleArray0[2] = (-1143.1);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1018.7862953507;
      doubleArray0[5] = 1839.259;
      doubleArray0[6] = (-4147.972);
      doubleArray0[7] = 968.56;
      doubleArray0[8] = 1.86285714285714278E18;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.304E19, 521.26141, (-1143.1), 0.0, 1018.7862953507, 1839.259, (-4147.972), 968.56, 1.86285714285714278E18}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1271.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1271.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 197;
      intArray0[1] = 134217729;
      intArray0[2] = (-1);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 197;
      intArray1[1] = 197;
      intArray1[2] = (-1);
      intArray1[3] = 197;
      intArray1[4] = (-1865);
      intArray1[5] = (-1);
      intArray1[6] = 134217729;
      intArray1[7] = 134217729;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(134217532, int0);
      assertArrayEquals(new int[] {197, 134217729, (-1)}, intArray0);
      assertArrayEquals(new int[] {197, 197, (-1), 197, (-1865), (-1), 134217729, 134217729}, intArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-1036.993);
      doubleArray1[6] = 0.0;
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1036.993, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1036.993), 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 0.09090909090909091);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1036.993), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, 0.09090909090909091, -0.0}, doubleArray2, 0.01);
      
//      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 7
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = 2816921.9584956337;
      doubleArray0[1] = 0.19999954104423523;
      doubleArray0[2] = 3050.7596;
      doubleArray0[3] = 196521.07284148407;
      doubleArray0[4] = 1512.4159535433505;
      doubleArray0[5] = (-4915.946);
      doubleArray0[6] = 579747.9814778025;
      doubleArray0[7] = (-0.16666666666666666);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(21, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(21, doubleArray0.length);
      assertEquals(21, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(21, doubleArray0.length);
      assertEquals(21, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale((-4915.946), doubleArray0);
      assertEquals(21, doubleArray0.length);
      assertEquals(21, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray1, 0.4794255495071411);
      assertEquals(21, doubleArray0.length);
      assertEquals(21, doubleArray1.length);
      assertEquals(21, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.26E18;
      doubleArray0[1] = 2314.19;
      doubleArray0[2] = 3.26E18;
      doubleArray0[3] = 2314.19;
      doubleArray0[4] = (-585.86779700803);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 2314.19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(4.6103362133362903E18, double0, 0.01);
      assertArrayEquals(new double[] {3.26E18, 2314.19, 3.26E18, 2314.19, (-585.86779700803), 1.34217729E8, 2314.19}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 392.53;
      double[] doubleArray3 = MathArrays.scale((-1223.685), doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {392.53}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-480333.07304999995)}, doubleArray3, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1801L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1801L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
//      try { 
        MathArrays.scaleInPlace((-0.16666666666666666), (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((int[]) null, 234);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1134.0F;
      floatArray0[1] = (-2015.9539F);
      floatArray0[2] = (-739.4871F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1134.0F, (-2015.9539F), (-739.4871F)}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-1036.993);
      doubleArray1[6] = 0.0;
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1036.993), 0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1036.993), 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray1);
      
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 518.98826;
      doubleArray0[1] = (-3637.87);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-739.4871F);
      floatArray0[1] = (-2606.5F);
      floatArray0[2] = 1134.0F;
      floatArray0[3] = (-739.4871F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-739.4871F), (-2606.5F), 1134.0F, (-739.4871F)}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {518.98826, (-3637.87), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double2 = 5232.861612584632;
      double double3 = (-3.141592653589793);
      double double4 = 405.348494477;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Float.NaN;
//      try { 
        MathArrays.normalizeArray(doubleArray0, Float.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot normalize to NaN
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1149;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2785.288316;
      doubleArray2[1] = (double) 1149;
//      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 4
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.scale(0.0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2031.1333407089);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2031.1333407089);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[5] = "B! ";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[8] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-2031.1333407089)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2031.1333407089), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2147483647);
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
//      try { 
        MathArrays.distance(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2031.1333407089);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2031.1333407089);
      doubleArray1[1] = 3.26E18;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "NvcY34nsXom>dKAcu";
      stringArray0[4] = "";
      stringArray0[5] = "ZJ<`<31D|O[/VdWE";
      stringArray0[6] = "overflow: lcm({0}, {1}) is 2^63";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2031.756762373331);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2031.756762373331);
      doubleArray1[1] = 3.26E18;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3.26E18;
      doubleArray2[1] = (-2031.756762373331);
      doubleArray2[2] = 3.26E18;
      doubleArray2[3] = 3.26E18;
      doubleArray2[4] = 3.26E18;
      doubleArray2[5] = 3.26E18;
      doubleArray2[6] = 3.26E18;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance1((double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 4375;
      intArray0[1] = 17;
      intArray0[2] = (-203);
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-0.16666666666666666);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-0.16666666666666666));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-0.16666666666666666)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.16666666666666666)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1851.888363);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1851.888363);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1851.888363), 0.0, (-1851.888363), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1851.888363), 0.0, (-1851.888363), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6858981.0180296395, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1851.888363), 0.0, (-1851.888363), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1851.888363), 0.0, (-1851.888363), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 1024.0, 0.0, 6858981.0180296395, 995.73612358821, (-1851.888363));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1843992.139891736), double1, 0.01);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 4375;
      intArray0[1] = 0;
      intArray0[2] = (-211);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {4375, 0, (-211)}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-211);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 4375;
      doubleArray0[4] = (double) (-211);
      doubleArray0[5] = (double) 4375;
      doubleArray0[6] = (double) 4375;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-211.0), 0.0, 4375.0, (-211.0), 4375.0, 4375.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-211.0), 0.0, 4375.0, (-211.0), 4375.0, 4375.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NORM";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination(1942.580713, (double) 0L, 237.708, 237.708, 1950.865967747662, 9.313225746154785E-10, 0.0, 1263.816);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(56505.09326581688, double1, 0.01);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, (-211.0), 0.0, 4375.0, (-211.0), 4375.0, 4375.0}, doubleArray0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 4375);
      assertEquals(3, intArray0.length);
      assertEquals(4375, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {4375, 0, (-211)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "cannot set an element at a negative index {0}";
      stringArray0[1] = "Dd~2fzh\tnbw";
      stringArray0[2] = "";
      stringArray0[3] = "sRtIe^pKM_1g";
      stringArray0[4] = "VBgQ!&_sd$dt";
      stringArray0[5] = "DIMENSIONS_MISMATCH";
      stringArray0[6] = "org.apache.commons.math3.util.Pair";
      stringArray0[7] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination(1.5574076175689697, 1.5574076175689697, 1.0E-5, 2120.351, 1.5574076175689697, 1.5574076175689697);
      assertEquals(4.872240484523709, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.normalizeArray((double[]) null, 2129.0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3930;
      intArray0[1] = 3406;
      intArray0[2] = 8;
      intArray0[3] = 271;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {3930, 3406, 8, 271}, intArray0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 3930;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[3] = "|KH8i!F&E}5KE";
      stringArray0[4] = ";K";
      stringArray0[5] = "|KH8i!F&E}5KE";
      stringArray0[6] = "|KH8i!F&E}5KE";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2031.1333407089);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2031.1333407089);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 518.98826;
      doubleArray0[1] = (-3637.87);
      doubleArray0[2] = 1842.93087193;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1842.93087193;
      doubleArray1[1] = (-3637.87);
      doubleArray1[2] = 518.98826;
      doubleArray1[3] = (-3637.87);
      doubleArray1[4] = (-3637.87);
      doubleArray1[5] = 518.98826;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {518.98826, (-3637.87), 1842.93087193, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1842.93087193, (-3637.87), 518.98826, (-3637.87), (-3637.87), 518.98826}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4110.941637828309, double0, 0.01);
      assertArrayEquals(new double[] {518.98826, (-3637.87), 1842.93087193, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3992.85780214909);
      doubleArray1[1] = (-3.7999795083850525E-8);
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3.7999795083850525E-8);
      doubleArray2[1] = (-3992.85780214909);
      doubleArray2[2] = 3.834E-20;
      double double0 = MathArrays.distance1(doubleArray1, doubleArray2);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7985.71560422218, double0, 0.01);
      assertArrayEquals(new double[] {(-3992.85780214909), (-3.7999795083850525E-8)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3.7999795083850525E-8), (-3992.85780214909), 3.834E-20}, doubleArray2, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      double double0 = 2314.19;
      doubleArray0[0] = 2314.19;
      doubleArray0[1] = (-141.70094489);
      double double1 = (-675.243669);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2314.19;
      // Undeclared exception!
//      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1851.888363);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3980.154947);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-3450.2637120837);
      doubleArray0[3] = 2950.911666;
      doubleArray0[4] = (-552.969161);
      doubleArray0[5] = 74.0;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = (-815.47542);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1900);
      assertEquals(8, doubleArray0.length);
      assertEquals(1900, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3980.154947), (-1.0), (-3450.2637120837), 2950.911666, (-552.969161), 74.0, 3.834E-20, (-815.47542)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-3980.154947), (-1.0), (-3450.2637120837), 2950.911666, (-552.969161), 74.0, 3.834E-20, (-815.47542)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-3980.154947), (-1.0), (-3450.2637120837), 2950.911666, (-552.969161), 74.0, 3.834E-20, (-815.47542)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-7960.309894), (-2.0), (-6900.5274241674), 5901.823332, (-1105.938322), 148.0, 7.668E-20, (-1630.95084)}, doubleArray2, 0.01);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1271.0F);
      floatArray0[2] = (-1271.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1271.0F);
      floatArray0[5] = 1038.9414F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-1271.0F), (-1271.0F), 0.0F, (-1271.0F), 1038.9414F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.distance(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 1038.9414F, (-2031.1333407089), 2162.739, (double) (-1271.0F));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-4859069.798277365), double1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 4.302598454084528E7;
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 1.0;
      doubleArray1[7] = 1.0;
      doubleArray1[8] = (-1.0);
//      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Qj2>SmyI;)&n:YlO($'";
      stringArray0[1] = "~`3B]3";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[4] = "jq";
      stringArray0[5] = "PB]ZxFd3";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[7] = "d!p\"lk>3>PtS}";
      stringArray0[8] = "6";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.normalizeArray(doubleArray0, 2079.176);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1201.836191;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not strictly decreasing (0 <= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "w.)7::6LH\"g2c";
      stringArray0[3] = "";
      stringArray0[4] = "$F5%JtPm}o7J$#L-F|";
      stringArray0[5] = "I";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2641.1531490856);
      double double0 = MathArrays.linearCombination((-129.36), (-2375.25), (-2641.1531490856), (-2641.1531490856), (-2641.1531490856), (-129.36), (-1641.21808), 1.8307188599677033E-8);
      assertEquals(7624611.868260449, double0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2301.307F;
      floatArray0[1] = (-39.15F);
      floatArray0[2] = (-659.3317F);
      floatArray0[3] = (-39.15F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-841.907F);
      floatArray0[6] = (-347.93488F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2301.307F, (-39.15F), (-659.3317F), (-39.15F), 0.0F, (-841.907F), (-347.93488F)}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-2641.1531490856), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2641.1531490856), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-2641.1531490856));
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-2641.1531490856), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-129.36);
      doubleArray3[1] = (double) (-841.907F);
      doubleArray3[2] = (double) (-841.907F);
      doubleArray3[3] = (double) 0.0F;
      doubleArray3[4] = (double) (-841.907F);
      doubleArray3[5] = (-129.36);
      doubleArray3[6] = (-1641.21808);
      doubleArray3[7] = (double) (-347.93488F);
      doubleArray3[8] = (double) (-39.15F);
//      try { 
        MathArrays.ebeAdd(doubleArray3, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 15
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1851.888363);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1851.888363);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1851.888363), 0.0, (-1851.888363), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1851.888363), 0.0, (-1851.888363), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1851.888363), 0.0, (-1851.888363), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1851.888363), 0.0, (-1851.888363), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
//      try { 
        MathArrays.checkPositive(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 100.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10000.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[0][1];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1201.836191;
      doubleArray0[1] = 4488.0;
      doubleArray0[2] = 1138.984772;
      doubleArray0[3] = 0.3153223395347595;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1201.836191, 4488.0, 1138.984772, 0.3153223395347595}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 259;
      intArray0[1] = 259;
      intArray0[2] = 262;
      intArray0[3] = 259;
      intArray0[4] = 262;
      intArray0[5] = 262;
      int[] intArray1 = MathArrays.copyOf(intArray0, 259);
      assertEquals(6, intArray0.length);
      assertEquals(259, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {259, 259, 262, 259, 262, 262}, intArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<Integer, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 259, (-2146572538));
      assertEquals(259, pairArray0.length);
      assertNotNull(pairArray0);
      
      double double1 = MathArrays.linearCombination((double) (-2146572538), 2586.2622717022, (double) 259, 4488.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-5.5515984061094375E12), double1, 0.01);
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 1075);
      assertEquals(1075, intArray2.length);
      assertEquals(6, intArray0.length);
      assertEquals(259, intArray1.length);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {259, 259, 262, 259, 262, 262}, intArray0);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1201.836191, 4488.0, 1138.984772, 0.3153223395347595}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination((-3997.6522172138), 2586.2622717022, (double) (-2146572538), (double) 262, (-3997.6522172138), Double.NaN, (double) 262, (double) 259);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][2];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, (-79.06160358750647), 0.0, 0.0, (-2035.1204605), 0.0, Double.NaN, Double.NaN);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-744);
      intArray0[1] = 117;
      intArray0[2] = (-3660);
      intArray0[3] = (-2137832942);
      intArray0[4] = 1226;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {(-744), 117, (-3660), (-2137832942), 1226}, intArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1201.836191;
      doubleArray0[1] = 4488.0;
      doubleArray0[3] = 0.3153223395347595;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1201.836191, 4488.0, 0.0, 0.3153223395347595}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 237;
      intArray0[1] = 237;
      intArray0[2] = 303;
      intArray0[3] = 237;
      intArray0[4] = 303;
      intArray0[5] = 303;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 237, 303, 237, 303, 303}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<Integer, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 0, (-2146572538));
      assertEquals(0, pairArray0.length);
      assertNotNull(pairArray0);
      
      double double1 = MathArrays.linearCombination((double) (-2146572538), 2586.2622717022, (double) 237, 4488.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-5.5515985048454375E12), double1, 0.01);
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 1075);
      assertEquals(1075, intArray2.length);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 237, 303, 237, 303, 303}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      int int0 = MathArrays.distance1(intArray0, intArray2);
      assertEquals(1075, intArray2.length);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertEquals(1383, int0);
      assertArrayEquals(new int[] {0, 237, 303, 237, 303, 303}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray2, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1851.888363);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1851.888363);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1851.888363), 0.0, (-1851.888363), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1851.888363), 0.0, (-1851.888363), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[2] = "";
      stringArray0[1] = "|KH8i!F&E}5KE";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1851.888363);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1851.888363);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1851.888363), 0.0, (-1851.888363), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1851.888363), 0.0, (-1851.888363), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "|KH8i!F&E}5KE";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6858981.0180296395, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1851.888363), 0.0, (-1851.888363), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1851.888363), 0.0, (-1851.888363), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[][] doubleArray2 = new double[4][9];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1851.888363), (-1851.888363), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1851.888363);
//      try { 
        MathArrays.ebeAdd(doubleArray3, doubleArray4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1271.0F);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1916);
      intArray0[1] = 400;
      intArray0[2] = (-1369);
      intArray0[3] = 3260;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3260;
      intArray1[1] = (-1369);
      intArray1[2] = (-1916);
      intArray1[3] = 400;
      intArray1[4] = (-1369);
      intArray1[5] = 2781;
      intArray1[6] = 400;
      intArray1[7] = (-1369);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6196.704446720047, double0, 0.01);
      assertArrayEquals(new int[] {(-1916), 400, (-1369), 3260}, intArray0);
      assertArrayEquals(new int[] {3260, (-1369), (-1916), 400, (-1369), 2781, 400, (-1369)}, intArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertEquals(17, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-1369);
      doubleArray3[1] = (double) 0.0F;
      doubleArray3[2] = (double) 2781;
      doubleArray3[3] = (double) (-1271.0F);
      doubleArray3[4] = (double) (-1369);
      doubleArray3[5] = (double) 400;
      doubleArray3[6] = (double) 400;
      double double1 = MathArrays.distanceInf(doubleArray3, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertEquals(7, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(2781.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1369.0), 0.0, 2781.0, (-1271.0), (-1369.0), 400.0, 400.0}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 518.98826;
      doubleArray0[1] = (-3637.87);
      doubleArray0[2] = 1842.93087193;
      doubleArray0[3] = 5232.861612584632;
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = 405.348494477;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {518.98826, (-3637.87), 1842.93087193, 5232.861612584632, (-3.141592653589793), 405.348494477, 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double((-3321.8194641602067));
      assertNotNull(double0);
      assertEquals((-3321.8194641602067), (double)double0, 0.01);
      
      Pair<String, String> pair0 = new Pair<String, String>("wL>kxa[P\u0001{", "wL>kxa[P\u0001{");
      assertNotNull(pair0);
      
      Double double1 = new Double(518.98826);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(518.98826, (double)double1, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(double0).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 215, 215);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathArrays.linearCombination(536.6139010243992, (-554.7327171709), 0.0, (-4575.56877476008), (-3257.3177012), (-7.877917738262007E-9), 1.0, (-554.7327171709));
      assertEquals((-298232.0200784514), double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-298232.0200784514);
      doubleArray0[2] = (-7.877917738262007E-9);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-7.877917738262007E-9);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3257.3177012);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-7.877917738262007E-9);
      doubleArray1[3] = (-3257.3177012);
      doubleArray1[4] = 536.6139010243992;
      doubleArray1[5] = (-3.141592653589793);
//      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 518.98826;
      doubleArray0[1] = (-3637.87);
      doubleArray0[2] = 1842.93087193;
      doubleArray0[3] = 5232.861612584632;
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = 405.348494477;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {518.98826, (-3637.87), 1842.93087193, 5232.861612584632, (-3.141592653589793), 405.348494477, 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 215, 215);
      assertEquals(215, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {518.98826, (-3637.87), 1842.93087193, 5232.861612584632, (-3.141592653589793), 405.348494477, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1271.0F);
      floatArray0[1] = (-1271.0F);
      floatArray0[2] = 0.0F;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2980.0;
      doubleArray2[1] = (double) (-1271.0F);
      doubleArray2[2] = (double) (-1271.0F);
      doubleArray2[3] = (double) (-1271.0F);
      doubleArray2[4] = (double) (-1271.0F);
      doubleArray2[5] = (double) 0.0F;
      doubleArray2[6] = (double) 0.0F;
      doubleArray2[7] = (double) 0.0F;
      double double0 = MathArrays.distance(doubleArray0, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3916.9074535914174, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2980.0, (-1271.0), (-1271.0), (-1271.0), (-1271.0), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1271.0F), (-1271.0F), 0.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) (-1271.0F);
      doubleArray3[1] = (double) 0.0F;
      doubleArray3[2] = (double) 0.0F;
      doubleArray3[3] = (double) 0.0F;
      doubleArray3[4] = 2980.0;
      doubleArray3[5] = (double) (-1271.0F);
      doubleArray3[6] = (double) 0.0F;
      doubleArray3[7] = (double) (-1271.0F);
      double[] doubleArray4 = MathArrays.convolve(doubleArray2, doubleArray3);
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(15, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertArrayEquals(new double[] {(-1271.0), 0.0, 0.0, 0.0, 2980.0, (-1271.0), 0.0, (-1271.0)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {2980.0, (-1271.0), (-1271.0), (-1271.0), (-1271.0), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1526);
      intArray0[1] = 0;
      intArray0[2] = 1819706242;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1526), 0, 1819706242}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1526);
      doubleArray0[1] = (double) 1819706242;
      doubleArray0[2] = (double) 1819706242;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1526);
      doubleArray0[5] = (double) (-1526);
      doubleArray0[6] = (double) (-1526);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3052.0), 3.639412484E9, 3.639412484E9, 0.0, (-3052.0), (-3052.0), (-3052.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1526.0), 1.819706242E9, 1.819706242E9, 0.0, (-1526.0), (-1526.0), (-1526.0)}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1.819706242E9, double1, 0.01);
      assertArrayEquals(new double[] {(-3052.0), 3.639412484E9, 3.639412484E9, 0.0, (-3052.0), (-3052.0), (-3052.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1526.0), 1.819706242E9, 1.819706242E9, 0.0, (-1526.0), (-1526.0), (-1526.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2.5066373118092403E9;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = Double.NaN;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.5066373118092403E9, 0.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) Float.NaN;
      doubleArray2[1] = (double) Float.NaN;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 50066.3291225674;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = (double) Float.NaN;
      doubleArray2[6] = 2.5066373118092403E9;
      doubleArray2[7] = Double.NaN;
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0, 50066.3291225674, Double.NaN, Double.NaN, 2.5066373118092403E9, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0, 50066.3291225674, Double.NaN, Double.NaN, 2.5066373118092403E9, Double.NaN}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, 1.34217729E8, 473.7807568, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1075;
      intArray0[1] = 1075;
      intArray0[2] = 1075;
      intArray0[3] = 3416;
      intArray0[4] = 1075;
      intArray0[5] = 1075;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2810);
      assertEquals(6, intArray0.length);
      assertEquals(2810, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1075, 1075, 1075, 3416, 1075, 1075}, intArray0);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance1(intArray1, intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2314.19;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      // Undeclared exception!
//      try { 
        MathArrays.distance((int[]) null, (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2173.7783F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 2173.7783F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double3 = MathArrays.linearCombination(0.0, (-172.57246017134588), 0.0, 3.834E-20, 3.834E-20, 1.44888888888888883E18, (double) (-1.0F), 3.834E-20);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.05555039999999999, double3, 0.01);
      
      boolean boolean2 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 460;
      intArray0[1] = 890;
      intArray0[2] = 2;
      intArray0[3] = (-2122);
      intArray0[4] = (-2251);
      intArray0[5] = 2146763257;
      intArray0[6] = 2799;
      intArray0[7] = (-2157);
      intArray0[8] = (-928);
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf((int[]) null, intArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 402.72394F;
      floatArray0[2] = (-951.3211F);
      floatArray0[3] = (-1181.7687F);
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.NaN, 402.72394F, (-951.3211F), (-1181.7687F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) 402.72394F;
      doubleArray0[3] = (double) (-951.3211F);
      doubleArray0[4] = (double) (-1181.7687F);
      doubleArray0[5] = (double) (-1181.7687F);
      doubleArray0[6] = (double) (-1181.7687F);
      doubleArray0[7] = (double) Float.NaN;
      double[] doubleArray1 = MathArrays.scale(Float.NaN, doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 402.72393798828125, (-951.3211059570312), (-1181.7686767578125), (-1181.7686767578125), (-1181.7686767578125), Double.NaN}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(2244.366, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 402.72393798828125, (-951.3211059570312), (-1181.7686767578125), (-1181.7686767578125), (-1181.7686767578125), Double.NaN}, doubleArray0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 402.72393798828125, (-951.3211059570312), (-1181.7686767578125), (-1181.7686767578125), (-1181.7686767578125), Double.NaN}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 402.72393798828125, (-951.3211059570312), (-1181.7686767578125), (-1181.7686767578125), (-1181.7686767578125), Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 1.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, Double.NaN, Double.NaN, 1.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((-172.57246017134588), 1.0, 1.80143988049143E16, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-172.57246017134588), double1, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2522.90453030282;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-172.57246017134588);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = (-172.57246017134588);
      doubleArray1[6] = 2522.90453030282;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      MathArrays.scaleInPlace(2522.90453030282, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {6365047.269022494, 2522.90453030282, (-435383.8415717915), 0.0, Double.NaN, (-435383.8415717915), 6365047.269022494, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 402.72394F;
      floatArray0[2] = (-951.3211F);
      floatArray0[3] = (-1181.7687F);
      floatArray0[4] = (-944.7F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 3138.5F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.NaN, 402.72394F, (-951.3211F), (-1181.7687F), (-944.7F), (-1.0F), 3138.5F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3654.81224025);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (-1181.7687F);
      doubleArray0[3] = (double) (-1181.7687F);
      doubleArray0[4] = (double) (-1181.7687F);
      double[] doubleArray1 = MathArrays.scale((-4088.6), doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3654.81224025), 1.0, (-1181.7686767578125), (-1181.7686767578125), (-1181.7686767578125)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.494306532548615E7, (-4088.6), 4831779.411791992, 4831779.411791992, 4831779.411791992}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.scale((-1.0F), doubleArray0);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {3654.81224025, (-1.0), 1181.7686767578125, 1181.7686767578125, 1181.7686767578125}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-3654.81224025), 1.0, (-1181.7686767578125), (-1181.7686767578125), (-1181.7686767578125)}, doubleArray0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray3.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {1.49467201377264E7, (-4089.6), 4832961.18046875, 4832961.18046875, 4832961.18046875}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-3654.81224025), 1.0, (-1181.7686767578125), (-1181.7686767578125), (-1181.7686767578125)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.494306532548615E7, (-4088.6), 4831779.411791992, 4831779.411791992, 4831779.411791992}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray2);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1.7547385127578955E7, double0, 0.01);
      assertArrayEquals(new double[] {3654.81224025, (-1.0), 1181.7686767578125, 1181.7686767578125, 1181.7686767578125}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-3654.81224025), 1.0, (-1181.7686767578125), (-1181.7686767578125), (-1181.7686767578125)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2147483340;
      intArray0[1] = (-935);
      intArray0[2] = (-4259);
      intArray0[3] = (-1060);
      intArray0[4] = (-2913);
      intArray0[5] = 2147476669;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2147483340, (-935), (-4259), (-1060), (-2913), 2147476669}, intArray0);
      assertArrayEquals(new int[] {2147483340, (-935)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 402.72394F;
      floatArray0[2] = (-951.3211F);
      floatArray0[3] = (-1181.7687F);
      floatArray0[4] = (-944.7F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 3138.5F;
      floatArray0[7] = (-1271.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {Float.NaN, 402.72394F, (-951.3211F), (-1181.7687F), (-944.7F), (-1.0F), 3138.5F, (-1271.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.distance((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      // Undeclared exception!
//      try { 
        MathArrays.checkNonNegative((long[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2031.1333407089);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2031.1333407089);
      doubleArray1[1] = 3.26E18;
      doubleArray1[2] = (-2031.1333407089);
      doubleArray1[3] = (-2031.1333407089);
      doubleArray1[4] = (-2031.1333407089);
      doubleArray1[5] = (-2031.1333407089);
      doubleArray1[6] = (-2031.1333407089);
      doubleArray1[7] = (-2031.1333407089);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3.26E18, double0, 0.01);
      assertArrayEquals(new double[] {(-2031.1333407089), 3.26E18, (-2031.1333407089), (-2031.1333407089), (-2031.1333407089), (-2031.1333407089), (-2031.1333407089), (-2031.1333407089)}, doubleArray1, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2031.1333407089)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
//      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 3
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2322L);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,322 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-554.7327171709);
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(554.7327171709, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-554.7327171709), 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(554.7327171709, 1.34217729E8, 0.0, 3.26E18, (-361.0572), 0.0, 583835.056281, (-1456.558313));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7.360457569603058E10, double1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3030);
      intArray0[2] = 48;
      intArray0[3] = 3;
      intArray0[4] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-3030), 48, 3, 2}, intArray0);
      assertArrayEquals(new int[] {0, (-3030), 48, 3, 2}, intArray1);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-554.7327171709), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-554.7327171709), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2031.1333407089);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2031.1333407089);
      double double0 = 3.26E18;
      doubleArray1[1] = 3.26E18;
      doubleArray1[2] = (-2031.1333407089);
      doubleArray1[3] = (-2031.1333407089);
      doubleArray1[4] = (-2031.1333407089);
//      try { 
        MathArrays.checkPositive(doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,031.133 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, 1.34217729E8, 473.7807568, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-2356L);
      longArray0[2] = (-9223372036854775808L);
      long[][] longArray1 = new long[9][9];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      // Undeclared exception!
//      try { 
        MathArrays.safeNorm((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 2793.9357754, (-35.221301), (-35.221301), (-35.221301), 1456.7, 0.0, (-2775.27980517));
      assertEquals((-50066.3291225674), double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-50066.3291225674);
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(50066.3291225674, double1, 0.01);
      assertArrayEquals(new double[] {(-50066.3291225674), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination(2299.6887025, 5531.600226526525, 2299.6887025, 0.0, 2327.616, 3.834E-20, (-2775.27980517), (-2489.640225871));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.9630406788688157E7, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2031.1333407089);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2031.1333407089);
      doubleArray1[1] = 3.26E18;
      doubleArray1[2] = (-2031.1333407089);
      doubleArray1[3] = (-2031.1333407089);
      doubleArray1[4] = (-2031.1333407089);
      doubleArray1[5] = (-2031.1333407089);
      doubleArray1[6] = (-2031.1333407089);
      doubleArray1[7] = (-2031.1333407089);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3.26E18, double0, 0.01);
      assertArrayEquals(new double[] {(-2031.1333407089), 3.26E18, (-2031.1333407089), (-2031.1333407089), (-2031.1333407089), (-2031.1333407089), (-2031.1333407089), (-2031.1333407089)}, doubleArray1, 0.01);
      
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2031.1333407089);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2031.1333407089);
      doubleArray1[1] = 3.26E18;
      doubleArray1[2] = (-2031.1333407089);
      doubleArray1[3] = (-2031.1333407089);
      doubleArray1[4] = (-2031.1333407089);
      doubleArray1[5] = (-2031.1333407089);
      doubleArray1[6] = (-2031.1333407089);
      doubleArray1[7] = (-2031.1333407089);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3.26E18, double0, 0.01);
      assertArrayEquals(new double[] {(-2031.1333407089), 3.26E18, (-2031.1333407089), (-2031.1333407089), (-2031.1333407089), (-2031.1333407089), (-2031.1333407089), (-2031.1333407089)}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
//      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1201.836191;
      double double0 = 4488.0;
      doubleArray0[1] = 4488.0;
      doubleArray0[2] = 1138.984772;
      doubleArray0[3] = 0.3153223395347595;
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {1201.836191, 4488.0, 1138.984772, 0.3153223395347595}, doubleArray0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 262;
      int int1 = 237;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 262, 237);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, 1.34217729E8, 473.7807568, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-2356L);
      longArray0[2] = (-9223372036854775808L);
      long[][] longArray1 = new long[9][9];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 0.0;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 100.0;
      MathArrays.scaleInPlace(100.0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {10000.0, 10000.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 100.0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {100.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {100.0}, doubleArray2, 0.01);
      
//      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, 1.34217729E8, 473.7807568, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-2356L);
      long long0 = (-9223372036854775808L);
      longArray0[2] = (-9223372036854775808L);
      longArray0[3] = 10000L;
      longArray0[4] = 0L;
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkPositive((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, (-1), (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (0 <= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.356194490192345;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2.356194490192345}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 5.551652475612764}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = MathArrays.scale(2.356194490192345, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.356194490192345}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 5.551652475612764}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.scale(2.356194490192345, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.356194490192345}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 5.551652475612764}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 13.080772974501485}, doubleArray3, 0.01);
      
//      try { 
        MathArrays.ebeSubtract(doubleArray3, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-885.9);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2586.2622717022;
      doubleArray0[3] = 1908.2783743;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 207.0014F;
      floatArray0[1] = Float.POSITIVE_INFINITY;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-691.8089F);
      floatArray0[5] = (-6.9711375F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 3816.9038F;
      floatArray0[8] = (-920.42285F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {207.0014F, Float.POSITIVE_INFINITY, 0.0F, (-1.0F), (-691.8089F), (-6.9711375F), 0.0F, 3816.9038F, (-920.42285F)}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) Float.POSITIVE_INFINITY;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = (-885.9);
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-3898);
      intArray0[1] = (-1377);
      intArray0[2] = 42;
      intArray0[3] = 15;
      intArray0[4] = 2981;
      intArray0[5] = (-3872);
      intArray0[6] = (-2207);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-3898), (-1377), 42, 15, 2981, (-3872), (-2207)}, intArray0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 4);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-885.9), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-885.9), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, 1.34217729E8, 473.7807568, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      long[] longArray0 = new long[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 41.228;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {41.228, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 508L;
      longArray0[1] = 2195L;
      longArray0[2] = 508L;
      longArray0[3] = 508L;
      longArray0[4] = 2195L;
      longArray0[5] = 2195L;
      longArray0[6] = 2195L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {508L, 2195L, 508L, 508L, 2195L, 2195L, 2195L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2586.2622717022;
      doubleArray0[3] = 1908.2783743;
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
//      try { 
        MathArrays.checkOrder(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (0 >= 0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2641.1531490856);
      doubleArray0[1] = 2838.136;
      doubleArray0[2] = (-4661.1115491);
      doubleArray0[3] = (-789.33433);
      doubleArray0[4] = 4168.526546125198;
      doubleArray0[5] = (-3390.0);
//      try { 
        MathArrays.checkRectangular((long[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[0];
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2314.19;
      doubleArray0[1] = (-141.70094489);
      doubleArray0[2] = (-675.243669);
      doubleArray0[3] = (-2031.1333407089);
      doubleArray0[4] = (-418.0255867);
      doubleArray0[5] = 961.32172;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.356194490192345;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2.356194490192345}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 5.551652475612764}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 2.356194490192345}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.356194490192345}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
//      try { 
        MathArrays.convolve(doubleArray1, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no data
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, 1.34217729E8, 473.7807568, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-2356L);
      longArray0[2] = (-9223372036854775808L);
      long[][] longArray1 = new long[9][9];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      longArray1[8] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2031.1333407089);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2031.1333407089)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2031.1333407089);
      doubleArray1[1] = 3.26E18;
      doubleArray1[2] = (-2031.1333407089);
      doubleArray1[3] = (-2031.1333407089);
      doubleArray1[4] = (-2031.1333407089);
      doubleArray1[5] = (-2031.1333407089);
      doubleArray1[6] = (-2031.1333407089);
      doubleArray1[7] = (-2031.1333407089);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3.26E18, double0, 0.01);
      assertArrayEquals(new double[] {(-2031.1333407089), 3.26E18, (-2031.1333407089), (-2031.1333407089), (-2031.1333407089), (-2031.1333407089), (-2031.1333407089), (-2031.1333407089)}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination(3840.9562590604, (-2031.1333407089), (-2031.1333407089), 2586.2622717022, 3.26E18, 3.26E18, (-2375.25), (-361.0572));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.06276E37, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2641.1531490856);
      doubleArray0[1] = 2838.136;
      doubleArray0[2] = (-4661.1115491);
      doubleArray0[3] = (-789.33433);
      doubleArray0[4] = 4168.526546125198;
      doubleArray0[5] = (-3390.0);
      doubleArray0[6] = 3.32;
      doubleArray0[7] = 1111.95;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly decreasing (-2,641.153 <= 2,838.136)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = null;
//      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 168;
      intArray0[0] = 168;
      int int1 = 0;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(764.091, 764.091, 0.0, (-4602.9972192), 0.0, Double.NEGATIVE_INFINITY);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 599;
      intArray0[3] = 599;
      intArray0[4] = 0;
      intArray0[5] = (-1697);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 599, 599, 0, (-1697)}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 599, 599, 0, (-1697)}, intArray0);
      assertArrayEquals(new int[] {0, 0, 599, 599, 0, (-1697)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-885.9);
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-3898);
      intArray0[1] = (-1377);
      intArray0[2] = 42;
      intArray0[3] = 15;
      intArray0[4] = 2981;
      intArray0[5] = (-3872);
      intArray0[6] = (-2207);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-3898), (-1377), 42, 15, 2981, (-3872), (-2207)}, intArray0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 4);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-885.9), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-885.9), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(784818.8099999999, double0, 0.01);
      assertArrayEquals(new double[] {(-885.9), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-885.9), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 570.0F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 570.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 570.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {570.0F, 0.0F, 0.0F, 1.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 570.0F;
      doubleArray0[4] = (double) 570.0F;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) 1.0F;
      doubleArray0[7] = (double) 1.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 570.0, 570.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[4][1];
      long[] longArray1 = new long[2];
      longArray1[0] = (-2421L);
      longArray1[1] = 38L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-2421L);
      longArray2[1] = 38L;
      longArray2[2] = 38L;
      longArray2[3] = (-2421L);
      longArray2[4] = 38L;
      longArray2[5] = (-2421L);
      longArray2[6] = 38L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-2421L);
      longArray4[1] = 38L;
      longArray4[2] = (-2421L);
      longArray4[3] = (-2421L);
      longArray4[4] = 38L;
      longArray4[5] = 38L;
      longArray4[6] = (-2421L);
      longArray0[3] = longArray4;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 7 while others have length 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3176.75826277;
      doubleArray1[1] = 2835.7156068;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3176.75826277, 2835.7156068}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 200L;
      long long0 = (-706L);
      longArray0[1] = (-706L);
      long long1 = 1L;
      longArray0[2] = 1L;
      double double0 = MathArrays.linearCombination(2345.51196484225, 2835.7156068, 2043.38, 2835.7156068);
      assertEquals(1.2445649441262286E7, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3176.75826277, 2835.7156068}, doubleArray1, 0.01);
      
      Field<Pair<Object, Integer>> field0 = (Field<Pair<Object, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 4686);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3176.75826277;
      // Undeclared exception!
//      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-885.9);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2586.2622717022;
      doubleArray0[3] = 1908.2783743;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1042.88063009);
      doubleArray0[6] = 1.34217729E8;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {(-885.9), 0.0, 2586.2622717022, 1908.2783743, Double.NaN, (-1042.88063009), 1.34217729E8, 0.0, 1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-885.9), 0.0, 2586.2622717022, 1908.2783743, Double.NaN, (-1042.88063009), 1.34217729E8, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {784818.8099999999, 0.0, 6688752.538030224, 3641526.353821051, Double.NaN, 1087600.0086169157, 1.801439877791744E16, 0.0, 1.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[2][9];
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-1042.88063009);
      doubleArray3[1] = (-1042.88063009);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 2586.2622717022;
      doubleArray3[4] = 1908.2783743;
      doubleArray3[5] = (-885.9);
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 1908.2783743;
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray1;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 9
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-885.9);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2586.2622717022;
      doubleArray0[3] = 1908.2783743;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1042.88063009);
      doubleArray0[6] = 1.34217729E8;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {(-885.9), 0.0, 2586.2622717022, 1908.2783743, Double.NaN, (-1042.88063009), 1.34217729E8, 0.0, 1.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {(-885.9), 0.0, 2586.2622717022, 1908.2783743, Double.NaN, (-1042.88063009), 1.34217729E8, 0.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3003.92540706028;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1300.349707);
      doubleArray0[3] = 372.5604868391;
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = 2433.953934284;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-974.56059);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3003.92540706028, 0.0, (-1300.349707), 372.5604868391, (-20.0), 2433.953934284, 0.0, 0.0, (-974.56059)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(0.0, 3003.92540706028, 0.0, (-2299.54992), 372.5604868391, (-2402.41), 2421.2753021, 0.0);
      assertEquals((-895043.0391871223), double0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-20.0);
      doubleArray1[1] = (-1300.349707);
      doubleArray1[2] = (-2299.54992);
      doubleArray1[3] = 3003.92540706028;
      doubleArray1[4] = (-974.56059);
      doubleArray1[5] = 2433.953934284;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {3003.92540706028, 0.0, (-1300.349707), 372.5604868391, (-20.0), 2433.953934284, 0.0, 0.0, (-974.56059)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-20.0), (-1300.349707), (-2299.54992), 3003.92540706028, (-974.56059), 2433.953934284}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = (-1);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-36.62101343706524);
      doubleArray0[1] = 2.356194490192345;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-36.62101343706524), 2.356194490192345}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1341.0986251577126, (-172.57246017134588), 5.551652475612764}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1388.7805574645047, double0, 0.01);
      assertArrayEquals(new double[] {(-36.62101343706524), 2.356194490192345}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1341.0986251577126, (-172.57246017134588), 5.551652475612764}, doubleArray1, 0.01);
      
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 1.0F;
      floatArray2[2] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray1, floatArray2);
      assertEquals(5, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F}, floatArray2, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {(-36.62101343706524), 2.356194490192345}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1341.0986251577126, (-172.57246017134588), 5.551652475612764}, doubleArray1, 0.01);
      
//      try { 
        MathArrays.convolve((double[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double double1 = 2.356194490192345;
      doubleArray0[1] = 2.356194490192345;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2.356194490192345}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 5.551652475612764}, doubleArray1, 0.01);
      
      float float0 = 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 1 and 2 are not decreasing (0 < 5.552)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 518.98826;
      doubleArray0[1] = (-3637.87);
      doubleArray0[2] = 1842.93087193;
      doubleArray0[3] = 5232.861612584632;
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = 405.348494477;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {518.98826, (-3637.87), 1842.93087193, 5232.861612584632, (-3.141592653589793), 405.348494477, 0.0}, doubleArray0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 215;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 215, 215);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1851.888363);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 391.754270876353;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1851.888363), 0.0, 0.0, 391.754270876353, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3429490.5090148197, 0.0, 0.0, 153471.40874986298, 0.0, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = (-2775.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-2775.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-376.871735);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1252.95501984;
      doubleArray0[5] = (-464.852994);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-376.871735), 0.0, 1252.95501984, (-464.852994)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[5][0];
      long[] longArray1 = new long[8];
      longArray1[0] = 0L;
      longArray1[1] = 100L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray1[6] = 0L;
      longArray1[7] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 100L;
      longArray2[4] = 100L;
      longArray2[5] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 100L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray4[5] = 0L;
      longArray4[6] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = 0L;
      longArray0[4] = longArray5;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 6 while others have length 8
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-131.558F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.4E-45F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1513.0F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 118.755F;
      floatArray0[8] = 1.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 118.755F;
      floatArray1[1] = 118.755F;
      floatArray1[2] = (-1.4E-45F);
      floatArray1[3] = (-1.4E-45F);
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (-131.558F);
      floatArray1[7] = 0.0F;
      floatArray1[8] = (-1400.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-131.558F), 0.0F, (-1.4E-45F), 0.0F, (-1513.0F), 0.0F, 118.755F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {118.755F, 118.755F, (-1.4E-45F), (-1.4E-45F), 0.0F, 0.0F, (-131.558F), 0.0F, (-1400.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-517.76F);
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-517.76F);
      floatArray1[2] = (-1.0F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 1001.942F;
      floatArray1[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, 0.0F, (-517.76F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-517.76F), (-1.0F), 0.0F, 0.0F, 1001.942F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2586.2622717022;
      doubleArray0[3] = 1908.2783743;
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathArrays.linearCombination((-5344.08173159699), -0.0, 1.34217729E8, -0.0, 0.0, (-299.798541495809));
      MathArrays.linearCombination(0.0, 2677.0009, 0.0, 100.0, (-1781.0), 100.0, 2743.91035, 0.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1695.1317F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (-178100.0);
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 100.0;
      doubleArray0[7] = (-299.798541495809);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.copyOf(doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 733, 733);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 1288.7318;
      doubleArray0[0] = 1288.7318;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(doubleArray0, (-3150));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2330.5512407);
      doubleArray0[1] = (-1855.04483);
      doubleArray0[2] = (-1000.5);
      doubleArray0[3] = 1121.357;
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 652.05357720572;
      doubleArray0[7] = 1081.66;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2330.5512407), (-1855.04483), (-1000.5), (-20.0), 652.05357720572, 1081.66, 1121.357}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1851.888363);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1851.888363);
      doubleArray1[1] = 2835.7156068;
      doubleArray1[2] = 2835.7156068;
      doubleArray1[3] = 2835.7156068;
      doubleArray1[4] = 2835.7156068;
      doubleArray1[5] = (-1851.888363);
      doubleArray1[6] = 2835.7156068;
      MathArrays.equals(doubleArray0, doubleArray1);
      MathArrays.OrderDirection.values();
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[2] = 508L;
      longArray0[3] = 200L;
      longArray0[4] = 737L;
      longArray0[5] = (-706L);
      longArray0[6] = 508L;
      longArray0[7] = 508L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -706 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3470.272485990291);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 41.228;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      long[] longArray0 = new long[2];
      longArray0[0] = 508L;
      longArray0[1] = (-706L);
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -706 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 788.71527218;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 476.013665;
      MathArrays.scale(0.0, doubleArray0);
      long[][] longArray0 = new long[2][9];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
//      try { 
        MathArrays.checkRectangular(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // some rows have length 0 while others have length 2
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = (-832);
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<Integer>) null, (-832));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 362.1F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) 362.1F;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 362.1F;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(262235.8288403321, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(3844.306, 1391.6352860033192, (-565.414), 3.834E-20, (-562.0569647800829), (double) (-1.0F));
      assertEquals(5350433.936759056, double1, 0.01);
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection.values();
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[][] doubleArray2 = new double[3][3];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      int[] intArray0 = new int[3];
      intArray0[0] = 113;
      intArray0[1] = 236;
      intArray0[2] = 1649;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double2, 0.01);
      
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) 362.1F;
      doubleArray3[1] = (double) 236;
      doubleArray3[2] = (double) 236;
      doubleArray3[3] = (double) (-1.0F);
      doubleArray3[4] = 1391.6352860033192;
      doubleArray3[5] = (double) 236;
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray3, (-4450.0));
      assertArrayEquals(new double[] {(-654.8225777592849), (-426.7830039942405), (-426.7830039942405), 1.8084025592976294, (-2516.636812817291), (-426.7830039942405)}, doubleArray4, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MathArrays.linearCombination(1.7976931348623157E308, 1.34217729E8, 473.7807568, 0.0);
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[5];
      longArray1[0] = 0L;
      longArray1[1] = (-2356L);
      longArray1[2] = (-9223372036854775808L);
      longArray1[3] = 10000L;
      longArray1[4] = 0L;
      longArray0[0] = longArray1;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,356 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 3176.75826277;
      doubleArray1[1] = 2835.7156068;
      MathArrays.equals(doubleArray0, doubleArray1);
      MathArrays.OrderDirection.values();
      long[] longArray0 = new long[5];
      longArray0[0] = 200L;
      longArray0[1] = (-706L);
      longArray0[2] = 1L;
      longArray0[3] = 508L;
      longArray0[4] = 3139L;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -706 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 168;
      intArray0[1] = 0;
      intArray0[2] = (-315);
      intArray0[3] = 3009;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-315);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.distance(intArray1, intArray0);
      int[] intArray2 = MathArrays.copyOf(intArray0, 3009);
      double[] doubleArray1 = MathArrays.scale(2022.984, doubleArray0);
      int[] intArray3 = new int[5];
      intArray3[0] = 0;
      intArray3[1] = 168;
      intArray3[2] = 168;
      intArray3[3] = 168;
      intArray3[4] = (-315);
      MathArrays.distance1(intArray3, intArray2);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.distance(intArray2, intArray2);
      MathArrays.linearCombination(99225.0, 35.87263, (double) 168, 0.0);
      MathArrays.equals(doubleArray1, doubleArray0);
      Field<Pair<Object, Integer>> field0 = (Field<Pair<Object, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 4686);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 764.091;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(764.091, double0, 0.01);
      
      MathArrays.linearCombination((-4602.9972192), 0.0, 0.0, 764.091, 764.091, Double.NEGATIVE_INFINITY);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1697);
      int[] intArray1 = new int[3];
      intArray1[0] = (-1697);
      intArray1[1] = 599;
      intArray1[2] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 570.0F;
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 570.0F;
      doubleArray0[4] = (double) 570.0F;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) 1.0F;
      doubleArray0[7] = (double) 1.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = (-661);
      intArray0[2] = 0;
      int int1 = (-1578);
      intArray0[3] = (-1578);
      intArray0[4] = 0;
      intArray0[5] = 1280;
      int int2 = 0;
      intArray0[6] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-661);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 314.5481395454;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
//      try { 
        MathArrays.linearCombination(doubleArray0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.checkOrder((double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3470.272485990291);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 41.228;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[6][7];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = 676L;
      longArray1[2] = 0L;
      longArray1[3] = (-1423L);
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = 0L;
      longArray3[1] = 676L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = 676L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = (-1423L);
      longArray4[5] = 0L;
      longArray4[6] = 676L;
      longArray4[7] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = 676L;
      longArray5[1] = (-1423L);
      longArray5[2] = (-1423L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray6[2] = 676L;
      longArray6[3] = 0L;
      longArray6[4] = 0L;
      longArray6[5] = 676L;
      longArray0[5] = longArray6;
//      try { 
        MathArrays.checkNonNegative(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,423 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = 3.834E-20;
      MathArrays.linearCombination((-3.141592653589793), (-442.0006664), (-442.0006664), (-3.141592653589793), (-442.0006664), (-2581.024677930658), (-2950.076), 3.834E-20);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 617, 617);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1976.972675112945;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1976.972675112945}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1519;
      intArray0[1] = 1769;
      intArray0[2] = (-2009);
      intArray0[3] = 523;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-216.0466817690577);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1054.46576886);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1294.0774;
      doubleArray0[8] = 1553.1450793;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(17, doubleArray1.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(1127.1337, (-1718.641), 3.834E-20, 1.34217729E8, 0.0, 1456.25484207);
      assertEquals((-1937138.1893017003), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1846);
      intArray0[1] = 152;
      intArray0[2] = 253;
      intArray0[3] = (-3154);
      intArray0[4] = 0;
      intArray0[5] = (-1243);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2330.55577455);
      doubleArray0[1] = (-3992.85780214909);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (-4,661.112 >= -7,985.716)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = (-1549.286);
      double double1 = 486.4;
      MathArrays.linearCombination(636.5354, (-915.3405011595), (-1549.286), (-1549.286), 2415.0440815076, 486.4, (-3.141592653589793), 663.362029468);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 636.5354;
      doubleArray0[1] = 2415.0440815076;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MathArrays.linearCombination(0.0, 2793.9357754, (-35.221301), (-35.221301), (-6487.81556), 1456.7, 0.0, (-2775.27980517));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-9449560.386207867);
      doubleArray0[1] = 486.78484489489;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-6487.81556);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1376;
      intArray0[1] = 182;
      intArray0[2] = 134217729;
      intArray0[3] = (-1);
      intArray0[4] = 0;
      intArray0[5] = (-389);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 919.6;
      doubleArray0[1] = 1221.6384037262;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1221.6384037262, 0.0, 0.0, 1.0, 919.6}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
//      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 945;
      intArray0[1] = (-1812);
      intArray0[2] = 98;
      intArray0[3] = 950;
      intArray0[4] = (-189);
      intArray0[5] = (-592);
      intArray0[6] = 1;
      int[] intArray1 = new int[1];
      intArray1[0] = 950;
      // Undeclared exception!
//      try { 
        MathArrays.distanceInf(intArray0, intArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2519.182216501339;
      doubleArray0[1] = 2519.182216501339;
      doubleArray0[2] = (-4236.5174);
      MathArrays.scaleInPlace(2519.182216501339, doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
//      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // points 0 and 1 are not strictly increasing (6,346,279.04 >= 6,346,279.04)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3172.3107287;
      doubleArray0[2] = (-29.0);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 4213.35776056;
//      try { 
        MathArrays.checkPositive(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (-1447);
      intArray0[3] = 0;
      intArray0[4] = 1120;
      intArray0[5] = 1156;
      // Undeclared exception!
//      try { 
        MathArrays.copyOf(intArray0, (-1418));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 529;
      intArray0[3] = 278;
      intArray0[4] = 0;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination(0.0, (double) 529, (-3.141592653589793), (double) 0);
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-7.07);
      doubleArray2[4] = (double) (-1);
      doubleArray1[5] = doubleArray2;
      doubleArray1[6] = doubleArray0;
//      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.equals(doubleArray0, doubleArray0);
      int int0 = (-1);
      int int1 = 251;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<String>) null, 251, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      MathArrays.checkNonNegative(longArray0);
      int int0 = 251;
      int int1 = 2804;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray((Field<String>) null, 251, 2804);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        MathArrays.buildArray(field0, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2131.5670989413798;
      doubleArray0[1] = 450.88487045398;
      doubleArray0[2] = 560.0;
      doubleArray0[3] = (-912.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 2743.848546570246;
      doubleArray0[7] = 1206.08;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 303;
      intArray0[2] = 0;
      intArray0[3] = 2030;
      intArray0[4] = (-132);
      intArray0[5] = 0;
      intArray0[6] = 1732;
      intArray0[7] = (-1);
      intArray0[8] = 1947;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, 303, 0, 2030, (-132), 0, 1732, (-1), 1947}, intArray1);
      assertNotSame(intArray1, intArray0);
  }
}
