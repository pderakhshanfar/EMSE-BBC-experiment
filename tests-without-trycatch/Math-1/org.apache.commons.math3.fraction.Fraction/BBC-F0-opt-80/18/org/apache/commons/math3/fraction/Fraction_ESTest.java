/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:25:04 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.divide((-3526));
      String string0 = fraction1.toString();
      assertEquals("-1 / 7052", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction(333);
      Fraction fraction1 = fraction0.THREE_FIFTHS.divide(fraction0);
      assertEquals(0.0018018018F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(2147483647L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.subtract((-3548));
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals((-3548), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.subtract(1735004);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals((short) (-31068), fraction1.shortValue());
      assertEquals((-1735004), fraction1.getNumerator());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(Integer.MIN_VALUE);
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals((-2.14748365E9F), fraction1.floatValue(), 0.01F);
      assertEquals((-4.656612875245797E-10), fraction2.doubleValue(), 0.01);
      assertEquals((-2147483647), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.9699272335463627E-8);
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction0.add(fraction1);
      double double0 = fraction2.percentageValue();
      assertSame(fraction2, fraction1);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(66.66666666666666, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2935.8), (-1));
      double double0 = fraction0.percentageValue();
      assertEquals((-293600.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2935.8), (-1));
      Fraction fraction1 = fraction0.negate();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)2936, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.multiply(629);
      Fraction fraction2 = fraction1.negate();
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals((-314.5F), fraction2.floatValue(), 0.01F);
      assertEquals((-629), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(630, 630);
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = new Fraction((-95), 5);
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-14.25F), fraction2.floatValue(), 0.01F);
      assertEquals((byte) (-19), fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      long long0 = fraction1.longValue();
      assertEquals((-1L), long0);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.reciprocal();
      int int0 = fraction1.intValue();
      assertEquals(5, int0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      int int0 = fraction1.intValue();
      assertEquals((-1), int0);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-898), 1);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-898.0F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5);
      Fraction fraction1 = fraction0.ZERO.multiply(Integer.MIN_VALUE);
      int int0 = fraction1.getNumerator();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0.001000010000100001, fraction0.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = new Fraction(876.264647606);
      Fraction fraction1 = fraction0.TWO_FIFTHS.negate();
      int int0 = fraction1.getNumerator();
      assertEquals((-2), int0);
      assertEquals(495, fraction0.getDenominator());
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      float float0 = fraction0.floatValue();
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = new Fraction((-454), (-3047));
      Fraction fraction1 = fraction0.TWO.add((-3047));
      float float0 = fraction1.floatValue();
      assertEquals(454, fraction0.getNumerator());
      assertEquals((-3045.0F), float0, 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      double double0 = fraction0.doubleValue();
      assertEquals(0.6666666666666666, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      Fraction fraction2 = fraction0.subtract(fraction1);
      double double0 = fraction2.doubleValue();
      assertEquals((-0.4), double0, 0.01);
      assertEquals(5, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction(2.925681159240093E-8);
      Fraction fraction1 = Fraction.getReducedFraction((-4822), (-4822));
      Fraction fraction2 = fraction1.MINUS_ONE.subtract(fraction0);
      Fraction fraction3 = fraction1.divide(fraction2);
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals((-1.0), fraction3.doubleValue(), 0.01);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5);
      Fraction fraction1 = fraction0.ZERO.multiply(Integer.MIN_VALUE);
      assertEquals(0.001000010000100001, fraction0.percentageValue(), 0.01);
      
      Fraction fraction2 = fraction1.divide(fraction0);
      assertTrue(fraction2.equals((Object)fraction1));
      assertEquals(0L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = new Fraction(333);
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(666L, fraction2.longValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.ZERO.divide(3611);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction0.divide(fraction1);
      Fraction fraction3 = fraction2.divide(2);
      assertFalse(fraction3.equals((Object)fraction2));
      assertEquals(1.0, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = new Fraction(2.925681159240093E-8);
      Fraction fraction1 = fraction0.subtract((-4822));
      Fraction fraction2 = fraction1.divide((-4822));
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-1.0), fraction2.doubleValue(), 0.01);
      assertEquals((byte) (-42), fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction((-637.4));
      Fraction fraction1 = fraction0.MINUS_ONE.add(fraction0);
      assertEquals((-3192), fraction1.getNumerator());
      assertEquals((-638.4F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.subtract((-3548));
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(354840.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.THREE_QUARTERS.add((-898));
      assertEquals((-3589), fraction1.getNumerator());
      assertEquals((-89725.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.TWO_FIFTHS.add(5);
      assertEquals(5.4F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE_FIFTH.abs();
      fraction1.hashCode();
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.divide((-3548));
      Fraction fraction2 = fraction0.subtract((-3548));
      Fraction fraction3 = fraction2.multiply((-2897));
      Fraction fraction4 = fraction3.abs();
      // Undeclared exception!
//      try { 
        fraction1.subtract(fraction4);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow, numerator too large after multiply: -182,351,861,997
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
//      try { 
        fraction0.ZERO.reciprocal();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_QUARTER.multiply(Integer.MAX_VALUE);
      // Undeclared exception!
//      try { 
        fraction1.multiply(fraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, 3);
      // Undeclared exception!
//      try { 
        fraction0.ONE.divide(0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
//      try { 
        fraction0.compareTo((Fraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
//      try { 
        fraction0.add((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.getReducedFraction(Integer.MIN_VALUE, 85);
      Fraction fraction2 = fraction1.divide(fraction0);
      // Undeclared exception!
//      try { 
        fraction2.abs();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/85, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(5, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 5/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = new Fraction(2.925681159240093E-8);
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction(2.925681159240093E-8);
      String string0 = fraction0.toString();
      assertEquals("0", string0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-662));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-662, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(3, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 3/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-662), Integer.MIN_VALUE);
      assertEquals(331, fraction0.getNumerator());
      assertEquals(3.082677721977234E-7, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 1);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(322, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 322/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = new Fraction(6263);
      Fraction fraction1 = fraction0.subtract(6263);
      // Undeclared exception!
//      try { 
        fraction1.ZERO.divide(fraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // the fraction to divide by must not be zero: 0/1
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction(3275.8343028996);
      // Undeclared exception!
//      try { 
        fraction0.ONE_FIFTH.divide((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1399), (-1199));
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.multiply(fraction1);
      Fraction fraction3 = fraction2.negate();
      long long0 = fraction3.longValue();
      assertEquals(0.0F, fraction3.floatValue(), 0.01F);
      assertEquals(116.68056713928274, fraction0.percentageValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = new Fraction((-637.4));
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.9305076599121094, 271);
      // Undeclared exception!
//      try { 
        fraction0.ONE_THIRD.multiply((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(16.666666666666664, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = new Fraction(2.925681159240093E-8);
      Fraction fraction1 = Fraction.getReducedFraction((-4822), (-4822));
      Fraction fraction2 = fraction0.add(fraction1);
      Fraction fraction3 = fraction2.MINUS_ONE.subtract(fraction0);
      Fraction fraction4 = fraction3.add(fraction2);
      assertTrue(fraction4.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction(6263);
      Fraction fraction1 = fraction0.subtract(6263);
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals((-6263), fraction2.getNumerator());
      assertEquals((byte)119, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      // Undeclared exception!
//      try { 
        fraction0.subtract((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 85);
      // Undeclared exception!
//      try { 
        fraction0.negate();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/85, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.getReducedFraction(2441, 10);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertEquals(244.1, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction(333);
      boolean boolean0 = fraction0.equals((Object) null);
      assertEquals(333, fraction0.getNumerator());
      assertFalse(boolean0);
      assertEquals(333, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.divide(fraction0);
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.divide(fraction0);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
      assertEquals((byte)1, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = new Fraction(2.925681159240093E-8);
      Fraction fraction1 = fraction0.MINUS_ONE.subtract(fraction0);
      Fraction fraction2 = fraction1.abs();
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(3, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 3/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, (-2147483646));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-2,147,483,646, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
//      try { 
        fraction0.multiply(249);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 249/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = new Fraction(1487.01474521, 202);
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertSame(fraction2, fraction0);
      assertEquals(1487.0146F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(1657.3536868, (-18.430862426757812), 5);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert 1,657.354 to fraction after 5 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((double) 1, 1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-4.503599627370496E15));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -4,503,599,627,370,496 to fraction (-4,503,599,627,370,496/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-1.0), 131);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -1 to fraction (-9,223,372,036,854,775,806/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = new Fraction(2.925681159240093E-8);
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = new Fraction(2.925681159240093E-8);
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = new Fraction(876.264647606);
      int int0 = fraction0.getNumerator();
      assertEquals(433751, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      int int0 = fraction0.intValue();
      assertEquals(20.0, fraction0.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.subtract((-3548));
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(3548.2F, fraction1.floatValue(), 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = new Fraction(876.264647606);
      long long0 = fraction0.longValue();
      assertEquals(87626.46464646465, fraction0.percentageValue(), 0.01);
      assertEquals(876L, long0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      FractionField fractionField0 = fraction0.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.divide((-3548));
      Fraction fraction2 = fraction0.multiply(4187);
      Fraction fraction3 = fraction1.add(fraction2);
      Fraction fraction4 = fraction2.divide(fraction3);
      // Undeclared exception!
//      try { 
        fraction1.add(fraction4);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow, numerator too large after multiply: 52,704,257,753
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.add(710);
      assertEquals(710.2F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction(876.264647606);
      int int0 = fraction0.getDenominator();
      assertEquals(495, int0);
  }
}
