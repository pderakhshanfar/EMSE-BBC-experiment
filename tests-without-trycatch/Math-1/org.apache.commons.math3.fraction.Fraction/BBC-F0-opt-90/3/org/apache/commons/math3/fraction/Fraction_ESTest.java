/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 14:03:48 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = new Fraction(3);
      Fraction fraction1 = fraction0.THREE_FIFTHS.subtract(fraction0);
      String string0 = fraction1.toString();
      assertEquals("-12 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = new Fraction((-911));
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = new Fraction(202);
      Fraction fraction1 = fraction0.THREE_FIFTHS.subtract(132);
      Fraction fraction2 = fraction1.multiply(fraction1);
      assertEquals(17265.96F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.THREE_QUARTERS.add(990);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(99075.0, fraction1.percentageValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(4, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1), 444);
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-0.0022522523F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      assertEquals(2.147483647E11, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Fraction fraction0 = new Fraction(202);
      Fraction fraction1 = fraction0.ONE_THIRD.multiply(3);
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(20100.0, fraction2.percentageValue(), 0.01);
      assertEquals(1L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Fraction fraction0 = new Fraction(202);
      Fraction fraction1 = fraction0.ONE.add(3);
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals((-198), fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.subtract(0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
      
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = new Fraction(202);
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(202, fraction1.getDenominator());
      assertEquals(202, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3340), (-3643));
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(3643, fraction0.getDenominator());
      assertEquals((-1), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.FOUR_FIFTHS.subtract(fraction0);
      double double0 = fraction1.percentageValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(80.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      double double0 = fraction0.percentageValue();
      assertEquals(33.33333333333333, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = new Fraction(202);
      Fraction fraction1 = fraction0.ZERO.negate();
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)202, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3340), (-3643));
      Fraction fraction1 = fraction0.MINUS_ONE.negate();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.9168268F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = new Fraction(629);
      Fraction fraction1 = fraction0.MINUS_ONE.multiply(fraction0);
      assertEquals(629, fraction0.getNumerator());
      assertEquals((-629.0F), fraction1.floatValue(), 0.01F);
      assertEquals(629L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, (-269));
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals((-0.0037174721189591076), fraction2.doubleValue(), 0.01);
      assertEquals((-0.0111524165F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = new Fraction(202);
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(40804, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = new Fraction(202);
      Fraction fraction1 = fraction0.subtract(88);
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(23028, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.multiply(34775);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3340), (-3643));
      Fraction fraction1 = fraction0.multiply(1843);
      assertEquals(6155620, fraction1.getNumerator());
      assertEquals(91.68267911062311, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3340), (-3643));
      long long0 = fraction0.longValue();
      assertEquals(0.9168268F, fraction0.floatValue(), 0.01F);
      assertEquals(3643, fraction0.getDenominator());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = new Fraction(202);
      Fraction fraction1 = fraction0.THREE_FIFTHS.subtract(132);
      long long0 = fraction1.longValue();
      assertEquals((-13140.0), fraction1.percentageValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-131L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3340), (-3643));
      int int0 = fraction0.intValue();
      assertEquals(91.68267911062311, fraction0.percentageValue(), 0.01);
      assertEquals(3643, fraction0.getDenominator());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE_THIRD.multiply(263);
      Fraction fraction2 = fraction0.THREE_FIFTHS.subtract(fraction1);
      int int0 = fraction2.intValue();
      assertEquals((-1306), fraction2.getNumerator());
      assertEquals((-87.06666666666666), fraction2.doubleValue(), 0.01);
      assertEquals((-87), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3931, (-3659));
      assertEquals((-1.074337250614922), fraction0.doubleValue(), 0.01);
      assertEquals((-3931), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
      assertEquals(1L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, (-269));
      int int0 = fraction0.getNumerator();
      assertEquals((-3), int0);
      assertEquals((-0.011152416356877323), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      int int0 = fraction0.getDenominator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      float float0 = fraction0.floatValue();
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, (-269));
      double double0 = fraction0.doubleValue();
      assertEquals(269, fraction0.getDenominator());
      assertEquals((-0.011152416356877323), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals(0, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.subtract(5);
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-525.0), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.ZERO.divide(4);
      Fraction fraction2 = fraction1.subtract(0);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5);
      Fraction fraction1 = fraction0.THREE_QUARTERS.reciprocal();
      Fraction fraction2 = fraction1.divide(1);
      assertEquals(4, fraction2.getNumerator());
      assertEquals(0.001000010000100001, fraction0.percentageValue(), 0.01);
      assertEquals(4, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1598.8692509817));
      Fraction fraction1 = fraction0.divide(1457);
      assertEquals((-452480), fraction1.getNumerator());
      assertEquals((-1.097370801613267), fraction1.doubleValue(), 0.01);
      assertEquals((-452480), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = new Fraction((-3643), (-3643));
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3340), (-3643));
      Fraction fraction1 = fraction0.ONE_HALF.divide(2);
      Fraction fraction2 = fraction1.add(fraction1);
      assertEquals(0.5F, fraction2.floatValue(), 0.01F);
      assertEquals(0.9168268F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.subtract(105);
      Fraction fraction2 = fraction1.add(105);
      assertEquals((-105), fraction1.getNumerator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.TWO_QUARTERS.abs();
      assertNotSame(fraction1, fraction0);
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
//      try { 
        fraction0.subtract(32607166);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      // Undeclared exception!
//      try { 
        fraction0.ZERO.reciprocal();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
//      try { 
        fraction0.multiply((-879));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction -879/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5);
      // Undeclared exception!
//      try { 
        fraction0.divide(0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
//      try { 
        fraction0.compareTo((Fraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = new Fraction((-224), Integer.MAX_VALUE);
      // Undeclared exception!
//      try { 
        fraction0.add(fraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
//      try { 
        fraction0.add((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction0.abs();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/1, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(0, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 0/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-2098), 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction -2,098/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Fraction fraction0 = new Fraction(202);
      double double0 = fraction0.doubleValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(202.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4, 4);
      String string0 = fraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = new Fraction((-933.83));
      String string0 = fraction0.ONE_HALF.toString();
      assertEquals("1 / 2", string0);
      assertEquals(100, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-821));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-821, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2, Integer.MIN_VALUE);
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((-9.313225746154785E-8), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(1843, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 1,843/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-269));
      assertEquals(0.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
//      try { 
        fraction0.divide(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // the fraction to divide by must not be zero: 0/1
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2848.7943584));
      // Undeclared exception!
//      try { 
        fraction0.divide((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE_THIRD.multiply(fraction0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3340), (-3643));
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(3643, fraction0.getDenominator());
      assertEquals(91.68267911062311, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      // Undeclared exception!
//      try { 
        fraction0.multiply((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
//      try { 
        fraction0.multiply(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.THREE_QUARTERS.add(fraction0);
      assertEquals(1.25, fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = new Fraction((-933.83));
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals((-93383), fraction0.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
//      try { 
        fraction0.add(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = new Fraction(Double.NaN, (-1008));
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals((byte) (-1), fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertSame(fraction1, fraction0);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-40.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = new Fraction((-5448));
      // Undeclared exception!
//      try { 
        fraction0.TWO.subtract((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-250), (-250));
      Fraction fraction1 = fraction0.multiply(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction1.negate();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/1, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      Fraction fraction2 = fraction0.subtract(fraction1);
      boolean boolean0 = fraction2.equals(fraction0);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(boolean0);
      assertEquals(0.2, fraction2.doubleValue(), 0.01);
      assertFalse(fraction0.equals((Object)fraction2));
      assertEquals(5, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4, 4);
      Fraction fraction1 = fraction0.reciprocal();
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      boolean boolean0 = fraction0.equals("aa:{C<F^da]%6'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4, 4);
      Fraction fraction1 = fraction0.TWO_QUARTERS.add((-965));
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals((-1929), fraction1.getNumerator());
      assertFalse(boolean0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4, 4);
      Fraction fraction1 = fraction0.add(4);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(500.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4, 4);
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = fraction0.abs();
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(Float.POSITIVE_INFINITY, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4, 4);
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.abs();
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-434), Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -434/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, (-95));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-95, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
//      try { 
        fraction0.add((-1782));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Fraction fraction0 = new Fraction(4011.1407971, (-2655));
      assertEquals(4011.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-2241.40756716335), 0.0, (-3200));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert -2,241.408 to fraction after -3,200 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((double) (-1592), (-3));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -1,592 to fraction (1,593/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((double) (-1853), 346);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -1,853 to fraction (-9,223,372,036,854,773,954/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.8532182366470806E-6, 698.82, 444);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, (-269));
      double double0 = fraction0.percentageValue();
      assertEquals((-1.1152416356877324), double0, 0.01);
      assertEquals(269, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Fraction fraction0 = new Fraction(202);
      fraction0.hashCode();
      assertEquals(202, fraction0.getNumerator());
      assertEquals(20200.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Fraction fraction0 = new Fraction(202);
      int int0 = fraction0.intValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(202, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Fraction fraction0 = new Fraction(202);
      long long0 = fraction0.longValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(202L, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Fraction fraction0 = new Fraction((-933.83));
      fraction0.getField();
      assertEquals((-93383), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      float float0 = fraction0.floatValue();
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals((-2.14748365E9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1), 444);
      int int0 = fraction0.getDenominator();
      assertEquals((-0.22522522522522523), fraction0.percentageValue(), 0.01);
      assertEquals(444, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Fraction fraction0 = new Fraction((-933.83));
      Fraction fraction1 = fraction0.multiply(1139);
      Fraction fraction2 = fraction0.ONE_THIRD.add(fraction1);
      Fraction fraction3 = fraction1.multiply((-2572));
      // Undeclared exception!
//      try { 
        fraction3.subtract(fraction2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow, numerator too large after multiply: -3,615,894,529
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }
}
