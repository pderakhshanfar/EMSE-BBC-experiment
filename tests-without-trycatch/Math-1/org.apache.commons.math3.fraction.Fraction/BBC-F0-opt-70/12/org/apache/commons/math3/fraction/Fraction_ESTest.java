/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:09:31 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4587, (-1770));
      String string0 = fraction0.toString();
      assertEquals("-1529 / 590", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction(296);
      Fraction fraction1 = fraction0.ONE.negate();
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-0.0033783783783783786), fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE_HALF.divide(4);
      fraction1.hashCode();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.125, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.getReducedFraction((-842), (-842));
      Fraction fraction2 = fraction0.abs();
      boolean boolean0 = fraction2.equals(fraction1);
      assertFalse(boolean0);
      assertEquals(0.3333333333333333, fraction2.doubleValue(), 0.01);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertFalse(fraction1.equals((Object)fraction2));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.ONE.reciprocal();
      Fraction fraction2 = fraction1.THREE_QUARTERS.abs();
      boolean boolean0 = fraction1.equals(fraction2);
      assertEquals(1, fraction1.getDenominator());
      assertFalse(boolean0);
      assertEquals(0.75F, fraction2.floatValue(), 0.01F);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.031);
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0.031007751937984496, fraction0.doubleValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.add(629);
      Fraction fraction2 = fraction1.subtract(629);
      Fraction fraction3 = fraction2.subtract(fraction0);
      assertEquals(0.0, fraction3.doubleValue(), 0.01);
      assertEquals(0.6, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.ONE.reciprocal();
      Fraction fraction2 = fraction1.subtract(1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.TWO_QUARTERS.subtract((-2009));
      assertEquals(4019, fraction1.getNumerator());
      assertEquals(2009.5, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.subtract(1);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-0.2F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1838), (-1838));
      Fraction fraction1 = fraction0.TWO_THIRDS.negate();
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals(2, fraction2.getDenominator());
      assertEquals((-1.5F), fraction2.floatValue(), 0.01F);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 60);
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, 0.8140237, 37);
      Fraction fraction1 = fraction0.subtract(2);
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals((-2), fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-0.5F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, Integer.MAX_VALUE);
      assertEquals(1, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(100000.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4587, (-1770));
      double double0 = fraction0.percentageValue();
      assertEquals(590, fraction0.getDenominator());
      assertEquals((-259.1525423728814), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, 0.8140237, 37);
      Fraction fraction1 = fraction0.MINUS_ONE.negate();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.ZERO.add((-2062));
      Fraction fraction2 = fraction0.ONE_FIFTH.multiply(fraction1);
      assertEquals((-412.4F), fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.getReducedFraction(107, 107);
      Fraction fraction2 = fraction0.multiply(428);
      Fraction fraction3 = fraction2.multiply(fraction1);
      assertEquals(1L, fraction1.longValue());
      assertEquals(142.66666666666666, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.ZERO.multiply(1091);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = new Fraction(259.8382478680933, 2145.290455, (-1565));
      Fraction fraction1 = fraction0.THREE_FIFTHS.abs();
      long long0 = fraction1.longValue();
      assertEquals(0.6, fraction1.doubleValue(), 0.01);
      assertEquals(259.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4587, (-1770));
      long long0 = fraction0.longValue();
      assertEquals(590, fraction0.getDenominator());
      assertEquals((-2.5915253F), fraction0.floatValue(), 0.01F);
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction(209);
      int int0 = fraction0.intValue();
      assertEquals(209, int0);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.TWO.negate();
      int int0 = fraction1.intValue();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2), int0);
      assertEquals(75.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction(161.845);
      float float0 = fraction0.floatValue();
      assertEquals(161.845F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
      float float0 = fraction1.floatValue();
      assertEquals((-0.6F), float0, 0.01F);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      double double0 = fraction1.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.divide((-853));
      double double0 = fraction1.doubleValue();
      assertEquals((-4), fraction1.getNumerator());
      assertEquals((-9.378663540445487E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = new Fraction(297, (-4538));
      Fraction fraction1 = fraction0.add(1045);
      Fraction fraction2 = fraction1.abs();
      Fraction fraction3 = fraction2.divide(fraction1);
      assertEquals(104493.45526663729, fraction2.percentageValue(), 0.01);
      assertEquals(1.0, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction0.TWO.divide(fraction1);
      assertEquals((-250.0), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.divide(16);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.TWO_THIRDS.subtract(1044);
      Fraction fraction2 = fraction1.divide((-1));
      assertEquals(3130, fraction2.getNumerator());
      assertEquals((-3130), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.divide(1);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.TWO_THIRDS.negate();
      Fraction fraction2 = Fraction.TWO_THIRDS;
      Fraction fraction3 = fraction1.add(fraction2);
      assertEquals(0.0F, fraction3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.getReducedFraction(107, 107);
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(1.3333333333333333, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ZERO.add(0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.TWO.divide(Integer.MAX_VALUE);
      // Undeclared exception!
//      try { 
        fraction1.THREE_FIFTHS.subtract(fraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
//      try { 
        fraction0.ZERO.reciprocal();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, Integer.MAX_VALUE);
      Fraction fraction1 = fraction0.FOUR_FIFTHS.add(Integer.MAX_VALUE);
      // Undeclared exception!
//      try { 
        fraction0.TWO.multiply(fraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 100.0, 409);
      // Undeclared exception!
//      try { 
        fraction0.multiply(409);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 409/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      // Undeclared exception!
//      try { 
        fraction0.divide(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 2/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = new Fraction(1835.581637);
      // Undeclared exception!
//      try { 
        fraction0.compareTo((Fraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(94, 213);
      // Undeclared exception!
//      try { 
        fraction0.FOUR_FIFTHS.add((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 100.0, 409);
      // Undeclared exception!
//      try { 
        fraction0.add(80);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 2147275417);
      // Undeclared exception!
//      try { 
        fraction0.abs();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/2,147,275,417, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, 0.8140237, 37);
      Fraction fraction1 = fraction0.TWO.multiply(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = new Fraction((-99), (-99));
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-926), 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction -926/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = new Fraction(209);
      double double0 = fraction0.doubleValue();
      assertEquals(209, fraction0.getNumerator());
      assertEquals(209.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1154), 2);
      String string0 = fraction0.toString();
      assertEquals("-577", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 60);
      String string0 = fraction0.TWO_QUARTERS.toString();
      assertEquals("1 / 2", string0);
      assertEquals(Float.POSITIVE_INFINITY, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1752));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-1,752, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(629, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 629/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 203);
      assertEquals(0, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction((-3220), 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction -3,220/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      // Undeclared exception!
//      try { 
        fraction0.divide(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // the fraction to divide by must not be zero: 0/1
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      // Undeclared exception!
//      try { 
        fraction0.divide((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 60);
      Fraction fraction1 = fraction0.ONE_FIFTH.multiply((-583));
      Fraction fraction2 = fraction0.FOUR_FIFTHS.divide(fraction1);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-0.0068610637F), fraction2.floatValue(), 0.01F);
      assertEquals(9223372036854775807L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      // Undeclared exception!
//      try { 
        fraction0.multiply((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction(297, (-4538));
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction1.add((-7277612));
      // Undeclared exception!
//      try { 
        fraction0.add(fraction2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow, numerator too large after multiply: -66,051,600,299
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.TWO_THIRDS.negate();
      Fraction fraction2 = new Fraction(311, (-861));
      Fraction fraction3 = fraction1.add(fraction2);
      assertEquals((-295), fraction3.getNumerator());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.THREE_FIFTHS.subtract(fraction0);
      assertEquals(0.4, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = new Fraction(2.0463630789890885E-12, 65.671370999, (-46));
      Fraction fraction1 = Fraction.getReducedFraction((-46), (-46));
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      assertSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1154), 2);
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(577.0F, fraction1.floatValue(), 0.01F);
      assertEquals((-577.0F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
//      try { 
        fraction0.subtract((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 2147275417);
      // Undeclared exception!
//      try { 
        fraction0.negate();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/2,147,275,417, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE_HALF;
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = new Fraction((double) 1);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      boolean boolean0 = fraction0.equals(": `'+l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = new Fraction(2260, 177);
      Fraction fraction1 = Fraction.getReducedFraction(177, 177);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(177, fraction0.getDenominator());
      assertFalse(boolean0);
      assertEquals(12L, fraction0.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = Fraction.ONE_QUARTER;
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.TWO_FIFTHS.multiply(861);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(344.4, fraction1.doubleValue(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 60);
      Fraction fraction1 = fraction0.abs();
      assertEquals(Double.POSITIVE_INFINITY, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(819, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 819/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 100.0, 409);
      // Undeclared exception!
//      try { 
        fraction0.subtract(3);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(Double.NEGATIVE_INFINITY);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert -\u221E to fraction after 100 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(0.0, 0.0, (-1746));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((double) (-107), (-107));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -107 to fraction (-9,223,372,036,854,775,700/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(2.85040095144011776E17, 37);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 285,040,095,144,011,776 to fraction (285,040,095,144,011,776/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3409.033676), (-2675));
      assertEquals((-3410.0), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = new Fraction(209);
      double double0 = fraction0.percentageValue();
      assertEquals(209, fraction0.getNumerator());
      assertEquals(20900.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = new Fraction(297, (-4538));
      int int0 = fraction0.getNumerator();
      assertEquals((-0.06544733F), fraction0.floatValue(), 0.01F);
      assertEquals((-297), int0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      int int0 = fraction0.intValue();
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 60);
      Fraction fraction1 = fraction0.THREE_QUARTERS.subtract(2183);
      assertEquals((-8729), fraction1.getNumerator());
      assertEquals((-2182.25F), fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(Double.POSITIVE_INFINITY, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      assertEquals(2.147483647E11, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 60);
      Fraction fraction1 = fraction0.FOUR_FIFTHS.divide(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1154), 2);
      fraction0.ONE_HALF.getField();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short) (-577), fraction0.shortValue());
      assertEquals((-577), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Fraction fraction0 = new Fraction(209);
      long long0 = fraction0.longValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(209L, long0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1154), 2);
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
      assertEquals((-577.0F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 60);
      Fraction fraction1 = fraction0.ONE_FIFTH.multiply((-583));
      Fraction fraction2 = fraction1.TWO_THIRDS.divide(99);
      Fraction fraction3 = fraction1.subtract(fraction2);
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((-11660.6734006734), fraction3.percentageValue(), 0.01);
      assertEquals(297, fraction2.getDenominator());
  }
}
