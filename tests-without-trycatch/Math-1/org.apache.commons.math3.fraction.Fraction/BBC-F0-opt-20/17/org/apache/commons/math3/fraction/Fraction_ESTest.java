/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:21:20 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3548, (-2550));
      String string0 = fraction0.toString();
      assertEquals("-1774 / 1275", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.divide(998);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(1, fraction1.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals(5.01002004008016E-4, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = new Fraction(701.6112688545323, 15, 2121);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(boolean0);
      assertEquals(70100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3747.3, 161);
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(9223372036854775807L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(1);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2572));
      Fraction fraction1 = fraction0.FOUR_FIFTHS.abs();
      Fraction fraction2 = fraction1.subtract((-1));
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.8F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction(973);
      Fraction fraction1 = fraction0.FOUR_FIFTHS.abs();
      Fraction fraction2 = fraction1.subtract(1);
      assertEquals(5, fraction2.getDenominator());
      assertEquals((-0.2F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction(2, (-1293));
      Fraction fraction1 = fraction0.FOUR_FIFTHS.reciprocal();
      assertEquals(5, fraction1.getNumerator());
      assertEquals(125.0, fraction1.percentageValue(), 0.01);
      assertEquals((-0.15467904098994587), fraction0.percentageValue(), 0.01);
      assertEquals((-2), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.5, 1.5, (-996));
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals((-100.0), fraction2.percentageValue(), 0.01);
      assertEquals((-1L), fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.negate();
      double double0 = fraction1.percentageValue();
      assertEquals((-50.0), double0, 0.01);
      assertEquals(2, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.ZERO.negate();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.TWO.multiply(fraction1);
      assertEquals(1.5F, fraction2.floatValue(), 0.01F);
      assertEquals(3, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(226);
      Fraction fraction2 = fraction0.multiply(226);
      Fraction fraction3 = fraction2.multiply(fraction1);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((byte)94, fraction3.byteValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction(5);
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals(5, fraction0.getNumerator());
      assertEquals((-25L), fraction2.longValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = new Fraction(2, (-1293));
      Fraction fraction1 = fraction0.ONE_FIFTH.add(fraction0);
      Fraction fraction2 = fraction1.multiply((-1293));
      assertEquals((-256.6F), fraction2.floatValue(), 0.01F);
      assertEquals(5, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = new Fraction(2, (-1293));
      long long0 = fraction0.longValue();
      assertEquals(1293, fraction0.getDenominator());
      assertEquals((-0.0015467904F), fraction0.floatValue(), 0.01F);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = new Fraction(2, (-1293));
      Fraction fraction1 = fraction0.subtract(369);
      Fraction fraction2 = fraction0.subtract(fraction1);
      long long0 = fraction2.longValue();
      assertEquals((-2), fraction0.getNumerator());
      assertEquals(369.0, fraction2.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(369L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.add(136);
      int int0 = fraction1.intValue();
      assertEquals(136, int0);
      assertEquals(0.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = new Fraction(1535, 1535, 1535);
      Fraction fraction2 = fraction0.THREE_FIFTHS.subtract(fraction1);
      int int0 = fraction2.intValue();
      assertEquals((-153440.0), fraction2.percentageValue(), 0.01);
      assertEquals((-1534), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(928, 928);
      Fraction fraction1 = fraction0.add((-1));
      int int0 = fraction1.getNumerator();
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.subtract(2694);
      int int0 = fraction1.getNumerator();
      assertEquals((-2692), int0);
      assertEquals((-269200.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction(2, (-1293));
      int int0 = fraction0.getDenominator();
      assertEquals(1293, int0);
      assertEquals((-0.15467904098994587), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2572));
      Fraction fraction1 = fraction0.FOUR_FIFTHS.abs();
      float float0 = fraction1.floatValue();
      assertEquals(0.8F, float0, 0.01F);
      assertEquals((-2572.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction(2, (-1293));
      Fraction fraction1 = fraction0.ONE_FIFTH.add(fraction0);
      double double0 = fraction1.doubleValue();
      assertEquals(0.19845320959010054, double0, 0.01);
      assertEquals(1293, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(928, 928);
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction(2, (-1293));
      Fraction fraction1 = fraction0.ONE.divide(fraction0);
      assertEquals(1293, fraction0.getDenominator());
      assertEquals((-64650.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.divide(226);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction(2, (-1293));
      Fraction fraction1 = fraction0.subtract(369);
      Fraction fraction2 = fraction1.divide(2);
      fraction2.divide(Integer.MAX_VALUE);
      assertEquals((-18450.077339520496), fraction2.percentageValue(), 0.01);
      assertEquals((-477119), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = new Fraction(2, (-1293));
      Fraction fraction1 = fraction0.subtract(369);
      Fraction fraction2 = fraction1.divide(2);
      Fraction fraction3 = fraction1.TWO_FIFTHS.add(fraction2);
      assertEquals((-184.10077339520495), fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = new Fraction(2, (-1293));
      Fraction fraction1 = fraction0.TWO_FIFTHS.add(811);
      assertEquals((-2), fraction0.getNumerator());
      assertEquals(811.4, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction(5);
      Fraction fraction1 = fraction0.ZERO.abs();
      assertEquals(5, fraction0.getNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals((short)5, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3747.3, 161);
      Fraction fraction1 = fraction0.abs();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(9223372036854775807L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1190.95989));
      Fraction fraction1 = fraction0.multiply((-2147483642));
      // Undeclared exception!
//      try { 
        fraction0.TWO_QUARTERS.subtract(fraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
//      try { 
        fraction0.subtract((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3747.3, 161);
      // Undeclared exception!
//      try { 
        fraction0.subtract((-91));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      // Undeclared exception!
//      try { 
        fraction0.reciprocal();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.divide((-2147483644));
      // Undeclared exception!
//      try { 
        fraction0.multiply(fraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
//      try { 
        fraction0.divide(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
//      try { 
        fraction0.compareTo((Fraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3747.3, 161);
      // Undeclared exception!
//      try { 
        fraction0.add(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3747.3, 161);
      // Undeclared exception!
//      try { 
        fraction0.add(1721);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(1.0, 1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(7.040929983606558E8);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 704,092,998.361 to fraction (7,745,022,982/11)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 29);
      // Undeclared exception!
//      try { 
        fraction0.negate();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/29, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(705, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 705/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2572));
      double double0 = fraction0.doubleValue();
      assertEquals((-2572), fraction0.getNumerator());
      assertEquals((-2572.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      String string0 = fraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3548, 5);
      String string0 = fraction0.toString();
      assertEquals("3548 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1610612736));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-1,610,612,736, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(3, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 3/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(154, Integer.MIN_VALUE);
      assertEquals((-77), fraction0.getNumerator());
      assertEquals((-7.1711838245391846E-6), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 4);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(1547, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1,547/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, 3);
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.TWO_QUARTERS.divide(fraction1);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(66.66666666666666, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
//      try { 
        fraction0.ONE_QUARTER.divide((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, 3);
      // Undeclared exception!
//      try { 
        fraction0.TWO_QUARTERS.divide(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // the fraction to divide by must not be zero: 0/1
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.THREE_FIFTHS.multiply(fraction0);
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      // Undeclared exception!
//      try { 
        fraction0.ONE_FIFTH.multiply((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2572));
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2572), fraction0.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2550));
      Fraction fraction1 = Fraction.getReducedFraction(3548, (-2550));
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction2.divide((-21475));
      // Undeclared exception!
//      try { 
        fraction2.add(fraction3);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow, numerator too large after multiply: -23,259,749,208
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = new Fraction(2, (-1293));
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals((-0.0015467904098994587), fraction0.doubleValue(), 0.01);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3548, 5);
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(141920.0, fraction1.percentageValue(), 0.01);
      assertEquals((byte) (-59), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
//      try { 
        fraction0.TWO_FIFTHS.add((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2572));
      Fraction fraction1 = fraction0.negate();
      assertEquals(2572, fraction1.getNumerator());
      assertEquals((-2572), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = new Fraction(1.0, 50.0, 629);
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.THREE_QUARTERS.multiply(15);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(45, fraction1.getNumerator());
      assertFalse(boolean0);
      assertEquals(11.25F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ONE;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = new Fraction(973);
      Fraction fraction1 = fraction0.FOUR_FIFTHS.abs();
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((byte) (-51), fraction0.byteValue());
      assertEquals(1, int0);
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2572));
      Fraction fraction1 = fraction0.FOUR_FIFTHS.abs();
      Fraction fraction2 = fraction0.subtract(fraction1);
      int int0 = fraction2.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals((-12864), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = new Fraction(973);
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(973.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 29);
      // Undeclared exception!
//      try { 
        fraction0.abs();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/29, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-2782), Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,782/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(3266.884118413692, 0.0, 5);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert 3,266.884 to fraction after 5 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MAX_VALUE, 2143.4263267231086, (-3249476));
      assertEquals(2147483647L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, 1042.70285020681, 1417);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction(3928.07396392, (-2407));
      assertEquals((short)3928, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      double double0 = fraction0.percentageValue();
      assertEquals(50.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2572));
      float float0 = fraction0.floatValue();
      assertEquals((-2572.0F), float0, 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(928, 928);
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      fraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      int int0 = fraction0.intValue();
      assertEquals(80.0, fraction0.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3747.3, 161);
      Fraction fraction1 = fraction0.reciprocal();
      fraction0.add(fraction1);
      assertEquals(Float.POSITIVE_INFINITY, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2572));
      long long0 = fraction0.longValue();
      assertEquals((-2572), fraction0.getNumerator());
      assertEquals((-2572L), long0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2572));
      fraction0.getField();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2572.0), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2572));
      Fraction fraction1 = fraction0.add((-1));
      assertEquals((-2573), fraction1.getNumerator());
      assertEquals((-257200.0), fraction0.percentageValue(), 0.01);
      assertEquals((-257300.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3747.3, 161);
      int int0 = fraction0.getDenominator();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, int0);
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3747.3, 161);
      // Undeclared exception!
//      try { 
        fraction0.multiply(161);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 161/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }
}
