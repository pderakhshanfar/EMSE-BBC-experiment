/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 14:22:39 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = new Fraction(3461, (-1090));
      String string0 = fraction0.toString();
      assertEquals("-3461 / 1090", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction((-19), 539);
      Fraction fraction1 = fraction0.multiply(539);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertEquals((-19), fraction0.getNumerator());
      assertEquals((-1900.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3, 3);
      Fraction fraction1 = fraction0.ONE_HALF.subtract(fraction0);
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals((-0.5F), fraction1.floatValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2512), (-2512));
      Fraction fraction1 = fraction0.ZERO.subtract((-1747));
      Fraction fraction2 = fraction0.ONE.subtract(fraction1);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-1746), fraction2.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction(3461, (-1090));
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals((-1090), fraction1.getNumerator());
      assertEquals((-317.5229357798165), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3, 3);
      Fraction fraction1 = fraction0.ONE_HALF.subtract(fraction0);
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals((-50.0), fraction1.percentageValue(), 0.01);
      assertEquals((-2.0), fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2951), 4);
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      Fraction fraction2 = fraction0.add(fraction1);
      Fraction fraction3 = fraction2.negate();
      assertEquals((-2951), fraction0.getNumerator());
      assertEquals(737.75, fraction1.doubleValue(), 0.01);
      assertEquals(0.0, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals((byte)1, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.add(721);
      Fraction fraction2 = fraction1.negate();
      Fraction fraction3 = fraction2.multiply(fraction0);
      assertEquals((-28856.0), fraction3.percentageValue(), 0.01);
      assertEquals(5, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction(3461, (-1090));
      Fraction fraction1 = fraction0.multiply(3461);
      assertEquals((-11978521), fraction1.getNumerator());
      assertEquals((short) (-10989), fraction1.shortValue());
      assertEquals((-3.175229357798165), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      long long0 = fraction0.longValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction(3461, (-1090));
      long long0 = fraction0.longValue();
      assertEquals((-3461), fraction0.getNumerator());
      assertEquals((-3.175229357798165), fraction0.doubleValue(), 0.01);
      assertEquals((-3L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction(3461, (-1090));
      Fraction fraction1 = fraction0.THREE_QUARTERS.negate();
      int int0 = fraction1.intValue();
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals((-317.5229357798165), fraction0.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2512), (-2512));
      int int0 = fraction0.intValue();
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-332), 324);
      assertEquals((-1.0246913580246915), fraction0.doubleValue(), 0.01);
      assertEquals(81, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2512), (-2512));
      Fraction fraction1 = fraction0.negate();
      int int0 = fraction1.getNumerator();
      assertEquals((-1), int0);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.ONE.subtract(1);
      float float0 = fraction1.floatValue();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = new Fraction(3461, (-1090));
      float float0 = fraction0.floatValue();
      assertEquals((-3.1752293F), float0, 0.01F);
      assertEquals(1090, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      double double0 = fraction0.doubleValue();
      assertEquals(0.6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction(3461, (-1090));
      Fraction fraction1 = fraction0.ONE.divide(fraction0);
      fraction0.THREE_FIFTHS.divide(fraction1);
      assertEquals(1090, fraction0.getDenominator());
      assertEquals((-0.3149379F), fraction1.floatValue(), 0.01F);
      assertEquals((-317.5229357798165), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.multiply((-2051));
      Fraction fraction2 = fraction1.divide((-1699));
      assertEquals((-120.71806945261918), fraction2.percentageValue(), 0.01);
      assertEquals(2051, fraction1.getNumerator());
      assertEquals(1699, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = new Fraction(3461, (-1090));
      Fraction fraction1 = fraction0.divide(4842);
      assertEquals((-0.06557681449397285), fraction1.percentageValue(), 0.01);
      assertEquals(1090, fraction0.getDenominator());
      assertEquals((short) (-3), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction(3461, (-1090));
      Fraction fraction1 = fraction0.subtract(4842);
      Fraction fraction2 = fraction1.divide((-453));
      assertEquals((-3461), fraction0.getNumerator());
      assertEquals(1069.5751058184985, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = new Fraction(0);
      Fraction fraction1 = fraction0.add(0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = new Fraction(3461, (-1090));
      Fraction fraction1 = fraction0.add((-2951));
      assertEquals((-2954), fraction1.intValue());
      assertEquals((-3220051), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 948);
      Fraction fraction1 = fraction0.abs();
      assertEquals((-536870912), fraction0.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2.265278109704641E8, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.ZERO.abs();
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction(3461, (-1090));
      Fraction fraction1 = fraction0.ONE.multiply(4842);
      Fraction fraction2 = fraction1.abs();
      assertEquals(4842, fraction1.getNumerator());
      assertEquals((-317.5229357798165), fraction0.percentageValue(), 0.01);
      assertEquals((-3461), fraction0.getNumerator());
      assertEquals(4842L, fraction2.longValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
//      try { 
        fraction0.subtract((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      // Undeclared exception!
//      try { 
        fraction0.ZERO.reciprocal();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2, Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction0.multiply(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction0.divide((-1));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-1, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      // Undeclared exception!
//      try { 
        fraction0.compareTo((Fraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction0.abs();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/1, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(3443, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 3,443/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2951), 4);
      double double0 = fraction0.doubleValue();
      assertEquals((-737.75), double0, 0.01);
      assertEquals((-2951), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction(100);
      String string0 = fraction0.THREE_QUARTERS.toString();
      assertEquals("3 / 4", string0);
      assertEquals(100, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-315));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-315, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction((-3247), Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -3,247/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 253);
      assertEquals(0.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(0, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 0/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction((-16535), (-2951));
      Fraction fraction1 = fraction0.ZERO.divide(3);
      // Undeclared exception!
//      try { 
        fraction0.ONE_FIFTH.divide(fraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // the fraction to divide by must not be zero: 0/1
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
//      try { 
        fraction0.divide((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2512), (-2512));
      Fraction fraction1 = fraction0.ONE.divide(fraction0);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = new Fraction(1033.935309917573, 3);
      Fraction fraction1 = fraction0.subtract(fraction0);
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertTrue(fraction2.equals((Object)fraction1));
      assertEquals(103400.0, fraction0.percentageValue(), 0.01);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4, (-1614));
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      assertEquals((-2), fraction0.getNumerator());
      assertEquals((-0.0024783147459727386), fraction0.doubleValue(), 0.01);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction0.THREE_QUARTERS.multiply((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = new Fraction(3461, (-1090));
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals((-6.35045871559633), fraction1.doubleValue(), 0.01);
      assertEquals(1090, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2512), (-2512));
      Fraction fraction1 = fraction0.multiply(0);
      Fraction fraction2 = fraction0.add(fraction1);
      assertSame(fraction2, fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2951), 4);
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      Fraction fraction2 = fraction0.add(fraction1);
      double double0 = fraction2.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-737.75), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2512), (-2512));
      Fraction fraction1 = fraction0.multiply(0);
      Fraction fraction2 = fraction1.add(fraction0);
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = new Fraction(100);
      // Undeclared exception!
//      try { 
        fraction0.add((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction0.negate();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/1, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      Fraction fraction1 = new Fraction(93, 93);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(1, fraction1.getNumerator());
      assertTrue(boolean0);
      assertEquals((short)1, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2512), (-2512));
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = new Fraction(93, 93);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertFalse(boolean0);
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(45, 2147483638);
      Fraction fraction1 = new Fraction(81, 1683);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(9, fraction1.getNumerator());
      assertEquals(1, int0);
      assertEquals(2.0954758026426462E-8, fraction0.doubleValue(), 0.01);
      assertEquals(0.0481283422459893, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2512), (-2512));
      Fraction fraction1 = fraction0.ZERO.subtract((-1747));
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1747, fraction1.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(45, 2147483638);
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(2.0954758026426462E-6, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = new Fraction(3461, (-1090));
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      double double0 = fraction1.percentageValue();
      assertEquals((-317.5229357798165), fraction0.percentageValue(), 0.01);
      assertEquals((-3461), fraction0.getNumerator());
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-1), Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -1/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-391.348), (-5484.61242), (-4873));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert -391.348 to fraction after -4,873 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-1136L), (-2428));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -1,136 to fraction (1,137/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(2878.657186501235, (-1542.265), 224);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 2,878.657 to fraction (9,251,016,818/3,213,657)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = new Fraction(3461, (-1090));
      double double0 = fraction0.percentageValue();
      assertEquals(1090, fraction0.getDenominator());
      assertEquals((-317.5229357798165), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = new Fraction(1033.935309917573, 3);
      float float0 = fraction0.floatValue();
      assertEquals(1034.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2512), (-2512));
      int int0 = fraction0.getNumerator();
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = new Fraction(3461, (-1090));
      fraction0.hashCode();
      assertEquals((-3461), fraction0.getNumerator());
      assertEquals((-3.175229357798165), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      int int0 = fraction0.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(45, 2147483638);
      Fraction fraction1 = fraction0.ONE_QUARTER.subtract(45);
      // Undeclared exception!
//      try { 
        fraction1.subtract(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow, numerator too large after multiply: -192,199,785,691
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = new Fraction((-19), 539);
      long long0 = fraction0.longValue();
      assertEquals((-0.03525046382189239), fraction0.doubleValue(), 0.01);
      assertEquals(539, fraction0.getDenominator());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      FractionField fractionField0 = fraction0.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4, (-1614));
      int int0 = fraction0.getDenominator();
      assertEquals(807, int0);
      assertEquals((-0.24783147459727387), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2147483647), 6549.0, (-4616));
      // Undeclared exception!
//      try { 
        fraction0.add(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in addition: -2,147,483,647 + -2,147,483,647
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }
}
