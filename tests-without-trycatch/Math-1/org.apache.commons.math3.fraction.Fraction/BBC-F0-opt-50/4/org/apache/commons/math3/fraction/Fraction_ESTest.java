/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 14:07:29 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ONE_QUARTER.subtract(172);
      String string0 = fraction1.toString();
      assertEquals("-687 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, 5);
      Fraction fraction1 = fraction0.ONE.add(5);
      fraction1.hashCode();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((short)6, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.divide(1510);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertEquals(2.2075055E-4F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(4530, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3321.264511585));
      Fraction fraction1 = new Fraction(184);
      Fraction fraction2 = fraction0.ONE_HALF.multiply(fraction1);
      Fraction fraction3 = fraction1.TWO.subtract(fraction2);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((short) (-90), fraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3321.264511585));
      Fraction fraction1 = fraction0.TWO.subtract(fraction0);
      assertEquals(155, fraction1.getDenominator());
      assertEquals(3323.2645161290325, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE_FIFTH.subtract((-71));
      assertEquals(7120.0, fraction1.percentageValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ONE.subtract(1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, Integer.MIN_VALUE);
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
      
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1987.3653570412953));
      Fraction fraction1 = fraction0.ONE_QUARTER.divide(fraction0);
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals((-0.012579468549497555), fraction1.percentageValue(), 0.01);
      assertEquals(687, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2957), (-1532));
      double double0 = fraction0.percentageValue();
      assertEquals(1532, fraction0.getDenominator());
      assertEquals(193.01566579634465, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1163, (-1614));
      double double0 = fraction0.percentageValue();
      assertEquals((-72.05700123915737), double0, 0.01);
      assertEquals(1614, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.ZERO.negate();
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.FOUR_FIFTHS.negate();
      assertEquals((-80.0), fraction1.percentageValue(), 0.01);
      assertEquals((-4), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.THREE_QUARTERS.subtract(37);
      Fraction fraction2 = fraction1.negate();
      assertEquals(145, fraction2.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals((byte) (-36), fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.TWO.negate();
      Fraction fraction2 = fraction1.multiply(3);
      assertEquals((-6), fraction2.getNumerator());
      assertEquals((-2.0F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.multiply((-2878));
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1987.3653570412953));
      Fraction fraction1 = fraction0.multiply((-2172));
      assertEquals(687, fraction1.getDenominator());
      assertEquals((-1.93521434643377E8), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2957), (-1532));
      long long0 = fraction0.longValue();
      assertEquals(1532, fraction0.getDenominator());
      assertEquals(1.9301566579634464, fraction0.doubleValue(), 0.01);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      long long0 = fraction0.longValue();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.654392843266578);
      int int0 = fraction0.intValue();
      assertEquals(0.6543909348441926, fraction0.doubleValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.TWO_THIRDS.subtract(13);
      int int0 = fraction1.intValue();
      assertEquals(3, fraction1.getDenominator());
      assertEquals((-1233.3333333333335), fraction1.percentageValue(), 0.01);
      assertEquals((-12), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-226), 5);
      assertEquals((-226), fraction0.getNumerator());
      assertEquals((-45.2F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction(2874);
      int int0 = fraction0.getNumerator();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2874, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, 5);
      float float0 = fraction0.floatValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.TWO_THIRDS.subtract(13);
      float float0 = fraction1.floatValue();
      assertEquals(3, fraction1.getDenominator());
      assertEquals((-12.333333F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      double double0 = fraction0.doubleValue();
      assertEquals(0.75, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1660), (-1660));
      Fraction fraction1 = fraction0.ONE_THIRD.subtract(1256);
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-1255.6666F), fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals((short) (-1255), fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2268.3456071567334));
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.TWO_THIRDS.add(fraction1);
      Fraction fraction3 = fraction0.TWO_FIFTHS.subtract(2);
      Fraction fraction4 = fraction2.divide(fraction3);
      assertEquals((-41.66666666666667), fraction4.percentageValue(), 0.01);
      assertEquals((-8), fraction3.getNumerator());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction((-4641), (-4641));
      Fraction fraction1 = fraction0.divide(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3321.264511585));
      Fraction fraction1 = new Fraction(184);
      Fraction fraction2 = fraction0.ONE_HALF.multiply(fraction1);
      Fraction fraction3 = fraction0.ONE_HALF.abs();
      Fraction fraction4 = fraction2.divide(fraction3);
      assertEquals((-3321.2644F), fraction0.floatValue(), 0.01F);
      assertEquals(184L, fraction4.longValue());
      assertEquals((short)92, fraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.divide(1);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3321.264511585));
      Fraction fraction1 = fraction0.divide(2297);
      assertEquals(356035, fraction1.getDenominator());
      assertEquals((-514796), fraction1.getNumerator());
      assertEquals((-514796), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.ONE_QUARTER.add((-1065));
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(4, fraction1.getDenominator());
      assertEquals((-1064.55F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2268.3456071567334));
      Fraction fraction1 = fraction0.ONE.add((-1));
      assertEquals((-800726), fraction0.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2147483631), 3);
      Fraction fraction1 = fraction0.abs();
      Fraction fraction2 = fraction1.add(3);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)91, fraction0.byteValue());
      assertEquals(715827880, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, 5);
      Fraction fraction1 = fraction0.abs();
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertSame(fraction1, fraction0);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
//      try { 
        fraction0.subtract((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 636);
      // Undeclared exception!
//      try { 
        fraction0.subtract(636);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction0.reciprocal();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 1/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1987.3653570412953));
      // Undeclared exception!
//      try { 
        fraction0.multiply(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      // Undeclared exception!
//      try { 
        fraction0.divide(0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
//      try { 
        fraction0.compareTo((Fraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2957), (-1532));
      Fraction fraction1 = Fraction.getReducedFraction((-2957), 306767601);
      // Undeclared exception!
//      try { 
        fraction0.add(fraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, (-2147483628));
      // Undeclared exception!
//      try { 
        fraction0.add(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, (-2147483628));
      // Undeclared exception!
//      try { 
        fraction0.add(37);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction0.abs();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/1, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = new Fraction(0.0);
      Fraction fraction2 = fraction0.THREE_QUARTERS.multiply(fraction1);
      assertTrue(fraction2.equals((Object)fraction1));
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(1, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2268.3456071567334));
      double double0 = fraction0.doubleValue();
      assertEquals((-2268.3456090651557), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      String string0 = fraction0.toString();
      assertEquals("-2147483648", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2957), (-1532));
      String string0 = fraction0.toString();
      assertEquals("2957 / 1532", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1829));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-1,829, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction((-1073741823), Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -1,073,741,823/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-2025));
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction((-2147483645), 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction -2,147,483,645/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2268.3456071567334));
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction1.multiply(fraction0);
      // Undeclared exception!
//      try { 
        fraction1.divide(fraction2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // the fraction to divide by must not be zero: 0/1
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      // Undeclared exception!
//      try { 
        fraction0.ONE_THIRD.divide((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2987), (-1532));
      // Undeclared exception!
//      try { 
        fraction0.multiply((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 310);
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.multiply(fraction1);
      // Undeclared exception!
//      try { 
        fraction2.subtract(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow, numerator too large after multiply: 3,221,225,472
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 310);
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals((-6927366.606451613), fraction0.doubleValue(), 0.01);
      assertEquals(6927367.006451613, fraction2.doubleValue(), 0.01);
      assertEquals(155, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = new Fraction(Double.NaN, 636);
      Fraction fraction2 = fraction0.divide(fraction1);
      Fraction fraction3 = fraction1.ONE_THIRD.subtract(fraction2);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(33.33333333333333, fraction3.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = new Fraction(Double.NaN, 636);
      Fraction fraction2 = fraction0.divide(fraction1);
      Fraction fraction3 = fraction2.subtract(fraction0);
      assertEquals((-1), fraction3.getNumerator());
      assertEquals((-50.0), fraction3.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = new Fraction((-4641), (-4641));
      // Undeclared exception!
//      try { 
        fraction0.TWO.add((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 3);
      // Undeclared exception!
//      try { 
        fraction0.negate();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/3, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2957), (-1532));
      Fraction fraction1 = fraction0.ONE_HALF.multiply(fraction0);
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0.9650783289817232, fraction1.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.subtract(fraction0);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertEquals((-2.147483648E11), fraction0.percentageValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      FractionField fractionField0 = fraction0.FOUR_FIFTHS.getField();
      boolean boolean0 = fraction0.equals(fractionField0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = new Fraction((-4641), (-4641));
      Fraction fraction1 = new Fraction((-4641), (-4641));
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = new Fraction(0.0);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.abs();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(Double.POSITIVE_INFINITY, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.abs();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(1, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 1/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.1256551444530487, (-1387));
      assertEquals(0.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-2941.2472047623), (-2941.2472047623), 4);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert -2,941.247 to fraction after 4 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(0.0, 72);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(458.92, (-1.0), 574635440);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 458.92 to fraction (1,159,139,414,147,752/2,525,798,427,063)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 636);
      // Undeclared exception!
//      try { 
        fraction0.multiply(2115);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 2,115/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1660), (-1660));
      float float0 = fraction0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1987.3653570412953));
      int int0 = fraction0.getNumerator();
      assertEquals((-1365320), int0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2957), (-1532));
      int int0 = fraction0.intValue();
      assertEquals(2957, fraction0.getNumerator());
      assertEquals(193.01566579634465, fraction0.percentageValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.ONE_HALF.reciprocal();
      assertEquals(2, fraction1.getNumerator());
      assertEquals((short)2, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      long long0 = fraction0.longValue();
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MAX_VALUE, Integer.MAX_VALUE, (-1377));
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.ZERO.divide((-1328));
      Fraction fraction2 = fraction1.divide(fraction0);
      assertTrue(fraction2.equals((Object)fraction1));
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.THREE_QUARTERS.add(636);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
      assertEquals(63675.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      int int0 = fraction0.getDenominator();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.multiply(2115);
      assertEquals(105750.0, fraction1.percentageValue(), 0.01);
      assertEquals(2115, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }
}
