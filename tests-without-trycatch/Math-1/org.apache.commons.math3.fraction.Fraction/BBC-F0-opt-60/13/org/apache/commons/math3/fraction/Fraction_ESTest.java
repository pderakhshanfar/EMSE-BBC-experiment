/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:11:27 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ONE_QUARTER.divide(4);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.0625, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = Fraction.getReducedFraction((-1671), (-1671));
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.TWO_THIRDS.negate();
      Fraction fraction2 = fraction0.THREE_FIFTHS.subtract(fraction1);
      assertEquals(126.66666666666666, fraction2.percentageValue(), 0.01);
      assertEquals(3, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(1);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.subtract(Integer.MIN_VALUE);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction(40.65688467);
      double double0 = fraction0.percentageValue();
      assertEquals(4065.68848758465, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.negate();
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.negate();
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction(1485.3, 1485.3, 1442);
      Fraction fraction1 = fraction0.negate();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-148500.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction(40.65688467);
      Fraction fraction1 = fraction0.negate();
      String string0 = fraction1.toString();
      assertEquals("-18011 / 443", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      long long0 = fraction0.longValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = new Fraction((-875), 159);
      long long0 = fraction0.longValue();
      assertEquals((-5.50314465408805), fraction0.doubleValue(), 0.01);
      assertEquals(159, fraction0.getDenominator());
      assertEquals((-5L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      int int0 = fraction0.intValue();
      assertEquals(50.0, fraction0.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      int int0 = fraction0.intValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-275), 2);
      assertEquals((-275), fraction0.getNumerator());
      assertEquals((-137.5F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.multiply(8);
      Fraction fraction2 = fraction0.subtract(fraction1);
      int int0 = fraction2.getNumerator();
      assertEquals((-7), int0);
      assertEquals((-175.0), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2581, 159);
      Fraction fraction1 = fraction0.subtract(732);
      Fraction fraction2 = fraction1.multiply(fraction0);
      float float0 = fraction2.floatValue();
      assertEquals(2581, fraction0.getNumerator());
      assertEquals((-1161883.8930422056), fraction2.percentageValue(), 0.01);
      assertEquals((-11618.839F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_THIRD.subtract(fraction0);
      double double0 = fraction1.doubleValue();
      assertEquals((-0.16666666666666666), double0, 0.01);
      assertEquals((-1), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.subtract((-1671));
      Fraction fraction2 = fraction1.multiply(fraction0);
      Fraction fraction3 = fraction2.multiply(115);
      Fraction fraction4 = fraction3.divide(fraction0);
      assertEquals(1.92395E7, fraction4.percentageValue(), 0.01);
      assertEquals(384790, fraction3.getNumerator());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.subtract(Integer.MIN_VALUE);
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-2147483647L), fraction2.longValue());
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = new Fraction((-210.6810295696425), 1663.35, 205);
      Fraction fraction2 = fraction0.TWO_FIFTHS.divide(fraction1);
      assertEquals((-0.18957345971563982), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      Fraction fraction2 = fraction1.divide(27);
      assertTrue(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.add(3640);
      Fraction fraction2 = fraction1.divide(3640);
      assertEquals(5460, fraction2.getDenominator());
      assertEquals(1.0001831F, fraction2.floatValue(), 0.01F);
      assertEquals((short)3640, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.multiply(3775);
      Fraction fraction2 = fraction1.subtract(39480);
      Fraction fraction3 = fraction2.divide(43254);
      assertEquals((-3775), fraction1.getNumerator());
      assertEquals((-1.0000231192490867), fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.multiply(0);
      Fraction fraction2 = fraction1.add(0);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2049, 2);
      Fraction fraction1 = fraction0.add(2049);
      assertEquals(6147, fraction1.getNumerator());
      assertEquals(3073.5, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, (-748));
      Fraction fraction1 = fraction0.abs();
      assertEquals(9223372036854775807L, fraction1.longValue());
      assertEquals(Double.POSITIVE_INFINITY, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
//      try { 
        fraction0.subtract((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, (-748));
      // Undeclared exception!
//      try { 
        fraction0.subtract(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.getReducedFraction((-2147483344), 1671);
      // Undeclared exception!
//      try { 
        fraction0.multiply(fraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
//      try { 
        fraction0.TWO_FIFTHS.divide(0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 2/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
//      try { 
        fraction0.compareTo((Fraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.multiply((-1073741823));
      Fraction fraction2 = Fraction.ONE_FIFTH;
      // Undeclared exception!
//      try { 
        fraction2.add(fraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.ONE.add(Integer.MAX_VALUE);
      // Undeclared exception!
//      try { 
        fraction1.abs();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/1, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction((-565), (-565));
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(403, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 403/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      double double0 = fraction0.doubleValue();
      assertEquals(0.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = new Fraction(3797.688857785854, 2);
      String string0 = fraction0.TWO.toString();
      assertEquals("2", string0);
      assertEquals((byte) (-42), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2108));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-2,108, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(415, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 415/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147200524), Integer.MIN_VALUE);
      assertEquals(99.98681601136923, fraction0.percentageValue(), 0.01);
      assertEquals(536800131, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-311));
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(188, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 188/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
//      try { 
        fraction0.FOUR_FIFTHS.divide((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      Fraction fraction2 = fraction1.abs();
      assertSame(fraction2, fraction1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      // Undeclared exception!
//      try { 
        fraction0.multiply((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2581, 159);
      Fraction fraction1 = fraction0.multiply(1100);
      Fraction fraction2 = fraction0.divide(1671);
      // Undeclared exception!
//      try { 
        fraction1.subtract(fraction2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow, numerator too large after multiply: 4,744,133,519
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.add(fraction0);
      Fraction fraction2 = fraction0.negate();
      Fraction fraction3 = fraction1.subtract(fraction0);
      Fraction fraction4 = fraction3.add(fraction2);
      // Undeclared exception!
//      try { 
        fraction0.divide(fraction4);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // the fraction to divide by must not be zero: 0/1
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction(3797.688857785854, 2);
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.add(fraction1);
      assertSame(fraction2, fraction0);
      assertEquals(379800.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertEquals((-2), fraction1.getNumerator());
      assertEquals((-2L), fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      // Undeclared exception!
//      try { 
        fraction0.ZERO.add((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 1243);
      // Undeclared exception!
//      try { 
        fraction0.negate();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/1,243, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      Fraction fraction1 = new Fraction(1);
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ONE_HALF;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = new Fraction(132, 1715);
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      assertEquals(1715, fraction0.getDenominator());
      assertEquals(7.696793002915451, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction1 = fraction0.ONE_QUARTER.reciprocal();
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
      assertEquals((byte)4, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.TWO.add(fraction0);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(4.0F, fraction1.floatValue(), 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.abs();
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.TWO_THIRDS.negate();
      Fraction fraction2 = fraction1.add(906156445);
      assertEquals((-5.25499321E8), fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(1, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 1/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, (-2108));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-2,108, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, (-748));
      // Undeclared exception!
//      try { 
        fraction0.multiply((-748));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction -748/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-3401.979081451623), (-3401.979081451623), (-577));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert -3,401.979 to fraction after -577 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(0.0, 0.0, 3);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-1.0), 2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -1 to fraction (-9,223,372,036,854,775,806/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      double double0 = fraction0.percentageValue();
      assertEquals((-100.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      float float0 = fraction0.floatValue();
      assertEquals(0.25F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = new Fraction(3797.688857785854, 2);
      fraction0.hashCode();
      assertEquals(3798, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      int int0 = fraction0.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.subtract(39480);
      Fraction fraction2 = fraction0.divide(fraction1);
      String string0 = fraction2.toString();
      assertEquals("1 / 39481", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      long long0 = fraction0.longValue();
      assertEquals(25.0, fraction0.percentageValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      FractionField fractionField0 = fraction0.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.add(906156445);
      assertEquals((-670341515), fraction1.getNumerator());
      assertEquals((-1.6758537875E10), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals((-200.0), fraction1.percentageValue(), 0.01);
      assertEquals((-2), fraction1.getNumerator());
  }
}
