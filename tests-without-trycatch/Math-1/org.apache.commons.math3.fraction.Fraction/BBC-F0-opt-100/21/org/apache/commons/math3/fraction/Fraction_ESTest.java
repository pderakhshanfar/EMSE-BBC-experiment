/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:26:10 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.negate();
      String string0 = fraction1.toString();
      assertEquals("-2 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.TWO.negate();
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ONE;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.TWO_QUARTERS.add(fraction0);
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(1.1666666666666667, fraction1.doubleValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.subtract(0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.THREE_QUARTERS.reciprocal();
      assertEquals(1.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction(5, 5);
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.001052631578971841, 0.46533022280004843, (-289));
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.negate();
      double double0 = fraction1.percentageValue();
      assertEquals((-40.0), double0, 0.01);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction(5, 5);
      Fraction fraction1 = fraction0.ZERO.negate();
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction0.FOUR_FIFTHS.divide(fraction1);
      Fraction fraction3 = fraction1.FOUR_FIFTHS.multiply(fraction2);
      assertEquals((-2), fraction1.getNumerator());
      assertEquals((-8), fraction3.getNumerator());
      assertEquals((short) (-2), fraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)1, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      Fraction fraction1 = fraction0.multiply(37);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(37, fraction1.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1805, 1805);
      long long0 = fraction0.longValue();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.subtract(4);
      long long0 = fraction1.longValue();
      assertEquals(3, fraction1.getDenominator());
      assertEquals((-366.66666666666663), fraction1.percentageValue(), 0.01);
      assertEquals((-3L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      int int0 = fraction0.intValue();
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.ONE_HALF.subtract(67);
      int int0 = fraction1.intValue();
      assertEquals(2, fraction1.getDenominator());
      assertEquals((-66.5), fraction1.doubleValue(), 0.01);
      assertEquals((-66), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2072), 100);
      assertEquals((-20.72F), fraction0.floatValue(), 0.01F);
      assertEquals(25, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.abs();
      int int0 = fraction1.getNumerator();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.negate();
      int int0 = fraction1.getNumerator();
      assertEquals((-2), int0);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      int int0 = fraction0.getDenominator();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.ONE_HALF.subtract(67);
      float float0 = fraction1.floatValue();
      assertEquals((-133), fraction1.getNumerator());
      assertEquals((-66.5F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE.subtract(2576);
      double double0 = fraction1.doubleValue();
      assertEquals((-2575.0), double0, 0.01);
      assertEquals((-2575), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      Fraction fraction1 = fraction0.TWO.divide(fraction0);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(200.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.divide((-135));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      Fraction fraction1 = fraction0.divide(1);
      assertEquals(1, fraction1.getDenominator());
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.MINUS_ONE.subtract((-3635));
      Fraction fraction2 = fraction1.divide((-2098));
      assertEquals((-1.7321259F), fraction2.floatValue(), 0.01F);
      assertEquals(1049, fraction2.getDenominator());
      assertEquals((short)3634, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      Fraction fraction1 = fraction0.TWO_FIFTHS.subtract(37);
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-35.6), fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.TWO_THIRDS.add(100);
      assertEquals(10066.666666666668, fraction1.percentageValue(), 0.01);
      assertEquals(302, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1.0));
      Fraction fraction1 = fraction0.add(1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.ONE_HALF.add((-2072));
      assertEquals((-207150.0), fraction1.percentageValue(), 0.01);
      assertEquals(2, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = fraction0.abs();
      assertEquals(Double.POSITIVE_INFINITY, fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.THREE_QUARTERS.divide((-4892));
      Fraction fraction2 = fraction1.MINUS_ONE.subtract((-3635));
      Fraction fraction3 = fraction1.multiply((-2165));
      Fraction fraction4 = fraction2.divide(fraction3);
      // Undeclared exception!
//      try { 
        fraction4.subtract(fraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = new Fraction(3509.8089, 3509.8089, 31);
      // Undeclared exception!
//      try { 
        fraction0.ONE_QUARTER.subtract((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 3707);
      // Undeclared exception!
//      try { 
        fraction0.subtract(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(1971.7449911, 1971.7449911, 562);
      Fraction fraction1 = fraction0.multiply(0);
      // Undeclared exception!
//      try { 
        fraction1.reciprocal();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      Fraction fraction1 = fraction0.TWO_FIFTHS.subtract(37);
      Fraction fraction2 = fraction1.multiply(2622);
      Fraction fraction3 = fraction2.abs();
      // Undeclared exception!
//      try { 
        fraction3.multiply(fraction2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      // Undeclared exception!
//      try { 
        fraction0.divide(0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      // Undeclared exception!
//      try { 
        fraction0.compareTo((Fraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 3707);
      // Undeclared exception!
//      try { 
        fraction0.add((-311));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1, 1);
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 271);
      // Undeclared exception!
//      try { 
        fraction0.negate();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/271, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-2515), 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction -2,515/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      double double0 = fraction0.doubleValue();
      assertEquals(0.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      String string0 = fraction0.ONE_THIRD.toString();
      assertEquals("1 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-796));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-796, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction((-3635), Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -3,635/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4358, Integer.MIN_VALUE);
      assertEquals((-2.0293518900871277E-6), fraction0.doubleValue(), 0.01);
      assertEquals((-2179), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(4, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 4/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.getReducedFraction(0, (-2643));
      // Undeclared exception!
//      try { 
        fraction0.ONE_HALF.divide(fraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // the fraction to divide by must not be zero: 0/1
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2523), (-2147483645));
      // Undeclared exception!
//      try { 
        fraction0.divide((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.MINUS_ONE;
      Fraction fraction2 = fraction0.ONE.add(fraction1);
      Fraction fraction3 = fraction0.multiply(fraction2);
      assertTrue(fraction3.equals((Object)fraction2));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = new Fraction(5, 5);
      // Undeclared exception!
//      try { 
        fraction0.multiply((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = new Fraction(5, 5);
      Fraction fraction1 = fraction0.MINUS_ONE.subtract(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2), fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.ONE_THIRD.subtract(fraction0);
      assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01);
      assertEquals(0.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertEquals((-2), fraction1.getNumerator());
      assertEquals((-0.6666666666666666), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 1025);
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      assertEquals(Double.POSITIVE_INFINITY, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      // Undeclared exception!
//      try { 
        fraction0.add((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 3209);
      // Undeclared exception!
//      try { 
        fraction0.abs();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/3,209, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = new Fraction((-3635), (-3635));
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2515), 339);
      Fraction fraction1 = fraction0.abs();
      Fraction fraction2 = fraction1.negate();
      boolean boolean0 = fraction0.equals(fraction2);
      assertEquals((-741.8879056047198), fraction2.percentageValue(), 0.01);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(741.8879056047198, fraction1.percentageValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2515), 339);
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertEquals(339, fraction0.getDenominator());
      assertFalse(boolean0);
      assertEquals((-7.4188790560471976), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2515), 339);
      Fraction fraction1 = fraction0.ONE.negate();
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(339, fraction0.getDenominator());
      assertFalse(boolean0);
      assertEquals((-100.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = Fraction.ONE;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(Double.POSITIVE_INFINITY, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(13, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 13/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, (-303));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-303, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(0.0875862700108075, Integer.MIN_VALUE, Integer.MIN_VALUE);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert 0.088 to fraction after -2,147,483,648 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(0.0, 243);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-3684.99), (-3684.99), 2404);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -3,684.99 to fraction (-168,820,389,748,970/45,812,984,499)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      assertEquals(2.147483647E11, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(9.007199254740992E15);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 9,007,199,254,740,992 to fraction (9,007,199,254,740,992/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = new Fraction(3644.6928472733302, 194);
      assertEquals(3644.6929F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      double double0 = fraction0.percentageValue();
      assertEquals(40.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      float float0 = fraction0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      int int0 = fraction0.getNumerator();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      fraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      int int0 = fraction0.intValue();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 3707);
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      long long0 = fraction0.longValue();
      assertEquals(40.0, fraction0.percentageValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      FractionField fractionField0 = fraction0.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 3714);
      int int0 = fraction0.getDenominator();
      assertEquals(0, int0);
      assertEquals(Double.POSITIVE_INFINITY, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.multiply((-2098));
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction2.FOUR_FIFTHS.multiply(fraction2);
      assertEquals((-4196), fraction1.getNumerator());
      assertEquals(671.68F, fraction3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 147);
      // Undeclared exception!
//      try { 
        fraction0.add(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow, numerator too large after multiply: -4,294,967,296
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }
}
