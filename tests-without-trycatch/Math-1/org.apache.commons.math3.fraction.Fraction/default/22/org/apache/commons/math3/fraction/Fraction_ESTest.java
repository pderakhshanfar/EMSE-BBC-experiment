/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:11:43 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1428), 586);
      String string0 = fraction0.toString();
      assertEquals("-714 / 293", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.divide(1518);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(1, fraction1.getNumerator());
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0.013175230566534914, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(1, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      Fraction fraction1 = fraction0.TWO.add((-1942));
      Fraction fraction2 = Fraction.TWO_QUARTERS;
      Fraction fraction3 = fraction1.subtract(fraction2);
      assertEquals((-194050.0), fraction3.percentageValue(), 0.01);
      assertEquals(485, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(2145.9783F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2169, 2169);
      Fraction fraction1 = fraction0.subtract(2169);
      assertEquals((-2168), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.TWO_THIRDS.multiply(0);
      Fraction fraction2 = fraction1.subtract(0);
      assertTrue(fraction2.equals((Object)fraction1));
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Fraction fraction0 = new Fraction((-4179.548195671), (-2569));
      Fraction fraction1 = fraction0.TWO_QUARTERS.subtract(1);
      assertEquals((-0.5F), fraction1.floatValue(), 0.01F);
      assertEquals((short) (-4180), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      Fraction fraction1 = fraction0.THREE_QUARTERS.subtract((-1942));
      assertEquals(4, fraction1.getDenominator());
      assertEquals(1942.75, fraction1.doubleValue(), 0.01);
      assertEquals(2146.4783F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      assertEquals(Double.POSITIVE_INFINITY, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.986821492305628E-8);
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      double double0 = fraction0.percentageValue();
      assertEquals((-100.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = new Fraction(3369.29254823585, 3369.29254823585, 3);
      Fraction fraction1 = fraction0.ZERO.negate();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(336900.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = new Fraction((-4179.548195671), (-2569));
      Fraction fraction1 = fraction0.negate();
      assertEquals(418000.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.FOUR_FIFTHS.negate();
      assertEquals((-0.8F), fraction1.floatValue(), 0.01F);
      assertEquals((-4), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals(1073.2391752577319, fraction2.doubleValue(), 0.01);
      assertEquals(520521, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.negate();
      Fraction fraction3 = fraction1.multiply(fraction2);
      assertEquals(485, fraction2.getDenominator());
      assertEquals((-1073.2391F), fraction3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.multiply((-2147481880));
      assertEquals((-1.07374094E11), fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = new Fraction((-4113));
      Fraction fraction1 = fraction0.THREE_FIFTHS.multiply(0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte) (-17), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      Fraction fraction1 = fraction0.multiply((-2147481880));
      assertEquals(3.7949737237113404E8, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.multiply(3451);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-3451.0F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      long long0 = fraction0.longValue();
      assertEquals(40.0, fraction0.percentageValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      Fraction fraction1 = fraction0.TWO.add((-1942));
      long long0 = fraction1.longValue();
      assertEquals((-1940L), long0);
      assertEquals(1041042, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = new Fraction(2.7553817452272217E-6, (-803));
      int int0 = fraction0.intValue();
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      int int0 = fraction0.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      int int0 = fraction0.getNumerator();
      assertEquals(Integer.MIN_VALUE, int0);
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      int int0 = fraction0.getDenominator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      float float0 = fraction0.floatValue();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      Fraction fraction1 = fraction0.TWO.add((-1942));
      double double0 = fraction1.doubleValue();
      assertEquals((-1940.0), double0, 0.01);
      assertEquals(485, fraction0.getDenominator());
      assertEquals((-1940), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0, 2160.213, 100);
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = Fraction.getReducedFraction((-1428), 586);
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals((-2.4368600682593855), fraction1.doubleValue(), 0.01);
      assertEquals(293, fraction1.getDenominator());
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.MINUS_ONE.divide(fraction0);
      assertEquals((-5), fraction1.getNumerator());
      assertEquals((-125.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      Fraction fraction1 = fraction0.TWO.add((-1942));
      Fraction fraction2 = fraction1.divide(23);
      assertEquals((-84.347824F), fraction2.floatValue(), 0.01F);
      assertEquals(214647.83505154637, fraction0.percentageValue(), 0.01);
      assertEquals((-1940L), fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      Fraction fraction1 = fraction0.TWO.add((-1942));
      Fraction fraction2 = fraction1.divide((-1500));
      assertEquals(1.2933333F, fraction2.floatValue(), 0.01F);
      assertEquals((-1940), fraction1.getNumerator());
      assertEquals(2146.4783F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      Fraction fraction1 = fraction0.TWO.add((-1942));
      Fraction fraction2 = fraction1.ONE_THIRD.add(fraction1);
      assertEquals((-1939.6666666666667), fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(214647.83505154637, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.add(Integer.MIN_VALUE);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      Fraction fraction1 = fraction0.add((-1500));
      Fraction fraction2 = fraction1.negate();
      assertEquals((-313542), fraction2.getNumerator());
      assertEquals(646.478350515464, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = new Fraction(Double.NaN);
      Fraction fraction2 = fraction0.ZERO.add(fraction1);
      Fraction fraction3 = fraction2.abs();
      assertEquals(Double.POSITIVE_INFINITY, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.ZERO.abs();
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      Fraction fraction1 = fraction0.TWO.abs();
      assertEquals(2146.4783F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
//      try { 
        fraction0.subtract(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
//      try { 
        fraction0.reciprocal();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3731);
      // Undeclared exception!
//      try { 
        fraction0.multiply(3731);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 3,731/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
//      try { 
        fraction0.compareTo((Fraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
//      try { 
        fraction0.add((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      // Undeclared exception!
//      try { 
        fraction0.multiply(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(485, fraction1.getDenominator());
      assertEquals(2082084, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction0.negate();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/1, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(661, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 661/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2147481880), (-852));
      assertEquals(213, fraction0.getDenominator());
      assertEquals(2.5205186384976524E8, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(0, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 0/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(5, fraction1.getNumerator());
      assertEquals(250.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      double double0 = fraction0.doubleValue();
      assertEquals(2146.4783505154637, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = new Fraction(2169, 421);
      String string0 = fraction0.toString();
      assertEquals("2169 / 421", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2412));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-2,412, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction((-1535), Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -1,535/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 1725);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(0, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 0/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
//      try { 
        fraction0.divide(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // the fraction to divide by must not be zero: 0/1
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction0.TWO.divide((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = new Fraction(2169, 421);
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction1.multiply(fraction0);
      String string0 = fraction2.toString();
      assertEquals(421, fraction0.getDenominator());
      assertEquals("0", string0);
      assertEquals(5.152019F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      // Undeclared exception!
//      try { 
        fraction0.multiply((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 675212);
      Fraction fraction1 = fraction0.subtract(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction1.subtract(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow, numerator too large after multiply: 2,147,483,648
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(133.33333333333331, fraction1.percentageValue(), 0.01);
      assertEquals(3, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals(66.66666666666666, fraction2.percentageValue(), 0.01);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
//      try { 
        fraction0.subtract((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction0.abs();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/1, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.TWO;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(59, 421);
      boolean boolean0 = fraction0.equals(fraction0);
      assertEquals(421, fraction0.getDenominator());
      assertTrue(boolean0);
      assertEquals(14.014251781472684, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      fraction0.equals(fraction1);
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.TWO;
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.MINUS_ONE;
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.divide((-632));
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 813);
      // Undeclared exception!
//      try { 
        fraction0.add(952);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-0.16666666666666666), Integer.MIN_VALUE, Integer.MIN_VALUE);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert -0.167 to fraction after -2,147,483,648 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((double) 2147483596, 2147483596);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 2,147,483,596 to fraction (-2,147,483,595/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((double) Integer.MAX_VALUE, 787);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Fraction fraction0 = new Fraction(2169, 421);
      double double0 = fraction0.percentageValue();
      assertEquals(421, fraction0.getDenominator());
      assertEquals(515.2019002375297, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Fraction fraction0 = new Fraction(2169, 421);
      float float0 = fraction0.floatValue();
      assertEquals(2169, fraction0.getNumerator());
      assertEquals(5.152019F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Fraction fraction0 = new Fraction(2169, 421);
      int int0 = fraction0.getNumerator();
      assertEquals(2169, int0);
      assertEquals(5.152019F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Fraction fraction0 = new Fraction(2169, 421);
      fraction0.hashCode();
      assertEquals(5.1520190023752965, fraction0.doubleValue(), 0.01);
      assertEquals(2169, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Fraction fraction0 = new Fraction(2169, 421);
      int int0 = fraction0.intValue();
      assertEquals(5.1520190023752965, fraction0.doubleValue(), 0.01);
      assertEquals(2169, fraction0.getNumerator());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Fraction fraction0 = new Fraction(2146.47834664836);
      long long0 = fraction0.longValue();
      assertEquals(214647.83505154637, fraction0.percentageValue(), 0.01);
      assertEquals(2146L, long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
//      try { 
        fraction0.subtract(935);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Fraction fraction0 = new Fraction(2169, 421);
      fraction0.getField();
      assertEquals(421, fraction0.getDenominator());
      assertEquals(5.152019F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction0.divide(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 1/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Fraction fraction0 = new Fraction(2169, 421);
      int int0 = fraction0.getDenominator();
      assertEquals(421, int0);
      assertEquals(5.152019F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.multiply(Integer.MIN_VALUE);
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals((-2.147483648E9), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction0.add(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in addition: -2,147,483,648 + -2,147,483,648
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }
}
