/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:03:55 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.negate();
      String string0 = fraction1.toString();
      assertEquals("-2 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 163);
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction0.multiply(fraction1);
      Fraction fraction3 = fraction1.divide(fraction2);
      assertEquals(163, fraction3.getDenominator());
      assertEquals((-26569L), fraction2.longValue());
      assertEquals(0.006134969F, fraction3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.ONE_QUARTER.multiply(fraction0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(20.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.THREE_QUARTERS.abs();
      Fraction fraction2 = fraction0.TWO_FIFTHS.multiply(fraction1);
      assertEquals(0.3F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(14, 14);
      Fraction fraction1 = fraction0.ONE_THIRD.multiply(fraction0);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(1, fraction0.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.THREE_QUARTERS.abs();
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(75.0, fraction1.percentageValue(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction(283.83968, 283.83968, 3);
      Fraction fraction1 = fraction0.subtract(1);
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals((byte)26, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction(2.092571258544922, 163);
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.FOUR_FIFTHS.subtract(fraction1);
      assertTrue(fraction2.equals((Object)fraction1));
      assertEquals(2.0925925925925926, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction(283.83968, 283.83968, 3);
      Fraction fraction1 = fraction0.add(3);
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(286, fraction1.getNumerator());
      assertEquals((-3), fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 163);
      Fraction fraction1 = fraction0.subtract(163);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.THREE_QUARTERS.subtract(1);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-25.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)2, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction((-788), (-788));
      double double0 = fraction0.percentageValue();
      assertEquals(100.0, double0, 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 178);
      Fraction fraction1 = fraction0.negate();
      fraction1.negate();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-178), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.negate();
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.add(2097);
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals((-2096.0), fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = new Fraction((-788), (-788));
      Fraction fraction1 = fraction0.multiply((-788));
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-788), fraction1.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      long long0 = fraction0.longValue();
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 163);
      Fraction fraction1 = fraction0.negate();
      long long0 = fraction1.longValue();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-163L), long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(14, 14);
      Fraction fraction1 = fraction0.ONE_THIRD.multiply(fraction0);
      int int0 = fraction1.intValue();
      assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(5, 5);
      Fraction fraction1 = fraction0.ONE_FIFTH.subtract(5);
      int int0 = fraction1.intValue();
      assertEquals((-4), int0);
      assertEquals((-24), fraction1.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1755, 1);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1755.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.MINUS_ONE.multiply(0);
      int int0 = fraction1.getNumerator();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.FOUR_FIFTHS.negate();
      int int0 = fraction1.getNumerator();
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.add(2097);
      float float0 = fraction1.floatValue();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2096.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      double double0 = fraction1.doubleValue();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = new Fraction(247, 247);
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction(283.83968, 283.83968, 3);
      Fraction fraction1 = fraction0.divide(1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(28300.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.divide(1);
      assertEquals((-2), fraction2.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction0.MINUS_ONE.add(fraction1);
      assertEquals((-7), fraction2.getNumerator());
      assertEquals((-140.0), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction((-788), (-788));
      Fraction fraction1 = fraction0.add((-1));
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, 0);
      Fraction fraction1 = fraction0.abs();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(9223372036854775807L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.THREE_QUARTERS.abs();
      Fraction fraction2 = fraction0.MINUS_ONE.divide(fraction1);
      assertEquals(3, fraction2.getDenominator());
      assertEquals((-1.3333334F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      // Undeclared exception!
//      try { 
        fraction0.MINUS_ONE.subtract((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, 0);
      // Undeclared exception!
//      try { 
        fraction0.subtract(741);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
//      try { 
        fraction0.ZERO.reciprocal();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = new Fraction(573.8);
      Fraction fraction1 = fraction0.multiply(fraction0);
      // Undeclared exception!
//      try { 
        fraction0.multiply(fraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction((-788), (-788));
      // Undeclared exception!
//      try { 
        fraction0.divide(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 1/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
//      try { 
        fraction0.compareTo((Fraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction(1913, 618);
      Fraction fraction1 = fraction0.multiply(117);
      Fraction fraction2 = fraction1.reciprocal();
      // Undeclared exception!
//      try { 
        fraction2.add(fraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // arithmetic exception
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, 0);
      // Undeclared exception!
//      try { 
        fraction0.add(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1117);
      // Undeclared exception!
//      try { 
        fraction0.abs();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/1,117, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(0, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 0/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      double double0 = fraction0.doubleValue();
      assertEquals(0.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 163);
      String string0 = fraction0.toString();
      assertEquals("163", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      String string0 = fraction0.toString();
      assertEquals("2 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-1, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(453, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction 453/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Fraction.getReducedFraction(3, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 3/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
//      try { 
        fraction0.divide(fraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // the fraction to divide by must not be zero: 0/1
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = new Fraction(1276.095039836);
      // Undeclared exception!
//      try { 
        fraction0.ONE_QUARTER.divide((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.getReducedFraction(0, 5);
      Fraction fraction2 = fraction1.divide(fraction0);
      assertSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
//      try { 
        fraction0.multiply((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.TWO_FIFTHS.divide((-178));
      Fraction fraction2 = fraction0.add(2147468145);
      // Undeclared exception!
//      try { 
        fraction1.subtract(fraction2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow, numerator too large after multiply: -191,119,145,927
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.THREE_QUARTERS.add(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 163);
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-163), fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction(198, 198);
      // Undeclared exception!
//      try { 
        fraction0.add((Fraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.multiply(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        fraction1.negate();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/1, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction0.add(fraction1);
      Fraction fraction3 = fraction2.abs();
      Fraction fraction4 = fraction3.add(fraction2);
      Fraction fraction5 = Fraction.TWO_QUARTERS;
      boolean boolean0 = fraction5.equals(fraction4);
      assertTrue(boolean0);
      assertEquals(0.25F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction0.add(fraction1);
      Fraction fraction3 = fraction2.abs();
      Fraction fraction4 = fraction3.add(fraction2);
      boolean boolean0 = fraction2.equals(fraction4);
      assertFalse(boolean0);
      assertSame(fraction3, fraction1);
      assertEquals(50.0, fraction4.percentageValue(), 0.01);
      assertEquals(2, fraction4.getDenominator());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 163);
      Fraction fraction1 = Fraction.ZERO;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(163L, fraction0.longValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 163);
      boolean boolean0 = fraction0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(163.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 163);
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction0.multiply(fraction1);
      int int0 = fraction0.compareTo(fraction2);
      assertEquals((-163), fraction1.getNumerator());
      assertEquals(1, int0);
      assertEquals((-26569.0F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 163);
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals((short)163, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 163);
      Fraction fraction1 = fraction0.abs();
      assertEquals(163, fraction0.getNumerator());
      assertEquals(163.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-1073741823), Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -1,073,741,823/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-1257.5830862), 0.0, (-2059));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert -1,257.583 to fraction after -2,059 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction(0.0, 2165);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((-2147483647), (-164.527285), (-2147483647));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -2,147,483,647 to fraction (-9,223,372,034,707,292,160/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = null;
//      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, 0);
      // Undeclared exception!
//      try { 
        fraction0.add(194);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // zero denominator in fraction 1/0
//         //
//         verifyException("org.apache.commons.math3.fraction.Fraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      double double0 = fraction0.percentageValue();
      assertEquals((-100.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      float float0 = fraction0.floatValue();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = new Fraction((-788), (-788));
      fraction0.hashCode();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 163);
      int int0 = fraction0.intValue();
      assertEquals(163, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 163);
      long long0 = fraction0.longValue();
      assertEquals(163L, long0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 163);
      fraction0.getField();
      assertEquals((byte) (-93), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2147483647));
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2.147483647E11), fraction0.percentageValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, fraction1.intValue());
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.ZERO.divide(22);
      double double0 = fraction1.doubleValue();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, double0, 0.01);
      assertEquals(25.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.add((-2055));
      assertEquals((-2054.75F), fraction1.floatValue(), 0.01F);
      assertEquals(4, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 163);
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
      assertEquals(163.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 163);
      assertEquals(163L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(326, fraction1.getNumerator());
      assertEquals((short)326, fraction1.shortValue());
  }
}
