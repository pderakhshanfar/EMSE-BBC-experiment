/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:20:00 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), 37);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(0L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1119L), 9007199254727144L);
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(629);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      float float0 = bigFraction1.floatValue();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((-5.877472E-39F), float0, 0.01F);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertNotNull(bigFraction0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.ZERO.divide(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, 1.4015110811648513E195, Integer.MAX_VALUE);
      assertNotNull(bigFraction0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      assertNotNull(bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      assertNotNull(bigFraction0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1006), 1);
      assertNotNull(bigFraction0);
      assertEquals((byte)18, bigFraction0.byteValue());
      assertEquals((short) (-1006), bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract(0L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)18, bigFraction0.byteValue());
      assertEquals((short) (-1006), bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction0.pow(2948L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertEquals((byte)18, bigFraction0.byteValue());
      assertEquals((short) (-1006), bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertNotNull(bigFraction3);
      assertEquals((byte)18, bigFraction0.byteValue());
      assertEquals((short) (-1006), bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte) (-1), bigFraction3.byteValue());
      assertEquals((short) (-1), bigFraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1006), 1);
      assertNotNull(bigFraction0);
      assertEquals((byte)18, bigFraction0.byteValue());
      assertEquals((short) (-1006), bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(2948L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)18, bigFraction0.byteValue());
      assertEquals((short) (-1006), bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertEquals((byte)18, bigFraction0.byteValue());
      assertEquals((short) (-1006), bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte) (-18), bigFraction2.byteValue());
      assertEquals((short)1006, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigFraction bigFraction0 = new BigFraction(1563L);
      assertNotNull(bigFraction0);
      assertEquals((short)1563, bigFraction0.shortValue());
      assertEquals((byte)27, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1563, bigFraction0.shortValue());
      assertEquals((byte)27, bigFraction0.byteValue());
      assertEquals((short)1562, bigFraction1.shortValue());
      assertEquals((byte)26, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract((-1549L));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1549, bigFraction1.shortValue());
      assertEquals((byte)13, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), (-1));
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract((-1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(1882);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short) (-1881), bigFraction1.shortValue());
      assertEquals((byte) (-89), bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction1.reduce();
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short) (-1881), bigFraction1.shortValue());
      assertEquals((byte) (-89), bigFraction1.byteValue());
      assertEquals((byte) (-89), bigFraction2.byteValue());
      assertEquals((short) (-1881), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reciprocal();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3242.747, 1368.274345, 1073741824);
      assertNotNull(bigFraction0);
      assertEquals((byte) (-86), bigFraction0.byteValue());
      assertEquals((short)3242, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte) (-86), bigFraction0.byteValue());
      assertEquals((short)3242, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.525932713519751E-10);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.pow((long) (-1649));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)3, bigFraction1.byteValue());
      assertEquals((short) (-9213), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract((long) 96);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-95), bigFraction1.shortValue());
      assertEquals((byte) (-95), bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction1.pow((long) 96);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-95), bigFraction1.shortValue());
      assertEquals((byte) (-95), bigFraction1.byteValue());
      assertEquals((short)3504, bigFraction2.shortValue());
      assertEquals((byte) (-80), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.ONE.pow(0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      double double0 = bigFraction0.ONE_FIFTH.pow(790.4580607935);
      assertEquals(0.0, double0, 0.01);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), 37);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      double double0 = bigFraction0.pow((double) (-1));
      assertEquals((-37.0), double0, 0.01);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      double double0 = bigFraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-633L));
      assertNotNull(bigFraction0);
      assertEquals((byte) (-121), bigFraction0.byteValue());
      assertEquals((short) (-633), bigFraction0.shortValue());
      
      double double0 = bigFraction0.percentageValue();
      assertEquals((-63300.0), double0, 0.01);
      assertEquals((byte) (-121), bigFraction0.byteValue());
      assertEquals((short) (-633), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1679);
      assertNotNull(bigFraction0);
      assertEquals((short)1679, bigFraction0.shortValue());
      assertEquals((byte) (-113), bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(3637L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)1679, bigFraction0.shortValue());
      assertEquals((byte) (-113), bigFraction0.byteValue());
      assertEquals((byte)90, bigFraction1.byteValue());
      assertEquals((short) (-1958), bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction1.negate();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertEquals((short)1679, bigFraction0.shortValue());
      assertEquals((byte) (-113), bigFraction0.byteValue());
      assertEquals((byte)90, bigFraction1.byteValue());
      assertEquals((short) (-1958), bigFraction1.shortValue());
      assertEquals((short)1958, bigFraction2.shortValue());
      assertEquals((byte) (-90), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1679);
      assertNotNull(bigFraction0);
      assertEquals((short)1679, bigFraction0.shortValue());
      assertEquals((byte) (-113), bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.negate();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)1679, bigFraction0.shortValue());
      assertEquals((byte) (-113), bigFraction0.byteValue());
      assertEquals((byte)113, bigFraction1.byteValue());
      assertEquals((short) (-1679), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.add((-175L));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short) (-174), bigFraction1.shortValue());
      assertEquals((byte)82, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short) (-174), bigFraction1.shortValue());
      assertEquals((byte)82, bigFraction1.byteValue());
      assertEquals((byte) (-104), bigFraction2.byteValue());
      assertEquals((short) (-104), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      
      BigFraction bigFraction2 = bigFraction1.multiply(bigInteger1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte) (-4), bigFraction2.byteValue());
      assertEquals((short) (-4), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1634, 1634);
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(4019, 4019);
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.divide(4019);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte) (-77), bigFraction2.byteValue());
      assertEquals((short)4019, bigFraction2.shortValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigFraction bigFraction3 = bigFraction2.multiply(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertNotNull(bigFraction3);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte) (-77), bigFraction2.byteValue());
      assertEquals((short)4019, bigFraction2.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte) (-77), bigFraction3.byteValue());
      assertEquals((short)4019, bigFraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply((long) (byte)5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)3, bigFraction1.shortValue());
      assertEquals((byte)3, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), (-1));
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply((-1616));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short) (-1616), bigFraction1.shortValue());
      assertEquals((byte) (-80), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-645.279509284));
      assertNotNull(bigFraction0);
      assertEquals((byte)123, bigFraction0.byteValue());
      assertEquals((short) (-645), bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.multiply(69);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)123, bigFraction0.byteValue());
      assertEquals((short) (-645), bigFraction0.shortValue());
      assertEquals((byte)46, bigFraction1.byteValue());
      assertEquals((short)46, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
      
      long long0 = bigFraction0.TWO.longValue();
      assertEquals(2L, long0);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.subtract(1337);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-58), bigFraction1.byteValue());
      assertEquals((short) (-1338), bigFraction1.shortValue());
      
      long long0 = bigFraction1.longValue();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((-1338L), long0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-58), bigFraction1.byteValue());
      assertEquals((short) (-1338), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      int int0 = bigFraction0.ONE_FIFTH.intValue();
      assertEquals(0, int0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1679);
      assertNotNull(bigFraction0);
      assertEquals((byte) (-113), bigFraction0.byteValue());
      assertEquals((short)1679, bigFraction0.shortValue());
      
      int int0 = bigFraction0.TWO.intValue();
      assertEquals(2, int0);
      assertEquals((byte) (-113), bigFraction0.byteValue());
      assertEquals((short)1679, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3925.5147865126));
      assertNotNull(bigFraction0);
      assertEquals((short) (-3925), bigFraction0.shortValue());
      assertEquals((byte) (-85), bigFraction0.byteValue());
      
      long long0 = bigFraction0.TWO_QUARTERS.getNumeratorAsLong();
      assertEquals(1L, long0);
      assertEquals((short) (-3925), bigFraction0.shortValue());
      assertEquals((byte) (-85), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2146114200), 194);
      assertNotNull(bigFraction0);
      assertEquals((byte)84, bigFraction0.byteValue());
      assertEquals((short)13140, bigFraction0.shortValue());
      
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals((-1073057100L), long0);
      assertEquals((byte)84, bigFraction0.byteValue());
      assertEquals((short)13140, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1679);
      assertNotNull(bigFraction0);
      assertEquals((byte) (-113), bigFraction0.byteValue());
      assertEquals((short)1679, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.ZERO.pow(113236205062349959L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte) (-113), bigFraction0.byteValue());
      assertEquals((short)1679, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      int int0 = bigFraction1.getNumeratorAsInt();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, int0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-113), bigFraction0.byteValue());
      assertEquals((short)1679, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals((-1), int0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1679);
      assertNotNull(bigFraction0);
      assertEquals((short)1679, bigFraction0.shortValue());
      assertEquals((byte) (-113), bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)1679, bigFraction0.shortValue());
      assertEquals((byte) (-113), bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigInteger0);
      assertEquals((short)1679, bigFraction0.shortValue());
      assertEquals((byte) (-113), bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply(4503599627370495L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-103), bigFraction1.byteValue());
      assertEquals((short) (-26215), bigFraction1.shortValue());
      
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-103), bigFraction1.byteValue());
      assertEquals((short) (-26215), bigFraction1.shortValue());
      assertEquals((short) (-26215), bigInteger0.shortValue());
      assertEquals((byte) (-103), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(0L, long0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(96);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      
      long long0 = bigFraction1.getDenominatorAsLong();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((-1983639665607471487L), long0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1649), (-1649));
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(1, int0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4556L);
      assertNotNull(bigFraction0);
      assertEquals((byte) (-52), bigFraction0.byteValue());
      assertEquals((short)4556, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.divide(2779484L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte) (-52), bigFraction0.byteValue());
      assertEquals((short)4556, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigInteger0);
      assertEquals((byte) (-52), bigFraction0.byteValue());
      assertEquals((short)4556, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)87, bigInteger0.byteValue());
      assertEquals((short) (-26025), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(37, 1246);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1246, bigInteger0.shortValue());
      assertEquals((byte) (-34), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      float float0 = bigFraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      double double0 = bigFraction0.ZERO.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-55.7828874));
      assertNotNull(bigFraction0);
      assertEquals((short) (-55), bigFraction0.shortValue());
      assertEquals((byte) (-55), bigFraction0.byteValue());
      
      double double0 = bigFraction0.doubleValue();
      assertEquals((-55.7828874), double0, 0.01);
      assertEquals((short) (-55), bigFraction0.shortValue());
      assertEquals((byte) (-55), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.divide(bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3925.5147865126));
      assertNotNull(bigFraction0);
      assertEquals((byte) (-85), bigFraction0.byteValue());
      assertEquals((short) (-3925), bigFraction0.shortValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte) (-85), bigFraction0.byteValue());
      assertEquals((short) (-3925), bigFraction0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short) (-3925), bigFraction1.shortValue());
      assertEquals((byte) (-85), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-28416), bigInteger0.shortValue());
      assertEquals(2, byteArray0.length);
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0}, byteArray0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-28416), bigInteger0.shortValue());
      assertEquals((short) (-13311), bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals(2, byteArray0.length);
      
      BigFraction bigFraction2 = bigFraction1.divide(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0}, byteArray0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-28416), bigInteger0.shortValue());
      assertEquals((short) (-13311), bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)6325, bigFraction2.shortValue());
      assertEquals((byte) (-75), bigFraction2.byteValue());
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.subtract(1960L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)89, bigFraction1.byteValue());
      assertEquals((short) (-1959), bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction1.divide((long) 1073);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)89, bigFraction1.byteValue());
      assertEquals((short) (-1959), bigFraction1.shortValue());
      assertEquals((short) (-1), bigFraction2.shortValue());
      assertEquals((byte) (-1), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5648769086999809661L);
      assertNotNull(bigFraction0);
      assertEquals((short) (-12675), bigFraction0.shortValue());
      assertEquals((byte)125, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.divide((-2748));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short) (-12675), bigFraction0.shortValue());
      assertEquals((byte)125, bigFraction0.byteValue());
      assertEquals((short)18488, bigFraction1.shortValue());
      assertEquals((byte)56, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1634, 1634);
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.add(6722166367014452318L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)95, bigFraction1.byteValue());
      assertEquals((short)31839, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction1.divide(1634);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)95, bigFraction1.byteValue());
      assertEquals((short)31839, bigFraction1.shortValue());
      assertEquals((byte) (-93), bigFraction2.byteValue());
      assertEquals((short) (-2909), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), (-1));
      assertNotNull(bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(0, int0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = new BigFraction(0.0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(1, int0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = new BigFraction(0.0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      int int0 = bigFraction1.compareTo(bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((-1), int0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(1075, 5);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4577762542105553359L);
      assertNotNull(bigFraction0);
      assertEquals((byte) (-49), bigFraction0.byteValue());
      assertEquals((short)27087, bigFraction0.shortValue());
      
      BigDecimal bigDecimal0 = bigFraction0.ONE_FIFTH.bigDecimalValue((-2288), 4);
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-49), bigFraction0.byteValue());
      assertEquals((short)27087, bigFraction0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5648769086999809661L);
      assertNotNull(bigFraction0);
      assertEquals((short) (-12675), bigFraction0.shortValue());
      assertEquals((byte)125, bigFraction0.byteValue());
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(1, 1);
      assertNotNull(bigDecimal0);
      assertEquals((short) (-12675), bigFraction0.shortValue());
      assertEquals((byte)125, bigFraction0.byteValue());
      assertEquals((short) (-12675), bigDecimal0.shortValue());
      assertEquals((byte)125, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(4);
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1468L);
      assertNotNull(bigFraction0);
      assertEquals((short)1468, bigFraction0.shortValue());
      assertEquals((byte) (-68), bigFraction0.byteValue());
      
      BigDecimal bigDecimal0 = bigFraction0.TWO_FIFTHS.bigDecimalValue(1);
      assertNotNull(bigDecimal0);
      assertEquals((short)1468, bigFraction0.shortValue());
      assertEquals((byte) (-68), bigFraction0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1679);
      assertNotNull(bigFraction0);
      assertEquals((byte) (-113), bigFraction0.byteValue());
      assertEquals((short)1679, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.pow(1679);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte) (-113), bigFraction0.byteValue());
      assertEquals((short)1679, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue(0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-113), bigFraction0.byteValue());
      assertEquals((short)1679, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigDecimal bigDecimal0 = bigFraction0.ZERO.bigDecimalValue();
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
      
      BigDecimal bigDecimal0 = bigFraction0.MINUS_ONE.bigDecimalValue();
      assertNotNull(bigDecimal0);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-3196), 1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte) (-124), bigFraction1.byteValue());
      assertEquals((short) (-3196), bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-124), bigFraction1.byteValue());
      assertEquals((short) (-3196), bigFraction1.shortValue());
      assertEquals((byte) (-123), bigFraction2.byteValue());
      assertEquals((short) (-3195), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals(3, byteArray0.length);
      
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.add(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((short) (-256), bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.ZERO.divide(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      BigFraction bigFraction2 = bigFraction1.add(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte) (-127);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-127)}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((byte) (-127), bigInteger0.byteValue());
      assertEquals((short)129, bigInteger0.shortValue());
      assertEquals(9, byteArray0.length);
      
      BigFraction bigFraction1 = bigFraction0.TWO.add(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-127)}, byteArray0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte) (-127), bigInteger0.byteValue());
      assertEquals((short)129, bigInteger0.shortValue());
      assertEquals((byte) (-125), bigFraction1.byteValue());
      assertEquals((short)131, bigFraction1.shortValue());
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.add((long) (-1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.add((-887973261));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)116, bigFraction1.byteValue());
      assertEquals((short) (-25996), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.add((int) (byte) (-1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply(4503599627370495L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short) (-26215), bigFraction1.shortValue());
      assertEquals((byte) (-103), bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction1.abs();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short) (-26215), bigFraction1.shortValue());
      assertEquals((byte) (-103), bigFraction1.byteValue());
      assertEquals((byte) (-103), bigFraction2.byteValue());
      assertEquals((short) (-26215), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4577762542105553359L);
      assertNotNull(bigFraction0);
      assertEquals((short)27087, bigFraction0.shortValue());
      assertEquals((byte) (-49), bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.multiply(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)27087, bigFraction0.shortValue());
      assertEquals((byte) (-49), bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      
      // Undeclared exception!
//      try { 
        bigFraction1.reciprocal();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      // Undeclared exception!
//      try { 
        bigFraction0.pow((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      // Undeclared exception!
//      try { 
        bigFraction0.pow((-9223372036854775808L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // exponent (-9,223,372,036,854,775,808)
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
      
      // Undeclared exception!
//      try { 
        bigFraction0.ZERO.pow((-756L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      // Undeclared exception!
//      try { 
        bigFraction0.ZERO.pow((-822));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1126, (-223));
      assertNotNull(bigFraction0);
      assertEquals((byte) (-5), bigFraction0.byteValue());
      assertEquals((short) (-5), bigFraction0.shortValue());
      
      // Undeclared exception!
//      try { 
        bigFraction0.pow(2147483136);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger would overflow supported range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
//      try { 
        BigFraction.getReducedFraction((-915), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      // Undeclared exception!
//      try { 
        bigFraction0.divide(0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
      
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue(2147421684, (-725));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(969, 969);
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue(2146892807, 1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger would overflow supported range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), 37);
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue((int) (byte) (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(3, byteArray0.length);
      
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
//      try { 
        bigFraction1.bigDecimalValue();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Non-terminating decimal expansion; no exact representable decimal result.
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1368.274345, 1075);
      assertNotNull(bigFraction0);
      assertEquals((byte)88, bigFraction0.byteValue());
      assertEquals((short)1368, bigFraction0.shortValue());
      
//      try { 
        bigFraction0.add((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numerator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numerator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(0L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte) (-9), bigFraction1.byteValue());
      assertEquals((short) (-9), bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction1.pow(437);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte) (-9), bigFraction1.byteValue());
      assertEquals((short) (-9), bigFraction1.shortValue());
      assertEquals((short) (-13952), bigFraction2.shortValue());
      assertEquals((byte) (-128), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      
      boolean boolean0 = bigFraction0.equals(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(boolean0);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(boolean0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1679);
      assertNotNull(bigFraction0);
      assertEquals((short)1679, bigFraction0.shortValue());
      assertEquals((byte) (-113), bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      // Undeclared exception!
//      try { 
        bigFraction0.divide(bigInteger0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.reciprocal();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.ONE.reduce();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(969, 969);
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)11, bigFraction1.byteValue());
      assertEquals((short)11, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4556L);
      assertNotNull(bigFraction0);
      assertEquals((byte) (-52), bigFraction0.byteValue());
      assertEquals((short)4556, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.divide(2779484L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte) (-52), bigFraction0.byteValue());
      assertEquals((short)4556, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      
      String string0 = bigFraction1.toString();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals("1139 / 694871", string0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(string0);
      assertEquals((byte) (-52), bigFraction0.byteValue());
      assertEquals((short)4556, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1679);
      assertNotNull(bigFraction0);
      assertEquals((short)1679, bigFraction0.shortValue());
      assertEquals((byte) (-113), bigFraction0.byteValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("1679", string0);
      assertNotNull(string0);
      assertEquals((short)1679, bigFraction0.shortValue());
      assertEquals((byte) (-113), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1246, 37);
      assertNotNull(bigFraction0);
      assertEquals((byte)33, bigFraction0.byteValue());
      assertEquals((short)33, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = new BigFraction(0.0, 37, 1416);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertEquals((byte)33, bigFraction0.byteValue());
      assertEquals((short)33, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)33, bigFraction2.byteValue());
      assertEquals((short)33, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      // Undeclared exception!
//      try { 
        bigFraction0.TWO_THIRDS.subtract((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      // Undeclared exception!
//      try { 
        bigFraction0.MINUS_ONE.subtract((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
//      try { 
        bigFraction0.ZERO.pow(bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3805.33756636216));
      BigFraction bigFraction1 = bigFraction0.pow((-1056L));
      int int0 = bigFraction1.getDenominatorAsInt();
      assertEquals((-882946687), int0);
      assertEquals((short) (-3805), bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), (-1));
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertSame(bigFraction2, bigFraction1);
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.485047677956373);
      // Undeclared exception!
//      try { 
        bigFraction0.ONE_HALF.multiply((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.multiply((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow((-1075));
      float float0 = bigFraction1.floatValue();
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      assertEquals((byte)22, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1679);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.divide(4503599627370496L);
      boolean boolean0 = bigFraction0.TWO_QUARTERS.equals(bigFraction2);
      assertFalse(boolean0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte) (-113), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1368.274345, 1080);
      Object object0 = new Object();
      boolean boolean0 = bigFraction0.equals(object0);
      assertEquals((short)1368, bigFraction0.shortValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      boolean boolean0 = bigFraction0.equals(bigFraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow((-1075));
      double double0 = bigFraction1.doubleValue();
      assertEquals(2.037707546916357E134, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.ZERO;
      // Undeclared exception!
//      try { 
        bigFraction0.TWO_FIFTHS.divide(bigFraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.divide((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.divide(0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.divide((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1679);
      // Undeclared exception!
//      try { 
        bigFraction0.add((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1125899190665232L);
      bigFraction0.abs();
      assertEquals((byte)16, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4556L);
      BigFraction bigFraction1 = bigFraction0.ZERO.add((-836L));
      BigFraction bigFraction2 = bigFraction1.abs();
      assertEquals((byte) (-68), bigFraction1.byteValue());
      assertEquals((byte)68, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, (byte)61);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.3119103908538818, 24140891);
      double double0 = bigFraction0.doubleValue();
      assertEquals(1.3119103908538818, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((-8.137269363160008E-8), (-8.137269363160008E-8), (-304));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert -0 to fraction after -304 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((double) (-821), 3144);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -821 to fraction (-9,223,372,036,854,774,986/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((double) 3637L, 0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 3,637 to fraction (9,223,372,036,854,772,172/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((double) 113236205062349959L, 1679);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 113,236,205,062,349,952 to fraction (113,236,205,062,349,952/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot convert infinite value
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(9, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(100);
      double double0 = bigFraction0.pow((double) 113236205062349959L);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1119L), 9007199254727144L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1125899190665232L);
      BigFraction bigFraction1 = bigFraction0.divide(1256L);
      assertEquals((short)6261, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3805.33756636216));
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals((short) (-3805), bigFraction0.shortValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.multiply(72142028800L);
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1107.1));
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(6, 6);
      assertEquals((short) (-1107), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.multiply((-1429));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.TWO_THIRDS.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.negate();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(100);
      BigFraction bigFraction1 = bigFraction0.subtract(100);
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)100, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(100);
      bigFraction0.hashCode();
      assertEquals((short)100, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1125899190665232L);
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(1L, long0);
      assertEquals((short)16, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1125899190665232L);
      double double0 = bigFraction0.percentageValue();
      assertEquals(1.125899190665232E17, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-371), (-371));
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(100);
      bigFraction0.ONE.bigDecimalValue();
      assertEquals((byte)100, bigFraction0.byteValue());
      assertEquals((short)100, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 9223372036854775801L);
      // Undeclared exception!
//      try { 
        bigFraction0.compareTo((BigFraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.add(96);
      BigFraction bigFraction2 = bigFraction1.add(96);
      assertEquals((short)192, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-645.279509284));
      bigFraction0.THREE_QUARTERS.getNumeratorAsInt();
      assertEquals((short) (-645), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertNotNull(bigFractionField0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigInteger bigInteger1 = bigFraction0.getDenominator();
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1125899190665232L);
      int int0 = bigFraction0.intValue();
      assertEquals((-716177392), int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(100);
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)100, bigFraction0.byteValue());
  }
}
