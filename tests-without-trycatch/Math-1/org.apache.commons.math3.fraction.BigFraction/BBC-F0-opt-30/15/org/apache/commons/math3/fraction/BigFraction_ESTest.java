/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:46:59 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(874085034754048L, 9218868437227405312L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.FOUR_FIFTHS.pow(bigInteger0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      float float0 = bigFraction0.floatValue();
      assertEquals(0.6666667F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1903.1372), 342.8, (-1));
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertEquals((byte) (-111), bigFraction2.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0);
      BigFraction bigFraction1 = bigFraction0.abs();
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      assertEquals((short) (-1), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      BigFraction bigFraction1 = new BigFraction(1, 1);
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)2, bigFraction2.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = new BigFraction((double) 1724L);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals((short) (-1723), bigFraction2.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.subtract(bigFraction0);
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      assertEquals((byte)2, bigFraction1.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract((-9223372036854775808L));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.subtract((long) 52);
      assertEquals((byte) (-53), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.subtract(1);
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5711395760898048L, 9007199254740990L);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reduce();
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-124L));
      BigFraction bigFraction2 = bigFraction1.reduce();
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)29079, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1044, 4);
      bigFraction0.reciprocal();
      assertEquals((short)261, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reciprocal();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-1), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-198.9345464112));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((byte)58, bigFraction0.byteValue());
      assertEquals((short) (-26857), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3313.602));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((byte) (-11), bigFraction1.byteValue());
      assertEquals((byte)15, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3313.602), 4);
      BigFraction bigFraction1 = bigFraction0.pow(1752L);
      assertEquals((short) (-18478), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(0);
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.pow((-2985));
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      double double0 = bigFraction0.TWO_QUARTERS.pow((double) 3341L);
      assertEquals(0.0, double0, 0.01);
      assertEquals((short)10, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, (-1302));
      double double0 = bigFraction0.pow((double) 1L);
      assertEquals((-7.680491551459293E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1903.1372), 342.8, (-1));
      double double0 = bigFraction0.percentageValue();
      assertEquals((-190400.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.negate();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      bigFraction0.negate();
      assertEquals((short) (-1), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.subtract((-568));
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.multiply(bigFraction1);
      assertEquals((byte)56, bigFraction1.byteValue());
      assertEquals((byte)28, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-198.9345464112));
      BigFraction bigFraction1 = bigFraction0.pow((long) 0);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertEquals((short) (-198), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3859, (-2287));
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      assertEquals((byte) (-3), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1538L), (-1265L));
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      bigFraction0.FOUR_FIFTHS.multiply(bigInteger0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertEquals((short) (-10), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1724L);
      long long0 = bigFraction0.longValue();
      assertEquals(1724L, long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1903.1372), 342.8, (-1));
      long long0 = bigFraction0.longValue();
      assertEquals((-1904L), long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      int int0 = bigFraction0.THREE_QUARTERS.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      int int0 = bigFraction0.MINUS_ONE.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(921, (-1));
      assertEquals((short) (-921), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(734, 501);
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0, (-2027));
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1903.1372), 342.8, (-1));
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals((-1904L), long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-198.9345464112));
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(840952233, int0);
      assertEquals((short) (-198), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      bigFraction0.MINUS_ONE.getNumeratorAsInt();
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short)2, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-124L));
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      assertEquals((short) (-25455), bigInteger0.shortValue());
      assertEquals((short)29079, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3313.602), 4);
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(1724L);
      long long0 = bigFraction1.getDenominatorAsLong();
      assertEquals((-8297311923688926319L), long0);
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-198.9345464112));
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals((byte)58, bigFraction0.byteValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      bigFraction0.ZERO.getDenominatorAsInt();
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(71.07913, 2147418113);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((byte) (-96), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(734, 1395.022158, 734);
      bigFraction0.getDenominator();
      assertEquals((byte) (-34), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      float float0 = bigFraction0.ZERO.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.subtract((int) (byte)1);
      float float0 = bigFraction1.floatValue();
      assertEquals((-2.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0);
      double double0 = bigFraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      double double0 = bigFraction0.doubleValue();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.multiply((-1));
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-1), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE.divide(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3859, (-2287));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-1), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(734, 734, 734);
      BigFraction bigFraction1 = bigFraction0.divide((long) 734);
      assertEquals((short)1, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3313.602), 4);
      BigFraction bigFraction1 = bigFraction0.divide(2093L);
      assertEquals((byte)15, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(244, 2381);
      BigFraction bigFraction1 = bigFraction0.subtract(583);
      BigFraction bigFraction2 = bigFraction1.divide((-1));
      assertEquals((short)582, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.divide(1573);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(244, 2381);
      BigFraction bigFraction1 = bigFraction0.multiply(2381);
      BigFraction bigFraction2 = bigFraction1.divide((-1));
      assertEquals((short) (-244), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(52);
      BigFraction bigFraction2 = bigFraction1.divide(52);
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short) (-1), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = new BigFraction(734, (-1L));
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals((short) (-734), bigFraction1.shortValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigDecimal bigDecimal0 = bigFraction0.ONE_HALF.bigDecimalValue((int) (byte)45, (int) (byte)1);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(1, 5);
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO.multiply((-1298L));
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue(1, 5);
      assertEquals((short) (-2596), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3859, (-2287));
      BigFraction bigFraction1 = bigFraction0.pow((-194));
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue(1);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue();
      assertEquals((byte) (-9), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.TWO_FIFTHS.bigDecimalValue();
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(734, 1395.022158, 734);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((byte) (-34), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3313.602));
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertEquals((byte)29, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(2735L);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)2735, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction((-308.0));
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((short) (-298), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.subtract(1);
      BigFraction bigFraction2 = bigFraction1.add((-1L));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5711395760898048L, 9007199254740990L);
      BigFraction bigFraction1 = bigFraction0.add(9007199254740990L);
      assertEquals((byte) (-2), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.add((-712));
      assertEquals((short) (-712), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.add((-1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.add(1371);
      assertEquals((byte)91, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.abs();
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      // Undeclared exception!
//      try { 
        bigFraction1.reciprocal();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.pow((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((long) 0);
      // Undeclared exception!
//      try { 
        bigFraction0.pow((long) (-2027));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(6.16922678220444E-8, 1482.166, (-4830));
      // Undeclared exception!
//      try { 
        bigFraction0.pow((-194));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      // Undeclared exception!
//      try { 
        bigFraction0.pow(2146586995);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger would overflow supported range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.TWO_FIFTHS.divide(0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
//      try { 
        bigFraction0.ONE_FIFTH.compareTo((BigFraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue(3, 37);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-198.9345464112));
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue(2147483625);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      // Undeclared exception!
//      try { 
        bigFraction0.TWO_THIRDS.bigDecimalValue();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Non-terminating decimal expansion; no exact representable decimal result.
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0875862700108075, 0.0875862700108075, 611372312);
//      try { 
        bigFraction0.add((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numerator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(2147483639, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.multiply(bigFraction0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = new BigFraction(6.16922678220444E-8, 1482.166, (-4830));
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)10, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(734, 734, 734);
      BigFraction bigFraction1 = new BigFraction(734, 0.9999999186273064, 734);
      boolean boolean0 = bigFraction0.equals(bigFraction1);
      assertTrue(boolean0);
      assertEquals((byte) (-34), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-198.9345464112));
      BigFraction bigFraction1 = bigFraction0.pow((long) 0);
      boolean boolean0 = bigFraction0.equals(bigFraction1);
      assertFalse(boolean0);
      assertEquals((short) (-198), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      boolean boolean0 = bigFraction0.equals(bigFraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      double double0 = bigFraction0.doubleValue();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(71.07913, 2147418113);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(71.07913, 2147418113);
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
//      try { 
        bigFraction0.divide(bigInteger0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(1L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertEquals((short)100, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO.reduce();
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((byte)10, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(8.787501601904039E49);
      String string0 = bigFraction0.toString();
      assertEquals("87875016019040391019310704138893781392963542188032", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      String string0 = bigFraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(270.1979640196, 270.1979640196, 734);
      // Undeclared exception!
//      try { 
        bigFraction0.subtract((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.subtract((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE.pow(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
//      try { 
        bigFraction0.FOUR_FIFTHS.pow((-9223372036854775808L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // exponent (-9,223,372,036,854,775,808)
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1044, 4);
      BigFraction bigFraction1 = bigFraction0.multiply((long) 0);
      BigFraction bigFraction2 = bigFraction0.ONE_THIRD.multiply(bigFraction1);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)5, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-198.9345464112));
      BigFraction bigFraction1 = new BigFraction((long) 0, (long) 273);
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      assertEquals((byte)58, bigFraction0.byteValue());
      assertTrue(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
//      try { 
        bigFraction0.multiply((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
//      try { 
        bigFraction0.multiply((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4503599627370495L, (-1L));
      Object object0 = new Object();
      boolean boolean0 = bigFraction0.TWO.equals(object0);
      assertFalse(boolean0);
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.ZERO;
      // Undeclared exception!
//      try { 
        bigFraction0.divide(bigFraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
//      try { 
        bigFraction0.THREE_QUARTERS.divide((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertEquals((byte)1, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3859, 3859);
      // Undeclared exception!
//      try { 
        bigFraction0.FOUR_FIFTHS.divide((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(8.787501601904039E49);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.add((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4503599627370495L, (-1L));
      BigFraction bigFraction1 = bigFraction0.abs();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(71.07913, 2147418113);
      BigFraction bigFraction1 = bigFraction0.TWO.abs();
      assertEquals((short)2, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(4.066036653218687E-8, 4.066036653218687E-8, (-980));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert 0 to fraction after -980 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(0.0, (-460.19864), 511);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((double) 3859, 4);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 3,859 to fraction (9,223,372,036,854,771,950/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(1.8702183451052442E149, 1117);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 187,021,834,510,524,420,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(Float.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot convert infinite value
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
//      try { 
        BigFraction.getReducedFraction((-3600), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4503599627370495L, (-1L));
      double double0 = bigFraction0.pow((double) (byte)78);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      long long0 = bigFraction0.FOUR_FIFTHS.getNumeratorAsLong();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.divide((long) (-1));
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(874085034754048L, 9218868437227405312L);
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals((-33554432), int0);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.multiply(2385L);
      assertEquals((short)795, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(2);
      assertEquals((short)2, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2146841073, 553);
      // Undeclared exception!
//      try { 
        bigFraction0.ONE_THIRD.bigDecimalValue(2146841073, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger would overflow supported range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2079.608));
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.multiply((-1198));
      assertEquals((byte)113, bigFraction1.byteValue());
      assertEquals((short) (-2079), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4503599627370495L, (-1L));
      bigFraction0.TWO_QUARTERS.longValue();
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.negate();
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue(2);
      assertEquals((byte) (-2), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2079.608));
      bigFraction0.getDenominator();
      assertEquals((short) (-2079), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      double double0 = bigFraction0.ONE_FIFTH.percentageValue();
      assertEquals(20.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((short)2, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.add((-1L));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      int int0 = bigFraction0.THREE_FIFTHS.compareTo(bigFraction0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(874085034754048L, 9218868437227405312L);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract(4607182418800017408L);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(734, 734, 734);
      BigFraction bigFraction1 = bigFraction0.add(734);
      assertEquals((short)1468, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.25, 22359);
      // Undeclared exception!
//      try { 
        bigFraction0.divide(0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((long) 0);
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(8.787501601904039E49);
      BigFractionField bigFractionField0 = bigFraction0.ONE_QUARTER.getField();
      assertNotNull(bigFractionField0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numerator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1044, 4);
      int int0 = bigFraction0.intValue();
      assertEquals(261, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.reciprocal();
      assertEquals((byte)3, bigFraction1.byteValue());
  }
}
