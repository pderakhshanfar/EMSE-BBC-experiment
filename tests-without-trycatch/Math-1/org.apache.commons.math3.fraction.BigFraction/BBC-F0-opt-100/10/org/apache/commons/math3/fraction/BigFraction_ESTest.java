/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:58:30 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow((long) 0);
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ZERO.pow(0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-521));
      double double0 = bigFraction1.percentageValue();
      assertEquals(3.091126492029627E52, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 221);
      assertEquals((short)221, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-1), bigFraction2.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1582.8, 1582.8, (-407));
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(188L);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals((byte)45, bigFraction2.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE.subtract(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract((-2712L));
      bigFraction1.subtract(2712L);
      assertEquals((short)2712, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract((-1629));
      assertEquals((byte)93, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.6730501651763916);
      BigFraction bigFraction1 = bigFraction0.subtract(2);
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3417.0626057449));
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.subtract(1178);
      assertEquals((short) (-3417), bigFraction0.shortValue());
      assertEquals((short) (-1177), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE.reduce();
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reduce();
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-1), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(bigInteger0);
      assertEquals((short) (-1), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(699);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-69), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.pow((-1853L));
      assertEquals((short) (-20226), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      double double0 = bigFraction0.pow(9.641084488976048E-6);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      double double0 = bigFraction0.MINUS_ONE.pow((-2.8477710945673134E65));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      double double0 = bigFraction0.pow(1.0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.multiply((long) 0);
      double double0 = bigFraction1.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      double double0 = bigFraction0.percentageValue();
      assertEquals((-100.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.negate();
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract((-3398L));
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      assertEquals((byte)79, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.pow((-1394L));
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertEquals((byte)69, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((long) 512);
      BigFraction bigFraction1 = new BigFraction(9L, (long) 512);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction2);
      assertEquals((short) (-9), bigFraction3.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.multiply(bigInteger0);
      assertEquals((short)2, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertEquals((short) (-10), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1582.8, 1582.8, (-407));
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply(3733);
      assertEquals((byte) (-43), bigFraction1.byteValue());
      assertEquals((short)1582, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(699);
      bigFraction0.TWO.longValue();
      assertEquals((short)699, bigFraction0.shortValue());
      assertEquals((byte) (-69), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-298));
      long long0 = bigFraction0.longValue();
      assertEquals((-298L), long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      int int0 = bigFraction0.intValue();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow((-2696));
      int int0 = bigFraction1.intValue();
      assertEquals((-830365804), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(788, (-1));
      assertEquals((byte) (-20), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.multiply((long) 0);
      long long0 = bigFraction1.getNumeratorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((byte) (-1), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.multiply((long) 0);
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3417.0626057449));
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(1099511627776L, long0);
      assertEquals((short) (-3417), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-1629));
      int int0 = bigFraction1.getDenominatorAsInt();
      assertEquals(0, int0);
      assertEquals((short) (-21923), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow(2409);
      int int0 = bigFraction1.getDenominatorAsInt();
      assertEquals((-167244957), int0);
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3417.0626057449));
      bigFraction0.getDenominator();
      assertEquals((short) (-3417), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigInteger bigInteger1 = bigFraction0.getDenominator();
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.divide(4398046511103L);
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-1), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(839);
      float float0 = bigFraction1.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.negate();
      float float0 = bigFraction1.floatValue();
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      double double0 = bigFraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.multiply((-87L));
      double double0 = bigFraction1.doubleValue();
      assertEquals((-65.25), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction(1.6730501651763916);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertEquals((byte)1, bigFraction1.byteValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = new BigFraction((-1062.3886314));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      assertEquals((short) (-1062), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.divide(bigInteger0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertEquals((short)11, bigFraction2.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow((-2696));
      BigFraction bigFraction2 = bigFraction1.divide(113236205062349959L);
      assertEquals((short)26699, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.subtract((-1453L));
      BigFraction bigFraction2 = bigFraction1.divide((-1036));
      assertEquals((short) (-1), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.divide((-1));
      assertEquals((byte)1, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.subtract((-1738041L));
      BigFraction bigFraction2 = bigFraction1.divide(5);
      assertEquals((byte) (-40), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      int int0 = bigFraction0.ONE.compareTo(bigFraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.multiply((-1289));
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals(1, int0);
      assertEquals((short) (-429), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      int int0 = bigFraction0.ONE_FIFTH.compareTo(bigFraction0);
      assertEquals((-1), int0);
      assertEquals((short)10, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigDecimal bigDecimal0 = bigFraction0.TWO_THIRDS.bigDecimalValue((-1525), 3);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(100);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue((-1), 1);
      assertEquals((short)100, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract((-4035746434778044925L));
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue(4);
      assertEquals((short) (-26115), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(5);
      assertEquals((byte)1, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigDecimal bigDecimal0 = bigFraction0.ONE_HALF.bigDecimalValue();
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigDecimal bigDecimal0 = bigFraction0.MINUS_ONE.bigDecimalValue();
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE.add(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.add((-4267615245585081135L));
      int int0 = bigFraction1.getNumeratorAsInt();
      assertEquals((-2133058351), int0);
      assertEquals((byte) (-47), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.add((-1L));
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.add((-2204L));
      assertEquals((short) (-2204), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-521));
      BigFraction bigFraction2 = bigFraction1.add((-521));
      assertEquals((short)13119, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.abs();
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals((short)2, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
//      try { 
        bigFraction0.reciprocal();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      // Undeclared exception!
//      try { 
        bigFraction0.ONE_QUARTER.pow((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
//      try { 
        bigFraction0.pow((-9223372036854775808L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // exponent (-9,223,372,036,854,775,808)
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0877556633204222E-9, 100, 100);
      // Undeclared exception!
//      try { 
        bigFraction0.pow((-2054L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.add((-1));
      BigFraction bigFraction2 = bigFraction1.multiply((-1321L));
      // Undeclared exception!
//      try { 
        bigFraction2.pow((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.pow((-2147483645));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger would overflow supported range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
//      try { 
        BigFraction.getReducedFraction(4377, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
//      try { 
        bigFraction0.divide(0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue((-1036), 2610);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.reduce();
      // Undeclared exception!
//      try { 
        bigFraction1.bigDecimalValue();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Non-terminating decimal expansion; no exact representable decimal result.
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-298));
//      try { 
        bigFraction0.add((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numerator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(0L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.subtract(bigInteger0);
      assertEquals((short) (-9), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      boolean boolean0 = bigFraction0.equals(bigFraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      double double0 = bigFraction0.ONE_QUARTER.doubleValue();
      assertEquals(0.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        bigFraction0.divide(bigInteger0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2644281811660520851L), (-2644281811660520851L));
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3417.0626057449));
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertEquals((short) (-3417), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5, 5);
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      String string0 = bigFraction0.FOUR_FIFTHS.toString();
      assertEquals("4 / 5", string0);
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      String string0 = bigFraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract(bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      // Undeclared exception!
//      try { 
        bigFraction0.subtract((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
//      try { 
        bigFraction0.subtract((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
//      try { 
        bigFraction0.pow(bigInteger1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.pow((-1394L));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4.916314210412424E-9));
      // Undeclared exception!
//      try { 
        bigFraction0.multiply((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      // Undeclared exception!
//      try { 
        bigFraction0.ZERO.multiply((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow(157);
      float float0 = bigFraction1.floatValue();
      assertEquals(2.2577316E-28F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertTrue(boolean0);
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-71.43204306));
      BigFraction bigFraction1 = new BigFraction(1337L, 1337L);
      boolean boolean0 = bigFraction0.ONE_THIRD.equals(bigFraction1);
      assertFalse(boolean0);
      assertEquals((short) (-71), bigFraction0.shortValue());
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      Object object0 = new Object();
      boolean boolean0 = bigFraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow((-2696));
      double double0 = bigFraction1.doubleValue();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals((short) (-24684), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      // Undeclared exception!
//      try { 
        bigFraction0.divide(bigFraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
//      try { 
        bigFraction0.divide((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.THREE_QUARTERS.divide((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      // Undeclared exception!
//      try { 
        bigFraction0.ONE_QUARTER.add((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2147418108);
      BigFraction bigFraction1 = bigFraction0.abs();
      assertSame(bigFraction1, bigFraction0);
      assertEquals((byte) (-4), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.multiply((-1411L));
      BigFraction bigFraction2 = bigFraction1.abs();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short) (-1411), bigFraction1.shortValue());
      assertEquals((short)1411, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1397.11), 1.0877556633204222E-9, 100);
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue(1835);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((-1397.11), (-1397.11), 1373);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -1,397.11 to fraction (-139,681,709,855,698/99,979,035,191)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((double) Integer.MAX_VALUE, 2596);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(2.6676722922838097E190, 2147418113);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 26,676,722,922,838,097,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2147481600);
      BigFraction bigFraction1 = bigFraction0.divide(397L);
      assertEquals((byte) (-7), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot convert NaN value
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(699, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-71.43204306));
      bigFraction0.MINUS_ONE.getNumeratorAsLong();
      assertEquals((short) (-71), bigFraction0.shortValue());
      assertEquals((byte) (-71), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.07344966225083281);
      // Undeclared exception!
//      try { 
        bigFraction0.divide(0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.07344966225083281, 37);
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-71.43204306));
      bigFraction0.TWO_QUARTERS.getDenominatorAsInt();
      assertEquals((byte) (-71), bigFraction0.byteValue());
      assertEquals((short) (-71), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply(9154082963658192752L);
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertEquals((byte)46, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigDecimal bigDecimal0 = bigFraction0.ONE_HALF.bigDecimalValue(1);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-71.43204306));
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(2, 2);
      assertEquals((short) (-71), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      long long0 = bigFraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.negate();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), 2147475456);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((short) (-8192), bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.subtract(1032);
      assertEquals((short) (-1032), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(863, 863);
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue(2147456065, 5);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger would overflow supported range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((-561.9123571168602), 0, 0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert -561.912 to fraction after 0 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((byte)2, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.add((-624L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
      assertEquals((short) (-623), bigFraction2.shortValue());
      assertTrue(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
//      try { 
        bigFraction0.ONE_QUARTER.compareTo((BigFraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.subtract(3374L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.divide(bigInteger0);
      assertEquals((short) (-3374), bigFraction1.shortValue());
      assertEquals((byte) (-81), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.add((-1574));
      assertEquals((short) (-1573), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.divide((-1036));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      int int0 = bigFraction0.TWO_FIFTHS.getNumeratorAsInt();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertNotNull(bigFractionField0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numerator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(699);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short)699, bigInteger0.shortValue());
      assertEquals((short)699, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short)3, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      int int0 = bigFraction0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertEquals((byte)1, bigFraction1.byteValue());
  }
}
