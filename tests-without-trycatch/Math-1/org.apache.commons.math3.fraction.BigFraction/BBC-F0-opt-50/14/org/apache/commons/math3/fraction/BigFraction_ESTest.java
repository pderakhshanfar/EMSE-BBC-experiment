/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:46:06 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(0L);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow((int) (byte)0);
      assertEquals((short)1, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-298));
      float float0 = bigFraction1.floatValue();
      assertEquals(7.571534E28F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2319.5593594, (-49));
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)30, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.abs();
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((-144L), (long) (-1));
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)143, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.add((-200173L));
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals((byte)19, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.add(355L);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals((short) (-354), bigFraction2.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-13);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(bigInteger0);
      assertEquals((short)3329, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-36);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(bigInteger0);
      assertEquals((byte)37, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger1);
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      assertEquals((byte) (-1), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.subtract((long) (-3339));
      assertEquals((byte)11, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.ZERO.subtract((long) 1913);
      assertEquals((byte) (-121), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract(2147483488);
      assertEquals((short)161, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract(1);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.add(355L);
      BigFraction bigFraction2 = bigFraction1.reduce();
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)355, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-1), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reciprocal();
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(3244, (-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-3244), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.pow(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(355L, 355L);
      BigFraction bigFraction1 = bigFraction0.pow(355L);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L, (-748L));
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow((-33L));
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      double double0 = bigFraction0.pow(1132.138526);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      double double0 = bigFraction0.pow((double) 0.0F);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.059486798391184));
      double double0 = bigFraction0.pow(1.0);
      assertEquals((-1.059486798391184), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.ZERO.multiply((long) 1);
      double double0 = bigFraction1.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(3244, (-1));
      double double0 = bigFraction0.percentageValue();
      assertEquals((-324400.0), double0, 0.01);
      assertEquals((byte)84, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract(113236205062349959L);
      BigFraction bigFraction2 = bigFraction1.negate();
      assertEquals((short)25734, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.add(3205L);
      BigFraction bigFraction2 = bigFraction1.negate();
      assertEquals((short) (-3206), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2319.5593594, (-49));
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertEquals((byte)15, bigFraction0.byteValue());
      assertEquals((byte) (-31), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483648L, (-722L));
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertEquals((byte)84, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(4503599627370495L);
      BigFraction bigFraction2 = bigFraction1.multiply(4503599627370495L);
      BigFraction bigFraction3 = bigFraction2.multiply(bigFraction1);
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((byte) (-1), bigFraction3.byteValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1741L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.multiply(bigInteger0);
      assertEquals((short) (-10), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.multiply((-1L));
      assertEquals((byte) (-1), bigFraction2.byteValue());
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply((-127));
      assertEquals((byte) (-101), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.multiply(3);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO.multiply(4);
      assertEquals((byte)8, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      long long0 = bigFraction0.longValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3071.787738));
      long long0 = bigFraction0.longValue();
      assertEquals((-3071L), long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      int int0 = bigFraction0.intValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2961.3837123), (-1189));
      bigFraction0.MINUS_ONE.intValue();
      assertEquals((short) (-2962), bigFraction0.shortValue());
      assertEquals((byte)110, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(463, (-417));
      assertEquals((byte) (-1), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      long long0 = bigFraction0.MINUS_ONE.getNumeratorAsLong();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short)2, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.negate();
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(3873);
      long long0 = bigFraction1.getDenominatorAsLong();
      assertEquals((-5504820947529170555L), long0);
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.pow(696);
      int int0 = bigFraction1.getDenominatorAsInt();
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((-262143199), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.923734606208998E187);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(3873);
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      assertEquals((byte) (-123), bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      float float0 = bigFraction0.MINUS_ONE.floatValue();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      double double0 = bigFraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483648L, (-722L));
      double double0 = bigFraction0.doubleValue();
      assertEquals((-2974354.083102493), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction(506L, 506L);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertEquals((byte)1, bigFraction1.byteValue());
      assertTrue(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction(506L, (-724L));
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short) (-1), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483648L, (-722L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertEquals((short)30245, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(693.201004, 463);
      BigFraction bigFraction1 = bigFraction0.divide(199L);
      assertEquals((byte) (-75), bigFraction0.byteValue());
      assertEquals((short)3, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.divide(100L);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2319.5593594, (-49));
      BigFraction bigFraction1 = bigFraction0.divide((-147L));
      assertEquals((short) (-15), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1741L));
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow((-2785));
      BigFraction bigFraction2 = bigFraction1.divide(2153912);
      assertEquals((byte)111, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483648L, (-722L));
      BigFraction bigFraction1 = bigFraction0.divide(1055);
      assertEquals((byte) (-3), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(355L, 355L);
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(0, int0);
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(693.201004, 463);
      BigFraction bigFraction1 = new BigFraction((-1691L));
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals(1, int0);
      assertEquals((short) (-1691), bigFraction1.shortValue());
      assertEquals((short)693, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigDecimal bigDecimal0 = bigFraction0.ONE_QUARTER.bigDecimalValue(0, 0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigDecimal bigDecimal0 = bigFraction0.MINUS_ONE.bigDecimalValue((-691), 1);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1399.5077174401517), 4);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(901, 4);
      assertEquals((short) (-1399), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(1);
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.4406405999998242, 0.4406405999998242, 485);
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.reciprocal();
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue();
      assertEquals((short)2, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.negate();
      BigDecimal bigDecimal0 = bigFraction2.bigDecimalValue();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.add(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO.add(bigInteger0);
      assertEquals((short)2, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.subtract(3080);
      BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
      assertEquals((short) (-3078), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(693.201004);
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add((-500L));
      int int0 = bigFraction1.getDenominatorAsInt();
      assertEquals((byte)13, bigFraction1.byteValue());
      assertEquals((short)693, bigFraction0.shortValue());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2961.3837123), (-1189));
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.add((-1189));
      assertEquals((byte)92, bigFraction1.byteValue());
      assertEquals((short) (-2962), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2961.3837123), (-1189));
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.add((-1));
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)110, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.add(450);
      assertEquals((byte) (-62), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      byteArray0[2] = (byte)61;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.abs();
      assertEquals((short) (-61), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
//      try { 
        bigFraction0.reciprocal();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(307.9142);
      // Undeclared exception!
//      try { 
        bigFraction0.pow((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
//      try { 
        bigFraction0.THREE_FIFTHS.pow((-9223372036854775808L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // exponent (-9,223,372,036,854,775,808)
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
//      try { 
        bigFraction0.ZERO.pow((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow((-3889));
      // Undeclared exception!
//      try { 
        bigFraction1.pow(2147483149);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger would overflow supported range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
//      try { 
        BigFraction.getReducedFraction(1020, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L, (-748L));
      // Undeclared exception!
//      try { 
        bigFraction0.divide(0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
//      try { 
        bigFraction0.compareTo((BigFraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-790), 1032);
      // Undeclared exception!
//      try { 
        bigFraction0.MINUS_ONE.bigDecimalValue(1, (-790));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue(2147483639, 1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger would overflow supported range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
//      try { 
        bigFraction0.THREE_FIFTHS.bigDecimalValue((-1319));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Non-terminating decimal expansion; no exact representable decimal result.
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numerator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numerator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(bigFraction0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.pow(1915);
      boolean boolean0 = bigFraction0.equals(bigFraction1);
      assertTrue(boolean0);
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2961.3837123), (-1189));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.divide(bigInteger0);
      boolean boolean0 = bigFraction0.equals(bigFraction1);
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(boolean0);
      assertEquals((byte)110, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      double double0 = bigFraction0.doubleValue();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        bigFraction0.ONE.divide(bigInteger0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-5147.302));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-5147), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
//      try { 
        bigFraction0.add((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      String string0 = bigFraction0.toString();
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      String string0 = bigFraction0.TWO_FIFTHS.toString();
      assertEquals("2 / 5", string0);
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.ZERO.multiply((long) 1);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-783L), (-783L));
      // Undeclared exception!
//      try { 
        bigFraction0.TWO_FIFTHS.subtract((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2);
      // Undeclared exception!
//      try { 
        bigFraction0.subtract((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(693.201004, 463);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-36);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(bigInteger0);
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)693, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
//      try { 
        bigFraction0.pow((long) (-2147483647));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigFraction bigFraction1 = bigFraction0.ZERO.pow(4503599627370495L);
      assertEquals((short)1, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.ZERO.reduce();
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.multiply(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      // Undeclared exception!
//      try { 
        bigFraction0.multiply((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
//      try { 
        bigFraction0.multiply((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(3873);
      float float0 = bigFraction1.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      boolean boolean0 = bigFraction0.equals(bigFraction1);
      assertFalse(boolean0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3065.6067458));
      Object object0 = new Object();
      boolean boolean0 = bigFraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals((short) (-3065), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      boolean boolean0 = bigFraction0.equals(bigFraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-1331));
      double double0 = bigFraction1.doubleValue();
      assertEquals(9.710180740438245E128, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L, (-748L));
      // Undeclared exception!
//      try { 
        bigFraction0.TWO.divide(bigFraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      // Undeclared exception!
//      try { 
        bigFraction0.ONE_FIFTH.divide((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
//      try { 
        bigFraction0.FOUR_FIFTHS.divide(0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2193.637648946022);
      // Undeclared exception!
//      try { 
        bigFraction0.divide((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-1331));
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertEquals((byte) (-102), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.add((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigFraction bigFraction1 = bigFraction0.abs();
      assertSame(bigFraction1, bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((byte)0, 1);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2147483647), 1561);
      assertEquals((byte)34, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(1613.68650282199, 0.0341064457182938, 1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert 1,613.687 to fraction after 1 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((double) (-1507L), (-2342));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -1,507 to fraction (-9,223,372,036,854,774,300/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((double) Integer.MAX_VALUE, 3);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(644.5, 644.5, 0);
      assertEquals((byte) (-124), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot convert infinite value
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(0L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.923734606208998E187);
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3065.6067458));
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals((short) (-3065), bigFraction0.shortValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(78905216L);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(1);
      assertEquals((short) (-128), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigFraction bigFraction1 = bigFraction0.multiply(907);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger0);
      assertEquals((short)907, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      long long0 = bigFraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3065.6067458));
      BigFraction bigFraction1 = bigFraction0.subtract((-881));
      assertEquals((short) (-2184), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.923734606208998E187);
      bigFraction0.TWO_FIFTHS.hashCode();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      double double0 = bigFraction0.ONE.percentageValue();
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(5.923734606208998E187, 3.775134371775124E-11, (-251));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 59,237,346,062,089,980,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.add(4399824896L);
      assertEquals((short)1, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      int int0 = bigFraction0.TWO_QUARTERS.compareTo(bigFraction0);
      assertEquals((-1), int0);
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.divide(1261);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(693.201004);
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals((-369161029), int0);
      assertEquals((short)693, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(78905216L);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract((long) 0);
      assertEquals((short) (-128), bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(693.201004, 463);
      bigFraction0.getField();
      assertEquals((short)693, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      bigFraction0.TWO_QUARTERS.intValue();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
  }
}
