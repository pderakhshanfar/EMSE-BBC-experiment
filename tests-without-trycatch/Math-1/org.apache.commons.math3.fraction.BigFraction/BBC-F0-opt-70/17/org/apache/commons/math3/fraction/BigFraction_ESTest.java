/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:55:59 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.pow(0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.FOUR_FIFTHS.hashCode();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1, (-250));
      bigFraction0.add(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ZERO.abs();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.09428727993292796, 0.09428727993292796, 1262);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, 1.0, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3952090531849364496L, 3952090531849364496L);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3952090531849364496L, 3952090531849364496L);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.TWO_FIFTHS.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1209.689));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1006.4834311));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.subtract((long) 1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.subtract(1214L);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.subtract(0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ONE_QUARTER.subtract(837);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.6358907222747803, (-503));
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4140.023362), (-503));
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-714.3327434981136));
      bigFraction0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ZERO.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.TWO_THIRDS.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.THREE_FIFTHS.pow(0L);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.pow(273);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.pow(0.3728928000000451);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2555.0244885, 884);
      BigFraction bigFraction1 = bigFraction0.TWO.divide((-2901L));
      bigFraction1.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(529, 529);
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1006.4834311));
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.divide((-1L));
      bigFraction1.negate();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.negate();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1402.602067);
      bigFraction0.ONE_FIFTH.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3952090531849364496L, 3952090531849364496L);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.TWO_THIRDS.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.multiply((long) 2130836487);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.multiply(1755L);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2555.0244885, 884);
      bigFraction0.multiply(884);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ONE.longValue();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1209.689));
      bigFraction0.longValue();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.ONE.intValue();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2555.0244885, 884);
      BigFraction bigFraction1 = bigFraction0.multiply((long) (-1));
      bigFraction1.intValue();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction.getReducedFraction(443131547, 791);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction.getReducedFraction(2143231205, 1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4140.023362), (-503));
      bigFraction0.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.FOUR_FIFTHS.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.divide((-121));
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2965.26), 3);
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.pow((-687L));
      bigFraction1.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(795L, 9007199254735772L);
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(186.56306, 0.0, 2147483238);
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2.302351152358085E-9));
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.pow((-687L));
      bigFraction1.getDenominator();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.ZERO.floatValue();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.divide((-2665L));
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction1.divide(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.6358907222747803, (-503));
      bigFraction0.divide(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1006.4834311));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.TWO.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.multiply((-3137));
      bigFraction1.divide((-402L));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.multiply(4398046511103L);
      bigFraction1.divide(95L);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(884, 884);
      bigFraction0.divide(1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4140.023362), (-503));
      bigFraction0.MINUS_ONE.divide(1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(529, 529);
      bigFraction0.compareTo(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.reduce();
      bigFraction0.ONE_QUARTER.compareTo(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.TWO_THIRDS.bigDecimalValue(81, 1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(642.7359395);
      bigFraction0.bigDecimalValue(2, 2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-294.0));
      bigFraction0.bigDecimalValue(5);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.bigDecimalValue(0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.multiply((-3976));
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.bigDecimalValue(1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.TWO.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1412.3728928), 1);
      BigFraction bigFraction1 = bigFraction0.pow(1251L);
      bigFraction0.ZERO.add(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1209.689));
      BigFraction bigFraction1 = bigFraction0.ZERO.multiply(bigFraction0);
      bigFraction0.add(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1209.689));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-714.3327434981136));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.TWO_FIFTHS.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add((long) 4577);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      bigFraction0.FOUR_FIFTHS.add(0L);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ZERO.add((-1553L));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.add(0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.add(1175);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.MINUS_ONE.abs();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
//      try { 
        bigFraction0.reciprocal();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2555.0244885, 884);
      // Undeclared exception!
//      try { 
        bigFraction0.pow((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.8014398509481984E16);
      // Undeclared exception!
//      try { 
        bigFraction0.pow((-9223372036854775808L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // exponent (-9,223,372,036,854,775,808)
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
//      try { 
        bigFraction0.pow((-1836L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      // Undeclared exception!
//      try { 
        bigFraction1.pow((-5269));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
//      try { 
        bigFraction0.pow(2147483638);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger would overflow supported range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
//      try { 
        BigFraction.getReducedFraction((-1), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
//      try { 
        bigFraction0.divide(0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      // Undeclared exception!
//      try { 
        bigFraction0.compareTo((BigFraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue(2147481258, 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger would overflow supported range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue(4159);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-419L));
//      try { 
        bigFraction0.MINUS_ONE.add((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numerator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(0L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2555.0244885, 884);
      bigFraction0.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.divide(2130836487);
      bigFraction0.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = new BigFraction(2.2423186335040668E-8, (-206));
      bigFraction0.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        bigFraction0.divide(bigInteger0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-5269), (-5269));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(529, 529);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE_QUARTER.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(795L, 9007199254735772L);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
//      try { 
        bigFraction0.subtract((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
//      try { 
        bigFraction0.TWO_FIFTHS.subtract((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
//      try { 
        bigFraction0.pow(bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-294.0));
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((short) (-294), bigFraction0.shortValue());
      assertEquals((byte) (-38), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((long) 1449);
      double double0 = bigFraction1.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.TWO_QUARTERS.multiply((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(529, 529);
      // Undeclared exception!
//      try { 
        bigFraction0.multiply((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.pow((-687L));
      BigFraction bigFraction2 = bigFraction1.subtract((-687L));
      float float0 = bigFraction2.floatValue();
      assertEquals(687.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-294.0));
      float float0 = bigFraction0.floatValue();
      assertEquals((-294.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      boolean boolean0 = bigFraction0.THREE_FIFTHS.equals(bigFraction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.pow((-687L));
      double double0 = bigFraction1.doubleValue();
      assertEquals(6.806315082902062E85, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = new BigFraction(0L, 1227L);
      // Undeclared exception!
//      try { 
        bigFraction0.ONE_QUARTER.divide(bigFraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1398.6594219857434));
      // Undeclared exception!
//      try { 
        bigFraction0.divide((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.divide(bigFraction0);
      assertEquals((short) (-1), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      // Undeclared exception!
//      try { 
        bigFraction0.divide((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(186.56306, 0.0, 2147483238);
      // Undeclared exception!
//      try { 
        bigFraction0.add((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-294.0));
      bigFraction0.TWO_THIRDS.abs();
      assertEquals((short) (-294), bigFraction0.shortValue());
      assertEquals((byte) (-38), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0, 1.8718984127044678, 1298);
      BigFraction bigFraction1 = bigFraction0.add((-4238));
      BigFraction bigFraction2 = bigFraction1.abs();
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short)4238, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1673.2877), 0.5199999999999818, 6);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(37, 6);
      assertEquals((short) (-1673), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((-1122.5), (-1122.5), (-2429));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert -1,122.5 to fraction after -2,429 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(0.0, (-896.8301598258396), (-1599));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(2515.81178585798, 2147483599);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 2,515.812 to fraction (10,367,293,061/4,120,854)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(1.7976931348623157E308, (-2098), 52);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot convert infinite value
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-3976), (-206));
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Non-terminating decimal expansion; no exact representable decimal result.
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(1561, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      double double0 = bigFraction0.pow((double) 0L);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-294.0));
      bigFraction0.FOUR_FIFTHS.getNumeratorAsLong();
      assertEquals((short) (-294), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2135810074);
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)26, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.2423186335040668E-8, (-206));
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      int int0 = bigFraction0.TWO_THIRDS.getDenominatorAsInt();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply((long) 2147481600);
      BigFraction bigFraction2 = bigFraction1.abs();
      assertEquals((short) (-2048), bigFraction2.shortValue());
      assertSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-294.0));
      BigDecimal bigDecimal0 = bigFraction0.TWO_THIRDS.bigDecimalValue(0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short) (-294), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(795L, 9007199254735772L);
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue(1233, Integer.MAX_VALUE);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      BigFraction bigFraction1 = bigFraction0.multiply(4);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(795L, 9007199254735772L);
      bigFraction0.ZERO.longValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.negate();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-294.0));
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      boolean boolean0 = bigFraction0.ONE_THIRD.equals(bigInteger0);
      assertFalse(boolean0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short) (-294), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(642.7359395);
      BigFraction bigFraction1 = bigFraction0.subtract(364);
      assertEquals((short)278, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      double double0 = bigFraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.8014398509481984E16);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(529, 529);
      BigFraction bigFraction1 = bigFraction0.ZERO.add((long) 529);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)529, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-294.0));
      int int0 = bigFraction0.ONE_QUARTER.compareTo(bigFraction0);
      assertEquals(1, int0);
      assertEquals((short) (-294), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2135810074);
      // Undeclared exception!
//      try { 
        bigFraction0.divide(0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2135810074);
      bigFraction0.ZERO.getNumeratorAsInt();
      assertEquals((short) (-8166), bigFraction0.shortValue());
      assertEquals((byte)26, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFractionField bigFractionField0 = bigFraction0.TWO_THIRDS.getField();
      assertNotNull(bigFractionField0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numerator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      int int0 = bigFraction0.THREE_QUARTERS.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2135810074);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.reciprocal();
      assertEquals((byte)2, bigFraction1.byteValue());
  }
}
