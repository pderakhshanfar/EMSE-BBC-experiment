/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:40:48 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-9));
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction1.bigDecimalValue(1);
      bigFraction0.pow(110.97005459);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      bigFraction1.hashCode();
      bigFraction0.doubleValue();
      bigFraction0.divide((long) 1);
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger1);
      bigFraction2.getNumeratorAsLong();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(581, 7);
      BigFraction bigFraction4 = bigFraction3.add(461L);
      bigFraction4.ONE_QUARTER.multiply(bigInteger2);
      bigFraction1.pow((double) 581);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1585, (-1182));
      BigFraction bigFraction3 = new BigFraction((double) 1585);
      bigFraction1.divide(bigFraction2);
      bigFraction0.doubleValue();
      bigFraction1.multiply(1779);
      bigFraction2.getField();
      BigFraction bigFraction4 = new BigFraction((-529), (-1182));
      BigFraction bigFraction5 = bigFraction2.pow((-374L));
      BigFraction bigFraction6 = bigFraction5.subtract(bigFraction3);
      bigFraction6.floatValue();
      bigFraction0.reciprocal();
      BigFraction bigFraction7 = new BigFraction(bigInteger0);
      bigFraction1.pow(bigInteger0);
      BigFraction bigFraction8 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction9 = new BigFraction(8.395061723831532E-5);
      BigFraction bigFraction10 = null;
//      try {
        bigFraction10 = new BigFraction(0.007799999999974716, (-1585.0F), (-529));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert 0.008 to fraction after -529 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      bigFraction0.ONE_QUARTER.multiply(1666L);
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = null;
//      try {
        bigFraction1 = new BigFraction(Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot convert infinite value
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction(8711487114279124L, 8711487114279124L);
      BigFraction bigFraction2 = bigFraction0.ONE_THIRD.subtract(bigFraction1);
      bigFraction2.ZERO.hashCode();
      BigFraction bigFraction3 = bigFraction0.pow(1585);
      bigFraction0.floatValue();
      bigFraction3.FOUR_FIFTHS.divide(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.FOUR_FIFTHS.multiply(bigInteger0);
      bigFraction1.pow(1.0);
      bigFraction3.doubleValue();
      bigFraction3.getDenominator();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE_THIRD.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger1);
      bigFraction1.TWO.bigDecimalValue(0);
      int int0 = 37;
      // Undeclared exception!
//      try { 
        bigFraction1.THREE_FIFTHS.bigDecimalValue(37, 37);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = null;
//      try {
        bigFraction1 = new BigFraction(2327L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.pow(792L);
      bigFraction0.doubleValue();
      BigFraction bigFraction3 = bigFraction1.THREE_FIFTHS.subtract(1L);
      Random.setNextRandom(5);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(5, 5);
      bigFraction4.TWO_QUARTERS.doubleValue();
      BigFraction bigFraction5 = bigFraction4.multiply((-2378L));
      bigFraction5.ONE.reduce();
      bigFraction0.getDenominatorAsInt();
      bigFraction5.THREE_FIFTHS.intValue();
      BigFraction bigFraction6 = bigFraction1.divide((int) (byte)52);
      bigFraction6.MINUS_ONE.abs();
      bigFraction3.reduce();
      BigFraction bigFraction7 = bigFraction2.multiply(bigFraction3);
      bigFraction6.subtract((long) 5);
      bigFraction5.THREE_QUARTERS.multiply((long) 1);
      bigFraction5.negate();
      bigFraction7.getDenominatorAsLong();
      BigFraction bigFraction8 = BigFraction.getReducedFraction((byte)52, 1);
      bigFraction8.ZERO.divide(bigInteger0);
      // Undeclared exception!
//      try { 
        bigFraction4.bigDecimalValue(1, (int) (byte)52);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = new BigFraction(4503599627370495L, (-2584L));
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction2.getDenominator();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.doubleValue();
      bigFraction0.reciprocal();
      BigFraction bigFraction1 = new BigFraction(1170.62, 1373);
      BigFraction bigFraction2 = new BigFraction(0.0, 0.9999999247792558, (-1679));
      bigFraction1.reciprocal();
      BigFraction.getReducedFraction(1373, (-1679));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
//      try { 
        bigFraction2.pow(bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1237));
      BigFraction bigFraction1 = new BigFraction(Integer.MAX_VALUE, (-2211));
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.getDenominatorAsInt();
      BigFraction.getReducedFraction(2146759858, Integer.MAX_VALUE);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger1);
      bigFraction3.doubleValue();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction2.subtract(bigInteger2);
      BigFraction bigFraction4 = new BigFraction((double) Integer.MAX_VALUE);
      BigFraction bigFraction5 = new BigFraction((long) 2146759858, (long) Integer.MAX_VALUE);
      bigFraction5.multiply(Integer.MAX_VALUE);
      BigFraction bigFraction6 = new BigFraction(Integer.MAX_VALUE, 2.085295139897525E-6, 2211);
      BigFraction bigFraction7 = BigFraction.TWO_QUARTERS;
      bigFraction7.floatValue();
      bigFraction4.reciprocal();
      BigInteger bigInteger3 = BigInteger.TEN;
      BigFraction bigFraction8 = new BigFraction(bigInteger3);
      BigInteger bigInteger4 = null;
//      try {
        bigInteger4 = new BigInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2280L), (-2280L));
      BigFraction bigFraction1 = bigFraction0.divide((-135));
      BigFraction bigFraction2 = bigFraction1.divide(256L);
      bigFraction2.TWO_FIFTHS.subtract((-135));
      int int0 = 119;
      BigFraction.getReducedFraction(119, (-135));
      BigFraction bigFraction3 = bigFraction0.multiply(1679L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction3.TWO_QUARTERS.pow(bigInteger0);
      bigFraction3.ONE_FIFTH.intValue();
      BigFraction bigFraction5 = bigFraction3.ONE_HALF.subtract(0);
      bigFraction5.TWO.getField();
      bigFraction0.toString();
      bigFraction3.getField();
      bigFraction5.THREE_QUARTERS.multiply((-1396L));
      bigFraction2.doubleValue();
      bigFraction1.getDenominator();
      bigFraction5.TWO_THIRDS.divide((long) (-135));
      // Undeclared exception!
//      try { 
        bigFraction4.bigDecimalValue(2147483640, (-912));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction((-1.484557220949851E-8));
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction1.abs();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue(7, 7);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Rounding necessary
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(7.5466493008789115);
      bigFraction0.ONE_HALF.longValue();
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction0.TWO_FIFTHS.subtract(bigFraction1);
      bigFraction0.bigDecimalValue(0, 0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1548);
      bigFraction0.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = new BigFraction(100L);
      // Undeclared exception!
//      try { 
        bigFraction1.THREE_QUARTERS.multiply((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1548, 1548, 1548);
      bigFraction0.subtract((long) 1548);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ONE_THIRD.percentageValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction1.TWO_FIFTHS.subtract(bigInteger1);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
//      try { 
        bigFraction0.divide((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.ZERO.divide(3206);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.divide(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.TWO_FIFTHS.add((long) 3206);
      bigFraction1.TWO_QUARTERS.equals(bigFraction0);
      bigFraction1.ONE_FIFTH.getField();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction1.TWO_THIRDS.multiply(1L);
      bigFraction4.TWO.getNumeratorAsLong();
      BigFraction bigFraction5 = bigFraction1.add(bigFraction0);
      BigFraction bigFraction6 = bigFraction2.TWO_QUARTERS.subtract(bigFraction5);
      bigFraction0.MINUS_ONE.longValue();
      bigFraction1.ONE_FIFTH.longValue();
      bigFraction1.longValue();
      BigFraction bigFraction7 = bigFraction5.abs();
      bigFraction7.TWO.percentageValue();
      bigFraction7.ONE_HALF.compareTo(bigFraction2);
      bigFraction3.subtract(4533L);
      bigFraction3.getDenominatorAsInt();
      BigFraction bigFraction8 = bigFraction1.divide(1428);
      BigFraction bigFraction9 = bigFraction1.reduce();
      bigFraction9.ZERO.doubleValue();
      Random.setNextRandom(2082408385);
      bigFraction0.equals(bigFraction9);
      bigFraction8.bigDecimalValue();
      bigFraction6.longValue();
      bigFraction9.multiply(1L);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.add(780);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      bigFraction2.MINUS_ONE.bigDecimalValue();
      bigFraction0.ZERO.subtract((-1));
      bigFraction2.ONE_FIFTH.multiply(2L);
      bigFraction1.add((long) 20);
      BigFraction bigFraction3 = bigFraction0.THREE_QUARTERS.divide((-2332));
      Random.setNextRandom(20);
      BigFraction bigFraction4 = bigFraction2.subtract(bigFraction0);
      bigFraction1.doubleValue();
      bigFraction4.ONE_HALF.subtract((-1));
      bigFraction0.ONE.divide(bigFraction3);
      bigFraction4.ONE_HALF.compareTo(bigFraction2);
      BigFraction bigFraction5 = bigFraction1.divide((-43));
      bigFraction1.THREE_QUARTERS.subtract(bigFraction0);
      bigFraction4.getDenominatorAsLong();
      bigFraction5.getDenominatorAsLong();
      bigFraction0.bigDecimalValue();
      bigFraction1.longValue();
      bigFraction5.doubleValue();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      Object object0 = new Object();
      bigFraction0.equals(object0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      BigFraction bigFraction1 = BigFraction.getReducedFraction((byte) (-1), (byte) (-1));
      bigFraction0.ONE_HALF.multiply(bigFraction1);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte) (-16);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
//      try { 
        bigFraction0.TWO_QUARTERS.add((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3.759713966511158E184);
      bigFraction0.subtract(2375184384L);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3200), (-3200));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.ZERO.bigDecimalValue((int) (byte)2);
      BigFraction bigFraction2 = bigFraction0.divide((long) (-3200));
      // Undeclared exception!
//      try { 
        bigFraction2.ONE_HALF.bigDecimalValue(1, 2147481796);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.multiply(bigFraction0);
      // Undeclared exception!
//      try { 
        bigFraction2.FOUR_FIFTHS.pow(2147404402);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger would overflow supported range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = null;
      // Undeclared exception!
//      try { 
        bigFraction0.add((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ONE_HALF.subtract(4);
      bigFraction0.MINUS_ONE.add((-752));
      bigFraction0.pow(bigInteger0);
      BigFraction bigFraction1 = new BigFraction((-1024.11));
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.pow(bigInteger0);
      BigFraction bigFraction1 = new BigFraction(3.759713966511158E184);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction3 = BigFraction.ONE;
      bigFraction0.equals(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numerator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.longValue();
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.TWO.multiply(2199023255552L);
      bigFraction0.divide((-235));
      bigFraction0.doubleValue();
      bigFraction0.divide(bigFraction3);
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = new BigFraction(0);
      // Undeclared exception!
//      try { 
        bigFraction0.divide(bigFraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.hashCode();
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction1.multiply(bigFraction0);
      bigFraction1.floatValue();
      bigFraction0.reciprocal();
      BigFraction bigFraction2 = null;
//      try {
        bigFraction2 = new BigFraction(332.755204, (-1.0), 2146435583);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 332.755 to fraction (167,709,022,455/504,001,201)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction1.add(bigFraction0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction3 = new BigFraction(bigInteger1, bigInteger1);
      bigFraction2.equals(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
//      try { 
        bigFraction0.compareTo((BigFraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      // Undeclared exception!
//      try { 
        bigFraction0.pow((-9223372036854775808L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // exponent (-9,223,372,036,854,775,808)
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.xor(bigInteger0);
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.hashCode();
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.doubleValue();
      BigFraction bigFraction2 = new BigFraction(0.4, 1373);
      bigFraction2.floatValue();
      // Undeclared exception!
//      try { 
        bigFraction2.bigDecimalValue(1373, 2147483416);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3.759713966511158E184);
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = new BigFraction(254);
      bigFraction0.ONE_HALF.add(bigFraction1);
      bigFraction0.ONE_QUARTER.getDenominatorAsInt();
      BigFraction.getReducedFraction(1, 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.TWO_THIRDS.doubleValue();
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction3 = new BigFraction((double) 254);
      BigFraction bigFraction4 = BigFraction.TWO;
      bigFraction3.multiply(bigFraction2);
      BigFraction bigFraction5 = bigFraction1.reciprocal();
      // Undeclared exception!
//      try { 
        bigFraction5.pow((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = new BigFraction((-15));
      BigFraction bigFraction2 = bigFraction1.add(bigFraction1);
      bigFraction1.THREE_FIFTHS.getNumeratorAsLong();
      BigFraction.getReducedFraction((-15), (-15));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.divide(bigInteger0);
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue((-15), 4064);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = new BigFraction(3942);
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      bigFraction2.TWO_QUARTERS.floatValue();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1, 3433);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.divide(bigInteger0);
      bigFraction3.negate();
      bigFraction2.divide((-1757L));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction0.abs();
      bigFraction1.ZERO.doubleValue();
      BigFraction bigFraction2 = BigFraction.ONE_QUARTER;
      bigFraction1.multiply(bigFraction2);
      bigFraction2.floatValue();
      BigFraction bigFraction3 = bigFraction0.reciprocal();
      BigFraction bigFraction4 = new BigFraction(1.0280109563609585E-7, 1779);
      bigFraction4.add((long) 1779);
      bigFraction4.percentageValue();
      bigFraction0.getDenominatorAsLong();
      bigFraction2.getDenominatorAsInt();
      bigFraction3.add(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominator();
      bigFraction0.multiply(2490561340637184L);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.doubleValue();
      bigFraction2.reciprocal();
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      bigFraction1.compareTo(bigFraction3);
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-854.611188462262), (-185));
      // Undeclared exception!
//      try { 
        bigFraction0.multiply((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(413);
      BigFraction bigFraction1 = null;
//      try {
        bigFraction1 = new BigFraction((-136), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1818), 105);
      bigFraction0.MINUS_ONE.pow(1.7976931348623157E308);
      BigFraction bigFraction1 = bigFraction0.subtract(1574);
      BigFraction bigFraction2 = bigFraction1.ONE.multiply(37);
      bigFraction1.ONE_HALF.equals(bigFraction0);
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      BigFraction bigFraction3 = bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.reciprocal();
      bigFraction4.ONE_HALF.getDenominatorAsInt();
      bigFraction1.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction1.MINUS_ONE.getDenominatorAsInt();
      bigFraction3.hashCode();
      bigFraction1.equals((Object) null);
      bigFraction3.add(bigFraction0);
      bigFraction0.add(884736L);
      bigFraction4.TWO_THIRDS.divide(2147483344);
      bigFraction0.multiply(bigFraction2);
      bigFraction1.multiply(2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ONE_QUARTER.intValue();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.negate();
      bigFraction1.MINUS_ONE.percentageValue();
      bigFraction0.doubleValue();
      bigFraction0.getNumerator();
      BigFraction bigFraction2 = bigFraction0.reduce();
      BigFraction bigFraction3 = bigFraction2.add(0);
      BigFraction bigFraction4 = bigFraction1.pow(0);
      bigFraction4.ZERO.add(bigFraction0);
      BigFraction bigFraction5 = bigFraction4.TWO_QUARTERS.pow((long) 0);
      bigFraction2.TWO_FIFTHS.add(bigFraction4);
      BigFraction bigFraction6 = bigFraction5.TWO_FIFTHS.add(bigFraction3);
      bigFraction3.THREE_FIFTHS.getNumeratorAsInt();
      bigFraction2.TWO_FIFTHS.intValue();
      BigFraction bigFraction7 = bigFraction6.ONE_HALF.multiply(0);
      int int0 = (-919);
      // Undeclared exception!
//      try { 
        bigFraction7.ONE_QUARTER.bigDecimalValue((-919));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.xor(bigInteger1);
      bigFraction0.hashCode();
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger1);
      BigFraction bigFraction2 = BigFraction.THREE_QUARTERS;
      bigFraction2.getNumeratorAsLong();
      bigFraction2.toString();
      BigFraction bigFraction3 = BigFraction.ONE;
      BigFraction bigFraction4 = BigFraction.ONE_THIRD;
      bigFraction4.add(949978046398464L);
      bigFraction0.percentageValue();
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction5 = BigFraction.ZERO;
      bigFraction5.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.ONE_QUARTER.multiply(4208363204685324176L);
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction1.doubleValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = bigInteger2.xor(bigInteger0);
      bigFraction1.hashCode();
      bigFraction0.doubleValue();
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger3);
      BigFraction bigFraction3 = new BigFraction((double) (byte)108);
      bigFraction3.ONE_FIFTH.multiply(bigFraction2);
      bigFraction2.getNumeratorAsLong();
      BigFraction.getReducedFraction(762, (byte)108);
      bigFraction2.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.abs();
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.multiply(bigFraction2);
      bigFraction0.floatValue();
      // Undeclared exception!
//      try { 
        bigFraction1.reciprocal();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1189.873828689), (-385));
      BigFraction bigFraction1 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.multiply(10);
      bigFraction3.FOUR_FIFTHS.equals(bigFraction0);
      bigFraction1.getDenominatorAsLong();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction4 = new BigFraction((-3373.7031319898), 2626);
      bigFraction2.floatValue();
      // Undeclared exception!
//      try { 
        bigFraction1.bigDecimalValue(10, 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1189.873828689), (-385));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE.divide(bigInteger0);
      bigFraction0.FOUR_FIFTHS.equals(bigFraction0);
      bigFraction0.getDenominatorAsLong();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction1 = null;
//      try {
        bigFraction1 = new BigFraction(2.7681631086098026E209, 10);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 276,816,310,860,980,260,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2417.46769));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.xor(bigInteger1);
      bigFraction0.TWO_QUARTERS.hashCode();
      bigFraction0.ONE_HALF.doubleValue();
      bigFraction0.getNumeratorAsLong();
      bigFraction0.toString();
      BigFraction bigFraction1 = new BigFraction((double) (-5316067669855573L));
      BigFraction bigFraction2 = bigFraction1.add((-5316067669855573L));
      bigFraction2.percentageValue();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      int int0 = 1;
      BigFraction bigFraction1 = new BigFraction(254);
      bigFraction0.ONE_HALF.add(bigFraction1);
      BigFraction.getReducedFraction(1, 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = BigFraction.ZERO;
      bigFraction2.doubleValue();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction3 = new BigFraction(bigInteger1, bigInteger1);
      bigFraction3.subtract(bigInteger1);
      bigFraction0.abs();
      BigFraction bigFraction4 = BigFraction.TWO;
      BigFraction bigFraction5 = bigFraction4.multiply(258);
      bigFraction5.multiply(bigFraction2);
      bigFraction2.floatValue();
      // Undeclared exception!
//      try { 
        bigFraction2.reciprocal();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = new BigFraction(254);
      bigFraction0.ONE_HALF.add(bigFraction1);
      bigFraction0.ONE_QUARTER.getDenominatorAsInt();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1, 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.TWO_THIRDS.doubleValue();
      BigFraction bigFraction3 = bigFraction0.THREE_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction4 = new BigFraction((double) 254);
      BigFraction bigFraction5 = bigFraction4.multiply(1779);
      bigFraction4.multiply(bigFraction3);
      bigFraction0.floatValue();
      bigFraction2.reciprocal();
      BigFraction bigFraction6 = new BigFraction(bigInteger0);
      bigFraction6.pow(bigInteger0);
      BigFraction bigFraction7 = BigFraction.ONE_FIFTH;
      int int0 = 0;
      // Undeclared exception!
//      try { 
        bigFraction5.divide(0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      bigFraction1.divide(bigFraction2);
      BigFraction bigFraction3 = null;
//      try {
        bigFraction3 = new BigFraction(1.0, 70);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1189.873828689), (-385));
      bigFraction0.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE.divide(bigInteger0);
      int int0 = 10;
      // Undeclared exception!
//      try { 
        bigFraction1.ZERO.pow((-385));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = (-1237);
      BigFraction bigFraction0 = new BigFraction((-2826.5), (-1237));
      BigFraction bigFraction1 = bigFraction0.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = null;
      // Undeclared exception!
//      try { 
        bigFraction1.divide((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1191.2698526295892), (-385));
      BigFraction bigFraction1 = bigFraction0.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.ONE.divide(bigInteger0);
      bigFraction2.FOUR_FIFTHS.multiply(10);
      bigFraction1.getDenominatorAsLong();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.THREE_QUARTERS.multiply(bigInteger1);
      bigFraction0.ONE_FIFTH.pow(bigInteger1);
      BigFraction bigFraction4 = bigFraction1.ONE.divide((-385));
      BigFraction bigFraction5 = bigFraction0.divide((long) (-385));
      BigFraction bigFraction6 = bigFraction4.pow((long) (-385));
      BigFraction bigFraction7 = BigFraction.ONE;
      bigFraction6.divide(bigFraction2);
      bigFraction3.divide(bigFraction5);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction0.subtract(912515L);
      bigFraction3.bigDecimalValue();
      bigFraction2.TWO_FIFTHS.multiply(2142019313);
      bigFraction0.pow((-669L));
      BigFraction bigFraction4 = bigFraction2.pow(bigInteger0);
      BigFraction bigFraction5 = BigFraction.FOUR_FIFTHS;
      bigFraction5.getField();
      bigFraction3.multiply(92246051);
      bigFraction1.bigDecimalValue();
      bigFraction0.pow(270.7069738);
      bigFraction4.pow(934);
      BigFraction bigFraction6 = bigFraction4.multiply(bigInteger0);
      BigFraction bigFraction7 = new BigFraction(1423.0398);
      bigFraction6.subtract((long) 5);
      bigFraction6.getNumerator();
      bigFraction4.floatValue();
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = (-188);
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.divide((-2156));
      BigFraction bigFraction1 = bigFraction0.divide(4503599627370495L);
      bigFraction1.pow((long) (-188));
      bigFraction1.reciprocal();
      bigFraction0.getDenominatorAsInt();
      bigFraction1.subtract(4503599627370495L);
      // Undeclared exception!
//      try { 
        bigFraction1.bigDecimalValue();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Non-terminating decimal expansion; no exact representable decimal result.
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1191.2698526295892), (-385));
      BigFraction bigFraction1 = bigFraction0.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.ONE.divide(bigInteger0);
      bigFraction2.FOUR_FIFTHS.multiply(10);
      bigFraction1.getDenominatorAsLong();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.THREE_QUARTERS.multiply(bigInteger1);
      bigFraction0.ONE_FIFTH.pow(bigInteger1);
      BigFraction bigFraction3 = new BigFraction((-386.015507486294), 625);
      BigFraction bigFraction4 = BigFraction.ONE_HALF;
      bigFraction4.bigDecimalValue((-3781), 1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigDecimal bigDecimal0 = new BigDecimal(1277);
      bigFraction1.pow(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.xor(bigInteger1);
      bigFraction1.hashCode();
      bigFraction0.doubleValue();
      bigFraction1.subtract(bigInteger0);
      bigFraction0.getNumeratorAsLong();
      bigFraction0.divide(2023);
      bigFraction1.multiply(491583718);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1191.2698526295892), (-385));
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = new BigFraction((-385));
      BigFraction bigFraction3 = bigFraction1.add(bigFraction0);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(625, (-484));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.doubleValue();
      bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.abs();
      bigFraction3.multiply((-2147483645));
      BigFraction bigFraction6 = BigFraction.ONE_HALF;
      BigFraction bigFraction7 = BigFraction.getReducedFraction((-2147483645), (-122));
      bigFraction6.multiply(bigFraction7);
      bigFraction5.floatValue();
      bigFraction5.reciprocal();
      bigFraction0.compareTo(bigFraction5);
      bigFraction5.pow(bigInteger0);
      bigFraction1.divide(1779);
      bigFraction0.multiply((-1461));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-9));
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction1.bigDecimalValue(1);
      bigFraction0.pow(110.97005459);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.xor(bigInteger1);
      bigFraction1.hashCode();
      bigFraction0.doubleValue();
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger1);
      bigFraction2.getNumeratorAsLong();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(581, 7);
      bigFraction3.add(461L);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0, 1702.7299293485091, 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract((-4522L));
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction1.abs();
      bigFraction1.percentageValue();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(900);
      BigInteger bigInteger0 = new BigInteger(900, 0, mockRandom0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE.divide(bigInteger0);
      bigFraction1.THREE_FIFTHS.subtract((long) 900);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      BigFraction bigFraction3 = bigFraction2.TWO_FIFTHS.abs();
      bigFraction3.TWO_FIFTHS.hashCode();
      BigFraction bigFraction4 = bigFraction0.ONE_HALF.divide(bigFraction2);
      BigFraction bigFraction5 = bigFraction4.pow(0);
      bigFraction5.TWO.getNumeratorAsInt();
      bigFraction5.negate();
      bigFraction1.abs();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction6 = bigFraction5.multiply(bigInteger0);
      bigFraction6.intValue();
      bigFraction0.subtract(bigFraction4);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = (-211);
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction0.pow(bigInteger0);
      bigFraction0.divide((-211));
      BigFraction bigFraction2 = bigFraction1.divide(7L);
      // Undeclared exception!
//      try { 
        bigFraction2.pow((long) (-211));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1189.873828689), (-385));
      BigFraction bigFraction1 = bigFraction0.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.ONE.divide(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.multiply(10);
      bigFraction3.FOUR_FIFTHS.equals(bigFraction0);
      bigFraction1.getDenominatorAsLong();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction4 = new BigFraction((-3373.7031319898), 2626);
      bigFraction4.THREE_QUARTERS.floatValue();
      // Undeclared exception!
//      try { 
        bigFraction1.bigDecimalValue(2990, 2990);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1189.873828689), (-385));
      BigFraction bigFraction1 = bigFraction0.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.ONE.divide(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.multiply(10);
      bigFraction1.getDenominatorAsLong();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.THREE_QUARTERS.multiply(bigInteger1);
      BigFraction bigFraction4 = bigFraction0.ONE_FIFTH.pow(bigInteger1);
      bigFraction2.subtract((long) (-385));
      BigFraction bigFraction5 = BigFraction.MINUS_ONE;
      BigFraction bigFraction6 = bigFraction4.abs();
      BigFraction bigFraction7 = bigFraction2.divide(bigFraction6);
      bigFraction7.getNumeratorAsLong();
      bigFraction3.toString();
      BigFraction bigFraction8 = bigFraction2.add(9765625L);
      bigFraction5.percentageValue();
      bigFraction8.getDenominatorAsLong();
      bigFraction5.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1708));
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.doubleValue();
      bigFraction0.subtract(bigInteger0);
      bigFraction1.abs();
      BigFraction bigFraction4 = bigFraction1.multiply(2108);
      bigFraction3.multiply(bigFraction2);
      bigFraction2.floatValue();
      // Undeclared exception!
//      try { 
        bigFraction4.reciprocal();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-103);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction.getReducedFraction((-2145769773), 1277);
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(0.12617131100000734, 0.12617131100000734, (-2145769773));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert 0.126 to fraction after -2,145,769,773 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1191.2698526295892), (-385));
      BigFraction bigFraction1 = bigFraction0.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.ONE.divide(bigInteger0);
      bigFraction2.FOUR_FIFTHS.multiply(10);
      bigFraction1.getDenominatorAsLong();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.THREE_QUARTERS.multiply(bigInteger1);
      BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.pow(bigInteger1);
      BigFraction bigFraction4 = bigFraction1.ONE.divide((-385));
      BigFraction bigFraction5 = bigFraction0.divide((long) (-385));
      BigFraction bigFraction6 = bigFraction4.pow((long) (-385));
      BigFraction bigFraction7 = bigFraction6.TWO.reciprocal();
      bigFraction6.TWO.getDenominatorAsInt();
      bigFraction6.THREE_FIFTHS.subtract(1737L);
      bigFraction5.THREE_QUARTERS.bigDecimalValue();
      BigFraction bigFraction8 = bigFraction3.pow(1595L);
      bigFraction8.THREE_FIFTHS.pow(bigInteger1);
      bigFraction5.getField();
      BigFraction bigFraction9 = bigFraction1.multiply((-385));
      bigFraction9.bigDecimalValue();
      bigFraction8.pow((double) (-385));
      bigFraction7.pow(2935);
      bigFraction5.multiply(bigInteger1);
      BigFraction bigFraction10 = new BigFraction((double) (-385));
      bigFraction10.subtract((-2336L));
      bigFraction6.getNumerator();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = new BigFraction(254);
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.add(bigFraction1);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1, 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.TWO_THIRDS.doubleValue();
      BigFraction bigFraction4 = bigFraction0.THREE_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction0.abs();
      BigFraction bigFraction6 = bigFraction5.multiply(1779);
      bigFraction5.multiply(bigFraction4);
      bigFraction0.floatValue();
      BigFraction bigFraction7 = bigFraction3.reciprocal();
      bigFraction7.TWO_THIRDS.compareTo(bigFraction2);
      bigFraction3.pow(bigInteger0);
      bigFraction4.divide(Integer.MAX_VALUE);
      bigFraction6.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(900);
      BigInteger bigInteger0 = new BigInteger(900, 0, mockRandom0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE.divide(bigInteger0);
      bigFraction1.doubleValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger1);
      bigFraction0.abs();
      BigFraction bigFraction3 = bigFraction0.multiply(1779);
      BigFraction bigFraction4 = bigFraction3.multiply(bigFraction1);
      bigFraction3.floatValue();
      BigFraction bigFraction5 = bigFraction0.reciprocal();
      bigFraction2.compareTo(bigFraction5);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction1.pow(bigInteger2);
      // Undeclared exception!
//      try { 
        bigFraction4.divide(0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-458));
      bigFraction0.intValue();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-854.6111884622619), (-211));
      bigFraction0.bigDecimalValue(1, 1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = null;
      // Undeclared exception!
//      try { 
        bigFraction0.ONE_FIFTH.subtract((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numerator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3225L), (-3225L));
      int int0 = (-4236);
      BigFraction bigFraction1 = bigFraction0.divide((-4236));
      bigFraction1.TWO_QUARTERS.toString();
      bigFraction1.ZERO.getNumeratorAsLong();
      bigFraction0.ONE_FIFTH.getDenominatorAsInt();
      bigFraction0.toString();
      bigFraction0.ONE_HALF.bigDecimalValue();
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue((-4236));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.reduce();
      bigFraction0.getNumerator();
      BigFraction bigFraction2 = bigFraction0.reduce();
      BigFraction bigFraction3 = bigFraction0.reciprocal();
      bigFraction1.intValue();
      bigFraction3.getNumerator();
      bigFraction1.subtract(bigFraction3);
      bigFraction2.toString();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = 0.0;
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.reduce();
      // Undeclared exception!
//      try { 
        bigFraction1.THREE_QUARTERS.bigDecimalValue(1277);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-9), (-9));
      bigFraction0.ONE_HALF.floatValue();
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.negate();
      bigFraction1.TWO_FIFTHS.getNumeratorAsLong();
      bigFraction0.percentageValue();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)122;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger0);
      bigFraction1.getDenominator();
      bigFraction1.floatValue();
      bigFraction2.add(0);
      BigFraction bigFraction3 = bigFraction1.pow((-1));
      bigFraction3.ONE_FIFTH.negate();
      bigFraction1.FOUR_FIFTHS.abs();
      bigFraction2.toString();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction3.multiply(bigInteger1);
      bigFraction2.add((-1976));
      bigFraction0.intValue();
      bigFraction1.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2352L, 2352L);
      bigFraction0.divide(2352L);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.TWO_QUARTERS.percentageValue();
      BigFraction bigFraction1 = new BigFraction((-1352L));
      BigFraction bigFraction2 = bigFraction0.ZERO.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.multiply(2091);
      bigFraction3.TWO_FIFTHS.percentageValue();
      bigFraction3.MINUS_ONE.abs();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.subtract(bigInteger0);
      bigFraction2.THREE_QUARTERS.pow((double) 2091);
      bigFraction0.subtract((-1352L));
      bigFraction2.ONE_HALF.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.divide((-916));
      // Undeclared exception!
//      try { 
        bigFraction4.THREE_FIFTHS.bigDecimalValue(58, 2091);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(2.594209135294356E-9, (-414.6), (-850));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert 0 to fraction after -850 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ZERO.hashCode();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(700, 700);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.MINUS_ONE.multiply(bigFraction0);
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.multiply(0L);
      BigFraction bigFraction3 = bigFraction1.multiply(bigInteger0);
      BigInteger bigInteger1 = bigFraction0.getDenominator();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction0.divide((long) 700);
      BigFraction bigFraction5 = bigFraction4.FOUR_FIFTHS.abs();
      bigFraction4.FOUR_FIFTHS.subtract(bigInteger1);
      bigFraction5.TWO.compareTo(bigFraction2);
      BigFraction bigFraction6 = bigFraction0.subtract(700);
      BigFraction bigFraction7 = bigFraction6.ONE.multiply(bigFraction1);
      bigFraction7.ONE.getField();
      BigFraction bigFraction8 = bigFraction0.multiply(bigInteger1);
      bigFraction4.getDenominatorAsInt();
      bigFraction6.getNumeratorAsLong();
      bigFraction4.getField();
      bigFraction6.equals(bigFraction7);
      bigFraction8.abs();
      bigFraction5.reciprocal();
      bigFraction3.pow(700);
      // Undeclared exception!
//      try { 
        bigFraction8.bigDecimalValue((-1), 105);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1189.873828689), (-385));
      BigFraction bigFraction1 = bigFraction0.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.ONE.divide(bigInteger0);
      bigFraction2.FOUR_FIFTHS.multiply(10);
      bigFraction1.getDenominatorAsLong();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.THREE_QUARTERS.multiply(bigInteger1);
      BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.pow(bigInteger1);
      BigFraction bigFraction4 = bigFraction1.ONE.divide((-385));
      BigFraction bigFraction5 = bigFraction0.divide((long) (-385));
      BigFraction bigFraction6 = bigFraction4.pow((long) (-385));
      bigFraction6.TWO.reciprocal();
      bigFraction6.TWO.getDenominatorAsInt();
      bigFraction6.THREE_FIFTHS.subtract(1737L);
      bigFraction5.THREE_QUARTERS.bigDecimalValue();
      BigFraction bigFraction7 = bigFraction3.pow(1595L);
      BigFraction bigFraction8 = bigFraction7.THREE_FIFTHS.pow(bigInteger1);
      bigFraction5.getField();
      BigFraction bigFraction9 = bigFraction1.multiply((-385));
      bigFraction9.bigDecimalValue();
      bigFraction7.pow((double) (-385));
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction10 = bigFraction5.divide(bigFraction9);
      bigFraction8.divide(bigFraction1);
      bigFraction10.intValue();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = 0L;
      BigFraction bigFraction0 = new BigFraction(0L);
      int int0 = (-2726);
      BigFraction bigFraction1 = bigFraction0.subtract((-2726));
      bigFraction0.getDenominatorAsInt();
      bigFraction1.pow((-2695.17870059));
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        bigFraction0.divide(bigInteger0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.FOUR_FIFTHS.pow(928.916856375);
      bigFraction0.ZERO.divide(3500L);
      bigFraction0.ONE_FIFTH.hashCode();
      // Undeclared exception!
//      try { 
        bigFraction0.ONE_THIRD.bigDecimalValue((-1717), (-2652));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.THREE_QUARTERS.getNumeratorAsInt();
      bigFraction0.TWO.toString();
      bigFraction0.FOUR_FIFTHS.pow(0.0);
      bigFraction0.doubleValue();
      bigFraction0.TWO_QUARTERS.doubleValue();
      BigFraction bigFraction1 = bigFraction0.pow(440L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.multiply(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.add(440L);
      bigFraction3.abs();
      bigFraction2.toString();
      bigFraction3.getDenominatorAsInt();
      bigFraction3.bigDecimalValue(1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.ONE_THIRD.percentageValue();
      bigFraction0.THREE_FIFTHS.getNumeratorAsLong();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.percentageValue();
      bigFraction0.toString();
      BigFraction bigFraction1 = bigFraction0.subtract((-1));
      BigFraction bigFraction2 = bigFraction1.TWO.subtract(bigFraction0);
      bigFraction2.pow((-1));
      bigFraction1.ONE_HALF.compareTo(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.pow((-1));
      bigFraction3.THREE_QUARTERS.pow(3L);
      BigFraction bigFraction4 = bigFraction3.ONE.pow(1L);
      bigFraction4.ZERO.longValue();
      bigFraction4.TWO_THIRDS.doubleValue();
      bigFraction3.getDenominator();
      bigFraction0.THREE_QUARTERS.pow((-1934L));
      BigFraction bigFraction5 = bigFraction0.multiply(575);
      bigFraction3.percentageValue();
      bigFraction5.getNumeratorAsLong();
      bigFraction5.divide((-1));
      // Undeclared exception!
//      try { 
        bigFraction3.bigDecimalValue((-1), (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.multiply((-2359L));
      bigFraction1.FOUR_FIFTHS.hashCode();
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.subtract(bigInteger0);
      bigFraction0.subtract((-488));
      bigFraction0.negate();
      bigFraction0.divide(bigFraction2);
      bigFraction3.subtract((-2359L));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.ONE.percentageValue();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.ONE.add(bigInteger0);
      bigFraction3.equals(bigFraction1);
      bigFraction3.ONE.subtract(350);
      bigFraction3.THREE_FIFTHS.floatValue();
      bigFraction2.THREE_QUARTERS.longValue();
      int int0 = 3436;
      bigFraction2.multiply(3436);
      int int1 = (-1);
      // Undeclared exception!
//      try { 
        bigFraction2.TWO_THIRDS.bigDecimalValue(312);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(900);
      BigInteger bigInteger0 = new BigInteger(900, 0, mockRandom0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.subtract((long) 900);
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      BigFraction bigFraction4 = bigFraction3.TWO_FIFTHS.abs();
      BigFraction bigFraction5 = bigFraction0.ONE_HALF.divide(bigFraction3);
      long long0 = bigFraction5.getNumeratorAsLong();
      assertEquals((-1L), long0);
      
      String string0 = bigFraction0.TWO_QUARTERS.toString();
      assertEquals("1 / 2", string0);
      
      BigFraction bigFraction6 = bigFraction0.add((-370L));
      double double0 = bigFraction6.TWO.percentageValue();
      assertEquals(200.0, double0, 0.01);
      
      bigFraction0.getDenominatorAsLong();
      bigFraction4.getDenominatorAsInt();
      assertFalse(bigFraction3.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(942L);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.multiply(942L);
      bigFraction1.ONE_QUARTER.abs();
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.abs();
      bigFraction0.FOUR_FIFTHS.hashCode();
      BigFraction bigFraction3 = bigFraction1.FOUR_FIFTHS.pow((-1695L));
      int int0 = 52;
      bigFraction3.TWO_QUARTERS.intValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        bigFraction2.ONE_QUARTER.divide(bigInteger0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2417.46769));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.xor(bigInteger1);
      bigFraction0.TWO_QUARTERS.hashCode();
      double double0 = bigFraction0.ONE_HALF.doubleValue();
      assertEquals(0.5, double0, 0.01);
      
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow(bigInteger0);
      bigFraction1.TWO_QUARTERS.subtract(bigInteger1);
      bigFraction0.ONE_FIFTH.getNumeratorAsLong();
      assertEquals((short) (-2417), bigFraction0.shortValue());
      
      BigFraction bigFraction2 = BigFraction.getReducedFraction(587, 813);
      assertEquals((byte)0, bigFraction2.byteValue());
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 2304;
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(0.0, 0.0, 2304);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-40);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((byte) (-40), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow(0L);
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(bigInteger0);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(3771, 3771);
      bigFraction2.TWO_FIFTHS.getField();
      BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.pow((-1252L));
      BigInteger bigInteger1 = bigFraction0.getNumerator();
      bigFraction0.floatValue();
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction0.pow(bigInteger1);
      bigFraction4.divide(bigFraction1);
      BigFraction bigFraction5 = bigFraction2.multiply((-1252L));
      BigFraction bigFraction6 = BigFraction.THREE_QUARTERS;
      bigFraction6.TWO_QUARTERS.compareTo(bigFraction0);
      bigFraction6.ONE_HALF.divide(bigInteger1);
      bigFraction0.equals(bigFraction6);
      BigFraction bigFraction7 = bigFraction3.subtract(1294L);
      bigFraction7.TWO.add(bigFraction0);
      bigFraction7.TWO_QUARTERS.multiply((-3206L));
      BigFraction bigFraction8 = bigFraction7.ONE_FIFTH.reciprocal();
      bigFraction8.THREE_FIFTHS.getField();
      bigFraction5.TWO_THIRDS.pow(3771);
      bigFraction5.add(64);
      int int0 = 814;
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue(814, 629);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = new BigFraction(0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      int int0 = 0;
      BigFraction bigFraction1 = bigFraction0.pow(0);
      // Undeclared exception!
//      try { 
        bigFraction1.FOUR_FIFTHS.divide((long) 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.divide(bigFraction2);
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((byte)10, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract(1428L);
      bigFraction1.ONE_FIFTH.floatValue();
      BigFraction bigFraction2 = new BigFraction(1L);
      bigFraction0.multiply(bigFraction2);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
//      try { 
        bigFraction1.subtract((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = new BigFraction(254);
      bigFraction0.ONE_HALF.add(bigFraction1);
      // Undeclared exception!
//      try { 
        BigFraction.getReducedFraction(1, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals((-1), int0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.intValueExact();
      bigInteger0.gcd(bigInteger1);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.TWO_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger1);
      assertEquals((byte)10, bigFraction1.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_QUARTER.getField();
      int int0 = 1;
      bigFraction0.subtract(1);
      // Undeclared exception!
//      try { 
        bigFraction0.TWO_QUARTERS.divide(0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4320.42168), (-1708));
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.ONE.multiply(bigFraction1);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      
      BigFraction bigFraction3 = bigFraction0.ONE.pow((-1491));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      
      bigFraction0.ONE.getDenominatorAsLong();
      double double0 = bigFraction0.percentageValue();
      assertEquals((-432100.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.multiply(1L);
      bigFraction1.ONE_THIRD.floatValue();
      long long0 = 9218868437227405312L;
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        bigFraction1.TWO.bigDecimalValue((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.add(1218);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.divide(1426);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)37;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.ONE_QUARTER.multiply(1218);
      assertEquals((byte)48, bigFraction4.byteValue());
      
      int int0 = bigFraction1.intValue();
      assertEquals(1218, int0);
      
      bigFraction0.intValue();
      bigFraction3.getField();
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.shortValueExact();
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger0.and(bigInteger2);
      bigInteger1.or(bigInteger0);
      bigInteger1.negate();
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.add((long) (short)10);
      bigFraction1.ONE_THIRD.multiply(0L);
      assertEquals((short)10, bigFraction1.shortValue());
      
      double double0 = bigFraction0.MINUS_ONE.doubleValue();
      assertEquals((-1.0), double0, 0.01);
      
      bigFraction0.ZERO.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.multiply(0L);
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.abs();
      bigFraction2.toString();
      bigFraction2.multiply(bigInteger0);
      bigFraction0.multiply(0L);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
  }
}
