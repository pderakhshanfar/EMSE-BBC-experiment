/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:05:47 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(402, 403);
      BigFraction bigFraction1 = bigFraction0.pow((long) 403);
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((long) 507);
      bigFraction1.FOUR_FIFTHS.intValue();
      bigFraction1.floatValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger0);
      bigFraction2.MINUS_ONE.negate();
      bigFraction1.getDenominator();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction((double) (byte)11);
      bigFraction0.longValue();
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.subtract(11);
      BigFraction bigFraction3 = new BigFraction((double) 136L);
      bigFraction3.subtract(bigFraction0);
      bigFraction3.floatValue();
      bigFraction2.add(bigInteger0);
      bigFraction2.pow((double) (byte)11);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2774), (-2774));
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction1.ONE_QUARTER.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.negate();
      bigFraction2.ONE_FIFTH.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction1.ONE_QUARTER.divide((-2774));
      bigFraction0.compareTo(bigFraction1);
      bigFraction0.toString();
      bigFraction1.TWO_QUARTERS.equals((Object) null);
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      bigFraction4.TWO_THIRDS.pow((long) (-1));
      bigFraction4.MINUS_ONE.abs();
      BigFraction bigFraction5 = BigFraction.getReducedFraction(2147483584, 1556);
      bigFraction5.ONE.divide(bigFraction2);
      bigFraction1.TWO_THIRDS.compareTo(bigFraction4);
      bigFraction2.TWO_THIRDS.getDenominatorAsInt();
      bigFraction1.pow(212.702);
      bigFraction0.getField();
      bigFraction3.bigDecimalValue(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction6 = bigFraction2.divide(bigInteger0);
      BigFraction bigFraction7 = bigFraction6.TWO_THIRDS.divide((-2071));
      bigFraction7.ONE.divide(1);
      bigFraction6.subtract(898);
      bigFraction6.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      BigFraction bigFraction0 = new BigFraction(1186, (-2340));
      bigFraction0.ONE_THIRD.getNumeratorAsInt();
      bigFraction0.add(2147056967);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      bigFraction0.multiply(bigInteger0);
      bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      bigFraction1.add((-2340));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(629, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(654, 654, 654);
      bigFraction0.bigDecimalValue(2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numerator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3.314203679823132E-17);
      bigFraction0.TWO.percentageValue();
      BigFraction bigFraction1 = bigFraction0.divide((-2043L));
      bigFraction1.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-2071));
      BigFraction bigFraction1 = bigFraction0.subtract((-3932));
      BigFraction bigFraction2 = bigFraction1.divide(1209);
      bigFraction1.subtract(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      Object object0 = new Object();
      bigFraction0.MINUS_ONE.equals(object0);
      BigFraction bigFraction1 = null;
      bigFraction0.ONE_FIFTH.hashCode();
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.reciprocal();
      bigFraction2.ONE_HALF.pow(2038.42047330575);
      // Undeclared exception!
//      try { 
        bigFraction0.multiply((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9154082963658192752L);
      long long0 = (-377L);
      // Undeclared exception!
//      try { 
        bigFraction0.ZERO.pow((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (byte)0);
      bigFraction0.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      bigFraction1.getField();
      // Undeclared exception!
//      try { 
        bigFraction2.pow((-9223372036854775808L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // exponent (-9,223,372,036,854,775,808)
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483640);
      // Undeclared exception!
//      try { 
        bigFraction0.subtract((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.longValue();
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
      bigFraction1.equals(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.THREE_FIFTHS.equals("+NWxZ_");
      bigFraction0.ONE.getField();
      bigFraction0.bigDecimalValue();
      bigFraction0.equals("+NWxZ_");
      // Undeclared exception!
//      try { 
        bigFraction0.multiply((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.subtract((-716L));
      bigFraction2.THREE_QUARTERS.add(0);
      bigFraction0.divide(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.add(0);
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      bigFraction0.bigDecimalValue(0, 0);
      // Undeclared exception!
//      try { 
        bigFraction2.divide((long) 0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction((double) (byte)0);
      bigFraction0.longValue();
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-768), (-768));
      bigFraction0.ONE_THIRD.toString();
      BigFraction bigFraction1 = bigFraction0.negate();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.THREE_QUARTERS.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction1.floatValue();
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction((double) (byte)0);
      bigFraction0.ZERO.divide(bigInteger0);
      bigFraction0.longValue();
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction1.TWO_THIRDS.percentageValue();
      bigFraction1.pow((int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction((double) (byte)0);
      bigFraction0.longValue();
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = bigFraction1.pow(136L);
      bigFraction1.equals(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.toString();
      bigFraction0.bigDecimalValue(4);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.ONE_QUARTER.doubleValue();
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.TWO_QUARTERS.getNumeratorAsInt();
      bigFraction1.equals("INDEX");
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        bigFraction0.divide((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.ONE.floatValue();
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.divide(2141891242);
      bigFraction1.ONE_THIRD.negate();
      bigFraction1.THREE_QUARTERS.divide(bigFraction0);
      bigFraction0.subtract((-1914L));
      BigFraction bigFraction2 = bigFraction0.pow(2503);
      BigFraction bigFraction3 = bigFraction2.multiply(2503);
      bigFraction3.floatValue();
      BigFraction bigFraction4 = bigFraction2.subtract(bigFraction3);
      bigFraction4.getDenominator();
      bigFraction2.ONE_FIFTH.multiply(2503);
      bigFraction2.divide(4294967295L);
      Random.setNextRandom(2503);
      bigFraction4.getNumerator();
      bigFraction4.add((-1914L));
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue(2503, (-2146222100));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger2);
      bigFraction0.compareTo(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1693.349, 1693.349, (-1));
      BigFraction bigFraction1 = bigFraction0.ZERO.reduce();
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      // Undeclared exception!
//      try { 
        bigFraction2.divide(bigFraction1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(16);
      BigFraction bigFraction2 = BigFraction.THREE_QUARTERS;
      bigFraction1.TWO_FIFTHS.add(bigFraction2);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(16, 16);
      bigFraction3.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigFraction1.floatValue();
      BigFraction bigFraction2 = new BigFraction((double) (byte)0);
      BigFraction bigFraction3 = new BigFraction(259.4438, 1.0F, 422);
      bigFraction1.reduce();
      bigFraction2.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2071), 1253);
      bigFraction0.floatValue();
      BigFraction bigFraction1 = new BigFraction((double) 52);
      bigFraction1.longValue();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)35;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = null;
//      try {
        bigFraction2 = new BigFraction(bigInteger0, (BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      int int0 = 2559;
      BigFraction bigFraction1 = bigFraction0.divide(2559);
      BigFraction bigFraction2 = bigFraction1.TWO.add(bigFraction0);
      bigFraction2.TWO_THIRDS.toString();
//      try { 
        bigFraction0.ONE_FIFTH.add((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2774), (-2774));
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction1.ONE_QUARTER.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.negate();
      bigFraction2.ONE_FIFTH.getNumeratorAsInt();
      // Undeclared exception!
//      try { 
        bigFraction1.ONE_QUARTER.divide(0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.multiply(5);
      bigFraction1.bigDecimalValue();
      bigFraction2.floatValue();
      bigFraction1.add(bigFraction0);
      bigFraction0.getNumeratorAsLong();
      bigFraction1.getNumeratorAsInt();
      BigFraction bigFraction3 = new BigFraction((double) 3L);
      BigFraction.getReducedFraction((byte)0, (-559));
      BigFraction bigFraction4 = BigFraction.TWO_THIRDS;
      bigFraction4.longValue();
      BigFraction.getReducedFraction(615, (-47));
      bigFraction1.add((long) 615);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.bigDecimalValue();
      bigFraction0.ONE_QUARTER.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      bigFraction0.getDenominatorAsLong();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction2 = new BigFraction(2147483648L, (-2816L));
      bigFraction2.abs();
      BigFraction bigFraction3 = bigFraction1.multiply((-2816L));
      bigFraction1.subtract(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.bigDecimalValue();
      bigFraction0.ONE_QUARTER.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction0.getField();
      BigFraction bigFraction2 = bigFraction1.pow((-1402L));
      BigFraction bigFraction3 = bigFraction2.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.multiply(1130L);
      BigFraction bigFraction5 = bigFraction0.add(bigInteger0);
      bigFraction2.multiply(0L);
      BigFraction bigFraction6 = BigFraction.getReducedFraction(52, 923);
      BigFraction bigFraction7 = bigFraction3.subtract(bigFraction6);
      bigFraction7.pow(52);
      bigFraction4.percentageValue();
      bigFraction5.pow((-2731L));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.ONE_QUARTER.doubleValue();
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.TWO_QUARTERS.getNumeratorAsInt();
      bigFraction0.FOUR_FIFTHS.equals(bigFraction1);
      BigFraction bigFraction2 = new BigFraction(0.25, 258);
      bigFraction0.compareTo(bigFraction2);
      bigFraction1.add(5);
      bigFraction1.add(bigFraction2);
      bigFraction2.toString();
      BigFraction bigFraction3 = BigFraction.TWO_QUARTERS;
      bigFraction0.getNumeratorAsInt();
      bigFraction1.getNumerator();
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1693.1917795428192, 1693.1917795428192, (-1));
      BigFraction bigFraction1 = bigFraction0.ZERO.reduce();
      BigFraction bigFraction2 = new BigFraction(1532.6780740692752, (-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.subtract(bigInteger0);
      bigFraction2.hashCode();
      BigFraction bigFraction3 = new BigFraction(bigInteger0);
      bigFraction1.multiply(bigFraction3);
      BigFraction bigFraction4 = bigFraction1.pow(1140);
      bigFraction0.subtract(bigFraction4);
      bigFraction2.divide((long) 1140);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.pow(0.0);
      BigFraction bigFraction1 = bigFraction0.subtract(13743895347200L);
      BigFraction bigFraction2 = bigFraction1.pow(629);
      bigFraction2.MINUS_ONE.equals("6sJ]}joJz:4{qJO");
      BigFraction bigFraction3 = new BigFraction(629, 4);
      bigFraction0.divide(bigFraction3);
      bigFraction2.divide((-2142981584));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.getDenominatorAsInt();
      bigFraction0.hashCode();
      bigFraction0.bigDecimalValue(5);
      bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.subtract(2147371437);
      bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction0.divide((-1480));
      BigFraction bigFraction3 = bigFraction2.ZERO.pow(2147371437);
      BigFraction bigFraction4 = bigFraction3.ONE.add(5);
      bigFraction1.abs();
      bigFraction4.getField();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483647L);
      BigFraction bigFraction1 = new BigFraction(2147483647L, 1.0, 663);
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      bigFraction2.multiply(2010L);
      bigFraction1.multiply(4325L);
      bigFraction1.pow(663);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.ONE_FIFTH.longValue();
      bigFraction0.bigDecimalValue();
      bigFraction0.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction1.getField();
      BigFraction bigFraction2 = bigFraction0.pow(4096L);
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger0);
      bigFraction2.floatValue();
      BigFraction bigFraction4 = new BigFraction(50.0);
      BigFraction bigFraction5 = BigFraction.ONE_THIRD;
      bigFraction0.getNumeratorAsLong();
      bigFraction0.getNumeratorAsInt();
      bigFraction5.getDenominatorAsLong();
      bigFraction3.longValue();
      BigFraction bigFraction6 = null;
//      try {
        bigFraction6 = new BigFraction(0.0F, 1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = (-2071);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.percentageValue();
      bigFraction0.subtract(bigInteger0);
      bigFraction0.getField();
      // Undeclared exception!
//      try { 
        bigFraction0.pow((long) (-2071));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-2147483647), (-2147483647));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction3 = new BigFraction((-2147483647), (-2147483647));
      BigFraction bigFraction4 = bigFraction0.multiply(2147482656);
      bigFraction3.bigDecimalValue();
      bigFraction2.floatValue();
      bigFraction2.add(bigFraction4);
      bigFraction1.getNumeratorAsLong();
      bigFraction2.getNumeratorAsInt();
      BigFraction bigFraction5 = new BigFraction((double) (byte)0);
      BigFraction.getReducedFraction((byte)0, (-2147483647));
      bigFraction5.longValue();
      BigFraction bigFraction6 = BigFraction.getReducedFraction(1, 1);
      bigFraction6.add((long) (-2147483647));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction0.divide(bigFraction1);
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
//      try { 
        bigFraction0.pow((-9L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction0.getField();
      BigFraction bigFraction2 = bigFraction1.pow(0L);
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.multiply(153L);
      bigFraction2.add(bigInteger0);
      BigFraction bigFraction5 = BigFraction.ONE;
      bigFraction5.multiply(153L);
      BigFraction bigFraction6 = bigFraction3.subtract(bigFraction5);
      bigFraction6.pow(1235);
      bigFraction3.percentageValue();
      bigFraction4.pow(153L);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction.getReducedFraction((-2071), 1253);
      int int0 = 52;
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((double) 1253, 52);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 1,253 to fraction (9,223,372,036,854,774,556/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.getNumeratorAsLong();
      bigFraction0.getDenominatorAsInt();
      bigFraction0.percentageValue();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.negate();
      BigFraction bigFraction3 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction4 = new BigFraction((double) (byte) (-1));
      bigFraction1.pow(0L);
      bigFraction2.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1842.1152114786));
      bigFraction0.getNumeratorAsInt();
      bigFraction0.equals((Object) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.getDenominatorAsLong();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigInteger1.longValue();
      BigFraction bigFraction2 = bigFraction1.multiply(2010L);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigFraction0.add(bigInteger2);
      BigFraction bigFraction3 = bigFraction2.multiply(67684L);
      bigFraction0.subtract(bigFraction3);
      BigFraction bigFraction4 = new BigFraction(1.7976931348623157E308);
      bigFraction4.pow(100);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.divide(469);
      bigFraction0.divide(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.multiply(537);
      bigFraction2.pow((long) 537);
      // Undeclared exception!
//      try { 
        bigFraction1.bigDecimalValue(469);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.bigDecimalValue();
      bigFraction0.ONE_QUARTER.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      bigFraction0.MINUS_ONE.percentageValue();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction0.getField();
      BigFraction bigFraction2 = bigFraction0.pow((-4053L));
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.pow(bigInteger0);
      bigFraction3.ONE_QUARTER.percentageValue();
      BigFraction bigFraction4 = bigFraction2.MINUS_ONE.reciprocal();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction4.ONE.multiply(bigInteger1);
      BigFraction bigFraction5 = bigFraction4.TWO_FIFTHS.subtract(2289);
      BigFraction bigFraction6 = bigFraction2.TWO_FIFTHS.add((-33L));
      bigFraction0.FOUR_FIFTHS.intValue();
      bigFraction2.add(bigFraction6);
      bigFraction5.toString();
      BigFraction bigFraction7 = BigFraction.TWO_QUARTERS;
      bigFraction7.getNumeratorAsInt();
      bigFraction2.getNumerator();
      bigFraction7.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2071), 1253);
      BigFraction bigFraction1 = new BigFraction(1130.1461, 52);
      bigFraction0.ONE_THIRD.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.add((-3051));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction3.doubleValue();
      BigFraction bigFraction4 = bigFraction1.subtract((-2049L));
      BigFraction bigFraction5 = bigFraction4.subtract((-2071));
      bigFraction2.multiply(bigInteger0);
      bigFraction2.pow(572.9929875);
      bigFraction4.add(bigInteger0);
      bigFraction5.compareTo(bigFraction4);
      bigFraction5.divide((-60L));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.ONE.divide(469);
      bigFraction1.TWO_FIFTHS.subtract(18168785403904L);
      bigFraction1.TWO.divide(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.subtract((-636));
      BigFraction bigFraction3 = bigFraction0.add((long) 469);
      bigFraction3.intValue();
      bigFraction0.doubleValue();
      BigFraction bigFraction4 = bigFraction2.subtract((long) 469);
      BigFraction bigFraction5 = bigFraction4.subtract(471);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction5.multiply(bigInteger0);
      bigFraction0.pow((double) (-636));
      BigFraction bigFraction6 = bigFraction2.add(bigInteger0);
      bigFraction6.ZERO.pow((double) 469);
      bigFraction2.compareTo(bigFraction3);
      bigFraction4.divide((long) 471);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.bigDecimalValue();
      bigFraction0.ONE_QUARTER.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      bigFraction0.MINUS_ONE.percentageValue();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction0.getField();
      BigFraction bigFraction2 = bigFraction0.pow((-4053L));
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.pow(bigInteger0);
      bigFraction2.floatValue();
      bigFraction3.add(bigFraction0);
      bigFraction2.getNumeratorAsLong();
      bigFraction1.getNumeratorAsInt();
      bigFraction2.getDenominatorAsLong();
      bigFraction2.longValue();
      bigFraction3.reduce();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-2147483647), (-2147483647));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction1.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.multiply(2147482656);
      bigFraction3.bigDecimalValue();
      bigFraction2.floatValue();
      bigFraction2.add(bigFraction4);
      bigFraction1.getNumeratorAsLong();
      bigFraction2.getNumeratorAsInt();
      bigFraction4.getDenominatorAsLong();
      BigFraction bigFraction5 = new BigFraction((double) (byte)0);
      BigFraction.getReducedFraction((byte)0, (-2147483647));
      bigFraction5.longValue();
      bigFraction5.reduce();
      bigFraction0.negate();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      bigFraction0.getNumeratorAsLong();
      bigFraction0.getDenominatorAsInt();
      bigFraction0.percentageValue();
      bigFraction0.floatValue();
      bigFraction0.subtract(1);
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue(1280);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1917);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction0.TWO.negate();
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      bigFraction0.multiply(9218868437227405312L);
      bigFraction1.subtract(bigFraction0);
      // Undeclared exception!
//      try { 
        bigFraction2.pow((-1932735282));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger would overflow supported range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.multiply(bigInteger1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigFraction1.negate();
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction3 = new BigFraction((double) (-1));
      bigFraction0.pow((long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1917);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)1;
      bigFraction0.floatValue();
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction1.getNumeratorAsLong();
      bigFraction2.getNumeratorAsInt();
      bigFraction1.getDenominatorAsLong();
      bigFraction0.longValue();
      bigFraction2.reduce();
      bigFraction0.negate();
      bigFraction2.multiply(1264);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1693.349, 1693.349, (-1));
      BigFraction bigFraction1 = bigFraction0.ZERO.reduce();
      bigFraction0.getField();
      bigFraction0.longValue();
      bigFraction1.getDenominatorAsLong();
      bigFraction0.longValue();
      BigFraction bigFraction2 = bigFraction1.abs();
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction1);
      bigFraction3.add(bigFraction1);
      bigFraction0.add((long) (-1));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1), (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction1.ONE_QUARTER.multiply(bigInteger1);
      BigFraction bigFraction4 = bigFraction0.multiply((-1));
      bigFraction0.bigDecimalValue();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)99;
      bigFraction4.floatValue();
      BigFraction bigFraction5 = bigFraction2.add(bigFraction3);
      bigFraction4.getNumeratorAsLong();
      bigFraction4.getNumeratorAsInt();
      bigFraction4.getDenominatorAsLong();
      bigFraction3.longValue();
      bigFraction4.reduce();
      BigFraction bigFraction6 = bigFraction4.negate();
      bigFraction6.ONE.subtract(bigInteger1);
      bigFraction5.add(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1), (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction1.ONE_QUARTER.multiply(bigInteger1);
      BigFraction bigFraction4 = bigFraction0.multiply((-1));
      bigFraction0.bigDecimalValue();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)99;
      bigFraction4.floatValue();
      bigFraction2.add(bigFraction3);
      bigFraction4.getNumeratorAsLong();
      bigFraction4.getNumeratorAsInt();
      bigFraction4.getDenominatorAsLong();
      bigFraction3.longValue();
      BigFraction bigFraction5 = bigFraction4.reduce();
      bigFraction5.divide((int) (byte) (-1));
      BigFraction bigFraction6 = bigFraction4.negate();
      bigFraction6.subtract(bigFraction0);
      bigFraction1.divide((-2980));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2071), 1253);
      BigFraction bigFraction1 = new BigFraction(1130.1461, 52);
      BigFraction bigFraction2 = new BigFraction((long) 1253);
      bigFraction2.reciprocal();
      BigFraction bigFraction3 = bigFraction0.subtract(636);
      BigFraction bigFraction4 = bigFraction0.add(271L);
      bigFraction3.intValue();
      bigFraction2.doubleValue();
      BigFraction bigFraction5 = bigFraction2.subtract(1L);
      BigFraction bigFraction6 = bigFraction4.subtract(2289);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction7 = bigFraction5.multiply(bigInteger0);
      bigFraction6.pow((double) (-637));
      BigFraction bigFraction8 = bigFraction2.add(bigInteger0);
      bigFraction8.compareTo(bigFraction7);
      bigFraction1.divide(840L);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.bigDecimalValue();
      bigFraction0.ONE_QUARTER.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      bigFraction0.MINUS_ONE.percentageValue();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction0.getField();
      BigFraction bigFraction2 = bigFraction0.pow((-4053L));
      bigFraction2.THREE_QUARTERS.pow(bigInteger0);
      bigFraction1.compareTo(bigFraction2);
      BigFraction bigFraction3 = bigFraction2.add((-2101792505));
      bigFraction1.add(bigFraction0);
      bigFraction1.toString();
      BigFraction bigFraction4 = BigFraction.TWO_QUARTERS;
      bigFraction2.getNumeratorAsInt();
      BigFraction bigFraction5 = BigFraction.TWO_THIRDS;
      bigFraction5.getNumerator();
      bigFraction3.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.bigDecimalValue();
      bigFraction0.ONE_QUARTER.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      bigFraction0.MINUS_ONE.percentageValue();
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction0.getField();
      BigFraction bigFraction2 = bigFraction0.pow((-4053L));
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.MINUS_ONE.reciprocal();
      BigFraction bigFraction5 = bigFraction4.TWO_FIFTHS.subtract(2289);
      bigFraction2.TWO_FIFTHS.add((-33L));
      bigFraction0.FOUR_FIFTHS.intValue();
      bigFraction2.doubleValue();
      BigFraction bigFraction6 = bigFraction1.subtract((-4053L));
      bigFraction6.TWO_QUARTERS.subtract(2289);
      BigFraction bigFraction7 = bigFraction2.multiply(bigInteger0);
      bigFraction1.pow(702.325288531);
      BigFraction bigFraction8 = bigFraction0.add(bigInteger0);
      bigFraction0.THREE_FIFTHS.compareTo(bigFraction4);
      bigFraction7.compareTo(bigFraction1);
      bigFraction3.divide(9218868437227405312L);
      bigFraction5.longValue();
      // Undeclared exception!
//      try { 
        bigFraction8.divide(bigInteger0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1), (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.ONE_THIRD.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction1.ONE_QUARTER.multiply(bigInteger1);
      bigFraction0.multiply((-1));
      bigFraction0.bigDecimalValue();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-126);
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      bigFraction1.FOUR_FIFTHS.subtract(bigFraction2);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-97);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigFraction0.pow(bigInteger2);
      // Undeclared exception!
//      try { 
        BigFraction.getReducedFraction(833, (byte)0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO;
      // Undeclared exception!
//      try { 
        bigFraction1.divide((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1917);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction0.TWO.negate();
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = new BigFraction(3.4284156709489884E181);
      bigFraction2.pow((-141L));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.bigDecimalValue();
      bigFraction0.ONE_QUARTER.getField();
      bigFraction0.MINUS_ONE.percentageValue();
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.pow((-4053L));
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.reciprocal();
      bigFraction2.getDenominatorAsLong();
      bigFraction2.TWO_FIFTHS.subtract(2289);
      BigFraction bigFraction3 = bigFraction1.TWO_FIFTHS.add((-33L));
      bigFraction0.ZERO.abs();
      bigFraction0.FOUR_FIFTHS.intValue();
      bigFraction3.doubleValue();
      BigFraction.getReducedFraction(2289, 2289);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.ONE.divide(469);
      bigFraction1.ZERO.getDenominatorAsInt();
      bigFraction1.pow((long) 469);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1917);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      bigFraction0.pow((-1914L));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.ONE.divide(469);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)70;
      bigFraction1.percentageValue();
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)73;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      bigFraction3.negate();
      BigFraction bigFraction4 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction5 = new BigFraction((int) (byte) (-1), (int) (byte)73);
      bigFraction5.divide(bigFraction4);
      bigFraction3.getNumerator();
      bigFraction2.toString();
      bigFraction1.pow((double) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1), (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction1.ONE_QUARTER.multiply(bigInteger1);
      BigFraction bigFraction4 = bigFraction0.multiply((-1));
      bigInteger0.longValueExact();
      bigFraction0.bigDecimalValue();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-47);
      bigFraction4.doubleValue();
      BigFraction bigFraction5 = bigFraction2.abs();
      bigFraction5.THREE_QUARTERS.reciprocal();
      bigFraction4.floatValue();
      bigFraction3.compareTo(bigFraction2);
      bigFraction1.floatValue();
      BigFraction bigFraction6 = BigFraction.TWO_FIFTHS;
      bigFraction6.add(bigFraction0);
      bigFraction1.getNumeratorAsLong();
      bigFraction2.getNumeratorAsInt();
      bigFraction0.getDenominatorAsLong();
      bigFraction1.longValue();
      bigFraction3.negate();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2071), 1253);
      BigFraction bigFraction1 = new BigFraction(1130.1461, 52);
      bigFraction0.ONE_THIRD.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.add((-3051));
      bigFraction2.add(bigFraction1);
      bigFraction0.toString();
      BigFraction bigFraction3 = BigFraction.TWO_QUARTERS;
      bigFraction3.getNumeratorAsInt();
      bigFraction1.getNumerator();
      bigFraction1.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.getNumeratorAsLong();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction1.getDenominatorAsInt();
      bigFraction1.percentageValue();
      bigFraction0.floatValue();
      BigFraction bigFraction2 = bigFraction1.subtract(2222);
      // Undeclared exception!
//      try { 
        bigFraction2.bigDecimalValue(2145765661);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.bigDecimalValue();
      bigFraction0.ONE_QUARTER.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      bigFraction0.MINUS_ONE.percentageValue();
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction0.getField();
      BigFraction bigFraction2 = bigFraction0.pow((-4053L));
      bigFraction2.THREE_QUARTERS.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.reciprocal();
      BigFraction bigFraction4 = bigFraction3.TWO_FIFTHS.subtract(2289);
      bigFraction2.TWO_FIFTHS.add((-33L));
      bigFraction0.FOUR_FIFTHS.intValue();
      bigFraction2.doubleValue();
      BigFraction bigFraction5 = bigFraction1.subtract((-4053L));
      bigFraction5.TWO_QUARTERS.subtract(2289);
      bigFraction2.multiply(bigInteger0);
      bigFraction5.getDenominatorAsInt();
      bigFraction2.getField();
      bigFraction4.doubleValue();
      // Undeclared exception!
//      try { 
        bigFraction4.bigDecimalValue(0, 2289);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.bigDecimalValue();
      bigFraction0.ONE_QUARTER.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      bigFraction0.MINUS_ONE.percentageValue();
      bigFraction0.subtract(bigInteger0);
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.pow((-4053L));
      bigFraction1.THREE_QUARTERS.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.reciprocal();
      bigFraction1.toString();
      bigFraction2.getNumerator();
      BigFraction bigFraction3 = new BigFraction(bigInteger0);
      bigFraction3.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.divide((-1));
      bigFraction0.hashCode();
      bigFraction0.TWO.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.FOUR_FIFTHS.getField();
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      bigFraction0.percentageValue();
      bigFraction1.subtract((-2054L));
      BigFraction bigFraction3 = bigFraction1.subtract((long) (-1));
      bigFraction0.getDenominatorAsInt();
      bigFraction2.getField();
      bigFraction3.doubleValue();
      // Undeclared exception!
//      try { 
        bigFraction2.bigDecimalValue(0, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.bigDecimalValue();
      double double0 = 0.0;
      BigFraction bigFraction1 = null;
//      try {
        bigFraction1 = new BigFraction(0.0, (-655));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0, 2291);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.add((-647));
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.subtract((-647));
      bigFraction1.ONE_HALF.bigDecimalValue();
      Object object0 = new Object();
      bigFraction2.ONE_HALF.equals(object0);
      bigFraction0.hashCode();
      bigFraction0.compareTo(bigFraction2);
      BigFraction bigFraction3 = bigFraction1.pow(1369);
      BigFraction bigFraction4 = bigFraction1.multiply(bigFraction3);
      bigFraction3.bigDecimalValue((-1), 0);
      bigFraction2.longValue();
      bigFraction2.intValue();
      BigFraction bigFraction5 = bigFraction1.ZERO.add(bigFraction3);
      bigFraction5.compareTo(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction4.divide(bigInteger0);
      bigFraction3.toString();
      bigFraction5.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE);
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.multiply(bigInteger0);
      bigFraction1.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = 0L;
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(0L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1), (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.ONE_THIRD.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction1.ONE_QUARTER.multiply(bigInteger1);
      bigFraction0.multiply((-1));
      bigFraction0.bigDecimalValue();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-97);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigFraction0.pow(bigInteger2);
      BigFraction bigFraction2 = BigFraction.getReducedFraction((byte) (-1), (-4818));
      bigFraction2.getNumeratorAsLong();
      bigFraction0.subtract(1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(72L, 72L);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.negate();
      // Undeclared exception!
//      try { 
        bigFraction1.TWO_THIRDS.subtract((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.ONE_HALF.getField();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        bigFraction0.THREE_QUARTERS.divide(bigInteger0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1276.914022732289, (-2103));
      byte[] byteArray0 = new byte[1];
      bigFraction0.ZERO.getNumeratorAsLong();
      byteArray0[0] = (byte)51;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_QUARTER.negate();
      bigFraction0.TWO_QUARTERS.toString();
      BigFraction bigFraction1 = null;
//      try {
        bigFraction1 = new BigFraction((-382.8324376), (-382.8324376), (-1132));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert -382.832 to fraction after -1,132 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1693.349, 1693.349, (-1));
      BigFraction bigFraction1 = bigFraction0.ZERO.reduce();
      BigFractionField bigFractionField0 = bigFraction1.FOUR_FIFTHS.getField();
      bigFraction0.longValue();
      bigFraction1.equals(bigFractionField0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.ONE_QUARTER.doubleValue();
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.TWO_QUARTERS.getNumeratorAsInt();
      bigFraction0.FOUR_FIFTHS.equals(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction2.TWO_FIFTHS.hashCode();
      BigFraction bigFraction3 = new BigFraction(bigInteger0);
      bigFraction1.THREE_QUARTERS.multiply(bigFraction3);
      BigFraction bigFraction4 = bigFraction0.pow(1140);
      bigFraction4.subtract(bigFraction1);
      // Undeclared exception!
//      try { 
        bigFraction4.divide(0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.ONE_THIRD.hashCode();
      bigFraction0.FOUR_FIFTHS.percentageValue();
      bigFraction0.ZERO.doubleValue();
      bigFraction0.pow(0.0);
      bigFraction0.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigInteger0.longValue();
      bigFraction1.multiply(2010L);
      BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
      bigFraction2.ONE_FIFTH.multiply(1L);
      bigFraction2.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1917);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction0.TWO.negate();
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction0.divide(bigFraction1);
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L, 1915L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction(2213L);
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.multiply(0L);
      bigFraction1.ONE_QUARTER.multiply(bigFraction2);
      BigFraction bigFraction3 = bigFraction1.reduce();
      long long0 = 0L;
      // Undeclared exception!
//      try { 
        bigFraction3.TWO_THIRDS.bigDecimalValue((-1), (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4150L));
      BigFraction bigFraction1 = BigFraction.getReducedFraction(847, 5);
      bigFraction0.TWO.subtract((-1558L));
      BigFraction bigFraction2 = bigFraction0.divide((-4150L));
      BigFraction bigFraction3 = bigFraction2.pow((-4150L));
      bigFraction3.THREE_QUARTERS.add((long) 847);
      bigFraction2.add((-2048L));
      bigFraction1.getDenominatorAsLong();
      bigFraction1.intValue();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5648769086999809661L);
      bigFraction0.toString();
      bigFraction0.ONE_HALF.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction0.ONE_FIFTH.reduce();
      bigFraction1.TWO_QUARTERS.multiply(27);
      bigFraction0.ONE_FIFTH.bigDecimalValue();
      int int0 = 1;
      BigFraction bigFraction2 = bigFraction0.add(1);
      bigFraction0.multiply(bigFraction2);
      bigFraction2.FOUR_FIFTHS.divide((-648));
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction0);
      bigFraction3.getField();
      bigFraction3.TWO_QUARTERS.add(0L);
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(1, (byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      int int0 = 1606;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow(1606);
      bigFraction0.MINUS_ONE.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.multiply((long) 1606);
      bigFraction2.TWO_FIFTHS.toString();
      int int1 = 92;
      BigFraction bigFraction3 = bigFraction1.THREE_QUARTERS.pow(1);
      BigFraction bigFraction4 = bigFraction0.TWO.multiply(bigFraction2);
      bigFraction3.MINUS_ONE.subtract(bigFraction4);
      BigFraction bigFraction5 = bigFraction1.TWO_FIFTHS.pow(92);
      bigFraction5.ONE_FIFTH.getNumeratorAsLong();
      bigFraction0.ONE_FIFTH.bigDecimalValue();
      bigFraction0.doubleValue();
      // Undeclared exception!
//      try { 
        bigFraction5.MINUS_ONE.bigDecimalValue(1606);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.FOUR_FIFTHS.getDenominatorAsLong();
      // Undeclared exception!
//      try { 
        bigFraction0.ONE_HALF.compareTo((BigFraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.reduce();
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.ONE_FIFTH.subtract(bigFraction2);
      bigFraction0.MINUS_ONE.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.ZERO.subtract(bigFraction2);
      BigFraction.getReducedFraction(1138, 5);
      bigFraction3.ONE_FIFTH.getField();
      bigFraction0.getNumeratorAsInt();
      bigFraction1.THREE_FIFTHS.equals(bigFraction3);
      bigFraction0.TWO.percentageValue();
      bigFraction2.TWO_THIRDS.subtract(bigFraction0);
      bigFraction1.MINUS_ONE.getNumeratorAsLong();
      bigFraction2.TWO.subtract((long) 1138);
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction1.subtract(bigFraction2);
      // Undeclared exception!
//      try { 
        bigFraction4.ONE_THIRD.bigDecimalValue();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Non-terminating decimal expansion; no exact representable decimal result.
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.divide((-1));
      bigFraction0.hashCode();
      bigFraction0.TWO.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.FOUR_FIFTHS.getField();
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      bigFraction2.ONE_FIFTH.abs();
      bigFraction1.intValue();
      bigFraction1.subtract(bigFraction2);
      bigFraction1.add(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5);
      bigFraction0.ONE_QUARTER.add(1247L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE_THIRD.add(5);
      bigFraction0.add(bigInteger0);
      bigFraction0.intValue();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)100;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
      BigFraction bigFraction1 = bigFraction0.ONE.subtract((-1118L));
      bigFraction1.ONE_THIRD.multiply(bigFraction0);
      BigFraction bigFraction2 = null;
//      try {
        bigFraction2 = new BigFraction((byte)100, (-2042.0386978688), (-2867));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 100 to fraction (-99/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.TWO_FIFTHS.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.reduce();
      bigFraction0.TWO_QUARTERS.getNumeratorAsLong();
      bigFraction0.TWO.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction0.TWO.pow(1);
      bigFraction0.getField();
      bigFraction0.THREE_QUARTERS.toString();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction0.negate();
      bigFraction3.TWO_FIFTHS.pow(bigInteger0);
      bigFraction4.ZERO.toString();
      bigFraction4.ONE_QUARTER.longValue();
      bigFraction0.getDenominator();
      bigFraction2.add(bigFraction4);
      BigFraction bigFraction5 = bigFraction2.abs();
      BigFraction bigFraction6 = bigFraction5.ONE_THIRD.add(1);
      bigFraction6.TWO.floatValue();
      bigFraction2.compareTo(bigFraction1);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
//      try { 
        BigInteger.probablePrime(1, mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // bitLength < 2
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.negate();
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.add(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction5 = bigFraction3.THREE_FIFTHS.divide(1740);
      bigFraction3.ONE_QUARTER.getDenominatorAsInt();
      BigFraction bigFraction6 = bigFraction4.TWO_QUARTERS.add((-804L));
      BigFraction bigFraction7 = bigFraction6.ONE.subtract(bigInteger0);
      bigFraction3.equals(bigFraction4);
      bigFraction2.longValue();
      bigFraction2.intValue();
      BigFraction bigFraction8 = bigFraction3.reciprocal();
      bigFraction8.TWO_FIFTHS.bigDecimalValue();
      bigFraction6.ONE.getDenominatorAsLong();
      BigFraction bigFraction9 = bigFraction4.divide(bigFraction2);
      bigFraction9.bigDecimalValue(1, 0);
      BigFraction bigFraction10 = bigFraction0.ONE_THIRD.reduce();
      bigFraction8.THREE_FIFTHS.pow(bigInteger0);
      bigFraction5.divide(2772L);
      bigFraction1.getNumeratorAsInt();
      bigFraction9.getDenominator();
      bigFraction0.multiply(bigFraction5);
      BigFraction bigFraction11 = BigFraction.ONE_FIFTH;
      bigFraction11.TWO_THIRDS.subtract(bigFraction6);
      bigFraction11.ONE.divide((-804L));
      bigFraction8.divide(bigFraction11);
      bigFraction7.compareTo(bigFraction3);
      bigFraction5.add(bigFraction8);
      bigFraction10.getDenominatorAsInt();
      bigFraction6.divide(bigInteger0);
      bigFraction1.divide(bigFraction2);
      bigFraction2.percentageValue();
      bigFraction0.multiply(3);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = bigFraction0.pow((-3777L));
      bigFraction1.getNumeratorAsInt();
      bigFraction1.ONE_FIFTH.getDenominatorAsLong();
      int int0 = 1;
      bigFraction1.getNumeratorAsLong();
      bigFraction0.add(1);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(429239555, 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.ONE_FIFTH.pow(bigInteger0);
      bigFraction2.THREE_FIFTHS.compareTo(bigFraction1);
      long long0 = (-1392L);
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.multiply((-1392L));
      bigFraction0.ONE_THIRD.compareTo(bigFraction2);
      // Undeclared exception!
//      try { 
        bigFraction3.ZERO.reciprocal();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.ONE_QUARTER.getField();
      // Undeclared exception!
//      try { 
        bigFraction1.bigDecimalValue(92, 92);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply(0L);
      bigFraction1.TWO.pow(1875.92925623608);
      bigFraction0.ONE_HALF.getField();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction2 = bigFraction0.subtract(420L);
      BigFraction bigFraction3 = bigFraction2.TWO_FIFTHS.add(bigFraction0);
      BigFraction.getReducedFraction(3, 3169);
      bigFraction0.TWO.getField();
      bigFraction2.MINUS_ONE.getDenominatorAsInt();
      BigFraction bigFraction4 = bigFraction3.FOUR_FIFTHS.pow(1418);
      bigFraction0.TWO_QUARTERS.compareTo(bigFraction4);
      BigFraction bigFraction5 = bigFraction3.ONE_THIRD.subtract(1);
      bigFraction5.MINUS_ONE.pow(0L);
      Object object0 = new Object();
      bigFraction5.TWO_FIFTHS.equals(object0);
      bigFraction0.getField();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction6 = bigFraction4.ONE.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction6.TWO_THIRDS.multiply(bigInteger1);
      bigFraction2.intValue();
      bigFraction0.reduce();
      BigFraction bigFraction7 = bigFraction4.abs();
      bigFraction7.TWO_FIFTHS.divide(bigInteger0);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigFraction1.multiply(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.bigDecimalValue();
      bigFraction0.ONE_QUARTER.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      double double0 = bigFraction0.MINUS_ONE.percentageValue();
      assertEquals((-100.0), double0, 0.01);
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction0.getField();
      BigFraction bigFraction2 = bigFraction0.pow((-4053L));
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.MINUS_ONE.reciprocal();
      bigFraction4.TWO_FIFTHS.subtract(2289);
      assertEquals((short) (-1), bigFraction4.shortValue());
      
      bigFraction2.TWO_FIFTHS.add((-33L));
      bigFraction0.FOUR_FIFTHS.intValue();
      double double1 = bigFraction2.doubleValue();
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      BigFraction bigFraction5 = bigFraction1.subtract((-4053L));
      bigFraction5.TWO_QUARTERS.subtract(2289);
      BigFraction bigFraction6 = bigFraction2.multiply(bigInteger0);
      double double2 = bigFraction1.pow(702.325288531);
      assertEquals(Double.NaN, double2, 0.01);
      
      bigFraction0.add(bigInteger0);
      int int0 = bigFraction6.compareTo(bigFraction1);
      assertEquals((-1), int0);
      
      bigFraction3.divide(9218868437227405312L);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.getNumeratorAsLong();
      bigFraction0.getDenominatorAsInt();
      double double0 = bigFraction0.ONE_QUARTER.percentageValue();
      assertEquals(25.0, double0, 0.01);
      
      float float0 = bigFraction0.floatValue();
      assertEquals(2.0F, float0, 0.01F);
      
      BigFraction bigFraction1 = bigFraction0.subtract(1);
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      int int0 = (-2099);
      // Undeclared exception!
//      try { 
        bigFraction0.ZERO.pow((-2099));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2071), 1253);
      BigFraction bigFraction1 = new BigFraction(1130.1461, 52);
      bigFraction0.ONE_THIRD.compareTo(bigFraction1);
      BigFraction bigFraction2 = null;
      // Undeclared exception!
//      try { 
        bigFraction0.add((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      int int0 = bigFraction0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, 1);
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.pow(1553);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction0.abs();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction1.divide(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.divide(1);
      bigFraction0.hashCode();
      int int0 = bigFraction3.getDenominatorAsInt();
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((-223374887), int0);
      assertSame(bigFraction0, bigFraction2);
      assertTrue(bigFraction3.equals((Object)bigFraction4));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9154082963658192752L);
      BigFraction bigFraction1 = null;
//      try {
        bigFraction1 = new BigFraction(9154082963658192752L, 1.0, 629);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 9,154,082,963,658,192,900 to fraction (9,154,082,963,658,192,896/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 994;
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(0.0, 0.0, 994);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction1.ONE_QUARTER.getNumeratorAsLong();
      // Undeclared exception!
//      try { 
        bigFraction1.ONE_THIRD.bigDecimalValue();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Non-terminating decimal expansion; no exact representable decimal result.
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }
}
