/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:41:00 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(686.3561873212756, 479);
      BigFraction bigFraction1 = bigFraction0.pow(479);
      bigFraction0.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(159.202529201, 159.202529201, 1592);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE_FIFTH.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1233L));
      bigFraction0.ZERO.pow(0L);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.pow(0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction1.add(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1563.7122), 5);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction1.add(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction0.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1563.7122), 5);
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      bigFraction1.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1322.8695838287258, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.subtract(644L);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-418L));
      bigFraction0.TWO_THIRDS.subtract(0L);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.subtract((-397L));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-418L));
      bigFraction0.subtract((-1556));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1233L));
      bigFraction0.TWO.subtract(414);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction1.reduce();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.TWO.reciprocal();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.MINUS_ONE.reciprocal();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction1.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.MINUS_ONE.pow((-262L));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3571.8845915), (-196));
      bigFraction0.pow(2L);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.pow((-224));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L, 9007199254740990L);
      bigFraction0.pow(325.61);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3183605296591799669L), 4503599627370495L);
      bigFraction0.pow((double) 3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-85.5916219), 2919);
      bigFraction0.negate();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(686.3561873212756);
      bigFraction0.negate();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-85.5916219), 2919);
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      bigFraction1.negate();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.subtract(3);
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0, 284.85082566, 95);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction1.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.multiply(4503599627370496L);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.ONE_HALF.multiply(2147483647L);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(3);
      bigFraction1.multiply((-377));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.longValue();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1608.09), 2.147483603E9, 2147483603);
      bigFraction0.longValue();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.multiply(4L);
      bigFraction1.intValue();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1563.7122), 5);
      bigFraction0.MINUS_ONE.intValue();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction.getReducedFraction((-2391), (-2391));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction.getReducedFraction((-79), 19);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0, 1296.928922811544, 0);
      bigFraction0.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow((-1596));
      bigFraction1.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.subtract(3);
      bigFraction1.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1049.6492416834515);
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow((-3071L));
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(435);
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.pow(100);
      bigFraction1.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.pow(836);
      bigFraction1.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(3);
      BigFraction bigFraction2 = bigFraction1.pow((-224));
      BigFraction bigFraction3 = bigFraction2.abs();
      bigFraction3.getDenominator();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0745679901447147E-9, 743);
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0745679901447147E-9, 743);
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-85.5916219), 2919);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.divide(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.ONE_THIRD.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) Integer.MAX_VALUE);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-536.992));
      bigFraction0.divide((-1L));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(985.5798842925, (-1));
      bigFraction0.divide((-283L));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(686.3561873212756);
      bigFraction0.divide(422);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ZERO.add(bigInteger0);
      bigFraction1.divide((-1));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.compareTo(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.subtract(1);
      bigFraction0.compareTo(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.TWO_QUARTERS.compareTo(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3183605296591799669L), 4503599627370495L);
      bigFraction0.bigDecimalValue((-390), 3);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.bigDecimalValue(1, 1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.subtract(bigInteger0);
      bigFraction1.bigDecimalValue(7, 4);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.TWO_FIFTHS.bigDecimalValue(3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1322.8695838287258, 0);
      bigFraction0.bigDecimalValue(0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1563.7122), 5);
      bigFraction0.bigDecimalValue(0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1563.7122), 5);
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      bigFraction1.multiply(5);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide((-1));
      bigFraction1.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.ONE_FIFTH.add(1636L);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.THREE_QUARTERS.add((-3864L));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1296.928922811544);
      bigFraction0.add((-787));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1563.7122), 5);
      bigFraction0.add(52);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(2147483562);
      bigFraction1.abs();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(369, 3044);
      BigFraction bigFraction1 = bigFraction0.ZERO.pow(4172);
      // Undeclared exception!
//      try { 
        bigFraction1.reciprocal();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
//      try { 
        bigFraction0.pow(bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
//      try { 
        bigFraction0.pow((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
//      try { 
        bigFraction0.pow((-9223372036854775808L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // exponent (-9,223,372,036,854,775,808)
//         //
//         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.9370756891995824, (-1));
      // Undeclared exception!
//      try { 
        bigFraction0.pow((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9193070505571053912L, 4503599627370496L);
      // Undeclared exception!
//      try { 
        bigFraction0.pow(2147467264);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger would overflow supported range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.TWO_FIFTHS.divide(0L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
//      try { 
        bigFraction0.divide(0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
//      try { 
        bigFraction0.TWO_QUARTERS.bigDecimalValue(629, (-1335));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), (-1));
      // Undeclared exception!
//      try { 
        bigFraction0.THREE_QUARTERS.bigDecimalValue(7);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Rounding necessary
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Non-terminating decimal expansion; no exact representable decimal result.
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.2106649072141096E-7, 1.2106649072141096E-7, 1473);
//      try { 
        bigFraction0.add((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numerator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numerator
//         //
//         verifyException("org.apache.commons.math3.util.MathUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.ONE.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction1.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(0.75F);
      bigFraction1.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.024714469909668, (-1));
      bigFraction0.TWO_FIFTHS.doubleValue();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(0L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1502.10656840295, (-829));
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.multiply((-3318));
      bigFraction1.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      // Undeclared exception!
//      try { 
        bigFraction0.subtract((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
//      try { 
        bigFraction0.subtract((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.THREE_QUARTERS.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-37.46850041));
      BigFraction bigFraction1 = bigFraction0.pow((-1288L));
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      assertEquals((byte) (-37), bigFraction0.byteValue());
      assertEquals((byte)65, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(686.3561873212756, 479);
      BigFraction bigFraction1 = bigFraction0.pow(479);
      bigFraction1.getDenominator();
      assertEquals((short)11112, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), (-1));
      BigFraction bigFraction1 = bigFraction0.add((-1));
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1296.928922811544, 0);
      BigFraction bigFraction1 = new BigFraction(0, 1296.928922811544, 0);
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)1296, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
//      try { 
        bigFraction0.multiply((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.multiply((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      float float0 = bigFraction0.floatValue();
      assertEquals(0.75F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      boolean boolean0 = bigFraction0.equals(bigFraction1);
      assertFalse(boolean0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1407), 819);
      Object object0 = new Object();
      boolean boolean0 = bigFraction0.ONE_QUARTER.equals(object0);
      assertFalse(boolean0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(686.3561873212756, 479);
      boolean boolean0 = bigFraction0.equals(bigFraction0);
      assertEquals((byte) (-82), bigFraction0.byteValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.divide((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        bigFraction0.MINUS_ONE.divide(bigInteger0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(758.3);
      // Undeclared exception!
//      try { 
        bigFraction0.ONE_FIFTH.divide((BigInteger) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)2, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1049.6492416834515);
      // Undeclared exception!
//      try { 
        bigFraction0.add((BigFraction) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fraction
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.TWO.abs();
      assertEquals((short)2, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3183605296591799669L), 4503599627370495L);
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals((byte) (-62), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 19);
      double double0 = bigFraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((-2469.97334916489), (-2469.97334916489), (-1));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Unable to convert -2,469.973 to fraction after -1 iterations
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((double) (-1407), 3805);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert -1,407 to fraction (-9,223,372,036,854,774,400/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((double) 2147483647L, Integer.MAX_VALUE);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction((double) 2147483654L, (-2147483647));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: Overflow trying to convert 2,147,483,654 to fraction (2,147,483,654/1)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
//      try { 
        bigFraction0.divide(bigFraction0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = null;
//      try {
        bigFraction0 = new BigFraction(Float.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cannot convert infinite value
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
//      try { 
        BigFraction.getReducedFraction(4, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      long long0 = bigFraction0.TWO_FIFTHS.getNumeratorAsLong();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483676L, (-1052L));
      BigFraction bigFraction1 = bigFraction0.pow((-221));
      float float0 = bigFraction1.floatValue();
      assertEquals((-1.175491E-38F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.divide(113236205062349959L);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
//      try { 
        bigFraction0.THREE_QUARTERS.bigDecimalValue(14);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid rounding mode
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.2534E-8));
      // Undeclared exception!
//      try { 
        bigFraction0.bigDecimalValue(Integer.MAX_VALUE, 3);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger would overflow supported range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.multiply((-3318));
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertFalse(boolean0);
      assertEquals((byte)72, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      long long0 = bigFraction0.TWO.longValue();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.negate();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.TWO_THIRDS.hashCode();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      long long0 = bigFraction0.TWO_FIFTHS.getDenominatorAsLong();
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      double double0 = bigFraction0.ONE_THIRD.percentageValue();
      assertEquals(33.333333333333336, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1407), 819);
      BigFraction bigFraction1 = bigFraction0.pow((-3015));
      double double0 = bigFraction1.doubleValue();
      assertEquals((-1.8595376972745033E-308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigDecimal bigDecimal0 = bigFraction0.ONE_HALF.bigDecimalValue();
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.add(0L);
      assertEquals((short)0, bigFraction1.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1798);
      // Undeclared exception!
//      try { 
        bigFraction0.THREE_QUARTERS.compareTo((BigFraction) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      int int0 = bigFraction0.ONE_QUARTER.getNumeratorAsInt();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1233L));
      double double0 = bigFraction0.percentageValue();
      assertEquals((-123300.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertNotNull(bigFractionField0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      // Undeclared exception!
//      try { 
        bigFraction0.pow((-996L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // denominator must be different from 0
//         //
//         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2003));
      BigFraction bigFraction1 = new BigFraction(4213, (-2003));
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertEquals((byte)45, bigFraction0.byteValue());
      assertEquals((byte) (-72), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      int int0 = bigFraction0.ONE_THIRD.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertEquals((byte)5, bigFraction1.byteValue());
  }
}
