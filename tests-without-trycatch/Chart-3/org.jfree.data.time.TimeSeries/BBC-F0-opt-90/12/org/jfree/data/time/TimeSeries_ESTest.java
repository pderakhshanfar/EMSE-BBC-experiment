/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:15:53 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.Instant;
import java.time.chrono.MinguoDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "rT\"<moEc7jb,QC", "rT\"<moEc7jb,QC");
      timeSeries0.hashCode();
      assertEquals("rT\"<moEc7jb,QC", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("rT\"<moEc7jb,QC", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.setMaximumItemCount(1);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(1, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      timeSeries0.setMaximumItemAge(431L);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(431L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) integer0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals(100.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3148, 3148, (-1459), 3148, (-1459));
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "", "");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(0, 723);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.getValue(regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      timeSeries0.add((RegularTimePeriod) month0, (double) 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) bigInteger0);
      TimeSeries timeSeries1 = new TimeSeries(bigInteger0);
      timeSeries1.add((RegularTimePeriod) month0, 79.0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add(regularTimePeriod0, (Number) integer0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (Number) integer0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getRawDataItem(month0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.add((RegularTimePeriod) month0, 0.0);
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.getDataItem(regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.add((RegularTimePeriod) month0, 0.0);
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      timeSeries0.add(regularTimePeriod0, (double) 1);
      timeSeries0.add((RegularTimePeriod) month0, (Number) 1);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      TimeSeries timeSeries0 = new TimeSeries(integer0, (String) null, (String) null);
      timeSeries0.setRangeDescription((String) null);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(29, minute0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "M%@hPauU7|pZy3Jw/l", "M%@hPauU7|pZy3Jw/l");
      timeSeries0.setDomainDescription("M%@hPauU7|pZy3Jw/l");
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("M%@hPauU7|pZy3Jw/l", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("M%@hPauU7|pZy3Jw/l", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      timeSeries0.delete(0, 0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1419L);
      Quarter quarter0 = new Quarter(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (double) 1);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0, ") <= upper (", ") <= upper (");
      timeSeries0.add(timeSeriesDataItem0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      BigInteger bigInteger0 = BigInteger.TEN;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (double) 193);
      timeSeriesDataItem0.setValue(bigInteger0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getValue((RegularTimePeriod) month0);
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) month0);
      assertEquals((-122.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (Number) null);
      timeSeries0.getValue(0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) month0, (Number) bigInteger0);
      timeSeries0.getValue(0);
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(29, minute0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "M%@hPauU7|pZy3Jw/l", "M%@hPauU7|pZy3Jw/l");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.getTimePeriodClass();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      timeSeries0.getTimePeriod(0);
      assertEquals(100.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      timeSeries0.getRawDataItem(0);
      assertEquals((-30000.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "the time period ", (String) null);
      String string0 = timeSeries0.getRangeDescription();
      assertNull(string0);
      assertEquals("the time period ", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "5uVk44w4Nl9", "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("", string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("5uVk44w4Nl9", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Week week1 = new Week(53, 2144565871);
      timeSeries0.add((RegularTimePeriod) week1, (Number) 53);
      timeSeries0.getNextTimePeriod();
      assertEquals(53.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(29, minute0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "M%@hPauU7|pZy3Jw/l", "M%@hPauU7|pZy3Jw/l");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.getNextTimePeriod();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, 0.0, false);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      double double0 = timeSeries0.getMinY();
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate(59, 751, 751, 751, 334, 334);
      TimeZone timeZone0 = TimeZone.getTimeZone("Quarter outside valid range.");
      Month month0 = new Month(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (-55.2411), true);
      double double0 = timeSeries0.getMinY();
      assertEquals((-55.2411), timeSeries0.getMaxY(), 0.01);
      assertEquals((-55.2411), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.getMaximumItemAge();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, 0.0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      double double0 = timeSeries0.getMaxY();
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) bigInteger0);
      double double0 = timeSeries0.getMaxY();
      assertEquals((-122.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      timeSeries0.getItemCount();
      assertEquals(100.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Minute minute0 = new Minute(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.getIndex(minute0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      timeSeries0.add(regularTimePeriod0, (double) 1);
      timeSeries0.add((RegularTimePeriod) month0, (Number) 1);
      int int0 = timeSeries0.getIndex(month0);
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "", "");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (-0.7363324758159617));
      timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      assertEquals((-0.7363324758159617), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(1, 580);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(0, 0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy(0, 2147483645);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(29, minute0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "M%@hPauU7|pZy3Jw/l", "M%@hPauU7|pZy3Jw/l");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.createCopy(0, 0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) month0, (Number) bigInteger0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) integer0);
      assertEquals(100.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, 0.0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Month month0 = new Month();
      Year year0 = month0.getYear();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (Number) year0.MINIMUM_YEAR);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, 1.0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(29, minute0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "M%@hPauU7|pZy3Jw/l", "M%@hPauU7|pZy3Jw/l");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals((-30000.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.data = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        timeSeries0.update((RegularTimePeriod) month0, (Number) bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) 59);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
//      try { 
        timeSeries0.update(838, (Number) integer0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 838, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        timeSeries0.update((-4), (Number) bigInteger0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.setMaximumItemCount(1227);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.setMaximumItemAge(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.removeAgedItems(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1473L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      // Undeclared exception!
//      try { 
        timeSeries0.removeAgedItems(1659L, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.hashCode();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getValue(193);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(calendar0, "", "T");
      // Undeclared exception!
//      try { 
        timeSeries0.getValue((-2088));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeSeries timeSeries0 = new TimeSeries(mockGregorianCalendar0);
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Week week0 = new Week((-1), 404);
      TimeSeries timeSeries0 = new TimeSeries(week0, "Y6_U_u8p~'Q`>*", "Y6_U_u8p~'Q`>*");
      Vector<Object> vector0 = new Vector<Object>();
      java.time.Month month0 = java.time.Month.SEPTEMBER;
      vector0.add((Object) month0);
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0, ")x:2FF{W)JQz^tnsa", ")x:2FF{W)JQz^tnsa");
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriods();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriod(216);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriod((-1871));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getRawDataItem(month0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getRawDataItem(12);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, ", but the TimeSeries is expecting an instance of ", ", but the TimeSeries is expecting an instance of ");
      // Undeclared exception!
//      try { 
        timeSeries0.getRawDataItem(23);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 23, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockDate mockDate0 = new MockDate(59, 751, 751, 751, 334, 334);
      TimeZone timeZone0 = TimeZone.getTimeZone("Quarter outside valid range.");
      Month month0 = new Month(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.getRawDataItem((-725));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getNextTimePeriod();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MinguoDate minguoDate0 = MockMinguoDate.now();
      TimeSeries timeSeries0 = new TimeSeries(minguoDate0);
      LinkedList<TimeSeriesTableModel> linkedList0 = new LinkedList<TimeSeriesTableModel>();
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
//      try { 
        timeSeries0.getNextTimePeriod();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: -1, Size: 0
//         //
//         verifyException("java.util.LinkedList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Week week0 = new Week((-1), 404);
      TimeSeries timeSeries0 = new TimeSeries(week0, "Y6_U_u8p~'Q`>*", "Y6_U_u8p~'Q`>*");
      Vector<Object> vector0 = new Vector<Object>();
      java.time.Month month0 = java.time.Month.SEPTEMBER;
      vector0.add((Object) month0);
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
//      try { 
        timeSeries0.getNextTimePeriod();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      timeSeries1.data = null;
      // Undeclared exception!
//      try { 
        timeSeries1.getItemCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getIndex(month0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("dGV}$Xwi0T");
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem(2147483645);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem((-550));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.delete((RegularTimePeriod) month0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3148, 3148, (-1459), 3148, (-1459));
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.delete(3, 829, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete(0, 1592, true);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)MockCalendar.getInstance(timeZone0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Month month0 = new Month(date0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete(334, 334);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 334, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3148, 3148, (-1459), 3148, (-1459));
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete((-2649), 2146319700);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Week week0 = new Week((-1), 404);
      TimeSeries timeSeries0 = new TimeSeries(week0, "Y6_U_u8p~'Q`>*", "Y6_U_u8p~'Q`>*");
      Vector<Object> vector0 = new Vector<Object>();
      java.time.Month month0 = java.time.Month.SEPTEMBER;
      vector0.add((Object) month0);
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimeSeriesDataItem cannot be cast to java.lang.Enum
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(53, 1073741824);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.clone();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'collection' argument.
//         //
//         verifyException("org.jfree.chart.util.ObjectUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "", ";z8=JxW@22I");
      ArrayList<FixedMillisecond> arrayList0 = new ArrayList<FixedMillisecond>();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-9999));
      arrayList0.add(fixedMillisecond0);
      timeSeries0.data = (List) arrayList0;
//      try { 
        timeSeries0.clone();
//        fail("Expecting exception: CloneNotSupportedException");
      
//      } catch(CloneNotSupportedException e) {
//         //
//         // Failed to clone.
//         //
//         verifyException("org.jfree.chart.util.ObjectUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.clear();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(29, minute0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "M%@hPauU7|pZy3Jw/l", "M%@hPauU7|pZy3Jw/l");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 59);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockDate mockDate0 = new MockDate(59, 751, 751, 751, 334, 334);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Month month0 = new Month(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "", ";z8=JxW@22I");
      ArrayList<FixedMillisecond> arrayList0 = new ArrayList<FixedMillisecond>();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-9999));
      arrayList0.add(fixedMillisecond0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) 9999);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Month month0 = new Month();
      timeSeries0.add((RegularTimePeriod) month0, (double) 1);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, 39.0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0, ")x:2FF{W)JQz^tnsa", ")x:2FF{W)JQz^tnsa");
      MockDate mockDate0 = new MockDate(53);
      Second second0 = new Second(mockDate0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, (-1.7976931348623157E308));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      TimeSeries timeSeries1 = new TimeSeries(integer0);
      MockDate mockDate0 = new MockDate(1595, 0, 0, (-5160), 0, (-4));
      Quarter quarter0 = new Quarter(mockDate0);
      timeSeries1.addOrUpdate((RegularTimePeriod) quarter0, (-732.0));
      // Undeclared exception!
//      try { 
        timeSeries0.addAndOrUpdate(timeSeries1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Quarter outside valid range.");
      // Undeclared exception!
//      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.data = null;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (-1.0));
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(week0);
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period Week 7, 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-923L));
      Hour hour0 = new Hour(mockDate0);
      Instant instant0 = mockDate0.toInstant();
      Minute minute0 = new Minute(0, hour0);
      Second second0 = new Second(0, minute0);
      TimeSeries timeSeries0 = new TimeSeries(instant0);
      timeSeries0.add((RegularTimePeriod) second0, (Number) 0, true);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) second0, (Number) 0, true);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockDate mockDate0 = new MockDate(65, 65, 65, 65, 334, 334);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Second second0 = new Second(334, minute0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) second0.FIRST_SECOND_IN_MINUTE, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      JList<Second> jList0 = new JList<Second>();
      List<Second> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) week0, (Number) 53);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.data = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) month0, (Number) bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      ArrayList<RegularTimePeriod> arrayList0 = new ArrayList<RegularTimePeriod>();
      arrayList0.add((RegularTimePeriod) week0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) week0, (Number) 53);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(29, minute0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "M%@hPauU7|pZy3Jw/l", "M%@hPauU7|pZy3Jw/l");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) minute0, 0.0, true);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, 0.0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) month0, (-220.56));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period February 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) month0, (double) 53);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, 2.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TimeSeries timeSeries0 = null;
//      try {
        timeSeries0 = new TimeSeries((Comparable) null, ", but the TimeSeries is expecting an instance of ", ".");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TimeSeries timeSeries0 = null;
//      try {
        timeSeries0 = new TimeSeries((Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete((-1830), 5164, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) integer0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.removeAgedItems(true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockDate mockDate0 = new MockDate(59, 751, 751, 751, 334, 334);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Month month0 = new Month(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.removeAgedItems(true);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.add((RegularTimePeriod) month0, (-0.7363324758159617));
      timeSeries0.update(0, (Number) bigInteger0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (double) 495L);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) integer0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.update(regularTimePeriod0, (Number) integer0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      MockDate mockDate0 = new MockDate(1094, 2769, 1094, 2218, 999, 1094);
      Class<Quarter> class0 = Quarter.class;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance(class0, mockDate0, timeZone0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 2218);
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (Number) integer0);
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period February 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1473L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.getIndex(fixedMillisecond0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, long0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete(193, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start <= end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriod(1364);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1364, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0, (String) null, (String) null);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(week0);
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'item' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("Value", string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.getValue(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.getItemCount();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Month month1 = new Month();
      timeSeries0.add(regularTimePeriod0, Double.NaN, true);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timeSeries0.add((RegularTimePeriod) month1, (Number) integer0, true);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      timeSeries0.add((RegularTimePeriod) month0, (double) 0);
      Byte byte0 = new Byte((byte)90);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) byte0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (Number) Double.NaN);
      timeSeries0.delete((RegularTimePeriod) month0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.setMaximumItemCount(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(month0, (Number) null);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Month month0 = new Month();
      Month month1 = new Month(1, 53);
      timeSeries0.add((RegularTimePeriod) month0, (double) 53);
      timeSeries0.add((RegularTimePeriod) month1, (Number) 1);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) week0.FIRST_WEEK_IN_YEAR);
      timeSeries0.hashCode();
      assertEquals(3, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.add((RegularTimePeriod) month0, 0.0);
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.hashCode();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      TimeSeries timeSeries0 = new TimeSeries(integer0, (String) null, (String) null);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (double) 1);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      timeSeries1.update((RegularTimePeriod) week0, (Number) 53);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(53.0, timeSeries1.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      timeSeries1.setMaximumItemCount(0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(0, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      timeSeries0.setMaximumItemAge(3394L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.add((RegularTimePeriod) month0, (double) 0);
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem(1);
      TimeSeries timeSeries1 = new TimeSeries(bigInteger0);
      timeSeries1.addOrUpdate(timeSeriesDataItem0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(3394L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, 59.0, true);
      TimeSeries timeSeries1 = new TimeSeries(month0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Month month0 = new Month();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1595, 1595, 0, 193, 0);
      TimeSeries timeSeries0 = new TimeSeries(mockGregorianCalendar0);
      TimeSeries timeSeries1 = new TimeSeries(month0, "Tc.bft", "Tc.bft");
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Tc.bft", timeSeries1.getRangeDescription());
      assertEquals("Tc.bft", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "the time period ", (String) null);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      boolean boolean0 = timeSeries0.equals(integer0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("the time period ", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      timeSeries0.add(regularTimePeriod0, 0.0);
      timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.createCopy((RegularTimePeriod) month0, regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) month0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start on or before end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3148, 3148, (-1459), 3148, (-1459));
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'end' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "}Y*[0gs", "}Y*[0gs");
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'start' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(337, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start <= end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockDate mockDate0 = new MockDate(59, 751, 751, 751, 334, 334);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((-3429), 334);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start >= 0.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockDate mockDate0 = new MockDate(59, 751, 751, 751, 334, 334);
      TimeZone timeZone0 = TimeZone.getTimeZone("Quarter outside valid range.");
      Month month0 = new Month(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.delete((-2147483647), 1, false);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Month month0 = new Month();
      Integer integer0 = new Integer((-512));
      TimeSeries timeSeries0 = new TimeSeries(integer0, "&f", (String) null);
      timeSeries0.add((RegularTimePeriod) month0, (-2.147483648E9));
      timeSeries0.delete((-512), 2147483645, true);
      assertEquals((-2.147483648E9), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Quarter outside valid range.");
      // Undeclared exception!
//      try { 
        timeSeries0.delete(3361, 59, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start <= end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (Number) integer0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.delete((RegularTimePeriod) month0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.delete((RegularTimePeriod) month0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MockDate mockDate0 = new MockDate(59, 751, 751, 751, 334, 334);
      TimeZone timeZone0 = TimeZone.getTimeZone("Quarter outside valid range.");
      Month month0 = new Month(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockDate mockDate0 = new MockDate(59, 751, 751, 751, 334, 334);
      TimeZone timeZone0 = TimeZone.getTimeZone("Quarter outside valid range.");
      Month month0 = new Month(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.clear();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.setMaximumItemAge(18);
      timeSeries0.add((RegularTimePeriod) month0, (double) 18);
      timeSeries0.removeAgedItems(9223372036854775807L, false);
      assertEquals(18L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.add((RegularTimePeriod) month0, (double) 0);
      timeSeries0.removeAgedItems(9223372036854775807L, true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, false);
      timeSeries0.removeAgedItems(1256L, false);
      timeSeries0.removeAgedItems(854L, false);
      assertEquals(400.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Minute minute0 = new Minute(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.removeAgedItems((long) 0, false);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.setMaximumItemAge(0L);
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      timeSeries0.setMaximumItemAge(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add(regularTimePeriod0, (double) 0);
      timeSeries0.add((RegularTimePeriod) month0, (Number) bigInteger0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.setMaximumItemCount(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (-2204.200822735459));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      RegularTimePeriod regularTimePeriod1 = month0.previous();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add(regularTimePeriod1, (Number) integer0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, 2136.77369883);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(3, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add(regularTimePeriod0, (Number) integer0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) month0, (Number) bigInteger0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem(0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (Number) integer0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals((-30000.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Month month0 = new Month();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1595, 193, 193);
      TimeSeries timeSeries0 = new TimeSeries(mockGregorianCalendar0);
      timeSeries0.add((RegularTimePeriod) month0, (Number) null, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(month0, (Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      Second second0 = new Second();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (double) 0);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "7", "");
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, Double.NaN, true);
      TimeSeries timeSeries1 = new TimeSeries(month0, "-j:;H0", "-j:;H0");
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      timeSeries0.setRangeDescription(" dz2+0&3!(E");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(" dz2+0&3!(E", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      timeSeries0.add((RegularTimePeriod) month0, (double) 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.update(0, (Number) bigInteger0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Month month0 = new Month(1, 53);
      Month month1 = new Month(1, 1);
      timeSeries0.add((RegularTimePeriod) month0, Double.NaN);
      timeSeries0.add((RegularTimePeriod) month1, (Number) 1);
      assertEquals(2, timeSeries0.getItemCount());
      
      timeSeries0.update(1, (Number) 1);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (Number) null);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update(0, (Number) null);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        timeSeries0.update((RegularTimePeriod) month0, (Number) bigInteger0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // There is no existing value for the specified 'period'.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.add((RegularTimePeriod) month0, (double) 0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) month0, (Number) bigInteger0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period February 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1);
      Class<Integer> class0 = Integer.class;
      timeSeries0.timePeriodClass = class0;
      timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockDate mockDate0 = new MockDate(59, 751, 751, 751, 334, 334);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Month month0 = new Month(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((TimeSeriesDataItem) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'item' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.getValue((RegularTimePeriod) month0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
//      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      TimeSeries timeSeries1 = new TimeSeries(month0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(100.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, false);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(400.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Stack<TimeSeries> stack0 = new Stack<TimeSeries>();
      stack0.add(timeSeries0);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriods();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Quarter outside valid range.");
      timeSeries0.getTimePeriods();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      timeSeries0.getDataItem((RegularTimePeriod) month0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.getDataItem((RegularTimePeriod) month0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.setMaximumItemAge((-3331L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative 'periods' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MockDate mockDate0 = new MockDate(59, 751, 751, 751, 334, 334);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Month month0 = new Month(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.setMaximumItemCount((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative 'maximum' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
//      try { 
        timeSeries0.getNextTimePeriod();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem(1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 53);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.add((RegularTimePeriod) month0, (Number) bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) month0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) integer0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(100.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.getTimePeriodClass();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(29, minute0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "M%@hPauU7|pZy3Jw/l", "M%@hPauU7|pZy3Jw/l");
      timeSeries0.getItems();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("M%@hPauU7|pZy3Jw/l", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("M%@hPauU7|pZy3Jw/l", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertTrue(boolean0);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0);
      timeSeries0.createCopy(0, 0);
      assertEquals((-30000.0), timeSeries0.getMaxY(), 0.01);
  }
}
