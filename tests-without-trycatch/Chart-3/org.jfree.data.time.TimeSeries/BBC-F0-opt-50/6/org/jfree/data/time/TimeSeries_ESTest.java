/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 11:39:54 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.chrono.IsoEra;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.DefaultListModel;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, Double.NaN);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 59);
      timeSeries0.delete((RegularTimePeriod) minute0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, Double.NaN);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 59);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 59);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add(regularTimePeriod0, Double.NaN);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 59);
      timeSeries0.update(regularTimePeriod0, (Number) 59);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "UUkn(w_y'cat|gory' key.", "UUkn(w_y'cat|gory' key.");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, true);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.update(regularTimePeriod0, (Number) 0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.getValue(regularTimePeriod0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.getRawDataItem(regularTimePeriod0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.getDataItem(regularTimePeriod0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add(regularTimePeriod0, (Number) 59, false);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "fCp(oQm1h7g%--k>3", "fCp(oQm1h7g%--k>3");
      timeSeries0.setRangeDescription("qd|");
      assertEquals("qd|", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Time", "Time");
      timeSeries0.setDomainDescription("aT_6\f");
      assertEquals("aT_6\f", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.delete(0, 0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Gv!Z9lk", "Gv!Z9lk");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) null, true);
      timeSeries0.getValue(0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Gv!Z9lk", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Gv!Z9lk", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries("UUkn(w_y'cat|gory' key.", "UUkn(w_y'cat|gory' key.", "UUkn(w_y'cat|gory' key.");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      timeSeries0.getTimePeriodClass();
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day(spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "mC`tzo`XX:n$TYW", "mC`tzo`XX:n$TYW");
      timeSeries0.add((RegularTimePeriod) day0, (Number) 0, true);
      timeSeries0.getTimePeriod(0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, Double.NaN);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.getRawDataItem(0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, true);
      timeSeries0.getRawDataItem(0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "k}^1J)UotEn#V)1})", (String) null);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(string0);
      assertEquals("k}^1J)UotEn#V)1})", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Fri Feb 14 20:21:21 GMT 2014", "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", string0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.getNextTimePeriod();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Negative 'w' argument.", "Negative 'w' argument.");
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 0);
      timeSeries0.update((RegularTimePeriod) hour0, (Number) hour0.LAST_HOUR_IN_DAY);
      double double0 = timeSeries0.getMinY();
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(23.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Rl4`oy}pe]_", "Rl4`oy}pe]_");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) bigInteger0);
      double double0 = timeSeries0.getMinY();
      assertEquals((-2.81474976710656E14), timeSeries0.getMaxY(), 0.01);
      assertEquals((-2.81474976710656E14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Time", "Time");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.getMaximumItemAge();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Negative 'w' argument.", "Negative 'w' argument.");
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 0);
      timeSeries0.update((RegularTimePeriod) hour0, (Number) hour0.LAST_HOUR_IN_DAY);
      double double0 = timeSeries0.getMaxY();
      assertEquals(23.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries("UUkn(w_y'cat|gory' key.", "UUkn(w_y'cat|gory' key.", "UUkn(w_y'cat|gory' key.");
      timeSeries0.add((RegularTimePeriod) minute0, (-2.147483648E9), false);
      double double0 = timeSeries0.getMaxY();
      assertEquals((-2.147483648E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day(spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "mC`tzo`XXn$TYW", "mC`tzo`XXn$TYW");
      timeSeries0.add((RegularTimePeriod) day0, (Number) 0, true);
      timeSeries0.getItemCount();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day(spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "mC`tzo`XXn$TYW", "mC`tzo`XXn$TYW");
      timeSeries0.add((RegularTimePeriod) day0, (Number) 0, true);
      Locale locale0 = Locale.CHINESE;
      MockDate mockDate0 = new MockDate(212, 2, 3, 2, 5, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("mC`tzo`XXn$TYW");
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      timeSeries0.getIndex(month0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.getIndex(regularTimePeriod0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0, "", "Unknown 'category' key.");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("", string0);
      assertEquals("Unknown 'category' key.", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, 7.0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.getDataItem(0);
      assertEquals(7.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      assertEquals("Unknown 'category' key.", timeSeries1.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Unknown 'category' key.", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Integer integer0 = new Integer((-2956));
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(2, 2593);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy(0, 0);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (double) 59);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (-2512.71));
      assertEquals((-2512.71), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, ", but the TimeSeries is expecting an instance of ", ", but the TimeSeries is expecting an instance of ");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      TimeSeries timeSeries1 = new TimeSeries(minute0);
      timeSeries1.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.update((RegularTimePeriod) minute0, (Number) 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("qd|", "qd|", "qd|");
      Long long0 = new Long((-23206821L));
      // Undeclared exception!
//      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) long0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      Short short0 = new Short((short) (-2162));
      // Undeclared exception!
//      try { 
        timeSeries0.update(3, (Number) short0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 3, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Time", "Time");
      // Undeclared exception!
//      try { 
        timeSeries0.update((-1), (Number) 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      Integer integer0 = new Integer(1097);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
      // Undeclared exception!
//      try { 
        timeSeries0.removeAgedItems((long) 1097, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "org.jfree.data.ComparableObjectItem");
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.hashCode();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      LinkedList<Minute> linkedList0 = new LinkedList<Minute>();
      linkedList0.add(minute0);
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
//      try { 
        timeSeries0.hashCode();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
//      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, ", but the TimeSeries is expecting an instance of ", ", but the TimeSeries is expecting an instance of ");
      // Undeclared exception!
//      try { 
        timeSeries0.getValue((-992));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Time", "Time");
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriod((-6));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day(spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "mC`tzo`XXn$TYW", "mC`tzo`XXn$TYW");
      // Undeclared exception!
//      try { 
        timeSeries0.getRawDataItem(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day(spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "mC`tzo`XXn$TYW", "mC`tzo`XXn$TYW");
      // Undeclared exception!
//      try { 
        timeSeries0.getRawDataItem((-1444));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Gv!Z9lk", "Gv!Z9lk", "Gv!Z9lk");
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getItems();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries("Gv!lk", "Gv!lk", "Gv!lk");
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getIndex(minute0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      LinkedList<IsoEra> linkedList0 = new LinkedList<IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      linkedList0.add(isoEra0);
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
//      try { 
        timeSeries0.getIndex(fixedMillisecond0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimeSeriesDataItem cannot be cast to java.lang.Enum
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day(spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "mC`tzo`XXn$TYW", "mC`tzo`XXn$TYW");
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Gv!Z9lk", "Gv!Z9lk", "Gv!Z9lk");
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem(59);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Time", "Time");
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries("Gv!Z9lk", "Gv!Z9lk", "Gv!Z9lk");
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.delete((RegularTimePeriod) minute0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Time");
      // Undeclared exception!
//      try { 
        timeSeries0.delete((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.delete(0, 59, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Quarter quarter0 = new Quarter(date0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete(8, 8, false);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 8, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete((-431), (-431), false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2015), 1, 1, 1, 456);
      Year year0 = new Year(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "L{k", "Can't evaluate the year.");
      // Undeclared exception!
//      try { 
        timeSeries0.delete(456, (-9999));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start <= end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day(spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "mC`tzo`XXn$TYW", "mC`tzo`XXn$TYW");
      // Undeclared exception!
//      try { 
        timeSeries0.delete((-4186), 9999);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "0WAB'Iqv+>6x0", "0WAB'Iqv+>6x0");
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23, false);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(0, 456);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Gv!Z9lk", "Gv!Z9lk", "Gv!Z9lk");
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.clear();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day(spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "mC`tzo`XXn$TYW", "mC`tzo`XXn$TYW");
      timeSeries0.add((RegularTimePeriod) day0, (Number) 0, true);
      Locale locale0 = Locale.CHINESE;
      MockDate mockDate0 = new MockDate(212, 2, 3, 2, 5, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("mC`tzo`XXn$TYW");
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) 2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-4229.0), (-29.314512717730597));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "+a>lS`y;9DoJ:");
      DefaultListModel<Object> defaultListModel0 = new DefaultListModel<Object>();
      JList<Object> jList0 = new JList<Object>(defaultListModel0);
      List<Object> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      Year year0 = new Year(31);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-9999));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries("Gv!Z9lk", "Gv!Z9lk", "Gv!Z9lk");
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "", "");
      Integer integer0 = new Integer(187);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) integer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Minute minute0 = new Minute();
      Year year0 = new Year(59);
      TimeSeries timeSeries0 = new TimeSeries(year0, "Cc[AssrSs", "Cc[AssrSs");
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999, false);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2653L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      JList<Object> jList0 = new JList<Object>();
      List<Object> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 1.0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-4229.0), 0.0);
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "+a>lS`y;9DoJ:");
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries1 = new TimeSeries(millisecond0);
      timeSeries1.addOrUpdate((RegularTimePeriod) minute0, (Number) 999);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (-285.929854803204));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      // Undeclared exception!
//      try { 
        timeSeries1.addAndOrUpdate(timeSeries0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Time", "Time");
      // Undeclared exception!
//      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day(spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "mC`tzo`XX:n$TYW", "mC`tzo`XX:n$TYW");
      timeSeries0.add((RegularTimePeriod) day0, (Number) 0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem(0);
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period 1-January-1900 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Time", "Time");
      // Undeclared exception!
//      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'item' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0, "", "");
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Minute minute0 = new Minute();
      Year year0 = new Year((-3434));
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "");
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 59);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (Number) 0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Time", "Time");
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23, false);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period [20,14/2/2014] but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, (String) null, (String) null);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, 1484.53140073552, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.time.RegularTimePeriod");
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 59);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Rl4`oy}pe]_");
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) (-255L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TimeSeries timeSeries0 = null;
//      try {
        timeSeries0 = new TimeSeries((Comparable) null, "Unknown 'category' key.", "Fri Feb 14 20:21:21 GMT 2014");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TimeSeries timeSeries0 = null;
//      try {
        timeSeries0 = new TimeSeries((Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "UUkn(w_y'c|gory' key.", "UUkn(w_y'c|gory' key.");
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.delete(0, 0, true);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "UUkn(Gy'cat|gory'key", "UUkn(Gy'cat|gory'key");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.removeAgedItems(false);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.removeAgedItems(true);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("java.util.TimeZone", "java.util.TimeZone", "java.util.TimeZone");
      timeSeries0.setMaximumItemCount(0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(8);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, Double.NaN);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 59);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 59);
      timeSeries0.update(0, (Number) 59);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (Number) 59);
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries("Gv!lk", "Gv!lk", "Gv!lk");
      timeSeries0.getIndex(minute0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Gv!lk", timeSeries0.getRangeDescription());
      assertEquals("Gv!lk", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "Domain");
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, long0);
      assertEquals("Domain", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      // Undeclared exception!
//      try { 
        timeSeries0.delete(0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day(spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "mC`tzo`XX:n$TYW", "mC`tzo`XX:n$TYW");
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriod(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, (String) null, (String) null);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, ", but the TimeSeries is expecting an instance of ", ", but the TimeSeries is expecting an instance of ");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(", but the TimeSeries is expecting an instance of ", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(", but the TimeSeries is expecting an instance of ", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      timeSeries0.addOrUpdate(regularTimePeriod0, Double.NaN);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 59);
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.previous();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      timeSeries0.addOrUpdate(regularTimePeriod1, (Number) integer0);
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 59);
      timeSeries0.delete((RegularTimePeriod) minute0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "fCp(oQm1h7g%--k>3", "fCp(oQm1h7g%--k>3");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) null, true);
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "UUkn(w_y'c|gory' key.", "UUkn(w_y'c|gory' key.");
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.hashCode();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "UUkn(w_y'c|gory' key.", "UUkn(w_y'c|gory' key.");
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.hashCode();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(455);
      Day day0 = new Day(serialDate0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "mC`tzo`XX:n$TYW", (String) null);
      timeSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("mC`tzo`XX:n$TYW", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Year year0 = new Year(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, "sDgq|eIvmg{J[6G");
      timeSeries0.hashCode();
      assertEquals("sDgq|eIvmg{J[6G", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 59);
      timeSeries1.addOrUpdate((RegularTimePeriod) minute0, 1017.8692932109);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1017.8692932109, timeSeries1.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      timeSeries1.setMaximumItemCount(59);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(59, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeries timeSeries1 = new TimeSeries(minute0);
      Short short0 = new Short((short)2808);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) short0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(2808.0, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.setRangeDescription("sPUV");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("sPUV", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      TimeSeries timeSeries1 = new TimeSeries(minute0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Unknown 'category' key.", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Unknown 'category' key.", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, Double.NaN);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      boolean boolean0 = timeSeries0.equals(timeSeriesDataItem0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.createCopy((RegularTimePeriod) minute0, regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Time");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(955, 23, simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)dynamicTimeSeriesCollection0.workingCalendar;
      TimeSeries timeSeries0 = new TimeSeries(mockGregorianCalendar0, "Domain", "rF]x]WsS");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start on or before end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Time", "Time");
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'end' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'start' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Time");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(955, 23, simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)dynamicTimeSeriesCollection0.workingCalendar;
      TimeSeries timeSeries0 = new TimeSeries(mockGregorianCalendar0, "Domain", "rF]x]WsS");
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(121, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start <= end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((-971), 1078);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start >= 0.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod");
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 59);
      timeSeries0.delete(0, 0, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete(1881, 244, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start <= end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, Double.NaN);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.delete((RegularTimePeriod) minute0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Time", "Time");
      timeSeries0.delete((RegularTimePeriod) hour0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0, true);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.clear();
      assertEquals("Unknown 'category' key.", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Unknown 'category' key.", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Year year0 = new Year(59);
      TimeSeries timeSeries0 = new TimeSeries(year0, "Cc[AssrSs", "Cc[AssrSs");
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999, false);
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.removeAgedItems((long) (-9999), false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Year year0 = new Year(59);
      TimeSeries timeSeries0 = new TimeSeries(year0, "Cc[AssrSs", "Cc[AssrSs");
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999, false);
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.removeAgedItems((long) (-9999), true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Cc[AssrSs", "Cc[AssrSs");
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23, false);
      timeSeries0.removeAgedItems((long) 0, false);
      timeSeries0.removeAgedItems((-534L), false);
      assertEquals(23.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.removeAgedItems((long) 59, true);
      assertEquals("Unknown 'category' key.", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Unknown 'category' key.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 59);
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.add(timeSeriesDataItem0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries("UUkn(w_y'cat|gory' key.", "UUkn(w_y'cat|gory' key.", "UUkn(w_y'cat|gory' key.");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      timeSeries0.add(regularTimePeriod0, (-2.147483648E9), false);
      timeSeries0.setMaximumItemAge(0);
      assertEquals((-2.147483648E9), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Gv!Z9lk", "Gv!Z9lk");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) null, true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals("Gv!Z9lk", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Gv!Z9lk", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      Class<Hour> class0 = Hour.class;
      timeSeries0.timePeriodClass = class0;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, 1708.758490852);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-4229.0), 0.0);
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "+a>lS`y;9DoJ:");
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      TimeSeries timeSeries1 = new TimeSeries(minute0, "P7L#6Gc2Ph", "P7L#6Gc2Ph");
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(59.0, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (-285.929854803204));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals((-285.929854803204), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) null);
      timeSeries0.update(0, (Number) null);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "UUkn(Gy'cat|gory'key", "UUkn(Gy'cat|gory'key");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.update(0, (Number) 0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, Double.NaN);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.update(0, (Number) 59);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Quarter quarter0 = new Quarter(date0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
//      try { 
        timeSeries0.update((RegularTimePeriod) quarter0, (Number) 4);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // There is no existing value for the specified 'period'.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem((RegularTimePeriod) minute0, 4.0);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.add(timeSeriesDataItem1, false);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem((RegularTimePeriod) minute0, 4.0);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem1);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (double) 59);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      Class<Object> class0 = Object.class;
      timeSeries0.timePeriodClass = class0;
      timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "UUkn(Gy'cat|gory'key", "UUkn(Gy'cat|gory'key");
      // Undeclared exception!
//      try { 
        timeSeries0.add((TimeSeriesDataItem) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'item' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "Domain");
      timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Domain", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
//      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "fCp(oQm1h7g%--k>3", "fCp(oQm1h7g%--k>3");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) null, true);
      TimeSeries timeSeries1 = new TimeSeries("fCp(oQm1h7g%--k>3", "", "fCp(oQm1h7g%--k>3");
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.getRawDataItem(minute0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.getRawDataItem(minute0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Unknown 'category' key.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Unknown 'category' key.", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Gv!Z9lk", "Gv!Z9lk");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) null, true);
      timeSeries0.getDataItem((RegularTimePeriod) minute0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MockDate mockDate0 = new MockDate(637L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Time", "Time");
      // Undeclared exception!
//      try { 
        timeSeries0.setMaximumItemAge((-534L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative 'periods' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Year year0 = new Year(456);
      TimeSeries timeSeries0 = new TimeSeries(year0, "", ",J#ZH 4U");
      timeSeries0.setMaximumItemAge(1504L);
      assertEquals(1504L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(455);
      Day day0 = new Day(serialDate0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "mC`tzo`XX:n$TYW", (String) null);
      // Undeclared exception!
//      try { 
        timeSeries0.setMaximumItemCount((-166));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative 'maximum' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      // Undeclared exception!
//      try { 
        timeSeries0.getNextTimePeriod();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockDate mockDate0 = new MockDate(637L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem(93);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 93, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
//      try { 
        timeSeries0.getValue(3145);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 3145, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Unknown 'category' key.", "Unknown 'category' key.");
      timeSeries0.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Unknown 'category' key.", timeSeries0.getDomainDescription());
      assertEquals("Unknown 'category' key.", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Gv!Z9lk", "Gv!Z9lk", "Gv!Z9lk");
      timeSeries0.getItems();
      assertEquals("Gv!Z9lk", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Gv!Z9lk", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertTrue(boolean0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (-1.0));
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }
}
