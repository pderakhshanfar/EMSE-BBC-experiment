/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:43:07 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "Requires 'w' > 0.0.", "");
      timeSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Requires 'w' > 0.0.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ONE;
      TimeSeries timeSeries1 = new TimeSeries(bigInteger0);
      timeSeries1.setMaximumItemCount(1);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(1, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      timeSeries1.setMaximumItemAge(2L);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(2L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("HC*2/Q#");
      Locale locale0 = Locale.FRANCE;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timeSeries0.add(regularTimePeriod0, (double) (-1014L));
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0);
      timeSeries0.createCopy((RegularTimePeriod) month0, regularTimePeriod0);
      assertEquals(400.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(2765, day0);
      Minute minute0 = new Minute(23, hour0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 23);
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 23);
      Month month0 = new Month();
      timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) month0);
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0, true);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(0, 1001);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(3);
      Float float0 = new Float((double) 3);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) float0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond1, (Number) float0, true);
      timeSeries0.setMaximumItemAge(0L);
      assertEquals(3.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.KOREAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      timeSeries0.add(regularTimePeriod0, (double) (-1014L));
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem(regularTimePeriod0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals((-1014.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.FRANCE;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) (-1014L));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timeSeries0.add(regularTimePeriod0, (double) (-1014L));
      timeSeries0.update(regularTimePeriod0, (Number) integer0);
      assertEquals(400.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      Float float0 = new Float((double) 3);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) float0);
      timeSeries0.add(regularTimePeriod0, (Number) float0, true);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(3.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ONE;
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0, true);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.KOREAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timeSeries0.add(regularTimePeriod0, (double) (-1014L));
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0);
      timeSeries0.getRawDataItem(regularTimePeriod0);
      assertEquals(400.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.FRANCE;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timeSeries0.add(regularTimePeriod0, (double) (-1014L));
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.KOREAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, Double.POSITIVE_INFINITY);
      timeSeries0.getValue(0);
      assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0, true);
      timeSeries0.delete(0, 0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      TimeSeries timeSeries0 = new TimeSeries(date0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999, true);
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0, true);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      timeSeries0.getTimePeriodClass();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.KOREAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (double) (-1014L));
      timeSeries0.getTimePeriod(0);
      assertEquals((-1014.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0, true);
      timeSeries0.getRawDataItem(0);
      assertEquals(10.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("Value", string0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "Requires 'w' > 0.0.", "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("", string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Requires 'w' > 0.0.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0, true);
      timeSeries0.getNextTimePeriod();
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0, true);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 23);
      double double0 = timeSeries0.getMinY();
      assertEquals(23.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.KOREAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (double) (-1014L));
      double double0 = timeSeries0.getMinY();
      assertEquals((-1014.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.getMaximumItemAge();
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Second second0 = new Second();
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "-CNGh", "-CNGh");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 1166.63555818481);
      double double0 = timeSeries0.getMaxY();
      assertEquals(1166.63555818481, timeSeries0.getMinY(), 0.01);
      assertEquals(1166.63555818481, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (-1201.1004));
      double double0 = timeSeries0.getMaxY();
      assertEquals((-1201.1004), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(9999);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.getItemCount();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Float float0 = new Float((double) 3);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) float0);
      timeSeries0.getItemCount();
      assertEquals(3.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.KOREAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (double) (-1014L));
      Millisecond millisecond0 = new Millisecond(mockDate0, timeZone0);
      timeSeries0.getIndex(millisecond0);
      assertEquals((-1014.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      Float float0 = new Float((double) 3);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) float0);
      timeSeries0.add(regularTimePeriod0, (Number) float0, true);
      timeSeries0.getIndex(regularTimePeriod0);
      assertEquals(3.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0, (String) null, (String) null);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "u3-A@|G4YtfS_mOK");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", string0);
      assertEquals("u3-A@|G4YtfS_mOK", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.KOREAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, Double.POSITIVE_INFINITY);
      timeSeries0.getDataItem(0);
      assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries("Null 'type' argument", (String) null, "Null 'type' argument");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) day0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Null 'type' argument", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.FRANCE;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Second second0 = new Second(mockDate0, timeZone0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Hour hour0 = new Hour();
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0, true);
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (-1201.1004));
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals((-1201.1004), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(1, 4);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.KOREAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (double) (-1014L));
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-749.048493));
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 23);
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-749.048493));
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals((-749.048493), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 186.0, true, true);
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0);
      // Undeclared exception!
//      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) 59);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.update(90, (Number) 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
//      try { 
        timeSeries0.update(4, (Number) 4);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 4, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1800, (-2730), 1800);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      // Undeclared exception!
//      try { 
        timeSeries0.update((-1816), (Number) integer0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.removeAgedItems(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 23);
      // Undeclared exception!
//      try { 
        timeSeries0.removeAgedItems((long) 23, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.hashCode();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getValue((RegularTimePeriod) quarter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-465));
      TimeSeries timeSeries0 = new TimeSeries(integer0, "org.jfree.data.KeyedObjects2D", "org.jfree.data.KeyedObjects2D");
      // Undeclared exception!
//      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timeSeries0.getValue((-886));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "is ", 0, 0, 0, 0, (-3775), 0, 0, 116, 116);
      Locale locale0 = Locale.CANADA;
      Year year0 = new Year(mockDate0, simpleTimeZone0, locale0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 9999);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriod(1546);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1546, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "", "");
      // Undeclared exception!
//      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.getRawDataItem(3482);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 3482, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timeSeries0.getRawDataItem((-722));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      LinkedList<Day> linkedList0 = new LinkedList<Day>();
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
//      try { 
        timeSeries0.getNextTimePeriod();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: -1, Size: 0
//         //
//         verifyException("java.util.LinkedList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getIndex(quarter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem((RegularTimePeriod) quarter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("-Q'NGh", "ikr!&", ")yBs'");
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem((-6));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(4, 4);
      timeSeries1.data = null;
      // Undeclared exception!
//      try { 
        timeSeries1.equals(timeSeries0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.delete((RegularTimePeriod) quarter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("ikr!&", "ikr!&", "");
      // Undeclared exception!
//      try { 
        timeSeries0.delete(32, 32, true);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 32, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete((-184), (-36), true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete(0, 366);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(1, 4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      Stack<Integer> stack0 = new Stack<Integer>();
      timeSeries0.data = (List) stack0;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(1074, 1074);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Array index out of range: 1074
//         //
//         verifyException("java.util.Vector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.clone();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'collection' argument.
//         //
//         verifyException("org.jfree.chart.util.ObjectUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.clear();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("ikr!&", "ikr!&", "");
      Week week0 = new Week(1627, 646);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (-2596.0));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Float float0 = new Float((double) 1690);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) float0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Week.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6229, 3927, 2, 193, 3927, 0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "", "");
      Long long0 = new Long(2);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) long0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) quarter0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 4);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Year year0 = new Year(305);
      TimeSeries timeSeries0 = new TimeSeries(year0, "=r#h", "");
      List list0 = timeSeries0.getItems();
      timeSeries0.data = list0;
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) (-9999));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (-843.8));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Requires start <= end.", "", "");
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 23);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      MockDate mockDate0 = new MockDate(4, 4, 29, 29, 4, 29);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1008), "");
      Month month0 = new Month(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries1 = new TimeSeries(month0);
      timeSeries1.addOrUpdate((RegularTimePeriod) month0, (Number) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 29);
      // Undeclared exception!
//      try { 
        timeSeries1.addAndOrUpdate(timeSeries0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6229, 3927, 2, 3927, 3927, 0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "lPcx_6e+*", "2gjvq");
      // Undeclared exception!
//      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'item' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date0 = fixedMillisecond0.getTime();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      BigInteger bigInteger0 = BigInteger.ONE;
      Hour hour0 = new Hour(date0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) bigInteger0, false);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Year year0 = new Year(1098);
      TimeSeries timeSeries0 = new TimeSeries(year0, "=r#h", "");
      List list0 = timeSeries0.getItems();
      timeSeries0.data = list0;
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) 9999, true);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("/Jr!D &", "/Jr!D &", "");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) bigInteger0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6229, 3927, 2, 193, 3927, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0, true);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period Wed Apr 12 18:27:00 GMT 8456 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 59);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.FRANCE;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) month0, (double) (-1014L), false);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period February 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9999, (-1643), (-3285), 23, 193, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0, true);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 23);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period Sat Feb 03 02:13:00 GMT 11753 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 1392409281320L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TimeSeries timeSeries0 = null;
//      try {
        timeSeries0 = new TimeSeries((Comparable) null, "z", "Unknown data");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TimeSeries timeSeries0 = null;
//      try {
        timeSeries0 = new TimeSeries((Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("*P");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "*P", "*P");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ONE;
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      Float float0 = new Float((-746.077101129375));
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timeSeries0.add(regularTimePeriod0, (Number) float0, true);
      timeSeries0.delete(1, 1, true);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "Requires start <= end.", "");
      // Undeclared exception!
//      try { 
        timeSeries0.delete(0, (-9999), true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start <= end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      Float float0 = new Float((double) 3);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) float0);
      timeSeries0.add(regularTimePeriod0, (Number) float0, true);
      timeSeries0.removeAgedItems(false);
      assertEquals(3.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.removeAgedItems(false);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries1 = new TimeSeries(millisecond0);
      timeSeries1.setMaximumItemCount(0);
      Byte byte0 = new Byte((byte)1);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) byte0);
      timeSeries1.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.FRANCE;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timeSeries0.add(regularTimePeriod0, (double) (-1014L));
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) integer0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(400.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      Double double0 = new Double((-46.8672));
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) double0, true);
      TimeSeries timeSeries1 = new TimeSeries(double0);
      Class<Quarter> class0 = Quarter.class;
      timeSeries1.timePeriodClass = class0;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) double0);
      // Undeclared exception!
//      try { 
        timeSeries1.addOrUpdate(timeSeriesDataItem0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Quarter.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.KOREAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timeSeries0.add(regularTimePeriod0, (double) (-1014L));
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0);
      timeSeries0.update(0, (Number) integer0);
      assertEquals((-1014.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.KOREAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timeSeries0.add((RegularTimePeriod) month0, (double) (-1014L));
      timeSeries0.update(0, (Number) integer0);
      assertEquals(400.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) null);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 4);
      timeSeries0.update(1, (Number) 4);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.setMaximumItemCount(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) 23);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("ikr!&");
      BigInteger bigInteger0 = BigInteger.ONE;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(23);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-9999.0));
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Day day0 = new Day();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREAN;
      MockDate mockDate0 = new MockDate(29, 29, 29, 29, 1769, 1769);
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) month0, 2.0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, 1166.63555818481);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("1R{6Pc\" :uyLy!Y");
      Locale locale0 = Locale.KOREAN;
      MockDate mockDate0 = new MockDate(1573, 1573, 1573);
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) month0, 0.0);
      Hour hour0 = new Hour(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, 200.0);
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("ikr!&");
      BigInteger bigInteger0 = BigInteger.ONE;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(23);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-9999.0));
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period Thu Jan 01 00:00:00 GMT 1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour((-3019), day0);
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.getIndex(hour0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.getTimePeriods();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, long0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2951), (-2951), (-2951));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "x)", "x)");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("x)", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("x)", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, (String) null);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
//      try { 
        timeSeries0.getValue(4);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 4, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.KOREAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timeSeries0.add(regularTimePeriod0, (double) (-1014L));
      timeSeries0.add((RegularTimePeriod) month0, (Number) integer0);
      timeSeries0.delete((RegularTimePeriod) month0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Quarter quarter1 = new Quarter(1, 1);
      TimeSeries timeSeries0 = new TimeSeries(quarter1);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (double) 4);
      RegularTimePeriod regularTimePeriod0 = quarter1.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 4);
      timeSeries0.hashCode();
      assertEquals(3, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Quarter quarter1 = new Quarter(1, 1);
      TimeSeries timeSeries0 = new TimeSeries(quarter1);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (double) 4);
      timeSeries0.hashCode();
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0, (String) null, (String) null);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      timeSeries1.addOrUpdate((RegularTimePeriod) quarter0, 1466.88546);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1, timeSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
      timeSeries1.setMaximumItemAge(1);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(300.0, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "x*sb~G`l;V[v", "x*sb~G`l;V[v");
      Float float0 = new Float((double) 3);
      TimeSeries timeSeries1 = new TimeSeries(float0, "x*sb~G`l;V[v", "");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals("x*sb~G`l;V[v", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date0 = fixedMillisecond0.getTime();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeries timeSeries1 = new TimeSeries(date0, "Ozze]Jl", "Ozze]Jl");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Ozze]Jl", timeSeries1.getDomainDescription());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Ozze]Jl", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "");
      boolean boolean0 = timeSeries0.equals((Object) null);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      Float float0 = new Float((double) 3);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) float0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals(3.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "Requires start <= end.");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, Double.NaN);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Requires start <= end.", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      timeSeries1.setMaximumItemCount(4);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(4, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.KOREAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) month0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start on or before end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(273, second0);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "ktQ5N#^d$;`Y/BG", "You are trying to add data where the time period class is ");
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'end' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("-Q'NGh", "-Q'NGh", "Cannot add null series.");
      Month month0 = new Month();
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) month0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'start' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(4, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start <= end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((-722), 23);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start >= 0.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      timeSeries0.delete(0, 0, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6229, 3927, 2, 193, 3927, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete(1297, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start <= end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      Float float0 = new Float((double) 3);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) float0);
      timeSeries0.add(regularTimePeriod0, (Number) float0, true);
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Float float0 = new Float((double) 3);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) float0);
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6229, 3927, 2, 3927, 3927, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0, true);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("-Q'NGh", "ikr!&", ")yBs'");
      timeSeries0.clear();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("ikr!&", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(")yBs'", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Quarter quarter1 = new Quarter(4, 1);
      timeSeries0.setMaximumItemAge(1);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (double) 1);
      timeSeries0.removeAgedItems((long) 4, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Quarter quarter1 = new Quarter(4, 1);
      timeSeries0.setMaximumItemAge(1);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (-1.0));
      timeSeries0.removeAgedItems((-3624L), true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour((-3019), day0);
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.removeAgedItems(1918L, false);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 4);
      timeSeries0.removeAgedItems((-1993L), true);
      timeSeries0.removeAgedItems((long) 1, false);
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(6);
      Float float0 = new Float((double) 6);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) float0);
      timeSeries0.setMaximumItemAge(6);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) float0);
      assertEquals(6.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) null);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      Hour hour0 = new Hour();
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 23);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0, true);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(300.0, timeSeries0.getMinY(), 0.01);
      assertEquals(300.0, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Quarter quarter1 = new Quarter(1, 1);
      TimeSeries timeSeries0 = new TimeSeries(quarter1);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (double) 4);
      timeSeries0.update((RegularTimePeriod) quarter1, (Number) 1);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      timeSeries0.update(0, (Number) 0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
//      try { 
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) 23);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // There is no existing value for the specified 'period'.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2951), (-2951), (-2951));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "x)", "x)");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) null);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) null);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) null, true);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Quarter quarter1 = new Quarter(1, 1);
      TimeSeries timeSeries0 = new TimeSeries(quarter1);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      timeSeries0.add((RegularTimePeriod) quarter1, Double.NaN);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (double) 4);
      assertEquals(2, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) quarter1, (Number) 1);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 4);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period Q1/2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'item' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1573);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("java.util.TimeZone", (String) null, "");
      // Undeclared exception!
//      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0, true);
      TimeSeries timeSeries1 = new TimeSeries(integer0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Stack<Year> stack0 = new Stack<Year>();
      stack0.add((Year) null);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriods();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.KOREAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (double) (-1014L));
      timeSeries0.getRawDataItem(month0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.getRawDataItem(year0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("H>*2/Q#");
      Locale locale0 = Locale.KOREAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (double) (-1014L));
      timeSeries0.getDataItem((RegularTimePeriod) month0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "-CNGh", "-CNGh");
      // Undeclared exception!
//      try { 
        timeSeries0.setMaximumItemAge((-970L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative 'periods' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("eriaDate.weekInMonthTxtrn(): invatid de.");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.createCopy(389, 856);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ONE;
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      Float float0 = new Float((-746.077101129375));
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timeSeries0.add(regularTimePeriod0, (Number) float0, true);
      timeSeries0.setMaximumItemCount(1);
      assertEquals((-746.0770874023438), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
//      try { 
        timeSeries0.setMaximumItemCount((-9999));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative 'maximum' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4);
      Class<Month> class0 = Month.class;
      timeSeries0.timePeriodClass = class0;
      timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("SeriaDate.weekInMonthTxSrin(): invlid de.");
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (-1213.0), true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
//      try { 
        timeSeries0.getNextTimePeriod();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem(1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("SerialDate.weekInMonthToString(): invalid code.", "", (String) null);
      // Undeclared exception!
//      try { 
        timeSeries0.delete((-3019), 9999);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6229, 3927, 2, 193, 3927, 0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "", "");
      timeSeries0.setRangeDescription("");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0, true);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-390), (-1));
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriod((-390));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.getTimePeriodClass();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(4, 4);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0, true);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("-Q'NGh", "ikr!&", ")yBs'");
      timeSeries0.setDomainDescription("-Q'NGh");
      assertEquals("-Q'NGh", timeSeries0.getDomainDescription());
  }
}
