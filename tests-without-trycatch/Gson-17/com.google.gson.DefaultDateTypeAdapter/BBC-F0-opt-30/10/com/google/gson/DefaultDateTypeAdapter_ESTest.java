/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 01:18:00 GMT 2021
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.CharArrayWriter;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.time.DateTimeException;
import java.time.Instant;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultDateTypeAdapter_ESTest extends DefaultDateTypeAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, (DateFormat) null);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      Locale locale0 = Locale.JAPANESE;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(1, locale0);
      DateFormat dateFormat1 = MockDateFormat.getDateTimeInstance(1, 1, locale0);
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat1);
      defaultDateTypeAdapter0.toString();
      defaultDateTypeAdapter0.toString();
      defaultDateTypeAdapter0.toString();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      PipedReader pipedReader0 = new PipedReader();
      pipedWriter0.connect(pipedReader0);
      MockDate mockDate0 = new MockDate(5176, 0, 15, (-1580), 1, (-1580));
      defaultDateTypeAdapter0.write(jsonWriter0, (java.util.Date) mockDate0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      defaultDateTypeAdapter0.read(jsonReader0);
      System.setCurrentTimeMillis((-1580));
      Class<Date> class1 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, "DefaultDateTypeAdapter(SimpleDateFormat)");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern character 'e'
//         //
//         verifyException("java.text.SimpleDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      defaultDateTypeAdapter0.toString();
      defaultDateTypeAdapter0.toString();
      defaultDateTypeAdapter0.toString();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      PipedReader pipedReader0 = new PipedReader();
      pipedWriter0.connect(pipedReader0);
      MockDate mockDate0 = new MockDate((-2627), (-2627), (-2627), 5176, (-2627), 5176);
      defaultDateTypeAdapter0.write(jsonWriter0, (java.util.Date) mockDate0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(0, 0);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter1.read(jsonReader0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Jun 23, 0954
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class1, dateFormat0, dateFormat0);
      defaultDateTypeAdapter0.toString();
      defaultDateTypeAdapter0.toString();
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      defaultDateTypeAdapter1.toString();
      PipedWriter pipedWriter0 = new PipedWriter();
      defaultDateTypeAdapter1.toString();
      PipedWriter pipedWriter1 = new PipedWriter();
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      PipedReader pipedReader0 = new PipedReader();
      pipedWriter0.connect(pipedReader0);
      MockDate mockDate0 = new MockDate((-1968), (-600), 0, 0, 3061, (-2627));
      defaultDateTypeAdapter0.write(jsonWriter0, (java.util.Date) mockDate0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      JsonReader jsonReader1 = new JsonReader(pipedReader0);
      defaultDateTypeAdapter0.read(jsonReader0);
      System.setCurrentTimeMillis((-2627));
      Class<java.util.Date> class2 = java.util.Date.class;
      jsonReader0.setLenient(false);
      DefaultDateTypeAdapter defaultDateTypeAdapter2 = null;
//      try {
        defaultDateTypeAdapter2 = new DefaultDateTypeAdapter(class2, "@0nBm|o1AH)ZG}>zS");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern character 'n'
//         //
//         verifyException("java.text.SimpleDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      defaultDateTypeAdapter0.toString();
      defaultDateTypeAdapter0.toString();
      defaultDateTypeAdapter0.toString();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      PipedReader pipedReader0 = new PipedReader();
      pipedWriter0.connect(pipedReader0);
      MockDate mockDate0 = new MockDate((-2627), (-2627), (-2627), 5176, (-2627), 5176);
      defaultDateTypeAdapter0.write(jsonWriter0, (java.util.Date) mockDate0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      defaultDateTypeAdapter0.read(jsonReader0);
      System.setCurrentTimeMillis((-2280L));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      Instant instant0 = MockInstant.now();
      java.util.Date date0 = java.util.Date.from(instant0);
//      try { 
        defaultDateTypeAdapter0.write(jsonWriter0, date0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
//      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Date> class0 = Date.class;
      java.util.Date date0 = null;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter0.toJsonTree((java.util.Date) null);
      StringReader stringReader0 = new StringReader("\"9YG0}BM:C ");
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, "");
      stringReader0.read();
      JsonWriter jsonWriter0 = null;
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (java.util.Date) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"y9Y0EBM!E:C ");
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Timestamp> class0 = Timestamp.class;
      Locale locale0 = Locale.CANADA_FRENCH;
      jsonReader0.close();
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(1, locale0);
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // JsonReader is closed
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      defaultDateTypeAdapter0.toString();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      java.util.Date date0 = java.util.Date.from(instant0);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, date0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      defaultDateTypeAdapter0.toString();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('T');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      MockDate mockDate0 = new MockDate(41, 41, 41);
      defaultDateTypeAdapter0.write(jsonWriter0, (java.util.Date) mockDate0);
      assertEquals("T\"\"", stringWriter1.toString());
      assertEquals("T\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter0.toJsonTree((java.util.Date) null);
      StringReader stringReader0 = new StringReader("\"y9YG0}BM!:C ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unterminated string at line 1 column 15 path $
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // The date should be a string value
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
//      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 0L;
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Instant instant1 = MockInstant.plusSeconds(instant0, 0L);
      java.util.Date date0 = java.util.Date.from(instant1);
      Class<Timestamp> class0 = Timestamp.class;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      defaultDateTypeAdapter0.toJsonTree(date0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Date date1 = new Date(0L);
      int int0 = (-1056);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(16, (-1056));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal time style -1056
//         //
//         verifyException("java.text.DateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: EOFException");
      
//      } catch(EOFException e) {
//         //
//         // End of input at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Class<Date> class1 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, "c");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern character 'c'
//         //
//         verifyException("java.text.SimpleDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, 70);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal date style 70
//         //
//         verifyException("java.text.DateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      StringReader stringReader0 = new StringReader("\"y9YG0}BM!:C ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unterminated string at line 1 column 15 path $
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Date date0 = new Date(0L);
      defaultDateTypeAdapter0.toJsonTree(date0);
      String string0 = defaultDateTypeAdapter0.toString();
      assertEquals("DefaultDateTypeAdapter(SimpleDateFormat)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      PipedReader pipedReader0 = new PipedReader();
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.text.SimpleDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      JsonWriter jsonWriter2 = jsonWriter1.name("+gLr!FM!lf@*Jli");
      JsonWriter jsonWriter3 = jsonWriter2.value(1269.233353);
      JsonWriter jsonWriter4 = jsonWriter3.endObject();
      int int0 = 0;
      MockDate mockDate0 = new MockDate(0, 0, 0);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.write(jsonWriter4, (java.util.Date) mockDate0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // JSON must have only one top-level value.
//         //
//         verifyException("com.google.gson.stream.JsonWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      defaultDateTypeAdapter0.toString();
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, 2, (-1746));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal time style -1746
//         //
//         verifyException("java.text.DateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Date> class0 = Date.class;
      int int0 = 1;
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(1, locale0);
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, (DateFormat) null);
      JsonReader jsonReader0 = null;
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.read((JsonReader) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      defaultDateTypeAdapter0.toString();
      PipedReader pipedReader0 = new PipedReader(2);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Date> class0 = Date.class;
      int int0 = 0;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0, 0);
      StringReader stringReader0 = new StringReader(", ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected value at line 1 column 2 path $
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter0.toString();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(41);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "DefaultDateTypeAdapter(SimpleDateFormat)");
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter1);
      jsonWriter0.beginObject();
      jsonWriter0.name("DefaultDateTypeAdapter(SimpleDateFormat)");
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      charArrayWriter1.write(40);
      jsonWriter1.endObject();
      long long0 = 1L;
      // Undeclared exception!
//      try { 
        jsonWriter1.value((-2816L));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // JSON must have only one top-level value.
//         //
//         verifyException("com.google.gson.stream.JsonWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(0, 0);
      // Undeclared exception!
//      try { 
        MockLocalDateTime.of(0, 771, 771, 771, 0, 0);
//        fail("Expecting exception: DateTimeException");
      
//      } catch(DateTimeException e) {
//         //
//         // Invalid value for MonthOfYear (valid values 1 - 12): 771
//         //
//         verifyException("java.time.temporal.ValueRange", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, (DateFormat) null);
      JsonReader jsonReader0 = null;
//      try {
        jsonReader0 = new JsonReader((Reader) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // in == null
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = 'e';
      charArray0[3] = 'f';
      charArray0[4] = 'B';
      charArray0[5] = '9';
      charArray0[6] = 'z';
//      try { 
        pipedReader0.read(charArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Date> class0 = Date.class;
      int int0 = 0;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
      PipedReader pipedReader0 = new PipedReader();
      StringWriter stringWriter0 = new StringWriter(1505);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Boolean boolean0 = new Boolean(true);
      JsonWriter jsonWriter1 = jsonWriter0.value(boolean0);
      // Undeclared exception!
//      try { 
        jsonWriter1.beginArray();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // JSON must have only one top-level value.
//         //
//         verifyException("com.google.gson.stream.JsonWriter", e);
//      }
  }
}
