/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 01:10:27 GMT 2021
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.CharArrayWriter;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.time.LocalDate;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultDateTypeAdapter_ESTest extends DefaultDateTypeAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      StringReader stringReader0 = new StringReader("0");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // The date should be a string value
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Date> class0 = null;
      Class<java.sql.Date> class1 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class1);
      int int0 = 0;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter((Class<? extends Date>) null, 0, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
//      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends Date>) null, ", ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      long long0 = (-906L);
      MockDate mockDate0 = new MockDate((-906L));
      MockFile mockFile0 = new MockFile("bvk%6}E&|#'~(2", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      JsonWriter jsonWriter0 = new JsonWriter(mockPrintWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.jsonValue("bvk%6}E&|#'~(2");
      Boolean boolean0 = Boolean.valueOf("bvk%6}E&|#'~(2");
      JsonWriter jsonWriter3 = jsonWriter2.value(boolean0);
      JsonWriter jsonWriter4 = jsonWriter3.endArray();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 8232);
      defaultDateTypeAdapter0.toJson((Writer) pipedWriter0, (Date) mockDate0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      Date date0 = defaultDateTypeAdapter0.read(jsonReader0);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.write(jsonWriter4, date0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // JSON must have only one top-level value.
//         //
//         verifyException("com.google.gson.stream.JsonWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "&\"/");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 41);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.close();
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // JsonReader is closed
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      System.setCurrentTimeMillis(10L);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (Date) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      java.sql.Date date0 = new java.sql.Date(0L);
      LocalDate localDate0 = date0.toLocalDate();
      java.sql.Date.valueOf(localDate0);
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "(-");
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(date0);
      StringReader stringReader0 = new StringReader("(-");
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, "(-");
      defaultDateTypeAdapter1.fromJsonTree(jsonElement0);
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter2 = null;
//      try {
        defaultDateTypeAdapter2 = new DefaultDateTypeAdapter(class1, 1733, (-412));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal time style -412
//         //
//         verifyException("java.text.DateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      MockDate mockDate0 = new MockDate((-914L));
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(mockDate0);
      defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0);
      assertFalse(defaultDateTypeAdapter1.equals((Object)defaultDateTypeAdapter0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      String string0 = "6S&/: 19(vyh";
      java.sql.Date date0 = new java.sql.Date(0L);
      LocalDate localDate0 = date0.toLocalDate();
      java.sql.Date date1 = java.sql.Date.valueOf(localDate0);
      defaultDateTypeAdapter0.toJsonTree(date1);
      StringReader stringReader0 = new StringReader("6S&/: 19(vyh");
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, "");
      Class<java.sql.Date> class1 = java.sql.Date.class;
      String string1 = null;
      DefaultDateTypeAdapter defaultDateTypeAdapter2 = null;
//      try {
        defaultDateTypeAdapter2 = new DefaultDateTypeAdapter(class1, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.text.SimpleDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
//      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends Date>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      java.sql.Date date0 = new java.sql.Date(0L);
      LocalDate localDate0 = date0.toLocalDate();
      java.sql.Date.valueOf(localDate0);
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(date0);
      StringReader stringReader0 = new StringReader("6S&/: 19(vyh");
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, "");
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter1.fromJsonTree(jsonElement0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Jan 1, 1970 12:00:00 AM
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      StringReader stringReader0 = new StringReader("'9?C]TeG}yG+\u0002");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      Class<Date> class1 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class1, "");
      int int0 = 1733;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.fromJsonTree(jsonNull0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // The date should be a string value
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 2, 2);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      defaultDateTypeAdapter0.toString();
      String string0 = defaultDateTypeAdapter0.toString();
      assertEquals("DefaultDateTypeAdapter(SimpleDateFormat)", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      JsonReader jsonReader0 = null;
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.read((JsonReader) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      java.sql.Date date0 = new java.sql.Date(0L);
      LocalDate localDate0 = date0.toLocalDate();
      java.sql.Date date1 = java.sql.Date.valueOf(localDate0);
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(date1);
      StringReader stringReader0 = new StringReader("6S&/: 19(vyh");
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, "");
      defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      DefaultDateTypeAdapter defaultDateTypeAdapter2 = null;
//      try {
        defaultDateTypeAdapter2 = new DefaultDateTypeAdapter(class0, 1733, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal time style -1
//         //
//         verifyException("java.text.DateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      jsonWriter0.value(" but was ");
      JsonWriter jsonWriter1 = new JsonWriter(charArrayWriter0);
      defaultDateTypeAdapter0.write(jsonWriter1, (Date) null);
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      int int0 = 2;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 2);
      defaultDateTypeAdapter0.toString();
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      java.sql.Date date0 = new java.sql.Date((-2812L));
      LocalDate localDate0 = date0.toLocalDate();
      java.sql.Date.valueOf(localDate0);
      JsonArray jsonArray0 = new JsonArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%ahGd-GoW?^Bpo");
      String string0 = "";
      StringReader stringReader1 = new StringReader("");
      Class<Date> class1 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, "DefaultDateTypeAdapter(SimpleDateFormat)");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern character 'e'
//         //
//         verifyException("java.text.SimpleDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 2);
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, 1733, 1733);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal time style 1733
//         //
//         verifyException("java.text.DateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal date style 100
//         //
//         verifyException("java.text.DateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      defaultDateTypeAdapter0.toString();
      Reader reader0 = null;
      MockFileWriter mockFileWriter0 = new MockFileWriter("DefaultDateTypeAdapter(MockSimpleDateFormat)", true);
      JsonWriter jsonWriter0 = new JsonWriter(mockFileWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value("jvz{mOFxwW6Nvx18 ");
      Date date0 = null;
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.write(jsonWriter1, (Date) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // JSON must have only one top-level value.
//         //
//         verifyException("com.google.gson.stream.JsonWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("GPPI7^\"^A7");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter((-717), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal date style -717
//         //
//         verifyException("java.text.DateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      MockDate mockDate0 = new MockDate(995, 995, 0, 1291, 0);
      defaultDateTypeAdapter0.toString();
      defaultDateTypeAdapter0.write(jsonWriter0, (Date) mockDate0);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.read((JsonReader) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      MockDate mockDate0 = new MockDate(995, 995, 0, 1291, 0);
      defaultDateTypeAdapter0.write(jsonWriter0, (Date) mockDate0);
      assertEquals("\"7:00:00 PM\"", stringWriter0.toString());
      
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.write(jsonWriter0, (Date) mockDate0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // JSON must have only one top-level value.
//         //
//         verifyException("com.google.gson.stream.JsonWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      pipedReader0.markSupported();
      MockDate mockDate0 = new MockDate(0, 0, 0);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (Date) mockDate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      defaultDateTypeAdapter0.toString();
      JsonReader jsonReader0 = null;
//      try {
        jsonReader0 = new JsonReader((Reader) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // in == null
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      pipedReader0.markSupported();
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, (DateFormat) null, (DateFormat) null);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(0, 0);
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 40;
      MockDate mockDate0 = new MockDate();
//      try { 
        defaultDateTypeAdapter0.toJson((Writer) pipedWriter0, (Date) mockDate0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      int int0 = 2;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 2);
      defaultDateTypeAdapter0.toString();
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: EOFException");
      
//      } catch(EOFException e) {
//         //
//         // End of input at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      PipedReader pipedReader0 = new PipedReader(48);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
//      try {
        pipedReader1 = new PipedReader(pipedWriter0, 48);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Already connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }
}
