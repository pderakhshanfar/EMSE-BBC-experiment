/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 04:39:57 GMT 2021
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.JsonPrimitive;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.CharArrayWriter;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultDateTypeAdapter_ESTest extends DefaultDateTypeAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Date> class0 = Date.class;
      MockDate mockDate0 = new MockDate(1964, 1964, 1964, 1964, 0, 1964);
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0, 0);
      mockDate0.clone();
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(mockDate0);
      Date date0 = (Date)defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      defaultDateTypeAdapter0.toString();
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0);
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
//      try { 
        defaultDateTypeAdapter0.write(jsonWriter0, (java.util.Date) date0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
//      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
//      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Date> class0 = Date.class;
      MockDate mockDate0 = new MockDate(1964, 1964, 1964, 1964, 0, 1964);
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0, 0);
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)defaultDateTypeAdapter0.toJsonTree(mockDate0);
      defaultDateTypeAdapter0.fromJsonTree(jsonPrimitive0);
      PipedReader pipedReader0 = new PipedReader(1964);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, "");
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      MockDate mockDate2 = new MockDate(40, 0, 0, 8232, 2983, 670);
      defaultDateTypeAdapter1.write(jsonWriter0, (java.util.Date) mockDate1);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getTimeInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter2 = new DefaultDateTypeAdapter(class0, simpleDateFormat0, simpleDateFormat0);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter2.read(jsonReader0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // 
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Float float0 = new Float(304.21704F);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
      defaultDateTypeAdapter0.toString();
      StringReader stringReader0 = new StringReader("2 x");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // The date should be a string value
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "ss");
      System.setCurrentTimeMillis(864L);
      System.setCurrentTimeMillis((-1L));
      String string0 = defaultDateTypeAdapter0.toString();
      assertEquals("DefaultDateTypeAdapter(MockSimpleDateFormat)", string0);
      
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      Date date0 = new Date(864L);
      defaultDateTypeAdapter0.write(jsonWriter0, (java.util.Date) date0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      Timestamp timestamp0 = (Timestamp)defaultDateTypeAdapter0.read(jsonReader0);
      assertEquals(320000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1917);
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      JsonWriter jsonWriter2 = jsonWriter1.name("");
      JsonWriter jsonWriter3 = jsonWriter2.value((long) 1917);
      JsonWriter jsonWriter4 = jsonWriter3.endObject();
      MockDate mockDate0 = new MockDate(0L);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.write(jsonWriter4, (java.util.Date) mockDate0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // JSON must have only one top-level value.
//         //
//         verifyException("com.google.gson.stream.JsonWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uW/jp{");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("");
      JsonPrimitive jsonPrimitive1 = new JsonPrimitive("");
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      MockDate mockDate0 = new MockDate((-1), 528, 0);
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(mockDate0);
      defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      String string0 = defaultDateTypeAdapter0.toString();
      assertEquals("DefaultDateTypeAdapter(SimpleDateFormat)", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%aw-5l]O");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("%aw-5l]O");
      JsonPrimitive jsonPrimitive1 = new JsonPrimitive("gGGQ\"H");
      Class<java.util.Date> class0 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      MockDate mockDate0 = new MockDate(0, (-92), (-5031));
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(mockDate0);
      java.util.Date date0 = defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      String string0 = defaultDateTypeAdapter0.toString();
      assertEquals("DefaultDateTypeAdapter(SimpleDateFormat)", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%aw-5l]O");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("gGGQ\"H");
      JsonPrimitive jsonPrimitive1 = new JsonPrimitive("%aw-5l]O");
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      MockDate mockDate0 = new MockDate((-5031), 0, (-1));
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(mockDate0);
      java.util.Date date0 = defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      assertEquals("2014-02-14 20:21:21.32", date0.toString());
      
      String string0 = defaultDateTypeAdapter0.toString();
      assertEquals("DefaultDateTypeAdapter(SimpleDateFormat)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: EOFException");
      
//      } catch(EOFException e) {
//         //
//         // End of input at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 1);
      MockInstant.now();
      ChronoUnit chronoUnit0 = ChronoUnit.DAYS;
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1);
      defaultDateTypeAdapter1.toJson((java.util.Date) null);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter1.write((JsonWriter) null, (java.util.Date) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      Instant instant0 = MockInstant.now();
      MockInstant.minusSeconds(instant0, (-3007L));
      int int0 = 0;
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0, locale0);
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, (DateFormat) null);
      ChronoUnit chronoUnit0 = ChronoUnit.CENTURIES;
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Float float0 = new Float(304.21704F);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.fromJsonTree(jsonPrimitive0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // The date should be a string value
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      String string0 = "Invalid number: ";
      MockFileWriter mockFileWriter0 = new MockFileWriter("Invalid number: ", true);
      Character character0 = new Character('1');
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.text.SimpleDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
      JsonWriter jsonWriter0 = null;
      int int1 = 0;
      int int2 = (-3495);
      int int3 = (-609);
      Instant instant0 = MockInstant.now();
      MockInstant.minusSeconds(instant0, (-609));
      long long0 = (-1521L);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (java.util.Date) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
//      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
      MockDate mockDate0 = new MockDate(0, 0, 0, (-3495), 0, (-609));
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (java.util.Date) mockDate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(597, (-1763));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal time style -1763
//         //
//         verifyException("java.text.DateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(0, 0);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.read((JsonReader) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, 385);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal date style 385
//         //
//         verifyException("java.text.DateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("dd", true);
      JsonWriter jsonWriter0 = new JsonWriter(mockFileWriter0);
      MockDate mockDate0 = new MockDate(0, 0, 0);
      defaultDateTypeAdapter0.write(jsonWriter0, (java.util.Date) mockDate0);
//      try { 
        defaultDateTypeAdapter0.fromJson("dd");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("dd", true);
      Character character0 = new Character('l');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.fromJsonTree(jsonPrimitive0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // l
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      String string0 = "dd";
      MockFileWriter mockFileWriter0 = new MockFileWriter("dd", true);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, "i*");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern character 'i'
//         //
//         verifyException("java.text.SimpleDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0, 0);
//      try { 
        defaultDateTypeAdapter0.fromJson("$$%PK4b0u^gSll");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.close();
      Class<Timestamp> class0 = Timestamp.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Date type must be one of ");
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // JsonReader is closed
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      String string0 = "";
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
//      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, 1956, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal date style 1956
//         //
//         verifyException("java.text.DateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      String string0 = "";
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      JsonReader jsonReader0 = null;
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream("", false);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      StringReader stringReader0 = new StringReader(" x");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
//         //
//         verifyException("com.google.gson.stream.JsonReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      int int0 = 0;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
      JsonReader jsonReader0 = null;
      // Undeclared exception!
//      try { 
        defaultDateTypeAdapter0.read((JsonReader) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
//      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      PipedReader pipedReader0 = new PipedReader(305);
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = 'E';
      charArray0[2] = '>';
      defaultDateTypeAdapter0.toString();
      charArray0[3] = 'p';
      charArray0[4] = 'v';
      charArray0[5] = 't';
//      try { 
        pipedReader0.skip(305);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Date> class0 = Date.class;
      Locale locale0 = Locale.FRANCE;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
//      try { 
        pipedReader0.read();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }
}
