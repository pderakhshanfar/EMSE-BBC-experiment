/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 02:56:20 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(6);
      hashMap0.put("+2[sUa0-NCgvms:V~", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "+2[sUa0-NCgvms:V~", (-152L));
      cSVRecord0.toMap();
      assertEquals((-152L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(6);
      hashMap0.put("+2[sUa0-NCgvms:V~", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "+2[sUa0-NCgvms:V~", (-152L));
      boolean boolean0 = cSVRecord0.isSet("+2[sUa0-NCgvms:V~");
      assertFalse(boolean0);
      assertEquals((-152L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("S>!L;wH4Q8~y7pW", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-205));
      hashMap0.put((String) null, integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, (String) null, (-3103L));
      // Undeclared exception!
//      try { 
        cSVRecord0.get((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Index for header 'null' is -205 but CSVRecord only has 0 values!
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "[,W", 22L);
      cSVRecord0.values();
      assertEquals(22L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("S>!L;wH4Q8~y7pW", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "fe~?aw;)dzX=y", (-899L));
      Map<String, String> map0 = cSVRecord0.toMap();
      assertEquals(1, map0.size());
      assertEquals((-899L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1005L));
      cSVRecord0.size();
      assertEquals((-1005L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "B@7[}I`IGr)", 0L);
      HashMap<String, String> hashMap1 = cSVRecord0.putIn((HashMap<String, String>) null);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Eh&ccMI1", (-1778L));
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      cSVRecord0.putIn(hashMap1);
      assertEquals((-1778L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "e`(n=A", (-1L));
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Eh&ccMI1", (-1778L));
      cSVRecord0.getComment();
      assertEquals((-1778L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", 0L);
      String string0 = cSVRecord0.getComment();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "No header mapping was specified, the record values can't be accessed by name";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", 841L);
      cSVRecord0.get("");
      assertEquals(841L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", 841L);
      Integer integer0 = Integer.getInteger("EFx{'u", 3);
      hashMap0.put("", integer0);
      cSVRecord0.get("");
      assertEquals(841L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "x2~+Z_9h0Pm/";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "O\"}vTu;tviu~xo", 1985L);
      String string0 = cSVRecord0.get(0);
      assertEquals(1985L, cSVRecord0.getRecordNumber());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1275L));
      String string0 = cSVRecord0.get(0);
      assertEquals((-1275L), cSVRecord0.getRecordNumber());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("@:", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-221L));
      // Undeclared exception!
//      try { 
        cSVRecord0.toMap();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-812));
      hashMap0.put("[=%0_` Kha-J*p-G)", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "[=%0_` Kha-J*p-G)", 0L);
      // Undeclared exception!
//      try { 
        cSVRecord0.toMap();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -812
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[9];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "", (-907L));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
//      try { 
        cSVRecord0.putIn(hashMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[3];
      Integer integer0 = new Integer((-918));
      hashMap0.put("LSBFW", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "org.apache.commons.csv.CSVRecord", (-1486L));
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      // Undeclared exception!
//      try { 
        cSVRecord0.putIn(hashMap1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -918
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(0);
      hashMap0.put("o", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "+2[sUa0-NCgvms:V~", 0);
      // Undeclared exception!
//      try { 
        cSVRecord0.isSet("o");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0L);
      // Undeclared exception!
//      try { 
        cSVRecord0.get(3476);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3476
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1879048190));
      hashMap0.put("+2[sUa0-NCgvms:V~", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", (-1335L));
      boolean boolean0 = cSVRecord0.isSet("+2[sUa0-NCgvms:V~");
      assertEquals((-1335L), cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[1];
      Integer integer0 = new Integer(1);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", (-207L));
      boolean boolean0 = cSVRecord0.isSet("");
      assertEquals((-207L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[3];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", (-207L));
      boolean boolean0 = cSVRecord0.isSet("");
      assertFalse(boolean0);
      assertEquals((-207L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[1];
      Integer integer0 = new Integer(1);
      hashMap0.put("Qjr}kNV2mV4%d,;Etgi", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", (-207L));
      boolean boolean0 = cSVRecord0.isMapped("Qjr}kNV2mV4%d,;Etgi");
      assertEquals((-207L), cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[10];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "7QpPi9Uv<x`", (-572L));
      boolean boolean0 = cSVRecord0.isMapped("7QpPi9Uv<x`");
      assertFalse(boolean0);
      assertEquals((-572L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[3];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "v3G&#MQrE)$m3I7n", 0L);
      boolean boolean0 = cSVRecord0.isMapped("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", 1223L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(1223L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "[,W", 22L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      assertEquals(22L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "[,W", 22L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(22L, cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[10];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "7QpPi9Uv<x`", (-572L));
      Integer integer0 = new Integer(1);
      hashMap0.put("L?", integer0);
      cSVRecord0.get("L?");
      assertEquals((-572L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "*lL", 2191L);
      // Undeclared exception!
//      try { 
        cSVRecord0.get("");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No header mapping was specified, the record values can't be accessed by name
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[10];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "7QpPi9Uv<x`", (-572L));
      // Undeclared exception!
//      try { 
        cSVRecord0.get("L?");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Mapping for L? not found, expected one of []
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "Nu3cBaJa1X8", 0L);
      int int0 = cSVRecord0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[3];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "t3LAX", 1L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[9];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1275L));
      assertEquals(9, cSVRecord0.size());
      
      cSVRecord0.get(0);
      assertEquals((-1275L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", 841L);
      String[] stringArray1 = cSVRecord0.values();
      assertEquals(841L, cSVRecord0.getRecordNumber());
      assertEquals(6, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "Nu3cBaJa1X8", 0L);
      String string0 = cSVRecord0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[5];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 1486L);
      cSVRecord0.getComment();
      assertEquals(5, cSVRecord0.size());
      assertEquals(1486L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[3];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", (-207L));
      cSVRecord0.iterator();
      assertEquals((-207L), cSVRecord0.getRecordNumber());
      assertEquals("[null, null, null]", cSVRecord0.toString());
  }
}
