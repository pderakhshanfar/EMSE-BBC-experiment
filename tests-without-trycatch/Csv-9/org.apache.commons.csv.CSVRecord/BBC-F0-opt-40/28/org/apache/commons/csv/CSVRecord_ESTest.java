/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 02:51:10 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(0);
      Integer integer0 = new Integer(0);
      hashMap0.put("org.apache.commons.csv.CSVRecord", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "org.apache.commons.csv.CSVRecord", 0);
      Map<String, String> map0 = cSVRecord0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(3);
      hashMap0.put("?PJIA7bTm1jE*", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-527L));
      boolean boolean0 = cSVRecord0.isSet("?PJIA7bTm1jE*");
      assertFalse(boolean0);
      assertEquals((-527L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(0);
      Integer integer0 = new Integer(0);
      hashMap0.put("org.apache.commons.csv.CSVRecord", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "org.apache.commons.csv.CSVRecord", 0);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "/an}", 843L);
      cSVRecord0.values();
      assertEquals(843L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", 0L);
      int int0 = cSVRecord0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "/an}", 843L);
      cSVRecord0.putIn((HashMap<String, String>) null);
      assertEquals(843L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "P[ F*KY-Onk2~=wP\"", (-186L));
      cSVRecord0.iterator();
      assertEquals((-186L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "__]q!!cv$SA^", 0);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[3];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1062L));
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-1062L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, (String) null, 898L);
      cSVRecord0.getComment();
      assertEquals(898L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1023L));
      cSVRecord0.getComment();
      assertEquals((-1023L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put("~/eIRO-[d<!Q{8>bt", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "q+WG8Uep'!q*", (-797L));
      cSVRecord0.get("~/eIRO-[d<!Q{8>bt");
      assertEquals((-797L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "5!,";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("5!,", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "5!,", 0L);
      String string0 = cSVRecord0.get("5!,");
      assertEquals("5!,", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = "";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(2);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Index for header '%s' is %d but CSVRecord only has %d values!", 0L);
      String string0 = cSVRecord0.get("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "]R", 0L);
      String string0 = cSVRecord0.get(1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$ZU t\"tEx>=q=;";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "P[ F*KY-Onk2~=wP\"", (-186L));
      cSVRecord0.get(0);
      assertEquals((-186L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "?PJIA7bTm1jE*", 0);
      String string0 = cSVRecord0.get(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[7];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "\"!@F9r^m&t]VRUHM^", (-747L));
      // Undeclared exception!
//      try { 
        cSVRecord0.toMap();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[3];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-455));
      hashMap0.put("{ra{3.j-(&7,|.-6", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ")5rHN", (-1233L));
      // Undeclared exception!
//      try { 
        cSVRecord0.toMap();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -455
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "", 2155L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
//      try { 
        cSVRecord0.putIn(hashMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-2021161078));
      hashMap0.put("[7f!7#w%^s+u$(SL3v$", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, (-839L));
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      // Undeclared exception!
//      try { 
        cSVRecord0.putIn(hashMap1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2021161078
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0L);
      // Undeclared exception!
//      try { 
        cSVRecord0.isSet("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "", 3);
      cSVRecord0.isMapped("");
      assertEquals(3L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(0);
      Integer integer0 = new Integer(0);
      hashMap0.put("org.apache.commons.csv.CSVRecord", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "__]q!!cv$SA^", 0);
      Map<String, String> map0 = cSVRecord0.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[17];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(4760);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 1517L);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      cSVRecord0.putIn(hashMap1);
      assertEquals(1517L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(3);
      hashMap0.put(")5rHN", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ")5rHN", (-1355L));
      boolean boolean0 = cSVRecord0.isSet(")5rHN");
      assertTrue(boolean0);
      assertEquals((-1355L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("?PJIA7bTm1jE*", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "?PJIA7bTm1jE*", 0L);
      assertEquals("[]", cSVRecord0.toString());
      
      boolean boolean0 = cSVRecord0.isSet("?PJIA7bTm1jE*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[17];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(4760);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 1517L);
      boolean boolean0 = cSVRecord0.isMapped("");
      assertTrue(boolean0);
      assertEquals(1517L, cSVRecord0.getRecordNumber());
      assertEquals(17, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[17];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 1517L);
      boolean boolean0 = cSVRecord0.isMapped("");
      assertFalse(boolean0);
      assertEquals(1517L, cSVRecord0.getRecordNumber());
      assertEquals(17, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "Mapping for %s not found, expected one of %s", 3);
      boolean boolean0 = cSVRecord0.isSet("|, &Z!=}Z&]xd/\"");
      assertFalse(boolean0);
      assertEquals(1, cSVRecord0.size());
      assertEquals(3L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "/an}", 843L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(843L, cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[17];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 1517L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      assertEquals(1517L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "?PJIA7bTm1jE*", 0);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      assertEquals(1, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(2233);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Index for header '%s' is %d but CSVRecord only has %d values!", 0L);
      // Undeclared exception!
//      try { 
        cSVRecord0.get("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Index for header '' is 2233 but CSVRecord only has 8 values!
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "f=5A-!", 0L);
      // Undeclared exception!
//      try { 
        cSVRecord0.get("f=5A-!");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No header mapping was specified, the record values can't be accessed by name
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0);
      // Undeclared exception!
//      try { 
        cSVRecord0.get("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Mapping for  not found, expected one of []
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "5!,", 0L);
      int int0 = cSVRecord0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "/an}", 843L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(843L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "?PJIA7bTm1jE*", 0L);
      // Undeclared exception!
//      try { 
        cSVRecord0.get((-13));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -13
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "5!,", 0L);
      String[] stringArray1 = cSVRecord0.values();
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "Mapping for %s not found, expected one of %s", 3);
      String string0 = cSVRecord0.toString();
      assertEquals(3L, cSVRecord0.getRecordNumber());
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "__]q!!cv$SA^", 0);
      cSVRecord0.getComment();
      assertEquals(1, cSVRecord0.size());
  }
}
