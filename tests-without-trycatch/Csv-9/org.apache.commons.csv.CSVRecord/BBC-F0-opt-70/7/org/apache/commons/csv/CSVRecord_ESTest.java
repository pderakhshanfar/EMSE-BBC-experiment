/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 00:33:10 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(4);
      hashMap0.put("ySUC", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "ySUC", 325L);
      cSVRecord0.toMap();
      assertEquals(325L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", 1);
      boolean boolean0 = cSVRecord0.isSet("");
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[9];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 434L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      assertEquals(434L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(4);
      hashMap0.put("ySUC", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "ySUC", 325L);
      // Undeclared exception!
//      try { 
        cSVRecord0.get("ySUC");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Index for header 'ySUC' is 4 but CSVRecord only has 2 values!
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0L);
      String[] stringArray1 = cSVRecord0.values();
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Wm", 721L);
      Integer integer0 = new Integer(0);
      hashMap0.put("NswRe}N_Tm", integer0);
      Map<String, String> map0 = cSVRecord0.toMap();
      assertEquals(1, map0.size());
      assertEquals(721L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "h+M(aVJjcL^_?vsR'!", 1236L);
      cSVRecord0.size();
      assertEquals(1236L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "Wm", 0L);
      HashMap<String, String> hashMap1 = new HashMap<String, String>(0);
      HashMap<String, String> hashMap2 = cSVRecord0.putIn(hashMap1);
      assertSame(hashMap2, hashMap1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "Wm", 0L);
      Iterator<String> iterator0 = cSVRecord0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "", 0L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "No header mapping was specified, the record values can't be accessed by name", 1L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, (String) null, 1105L);
      cSVRecord0.getComment();
      assertEquals(1105L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-293L));
      cSVRecord0.getComment();
      assertEquals((-293L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(4);
      hashMap0.put("ySUC", integer0);
      String[] stringArray0 = new String[8];
      stringArray0[4] = "ySUC";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "`g{C!Q.;:X{U/JH", 325L);
      cSVRecord0.get("ySUC");
      assertEquals(325L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(4);
      hashMap0.put("", integer0);
      String[] stringArray0 = new String[6];
      stringArray0[4] = "";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "5CLVT3", 325L);
      cSVRecord0.get("");
      assertEquals(325L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[3];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "wvb)%a,KW", (-1L));
      cSVRecord0.get(1);
      assertEquals((-1L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "org.apache.commons.csv.CSVRecord";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "w$[kh&jQ\"YQ", 1L);
      String string0 = cSVRecord0.get(2);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "MBK^N@e?[InHZ5", (-1L));
      String string0 = cSVRecord0.get(0);
      assertEquals((-1L), cSVRecord0.getRecordNumber());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "3U{?=itCqL+@n~y", (-3359L));
      // Undeclared exception!
//      try { 
        cSVRecord0.toMap();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1157));
      hashMap0.put("t!", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "ySUC", 325L);
      // Undeclared exception!
//      try { 
        cSVRecord0.toMap();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1157
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("hgCx", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "*5pmyv3d$9[/`__Ij^", 689L);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      // Undeclared exception!
//      try { 
        cSVRecord0.putIn(hashMap1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1348));
      hashMap0.putIfAbsent((String) null, integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, (String) null, 1105L);
      // Undeclared exception!
//      try { 
        cSVRecord0.putIn((HashMap<String, String>) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1348
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("y!I\"rC", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "y!I\"rC", 325L);
      // Undeclared exception!
//      try { 
        cSVRecord0.isSet("y!I\"rC");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Wm", 721L);
      cSVRecord0.isMapped("");
      assertEquals(721L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "Wm", 0L);
      Integer integer0 = new Integer(0);
      hashMap0.put("", integer0);
      boolean boolean0 = cSVRecord0.isMapped("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", 1);
      Map<String, String> map0 = cSVRecord0.toMap();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(4);
      hashMap0.put("ySUC", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "ySUC", 325L);
      boolean boolean0 = cSVRecord0.isSet("ySUC");
      assertEquals(325L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(4);
      hashMap0.put("", integer0);
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "5CLVT3", 325L);
      boolean boolean0 = cSVRecord0.isSet("");
      assertEquals(325L, cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "5CLVT3", 325L);
      boolean boolean0 = cSVRecord0.isSet("");
      assertEquals(325L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "org.apache.commons.csv.CSVRecord", (-1L));
      boolean boolean0 = cSVRecord0.isMapped("jpX");
      assertFalse(boolean0);
      assertEquals((-1L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, ":/-h<E-0rpO?nf9]E@", 4264L);
      assertTrue(cSVRecord0.isConsistent());
      
      Integer integer0 = new Integer((-2156));
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(":/-h<E-0rpO?nf9]E@", integer0, biFunction0);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, ":/-h<E-0rpO?nf9]E@", 4264L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      assertEquals(4264L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, ":/-h<E-0rpO?nf9]E@", (-5829L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals((-5829L), cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(4);
      hashMap0.put("", integer0);
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "5CLVT3", 325L);
      cSVRecord0.get("");
      assertEquals(325L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[7];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "/eB4h\"jI", 0L);
      // Undeclared exception!
//      try { 
        cSVRecord0.get("/eB4h\"jI");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No header mapping was specified, the record values can't be accessed by name
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "5CLVT3", 325L);
      // Undeclared exception!
//      try { 
        cSVRecord0.get("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Mapping for  not found, expected one of []
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "T{L5RoTxwZ``?", 0L);
      int int0 = cSVRecord0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[5];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-715L));
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-715L), long0);
      assertEquals("[null, null, null, null, null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "5CLVT3", 325L);
      // Undeclared exception!
//      try { 
        cSVRecord0.get((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.csv.CSVRecord", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, ":/-h<E-0rpO?nf9]E@", 4264L);
      String[] stringArray0 = cSVRecord0.values();
      assertEquals(4264L, cSVRecord0.getRecordNumber());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "Wm", 0L);
      String string0 = cSVRecord0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, ":/-h<E-0rpO?nf9]E@", 4264L);
      cSVRecord0.getComment();
      assertEquals(4264L, cSVRecord0.getRecordNumber());
      assertEquals("[]", cSVRecord0.toString());
  }
}
