JUnit version 4.12
...E.E...........E.E....E..E.........E.....
Time: 1.07
There were 7 failures:
1) test17(org.apache.commons.math3.distribution.HypergeometricDistribution_ESTest)
org.apache.commons.math3.exception.NumberIsTooLargeException: sample size (2,026) must be less than or equal to population size (1,425)
	at org.apache.commons.math3.distribution.HypergeometricDistribution.<init>(HypergeometricDistribution.java:104)
	at org.apache.commons.math3.distribution.HypergeometricDistribution.<init>(HypergeometricDistribution.java:63)
	at org.apache.commons.math3.distribution.HypergeometricDistribution_ESTest.test17(HypergeometricDistribution_ESTest.java:188)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
2) test16(org.apache.commons.math3.distribution.HypergeometricDistribution_ESTest)
org.apache.commons.math3.exception.NotPositiveException: number of successes (-1,169)
	at org.apache.commons.math3.distribution.HypergeometricDistribution.<init>(HypergeometricDistribution.java:91)
	at org.apache.commons.math3.distribution.HypergeometricDistribution_ESTest.test16(HypergeometricDistribution_ESTest.java:173)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
3) test31(org.apache.commons.math3.distribution.HypergeometricDistribution_ESTest)
org.apache.commons.math3.exception.NotStrictlyPositiveException: population size (-1)
	at org.apache.commons.math3.distribution.HypergeometricDistribution.<init>(HypergeometricDistribution.java:87)
	at org.apache.commons.math3.distribution.HypergeometricDistribution.<init>(HypergeometricDistribution.java:63)
	at org.apache.commons.math3.distribution.HypergeometricDistribution_ESTest.test31(HypergeometricDistribution_ESTest.java:332)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
4) test30(org.apache.commons.math3.distribution.HypergeometricDistribution_ESTest)
org.apache.commons.math3.exception.NotPositiveException: number of samples (-803)
	at org.apache.commons.math3.distribution.HypergeometricDistribution.<init>(HypergeometricDistribution.java:95)
	at org.apache.commons.math3.distribution.HypergeometricDistribution.<init>(HypergeometricDistribution.java:63)
	at org.apache.commons.math3.distribution.HypergeometricDistribution_ESTest.test30(HypergeometricDistribution_ESTest.java:317)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
5) test29(org.apache.commons.math3.distribution.HypergeometricDistribution_ESTest)
org.apache.commons.math3.exception.NumberIsTooLargeException: number of successes (4,364) must be less than or equal to population size (795)
	at org.apache.commons.math3.distribution.HypergeometricDistribution.<init>(HypergeometricDistribution.java:100)
	at org.apache.commons.math3.distribution.HypergeometricDistribution_ESTest.test29(HypergeometricDistribution_ESTest.java:302)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
6) test28(org.apache.commons.math3.distribution.HypergeometricDistribution_ESTest)
org.apache.commons.math3.exception.NumberIsTooLargeException: sample size (3,112) must be less than or equal to population size (1,489)
	at org.apache.commons.math3.distribution.HypergeometricDistribution.<init>(HypergeometricDistribution.java:104)
	at org.apache.commons.math3.distribution.HypergeometricDistribution_ESTest.test28(HypergeometricDistribution_ESTest.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
7) test01(org.apache.commons.math3.distribution.HypergeometricDistribution_ESTest)
org.apache.commons.math3.exception.NotStrictlyPositiveException: population size (0)
	at org.apache.commons.math3.distribution.HypergeometricDistribution.<init>(HypergeometricDistribution.java:87)
	at org.apache.commons.math3.distribution.HypergeometricDistribution.<init>(HypergeometricDistribution.java:63)
	at org.apache.commons.math3.distribution.HypergeometricDistribution_ESTest.test01(HypergeometricDistribution_ESTest.java:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)

FAILURES!!!
Tests run: 36,  Failures: 7

